# S T A R   W A R S   C O N Q U E S T   M O D U L E   S Y S T E M
# / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /
# By Taleworlds, HokieBT, MartinF and Swyter - Do not use/copy without permission

# -*- coding: cp1254 -*-

from header_common import *
from header_operations import *
from module_constants import *
from header_parties import *
from header_skills import *
from header_mission_templates import *
from header_items import *
from header_triggers import *
from header_terrain_types import *
from header_music import *
from header_presentations import *
from ID_animations import *

from module_info import wb_compile_switch as is_a_wb_script

from module_items import * #for automatic fire, added by me
####################################################################################################################
# scripts is a list of script records.
# Each script record contns the following two fields:
# 1) Script id: The prefix "script_" will be inserted when referencing scripts.
# 2) Operation block: This must be a valid operation block. See header_operations.py for reference.
####################################################################################################################
def gender_fix(register, trp="player"):
  if (trp[0] != ":") and (trp[0] != "$"):
    trp = "trp_" + trp
  return [(call_script, "script_gender_fix", trp),(assign,register,reg33)]

def gen_ammodb():
  ammoclip_db=[]
  from module_items import items
  for item in items:
    id = items.index(item)
    #Attention at the hardcoded limits, should be changed if order is altered
    if id > itm_ranged_weapons_begin and id < itm_ranged_weapons_end:
      ammoclip_db.append( (item_set_slot,"itm_"+item[0],slot_item_ammo_clip,get_max_ammo(item[6])) )
  return ammoclip_db


#AUTO FIRE
def get_item_accuracy():
   item_accuracy = []
   for i_item in xrange(len(items)):
    item_accuracy.append((item_set_slot, i_item, slot_item_accuracy, get_leg_armor(items[i_item][6])))
   return item_accuracy[:]

def get_item_shoot_speed():
   item_shoot_speed = []
   for i_item in xrange(len(items)):
    item_shoot_speed.append((item_set_slot, i_item, slot_item_shoot_speed, get_missile_speed(items[i_item][6])))
   return item_shoot_speed[:]

def get_item_speed_rating():
   item_speed_rating = []
   for i_item in xrange(len(items)):
    item_speed_rating.append((item_set_slot, i_item, slot_item_speed_rating, get_speed_rating(items[i_item][6])))
   return item_speed_rating[:]

scripts = [
  
  #script_game_start:
  # This script is called when a new game is started
  # INPUT: none
  ("game_start",
    [
      
      #Autoloot:
      # init stuff
      (call_script, "script_init_item_difficulties"),
      #end Autoloot:
      
      #SW - init variables
      (assign, "$random_scene_battles", 20),
      (assign, "$random_scene_assassination", 0),
      (assign, "$shield_bash_toggle", 0),
      (assign, "$faction_colors", 0),
      (assign, "$helmet_view", 0),
      (assign, "$crouch_key_down", 0),
      #(assign, "$arena_weapons", 1),
      #(assign, "$arena_name", "Enter the Force-Sensitive Arena"),

      #Kham Init variables
      (assign, "$freelancer_state", 0),
      (assign, "$freelancer_allow_desertion", 0), #Freelancer - Allow Desertion
      (assign, "$g_next_pay_time", 0), #Freelancer - Init Paytime
      (assign, "$freelancer_enhanced_upgrade", 1), #Freelancer - Default to Advanced Upgrade system
      (assign, "$freelancer_missions", 1), #Allow Freelancer Missions
      #Custom Camera Initialize  
      (assign, "$key_camera_toggle",      key_right_mouse_button),             # RMB key to toggle camera mode.


      #Init Race item Slots - Kham
      (item_set_slot, "itm_alien_wookiee_arm", slot_item_race, tf_wookiee),
      (item_set_slot, "itm_alien_geonosian_arm", slot_item_race, tf_geonosian),
      (item_set_slot, "itm_alien_gamorrean_arm", slot_item_race, tf_gamorrean),
      (item_set_slot, "itm_alien_trandoshan_arm", slot_item_race, tf_trandoshan),
      
      #assign default keys
      (assign, "$crouch_key", key_left_alt),
      (assign, "$toggle_weapon_key", key_t),
      (assign, "$helmet_view_key", key_v),
      (assign, "$jetpack_key", key_j),
      #(assign, "$warcry_key", key_e),
      (assign, "$bacta_injector_key", key_h),
      #(assign, "$binoculars_key", key_b),
      (assign, "$deathcam_forward_key", key_m),
      (assign, "$deathcam_backward_key", key_n),
      
      #Sw test
      #SW - set the shipyards
      (troop_set_slot, "trp_player", slot_troop_has_spaceship, 0),
      #setup the required slots for all spaceships
      (call_script, "script_setup_spaceship_slots"),
      #give the shipyards to an indepent faction
      (call_script, "script_give_center_to_faction_aux", "p_shipyard_trade_federation", "fac_trade_federation"),
      (call_script, "script_give_center_to_faction_aux", "p_shipyard_kuat", "fac_trade_federation"),
      (call_script, "script_give_center_to_faction_aux", "p_shipyard_raxus", "fac_trade_federation"),
      (call_script, "script_give_center_to_faction_aux", "p_shipyard_corellia", "fac_trade_federation"),
      (call_script, "script_give_center_to_faction_aux", "p_shipyard_moncal", "fac_trade_federation"),
      (call_script, "script_give_center_to_faction_aux", "p_shipyard_mandalore", "fac_trade_federation"),
      (call_script, "script_give_center_to_faction_aux", "p_shipyard_fondor", "fac_trade_federation"),
      
      #SWY 0.9.0.4 Give new planets directly to the factions
      (call_script, "script_give_center_to_faction_aux", "p_raxusprime", "fac_huttcartel"),
      (call_script, "script_give_center_to_faction_aux", "p_sarapin", "fac_rebelalliance"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_41", "fac_galacticempire"),
      #more...
      (call_script, "script_give_center_to_faction_aux", "p_hypori", "fac_huttcartel"),
      (call_script, "script_give_center_to_faction_aux", "p_felucia", "fac_galacticempire"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_42", "fac_huttcartel"),
      (call_script, "script_give_center_to_faction_aux", "p_bespin", "fac_rebelalliance"),
      
      (faction_set_slot, "fac_player_supporters_faction", slot_faction_state, sfs_inactive),
      (assign, "$g_player_luck", 200),
      (troop_set_slot, "trp_player", slot_troop_occupation, slto_faction_hero),
      (troop_set_slot, "trp_player", slot_troop_prisoner_of_party, -1),
      (try_for_range, ":cur_troop", faction_heroes_begin, faction_heroes_end),
        (troop_set_slot, ":cur_troop", slot_troop_prisoner_of_party, -1),
        (troop_set_slot, ":cur_troop", slot_troop_custom_banner_flag_type, -1),
        (troop_set_slot, ":cur_troop", slot_troop_custom_banner_map_flag_type, -1),
      (try_end),
      (troop_set_slot, "trp_player", slot_troop_custom_banner_flag_type, -1),
      (troop_set_slot, "trp_player", slot_troop_custom_banner_map_flag_type, -1),
      (store_random_in_range, "$g_election_date", 0, 45), #setting a random election date
      #Assigning global constant
      (call_script, "script_store_average_center_value_per_faction"),
      
      (troop_set_slot, "trp_player", slot_troop_custom_banner_bg_color_1, 0xFFFFFFFF),
      (troop_set_slot, "trp_player", slot_troop_custom_banner_bg_color_2, 0xFFFFFFFF),
      (troop_set_slot, "trp_player", slot_troop_custom_banner_charge_color_1, 0xFFFFFFFF),
      (troop_set_slot, "trp_player", slot_troop_custom_banner_charge_color_2, 0xFFFFFFFF),
      (troop_set_slot, "trp_player", slot_troop_custom_banner_charge_color_3, 0xFFFFFFFF),
      (troop_set_slot, "trp_player", slot_troop_custom_banner_charge_color_4, 0xFFFFFFFF),
      
      #Setting background colors for banners
      (troop_set_slot, "trp_banner_background_color_array", 0, 0xFF8f4531),
      (troop_set_slot, "trp_banner_background_color_array", 1, 0xFF315458),
      (troop_set_slot, "trp_banner_background_color_array", 2, 0xFF373736),
      (troop_set_slot, "trp_banner_background_color_array", 3, 0xFFa48b28),
      (troop_set_slot, "trp_banner_background_color_array", 4, 0xFF497735),
      (troop_set_slot, "trp_banner_background_color_array", 5, 0xFF82362d),
      (troop_set_slot, "trp_banner_background_color_array", 6, 0xFF793329),
      (troop_set_slot, "trp_banner_background_color_array", 7, 0xFF262521),
      (troop_set_slot, "trp_banner_background_color_array", 8, 0xFFd9dad1),
      (troop_set_slot, "trp_banner_background_color_array", 9, 0xFF524563),
      (troop_set_slot, "trp_banner_background_color_array", 10, 0xFF91312c),
      (troop_set_slot, "trp_banner_background_color_array", 11, 0xFFafa231),
      (troop_set_slot, "trp_banner_background_color_array", 12, 0xFF706d3c),
      (troop_set_slot, "trp_banner_background_color_array", 13, 0xFFd6d3ce),
      (troop_set_slot, "trp_banner_background_color_array", 14, 0xFF912929),
      (troop_set_slot, "trp_banner_background_color_array", 15, 0xFF394584),
      (troop_set_slot, "trp_banner_background_color_array", 16, 0xFF42662e),
      (troop_set_slot, "trp_banner_background_color_array", 17, 0xFFdfded6),
      (troop_set_slot, "trp_banner_background_color_array", 18, 0xFF292724),
      (troop_set_slot, "trp_banner_background_color_array", 19, 0xFF58611b),
      (troop_set_slot, "trp_banner_background_color_array", 20, 0xFF313a67),
      (troop_set_slot, "trp_banner_background_color_array", 21, 0xFFb5a231),
      (troop_set_slot, "trp_banner_background_color_array", 22, 0xFFbdb629),
      (troop_set_slot, "trp_banner_background_color_array", 23, 0xFF6e7929),
      (troop_set_slot, "trp_banner_background_color_array", 24, 0xFFd6d3ce),
      (troop_set_slot, "trp_banner_background_color_array", 25, 0xFF94a642),
      (troop_set_slot, "trp_banner_background_color_array", 26, 0xFF944131),
      (troop_set_slot, "trp_banner_background_color_array", 27, 0xFF893b34),
      (troop_set_slot, "trp_banner_background_color_array", 28, 0xFF425510),
      (troop_set_slot, "trp_banner_background_color_array", 29, 0xFF94452e),
      (troop_set_slot, "trp_banner_background_color_array", 30, 0xFF475a94),
      (troop_set_slot, "trp_banner_background_color_array", 31, 0xFFd1b231),
      (troop_set_slot, "trp_banner_background_color_array", 32, 0xFFe1e2df),
      (troop_set_slot, "trp_banner_background_color_array", 33, 0xFF4a4942),
      (troop_set_slot, "trp_banner_background_color_array", 34, 0xFFc6b74d),
      (troop_set_slot, "trp_banner_background_color_array", 35, 0xFF7b5184),
      (troop_set_slot, "trp_banner_background_color_array", 36, 0xFF212421),
      (troop_set_slot, "trp_banner_background_color_array", 37, 0xFF3c5d9a),
      (troop_set_slot, "trp_banner_background_color_array", 38, 0xFF4d7136),
      (troop_set_slot, "trp_banner_background_color_array", 39, 0xFFdfdfd6),
      (troop_set_slot, "trp_banner_background_color_array", 40, 0xFF527539),
      (troop_set_slot, "trp_banner_background_color_array", 41, 0xFF9c3c39),
      (troop_set_slot, "trp_banner_background_color_array", 42, 0xFF42518c),
      (troop_set_slot, "trp_banner_background_color_array", 43, 0xFFa46a2c),
      (troop_set_slot, "trp_banner_background_color_array", 44, 0xFF843829),
      (troop_set_slot, "trp_banner_background_color_array", 45, 0xFF2c6189),
      (troop_set_slot, "trp_banner_background_color_array", 46, 0xFF556421),
      (troop_set_slot, "trp_banner_background_color_array", 47, 0xFF9d621e),
      (troop_set_slot, "trp_banner_background_color_array", 48, 0xFFdeded6),
      (troop_set_slot, "trp_banner_background_color_array", 49, 0xFF6e4891),
      (troop_set_slot, "trp_banner_background_color_array", 50, 0xFF865a29),
      (troop_set_slot, "trp_banner_background_color_array", 51, 0xFFdedfd9),
      (troop_set_slot, "trp_banner_background_color_array", 52, 0xFF524273),
      (troop_set_slot, "trp_banner_background_color_array", 53, 0xFF8c3821),
      (troop_set_slot, "trp_banner_background_color_array", 54, 0xFF948403),
      (troop_set_slot, "trp_banner_background_color_array", 55, 0xFF313031),
      (troop_set_slot, "trp_banner_background_color_array", 56, 0xFF47620d),
      (troop_set_slot, "trp_banner_background_color_array", 57, 0xFFdfded6),
      (troop_set_slot, "trp_banner_background_color_array", 58, 0xFFd6d7d6),
      (troop_set_slot, "trp_banner_background_color_array", 59, 0xFF2e2f2c),
      (troop_set_slot, "trp_banner_background_color_array", 60, 0xFF604283),
      (troop_set_slot, "trp_banner_background_color_array", 61, 0xFF395584),
      (troop_set_slot, "trp_banner_background_color_array", 62, 0xFF313031),
      (troop_set_slot, "trp_banner_background_color_array", 63, 0xFF7e3f2e),
      (troop_set_slot, "trp_banner_background_color_array", 64, 0xFF343434),
      (troop_set_slot, "trp_banner_background_color_array", 65, 0xFF3c496b),
      (troop_set_slot, "trp_banner_background_color_array", 66, 0xFFd9d8d1),
      (troop_set_slot, "trp_banner_background_color_array", 67, 0xFF99823c),
      (troop_set_slot, "trp_banner_background_color_array", 68, 0xFF9f822e),
      (troop_set_slot, "trp_banner_background_color_array", 69, 0xFF393839),
      (troop_set_slot, "trp_banner_background_color_array", 70, 0xFFa54931),
      (troop_set_slot, "trp_banner_background_color_array", 71, 0xFFdfdcd6),
      (troop_set_slot, "trp_banner_background_color_array", 72, 0xFF9f4a36),
      (troop_set_slot, "trp_banner_background_color_array", 73, 0xFF8c7521),
      (troop_set_slot, "trp_banner_background_color_array", 74, 0xFF9f4631),
      (troop_set_slot, "trp_banner_background_color_array", 75, 0xFF793324),
      (troop_set_slot, "trp_banner_background_color_array", 76, 0xFF395076),
      (troop_set_slot, "trp_banner_background_color_array", 77, 0xFF2c2b2c),
      (troop_set_slot, "trp_banner_background_color_array", 78, 0xFF657121),
      (troop_set_slot, "trp_banner_background_color_array", 79, 0xFF7e3121),
      (troop_set_slot, "trp_banner_background_color_array", 80, 0xFF76512e),
      (troop_set_slot, "trp_banner_background_color_array", 81, 0xFFe7e3de),
      (troop_set_slot, "trp_banner_background_color_array", 82, 0xFF947921),
      (troop_set_slot, "trp_banner_background_color_array", 83, 0xFF4d7b7c),
      (troop_set_slot, "trp_banner_background_color_array", 84, 0xFF343331),
      (troop_set_slot, "trp_banner_background_color_array", 85, 0xFFa74d36),
      (troop_set_slot, "trp_banner_background_color_array", 86, 0xFFe7e3de),
      (troop_set_slot, "trp_banner_background_color_array", 87, 0xFFd6d8ce),
      (troop_set_slot, "trp_banner_background_color_array", 88, 0xFF3e4d67),
      (troop_set_slot, "trp_banner_background_color_array", 89, 0xFF913331),
      (troop_set_slot, "trp_banner_background_color_array", 90, 0xFF4d6994),
      (troop_set_slot, "trp_banner_background_color_array", 91, 0xFF4a6118),
      (troop_set_slot, "trp_banner_background_color_array", 92, 0xFFd9d8d3),
      (troop_set_slot, "trp_banner_background_color_array", 93, 0xFF394479),
      (troop_set_slot, "trp_banner_background_color_array", 94, 0xFF343331),
      (troop_set_slot, "trp_banner_background_color_array", 95, 0xFF3f4d5d),
      (troop_set_slot, "trp_banner_background_color_array", 96, 0xFF4a6489),
      (troop_set_slot, "trp_banner_background_color_array", 97, 0xFF313031),
      (troop_set_slot, "trp_banner_background_color_array", 98, 0xFFd6d7ce),
      (troop_set_slot, "trp_banner_background_color_array", 99, 0xFFc69e00),
      (troop_set_slot, "trp_banner_background_color_array", 100, 0xFF638e52),
      (troop_set_slot, "trp_banner_background_color_array", 101, 0xFFdcdbd3),
      (troop_set_slot, "trp_banner_background_color_array", 102, 0xFFdbdcd3),
      (troop_set_slot, "trp_banner_background_color_array", 103, 0xFF843831),
      (troop_set_slot, "trp_banner_background_color_array", 104, 0xFFcecfc6),
      (troop_set_slot, "trp_banner_background_color_array", 105, 0xFF8f4431),
      (troop_set_slot, "trp_banner_background_color_array", 106, 0xFF602926),
      (troop_set_slot, "trp_banner_background_color_array", 107, 0xFFd3d4cb),
      (troop_set_slot, "trp_banner_background_color_array", 108, 0xFFdcdbd3),
      (troop_set_slot, "trp_banner_background_color_array", 109, 0xFF556024),
      (troop_set_slot, "trp_banner_background_color_array", 110, 0xFF602d2c),
      (troop_set_slot, "trp_banner_background_color_array", 111, 0xFF315184),
      (troop_set_slot, "trp_banner_background_color_array", 112, 0xFF313031),
      (troop_set_slot, "trp_banner_background_color_array", 113, 0xFFe7e7e7),
      (troop_set_slot, "trp_banner_background_color_array", 114, 0xFF526d47),
      (troop_set_slot, "trp_banner_background_color_array", 115, 0xFFdedbd6),
      (troop_set_slot, "trp_banner_background_color_array", 116, 0xFFb2a631),
      (troop_set_slot, "trp_banner_background_color_array", 117, 0xFF76713f),
      (troop_set_slot, "trp_banner_background_color_array", 118, 0xFFdedbd6),
      (troop_set_slot, "trp_banner_background_color_array", 119, 0xFFe9eae7),
      (troop_set_slot, "trp_banner_background_color_array", 120, 0xFF6b5131),
      (troop_set_slot, "trp_banner_background_color_array", 121, 0xFF31557b),
      (troop_set_slot, "trp_banner_background_color_array", 122, 0xFF703324),
      (troop_set_slot, "trp_banner_background_color_array", 123, 0xFFe7e3de),
      (troop_set_slot, "trp_banner_background_color_array", 124, 0xFFd6d7ce),
      (troop_set_slot, "trp_banner_background_color_array", 125, 0xFF3f6e39),
      
      #Default banners
      (troop_set_slot, "trp_banner_background_color_array", 126, 0xFF212221),
      (troop_set_slot, "trp_banner_background_color_array", 127, 0xFF212221),
      (troop_set_slot, "trp_banner_background_color_array", 128, 0xFF2E3B10),
      (troop_set_slot, "trp_banner_background_color_array", 129, 0xFF425D7B),
      (troop_set_slot, "trp_banner_background_color_array", 130, 0xFF394608),
      
      #SW - update starting location to be towns instead of training grounds (location is changed again if they choose to join a faction)
      #(store_random_in_range, ":starting_training_ground", training_grounds_begin, training_grounds_end),
      (store_random_in_range, ":starting_training_ground",    mainplanets_begin, mainplanets_end),
      
      (party_relocate_near_party, "p_main_party", ":starting_training_ground", 3),
      (str_store_troop_name, s5, "trp_player"),
      (party_set_name, "p_main_party", s5),
      (call_script, "script_update_party_creation_random_limits"),
      # Reseting player party icon
      (assign, "$g_player_party_icon", -1),
      # Setting food bonuses
      (item_set_slot, "itm_smoked_fish", slot_item_food_bonus, 5),
      (item_set_slot, "itm_dried_meat", slot_item_food_bonus, 5),
      (item_set_slot, "itm_cattle_meat", slot_item_food_bonus, 7),
      #SW - added bantha_steak
      (item_set_slot, "itm_bantha_steak", slot_item_food_bonus, 7),
      (item_set_slot, "itm_pork", slot_item_food_bonus, 6),
      (item_set_slot, "itm_bread", slot_item_food_bonus, 4),
      #SW - added carbohydrate_pack
      (item_set_slot, "itm_carbohydrate_pack", slot_item_food_bonus, 5),
      (item_set_slot, "itm_apples", slot_item_food_bonus, 5),
      #SW - added mujo_fruit, blue_milk, vagnerian_canape
      (item_set_slot, "itm_mujo_fruit", slot_item_food_bonus, 6),
      (item_set_slot, "itm_blue_milk", slot_item_food_bonus, 6),
      (item_set_slot, "itm_vagnerian_canape", slot_item_food_bonus, 8),
      (item_set_slot, "itm_cheese", slot_item_food_bonus, 5),
      (item_set_slot, "itm_chicken", slot_item_food_bonus, 6),
      #SW - added protein_pack
      (item_set_slot, "itm_protein_pack", slot_item_food_bonus, 5),
      (item_set_slot, "itm_honey", slot_item_food_bonus, 10),
      (item_set_slot, "itm_cabbages", slot_item_food_bonus, 4),
      #SW - added bristle_melon
      (item_set_slot, "itm_bristle_melon", slot_item_food_bonus, 4),
      (item_set_slot, "itm_sausages", slot_item_food_bonus, 5),
      (item_set_slot, "itm_butter", slot_item_food_bonus, 8),
      
      (item_set_slot, "itm_wine", slot_item_food_bonus, 5),
      (item_set_slot, "itm_ale", slot_item_food_bonus, 4),
      #SWY - 0.9.0.4 Added Morale Bonus to the new supplies
      (item_set_slot, "itm_Container_spice_1", slot_item_food_bonus, 10),
      (item_set_slot, "itm_Container_spice_2", slot_item_food_bonus, 15),
      (item_set_slot, "itm_Container_spice_3", slot_item_food_bonus, 25),
      
      (item_set_slot, "itm_Container_death_sticks", slot_item_food_bonus, 5),
      (item_set_slot, "itm_Container_drink_2", slot_item_food_bonus, 15),
      (item_set_slot, "itm_Container_drink_3", slot_item_food_bonus, 5),
      
      #SW - settng alternative weapon capabilities for common_toggle_weapon_capabilities code
      #lightsabers
      (item_set_slot, "itm_lightsaber_green", slot_item_alternate_weapon, "itm_force_throw_lightsaber_green_merch"),
      (item_set_slot, "itm_lightsaber_blue", slot_item_alternate_weapon, "itm_force_throw_lightsaber_blue_merch"),
      (item_set_slot, "itm_lightsaber_orange", slot_item_alternate_weapon, "itm_force_throw_lightsaber_orange_merch"),
      (item_set_slot, "itm_lightsaber_purple", slot_item_alternate_weapon, "itm_force_throw_lightsaber_purple_merch"),
      (item_set_slot, "itm_lightsaber_yellow", slot_item_alternate_weapon, "itm_force_throw_lightsaber_yellow_merch"),
      (item_set_slot, "itm_lightsaber_red", slot_item_alternate_weapon, "itm_force_throw_lightsaber_red_merch"),
      (item_set_slot, "itm_force_throw_lightsaber_green_merch", slot_item_alternate_weapon, "itm_lightsaber_green"),
      (item_set_slot, "itm_force_throw_lightsaber_blue_merch", slot_item_alternate_weapon, "itm_lightsaber_blue"),
      (item_set_slot, "itm_force_throw_lightsaber_orange_merch", slot_item_alternate_weapon, "itm_lightsaber_orange"),
      (item_set_slot, "itm_force_throw_lightsaber_purple_merch", slot_item_alternate_weapon, "itm_lightsaber_purple"),
      (item_set_slot, "itm_force_throw_lightsaber_yellow_merch", slot_item_alternate_weapon, "itm_lightsaber_yellow"),
      (item_set_slot, "itm_force_throw_lightsaber_red_merch", slot_item_alternate_weapon, "itm_lightsaber_red"),
      (item_set_slot, "itm_lightsaber_green_pike", slot_item_alternate_weapon, "itm_force_throw_lightsaber_green_pike"),
      (item_set_slot, "itm_lightsaber_blue_pike", slot_item_alternate_weapon, "itm_force_throw_lightsaber_blue_pike"),
      (item_set_slot, "itm_lightsaber_orange_pike", slot_item_alternate_weapon, "itm_force_throw_lightsaber_orange_pike"),
      (item_set_slot, "itm_lightsaber_purple_pike", slot_item_alternate_weapon, "itm_force_throw_lightsaber_purple_pike"),
      (item_set_slot, "itm_lightsaber_yellow_pike", slot_item_alternate_weapon, "itm_force_throw_lightsaber_yellow_pike"),
      (item_set_slot, "itm_lightsaber_red_pike", slot_item_alternate_weapon, "itm_force_throw_lightsaber_red_pike"),
      (item_set_slot, "itm_force_throw_lightsaber_green_pike", slot_item_alternate_weapon, "itm_lightsaber_green_pike"),
      (item_set_slot, "itm_force_throw_lightsaber_blue_pike", slot_item_alternate_weapon, "itm_lightsaber_blue_pike"),
      (item_set_slot, "itm_force_throw_lightsaber_orange_pike", slot_item_alternate_weapon, "itm_lightsaber_orange_pike"),
      (item_set_slot, "itm_force_throw_lightsaber_purple_pike", slot_item_alternate_weapon, "itm_lightsaber_purple_pike"),
      (item_set_slot, "itm_force_throw_lightsaber_yellow_pike", slot_item_alternate_weapon, "itm_lightsaber_yellow_pike"),
      (item_set_slot, "itm_force_throw_lightsaber_red_pike", slot_item_alternate_weapon, "itm_lightsaber_red_pike"),
      #other
      (item_set_slot, "itm_twilek_dagger", slot_item_alternate_weapon, "itm_twilek_dagger_throwing"),
      (item_set_slot, "itm_twilek_dagger_throwing", slot_item_alternate_weapon, "itm_twilek_dagger"),
      (item_set_slot, "itm_gamorrean_axe_1h", slot_item_alternate_weapon, "itm_throwing_axes"),
      (item_set_slot, "itm_throwing_axes", slot_item_alternate_weapon, "itm_gamorrean_axe_1h"),
      #rifles
      (item_set_slot, "itm_e11", slot_item_alternate_weapon, "itm_e11_hip"),
      (item_set_slot, "itm_e11_hip", slot_item_alternate_weapon, "itm_e11"),
      (item_set_slot, "itm_a280", slot_item_alternate_weapon, "itm_a280_crouch"),
      (item_set_slot, "itm_a280_crouch", slot_item_alternate_weapon, "itm_a280"),
      (item_set_slot, "itm_a295", slot_item_alternate_weapon, "itm_a295_crouch"),
      (item_set_slot, "itm_a295_crouch", slot_item_alternate_weapon, "itm_a295"),
      (item_set_slot, "itm_dc15a", slot_item_alternate_weapon, "itm_dc15a_hip"),
      (item_set_slot, "itm_dc15a_hip", slot_item_alternate_weapon, "itm_dc15a"),
      
      #NPC companion changes begin
      (call_script, "script_initialize_npcs"),
      #SW - switched to a 1 so companions won't complain...
      (assign, "$disable_npc_complaints", 1),
      #NPC companion changes end
      
      
      
      # Setting book intelligence requirements
      #SW - set them all to be 8
      (item_set_slot, "itm_book_tactics", slot_item_intelligence_requirement, 8),
      (item_set_slot, "itm_book_persuasion", slot_item_intelligence_requirement, 8),
      (item_set_slot, "itm_book_leadership", slot_item_intelligence_requirement, 8),
      (item_set_slot, "itm_book_intelligence", slot_item_intelligence_requirement, 8),
      (item_set_slot, "itm_book_trade", slot_item_intelligence_requirement, 8),
      (item_set_slot, "itm_book_weapon_mastery", slot_item_intelligence_requirement, 8),
      (item_set_slot, "itm_book_engineering", slot_item_intelligence_requirement, 8),
      (item_set_slot, "itm_book_wound_treatment_reference", slot_item_intelligence_requirement, 8),
      #SW - entry for new power_strike_reference, ironflesh_reference, and horse_archery_reference items
      #(item_set_slot, "itm_book_power_strike_reference", slot_item_intelligence_requirement, 4),
      (item_set_slot, "itm_book_first_aid_reference", slot_item_intelligence_requirement, 8),
      (item_set_slot, "itm_book_tactics_reference", slot_item_intelligence_requirement, 8),
      (item_set_slot, "itm_book_ironflesh_reference", slot_item_intelligence_requirement, 8),
      (item_set_slot, "itm_book_horse_archery_reference", slot_item_intelligence_requirement, 8),
      (item_set_slot, "itm_book_trade_reference", slot_item_intelligence_requirement, 8),
      (item_set_slot, "itm_book_training_reference", slot_item_intelligence_requirement, 8),
      (item_set_slot, "itm_book_surgery_reference", slot_item_intelligence_requirement, 8),


      # ## MANDO ##
      # # Automatic Firing Capability for specific weapons
      # (try_for_range, ":items", 0, 1000),
      #(call_script, "script_cf_set_automatic_weapons"),

      
      # Setting the random town sequence:
      (store_sub, ":num_towns", mainplanets_end, mainplanets_begin),
      (assign, ":num_iterations", ":num_towns"),
      (try_for_range, ":cur_town_no", 0, ":num_towns"),
        (troop_set_slot, "trp_random_town_sequence", ":cur_town_no", -1),
      (try_end),
      (assign, ":cur_town_no", 0),
      (try_for_range, ":unused", 0, ":num_iterations"),
        (store_random_in_range, ":random_no", 0, ":num_towns"),
        (assign, ":is_unique", 1),
        (try_for_range, ":cur_town_no_2", 0, ":num_towns"),
          (troop_slot_eq, "trp_random_town_sequence", ":cur_town_no_2", ":random_no"),
          (assign, ":is_unique", 0),
        (try_end),
        (try_begin),
          (eq, ":is_unique", 1),
          (troop_set_slot, "trp_random_town_sequence", ":cur_town_no", ":random_no"),
          (val_add, ":cur_town_no", 1),
        (else_try),
          (val_add, ":num_iterations", 1),
        (try_end),
      (try_end),
      # Cultures:
      #SW - modified troop tier for faction 1, 2, 3
      (faction_set_slot, "fac_culture_1",  slot_faction_tier_1_troop, "trp_imperial_recruit"),  # also used for village recruits
      (faction_set_slot, "fac_culture_1",  slot_faction_tier_2_troop, "trp_imperial_army_trooper"),
      (faction_set_slot, "fac_culture_1",  slot_faction_tier_3_troop, "trp_imperial_stormtrooper"),
      (faction_set_slot, "fac_culture_1",  slot_faction_tier_4_troop, "trp_imperial_stormtrooper_veteran"),
      (faction_set_slot, "fac_culture_1",  slot_faction_tier_5_troop, "trp_imperial_stormtrooper_officer"),
      
      (faction_set_slot, "fac_culture_2", slot_faction_tier_1_troop, "trp_rebel_recruit"),   # also used for village recruits
      (faction_set_slot, "fac_culture_2", slot_faction_tier_2_troop, "trp_rebel_cadet"),
      (faction_set_slot, "fac_culture_2", slot_faction_tier_3_troop, "trp_rebel_trooper"),
      (faction_set_slot, "fac_culture_2", slot_faction_tier_4_troop, "trp_rebel_heavy_trooper"),
      (faction_set_slot, "fac_culture_2", slot_faction_tier_5_troop, "trp_rebel_commando"),
      
      (faction_set_slot, "fac_culture_3", slot_faction_tier_1_troop, "trp_hutt_militia"), # also used for village recruits
      (faction_set_slot, "fac_culture_3", slot_faction_tier_2_troop, "trp_hutt_guard"),
      (faction_set_slot, "fac_culture_3", slot_faction_tier_3_troop, "trp_hutt_marksman"),
      (faction_set_slot, "fac_culture_3", slot_faction_tier_4_troop, "trp_hutt_skiff_guard"),
      (faction_set_slot, "fac_culture_3", slot_faction_tier_5_troop, "trp_hutt_palace_guard_captain"),
      
      #SW - commented out culture 4 & 5 troop tier
      #      (faction_set_slot, "fac_culture_4", slot_faction_tier_1_troop, "trp_nord_recruit"),
      #      (faction_set_slot, "fac_culture_4", slot_faction_tier_2_troop, "trp_nord_footman"),
      #      (faction_set_slot, "fac_culture_4", slot_faction_tier_3_troop, "trp_nord_trained_footman"),
      #      (faction_set_slot, "fac_culture_4", slot_faction_tier_4_troop, "trp_nord_warrior"),
      #      (faction_set_slot, "fac_culture_4", slot_faction_tier_5_troop, "trp_nord_veteran"),
      
      #      (faction_set_slot, "fac_culture_5", slot_faction_tier_1_troop, "trp_rhodok_tribesman"),
      #      (faction_set_slot, "fac_culture_5", slot_faction_tier_2_troop, "trp_rhodok_spearman"),
      #      (faction_set_slot, "fac_culture_5", slot_faction_tier_3_troop, "trp_rhodok_trained_spearman"),
      #      (faction_set_slot, "fac_culture_5", slot_faction_tier_4_troop, "trp_rhodok_veteran_spearman"),
      #      (faction_set_slot, "fac_culture_5", slot_faction_tier_5_troop, "trp_rhodok_sergeant"),
      
      # Factions:
      (faction_set_slot, "fac_galacticempire",  slot_faction_culture, "fac_culture_1"),
      (faction_set_slot, "fac_galacticempire",  slot_faction_leader, "trp_galacticempire_lord"),
      
      (faction_set_slot, "fac_rebelalliance",  slot_faction_culture, "fac_culture_2"),
      (faction_set_slot, "fac_rebelalliance",  slot_faction_leader, "trp_rebelalliance_lord"),
      
      (faction_set_slot, "fac_huttcartel",  slot_faction_culture, "fac_culture_3"),
      (faction_set_slot, "fac_huttcartel",  slot_faction_leader, "trp_huttcartel_lord"),
      
      #SW - commented out faction 4 & 5 leaders
      #      (faction_set_slot, "fac_faction_4",  slot_faction_culture, "fac_culture_4"),
      #      (faction_set_slot, "fac_faction_4",  slot_faction_leader, "trp_faction_4_lord"),
      
      #      (faction_set_slot, "fac_faction_5",  slot_faction_culture, "fac_culture_5"),
      #      (faction_set_slot, "fac_faction_5",  slot_faction_leader, "trp_faction_5_lord"),
      
      #SW - uncommented so faction1 will always start at war with faction2 (added a 1 at the end to fixed script error, since its the war/peace flag) - nevermind, moved it to a trigger
      #(call_script, "script_diplomacy_start_war_between_factions", "fac_galacticempire", "fac_rebelalliance",1),
      #testing
      #(call_script, "script_diplomacy_start_peace_between_factions", "fac_galacticempire", "fac_rebelalliance",1),
      #(call_script, "script_diplomacy_start_war_between_factions", "fac_galacticempire", "fac_huttcartel",1),
      #(call_script, "script_diplomacy_start_peace_between_factions", "fac_galacticempire", "fac_huttcartel",1),
      
      ##      (call_script, "script_diplomacy_start_war_between_factions", "fac_galacticempire", "fac_faction_5"),
      ##      (call_script, "script_diplomacy_start_war_between_factions", "fac_faction_4", "fac_rebelalliance"),
      ##      (call_script, "script_diplomacy_start_war_between_factions", "fac_faction_4", "fac_galacticempire"),
      ##      (call_script, "script_diplomacy_start_war_between_factions", "fac_huttcartel", "fac_rebelalliance"),
      ##      (call_script, "script_diplomacy_start_war_between_factions", "fac_huttcartel", "fac_faction_5"),
      
      #SW - removed from game_start
      #      (try_for_range, ":unused", 0, 70),
      #        (call_script, "script_randomly_start_war_peace", 0),
      #      (try_end),
      
      (try_for_range, ":faction_no", factions_begin, factions_end),
        (faction_set_slot, ":faction_no", slot_faction_marshall, -1),
        (faction_get_slot, ":culture", ":faction_no", slot_faction_culture),
        
        (faction_get_slot, ":troop", ":culture",  slot_faction_tier_1_troop),
        (faction_set_slot, ":faction_no",  slot_faction_tier_1_troop, ":troop"),
        (faction_get_slot, ":troop", ":culture",  slot_faction_tier_2_troop),
        (faction_set_slot, ":faction_no",  slot_faction_tier_2_troop, ":troop"),
        (faction_get_slot, ":troop", ":culture",  slot_faction_tier_3_troop),
        (faction_set_slot, ":faction_no",  slot_faction_tier_3_troop, ":troop"),
        (faction_get_slot, ":troop", ":culture",  slot_faction_tier_4_troop),
        (faction_set_slot, ":faction_no",  slot_faction_tier_4_troop, ":troop"),
        (faction_get_slot, ":troop", ":culture",  slot_faction_tier_5_troop),
        (faction_set_slot, ":faction_no",  slot_faction_tier_5_troop, ":troop"),
        
        #SW - need to edit this section for the troops for different factions
        (try_begin),
          (faction_slot_eq, ":faction_no", slot_faction_culture, "fac_culture_1"),
          #SW - modified faction 1 to use imperial soldiers
          (faction_set_slot, ":faction_no",  slot_faction_deserter_troop, "trp_imperial_deserter"),
          (faction_set_slot, ":faction_no",  slot_faction_guard_troop, "trp_imperial_stormtrooper"),
          (faction_set_slot, ":faction_no",  slot_faction_messenger_troop, "trp_imperial_messenger"),
          (faction_set_slot, ":faction_no",  slot_faction_prison_guard_troop, "trp_imperial_stormtrooper_officer"),
          (faction_set_slot, ":faction_no",  slot_faction_spacestation_guard_troop, "trp_imperial_royal_guard"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_a, "pt_galacticempire_reinforcements_a"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_b, "pt_galacticempire_reinforcements_b"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_c, "pt_galacticempire_reinforcements_c"),
        (else_try),
          (faction_slot_eq, ":faction_no", slot_faction_culture, "fac_culture_2"),
          #SW - modified faction 2 to use rebel soldiers
          (faction_set_slot, ":faction_no", slot_faction_deserter_troop, "trp_rebel_deserter"),
          (faction_set_slot, ":faction_no", slot_faction_guard_troop, "trp_rebel_trooper"),
          (faction_set_slot, ":faction_no", slot_faction_messenger_troop, "trp_rebel_messenger"),
          (faction_set_slot, ":faction_no", slot_faction_prison_guard_troop, "trp_wookiee_warrior"),
          (faction_set_slot, ":faction_no", slot_faction_spacestation_guard_troop, "trp_rebel_honor_guard"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_a, "pt_rebelalliance_reinforcements_a"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_b, "pt_rebelalliance_reinforcements_b"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_c, "pt_rebelalliance_reinforcements_c"),
        (else_try),
          (faction_slot_eq, ":faction_no", slot_faction_culture, "fac_culture_3"),
          #SW - modified faction 3 to use hutt soldiers
          (faction_set_slot, ":faction_no", slot_faction_deserter_troop, "trp_hutt_deserter"),
          (faction_set_slot, ":faction_no", slot_faction_guard_troop, "trp_hutt_guard"),
          (faction_set_slot, ":faction_no", slot_faction_messenger_troop, "trp_hutt_messenger"),
          (faction_set_slot, ":faction_no", slot_faction_prison_guard_troop, "trp_gamorrean_guard"),
          (faction_set_slot, ":faction_no", slot_faction_spacestation_guard_troop, "trp_gamorrean_guard"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_a, "pt_huttcartel_reinforcements_a"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_b, "pt_huttcartel_reinforcements_b"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_c, "pt_huttcartel_reinforcements_c"),
          #SW - commented out faction 4 & 5 deserters, guard, messenger, prison, etc.
          # (else_try),
          # (faction_slot_eq, ":faction_no", slot_faction_culture, "fac_culture_4"),
          
          # (faction_set_slot, ":faction_no", slot_faction_deserter_troop, "trp_nord_deserter"),
          # (faction_set_slot, ":faction_no", slot_faction_guard_troop, "trp_nord_warrior"),
          # (faction_set_slot, ":faction_no", slot_faction_messenger_troop, "trp_nord_messenger"),
          # (faction_set_slot, ":faction_no", slot_faction_prison_guard_troop, "trp_nord_prison_guard"),
          # (faction_set_slot, ":faction_no", slot_faction_spacestation_guard_troop, "trp_nord_spacestation_guard"),
          # (faction_set_slot, ":faction_no",  slot_faction_reinforcements_a, "pt_faction_4_reinforcements_a"),
          # (faction_set_slot, ":faction_no",  slot_faction_reinforcements_b, "pt_faction_4_reinforcements_b"),
          # (faction_set_slot, ":faction_no",  slot_faction_reinforcements_c, "pt_faction_4_reinforcements_c"),
          # (else_try),
          # (faction_slot_eq, ":faction_no", slot_faction_culture, "fac_culture_5"),
          
          # (faction_set_slot, ":faction_no", slot_faction_deserter_troop, "trp_rhodok_deserter"),
          # (faction_set_slot, ":faction_no", slot_faction_guard_troop, "trp_rhodok_veteran_spearman"),
          # (faction_set_slot, ":faction_no", slot_faction_messenger_troop, "trp_rhodok_messenger"),
          # (faction_set_slot, ":faction_no", slot_faction_prison_guard_troop, "trp_rhodok_prison_guard"),
          # (faction_set_slot, ":faction_no", slot_faction_spacestation_guard_troop, "trp_rhodok_spacestation_guard"),
          # (faction_set_slot, ":faction_no",  slot_faction_reinforcements_a, "pt_faction_5_reinforcements_a"),
          # (faction_set_slot, ":faction_no",  slot_faction_reinforcements_b, "pt_faction_5_reinforcements_b"),
          # (faction_set_slot, ":faction_no",  slot_faction_reinforcements_c, "pt_faction_5_reinforcements_c"),
        (try_end),
      (try_end),
      
      (faction_set_slot, "fac_player_supporters_faction", slot_faction_marshall, "trp_player"),
      
      
      # Towns:
      (try_for_range, ":item_no", trade_goods_begin, trade_goods_end),
        (store_sub, ":offset", ":item_no", trade_goods_begin),
        (val_add, ":offset", slot_mainplanet_trade_good_prices_begin),
        (try_for_range, ":center_no", centers_begin, centers_end),
          (party_set_slot, ":center_no", ":offset", average_price_factor),
        (try_end),
        ##        (party_set_slot, "p_zendar", ":offset", average_price_factor),
        ##        (party_set_slot, "p_salt_mine", ":offset", average_price_factor),
        ##        (party_set_slot, "p_four_ways_inn", ":offset", average_price_factor),
      (try_end),
      
      (call_script, "script_set_trade_route_between_centers", "p_mandalore", "p_christophsis"),
      (call_script, "script_set_trade_route_between_centers", "p_mandalore", "p_corellia"),
      (call_script, "script_set_trade_route_between_centers", "p_mandalore", "p_geonosis"),
      (call_script, "script_set_trade_route_between_centers", "p_mandalore", "p_mon_cal"),
      (call_script, "script_set_trade_route_between_centers", "p_mandalore", "p_hoth"),
      (call_script, "script_set_trade_route_between_centers", "p_mandalore", "p_gamorr"),
      (call_script, "script_set_trade_route_between_centers", "p_mandalore", "p_yavin_iv"),
      (call_script, "script_set_trade_route_between_centers", "p_mandalore", "p_manaan"),
      (call_script, "script_set_trade_route_between_centers", "p_mandalore", "p_coruscant"),
      
      (call_script, "script_set_trade_route_between_centers", "p_christophsis", "p_corellia"),
      (call_script, "script_set_trade_route_between_centers", "p_christophsis", "p_kessel"),
      (call_script, "script_set_trade_route_between_centers", "p_christophsis", "p_geonosis"),
      (call_script, "script_set_trade_route_between_centers", "p_christophsis", "p_gamorr"),
      (call_script, "script_set_trade_route_between_centers", "p_christophsis", "p_yavin_iv"),
      (call_script, "script_set_trade_route_between_centers", "p_christophsis", "p_manaan"),
      (call_script, "script_set_trade_route_between_centers", "p_christophsis", "p_coruscant"),
      
      (call_script, "script_set_trade_route_between_centers", "p_endor", "p_corellia"),
      (call_script, "script_set_trade_route_between_centers", "p_endor", "p_naboo"),
      (call_script, "script_set_trade_route_between_centers", "p_endor", "p_kessel"),
      (call_script, "script_set_trade_route_between_centers", "p_endor", "p_dantooine"),
      (call_script, "script_set_trade_route_between_centers", "p_endor", "p_tatooine"),
      (call_script, "script_set_trade_route_between_centers", "p_endor", "p_manaan"),
      (call_script, "script_set_trade_route_between_centers", "p_endor", "p_nalhutta"),
      
      (call_script, "script_set_trade_route_between_centers", "p_corellia", "p_kessel"),
      (call_script, "script_set_trade_route_between_centers", "p_corellia", "p_gamorr"),
      (call_script, "script_set_trade_route_between_centers", "p_corellia", "p_yavin_iv"),
      (call_script, "script_set_trade_route_between_centers", "p_corellia", "p_manaan"),
      (call_script, "script_set_trade_route_between_centers", "p_corellia", "p_coruscant"),
      
      (call_script, "script_set_trade_route_between_centers", "p_naboo", "p_kessel"),
      (call_script, "script_set_trade_route_between_centers", "p_naboo", "p_dantooine"),
      (call_script, "script_set_trade_route_between_centers", "p_naboo", "p_tatooine"),
      (call_script, "script_set_trade_route_between_centers", "p_naboo", "p_manaan"),
      (call_script, "script_set_trade_route_between_centers", "p_naboo", "p_ryloth"),
      (call_script, "script_set_trade_route_between_centers", "p_naboo", "p_nalhutta"),
      
      (call_script, "script_set_trade_route_between_centers", "p_kessel", "p_dantooine"),
      (call_script, "script_set_trade_route_between_centers", "p_kessel", "p_hoth"),
      (call_script, "script_set_trade_route_between_centers", "p_kessel", "p_yavin_iv"),
      (call_script, "script_set_trade_route_between_centers", "p_kessel", "p_manaan"),
      (call_script, "script_set_trade_route_between_centers", "p_kessel", "p_coruscant"),
      (call_script, "script_set_trade_route_between_centers", "p_kessel", "p_ryloth"),
      
      (call_script, "script_set_trade_route_between_centers", "p_dantooine", "p_kashyyyk"),
      (call_script, "script_set_trade_route_between_centers", "p_dantooine", "p_hoth"),
      (call_script, "script_set_trade_route_between_centers", "p_dantooine", "p_yavin_iv"),
      (call_script, "script_set_trade_route_between_centers", "p_dantooine", "p_tatooine"),
      (call_script, "script_set_trade_route_between_centers", "p_dantooine", "p_manaan"),
      (call_script, "script_set_trade_route_between_centers", "p_dantooine", "p_coruscant"),
      (call_script, "script_set_trade_route_between_centers", "p_dantooine", "p_ryloth"),
      (call_script, "script_set_trade_route_between_centers", "p_dantooine", "p_nalhutta"),
      
      (call_script, "script_set_trade_route_between_centers", "p_geonosis", "p_mon_cal"),
      (call_script, "script_set_trade_route_between_centers", "p_geonosis", "p_hoth"),
      (call_script, "script_set_trade_route_between_centers", "p_geonosis", "p_gamorr"),
      (call_script, "script_set_trade_route_between_centers", "p_geonosis", "p_yavin_iv"),
      (call_script, "script_set_trade_route_between_centers", "p_geonosis", "p_coruscant"),
      
      (call_script, "script_set_trade_route_between_centers", "p_mon_cal", "p_hoth"),
      (call_script, "script_set_trade_route_between_centers", "p_mon_cal", "p_gamorr"),
      (call_script, "script_set_trade_route_between_centers", "p_mon_cal", "p_yavin_iv"),
      (call_script, "script_set_trade_route_between_centers", "p_mon_cal", "p_coruscant"),
      
      (call_script, "script_set_trade_route_between_centers", "p_kashyyyk", "p_hoth"),
      (call_script, "script_set_trade_route_between_centers", "p_kashyyyk", "p_tatooine"),
      (call_script, "script_set_trade_route_between_centers", "p_kashyyyk", "p_ryloth"),
      (call_script, "script_set_trade_route_between_centers", "p_kashyyyk", "p_nalhutta"),
      
      (call_script, "script_set_trade_route_between_centers", "p_hoth", "p_gamorr"),
      (call_script, "script_set_trade_route_between_centers", "p_hoth", "p_yavin_iv"),
      (call_script, "script_set_trade_route_between_centers", "p_hoth", "p_tatooine"),
      (call_script, "script_set_trade_route_between_centers", "p_hoth", "p_coruscant"),
      (call_script, "script_set_trade_route_between_centers", "p_hoth", "p_ryloth"),
      
      (call_script, "script_set_trade_route_between_centers", "p_gamorr", "p_yavin_iv"),
      (call_script, "script_set_trade_route_between_centers", "p_gamorr", "p_coruscant"),
      
      (call_script, "script_set_trade_route_between_centers", "p_yavin_iv", "p_coruscant"),
      (call_script, "script_set_trade_route_between_centers", "p_yavin_iv", "p_ryloth"),
      
      (call_script, "script_set_trade_route_between_centers", "p_tatooine", "p_ryloth"),
      (call_script, "script_set_trade_route_between_centers", "p_tatooine", "p_nalhutta"),
      
      (call_script, "script_set_trade_route_between_centers", "p_manaan", "p_coruscant"),
      (call_script, "script_set_trade_route_between_centers", "p_coruscant", "p_ryloth"),
      (call_script, "script_set_trade_route_between_centers", "p_ryloth", "p_nalhutta"),
      
      #new towns town_19, town_20, town_21
      (call_script, "script_set_trade_route_between_centers", "p_bothawui", "p_dantooine"),
      (call_script, "script_set_trade_route_between_centers", "p_bothawui", "p_kashyyyk"),
      (call_script, "script_set_trade_route_between_centers", "p_mustafar", "p_kamino"),
      (call_script, "script_set_trade_route_between_centers", "p_mustafar", "p_geonosis"),
      (call_script, "script_set_trade_route_between_centers", "p_kamino", "p_coruscant"),
      #(call_script, "script_set_trade_route_between_centers", "p_kamino", "p_mustafar"),
      
      ##SWY - SWC 0.9.0.3 - Added Taris
      (call_script, "script_set_trade_route_between_centers", "p_taris", "p_kamino"),
      
      ## SWY - 0.9.0.4 - Added Rexus Prime and Sarapin
      (call_script, "script_set_trade_route_between_centers", "p_raxusprime", "p_gamorr"),
      (call_script, "script_set_trade_route_between_centers", "p_sarapin", "p_yavin_iv"),
      (call_script, "script_set_trade_route_between_centers", "p_hypori", "p_geonosis"),
      (call_script, "script_set_trade_route_between_centers", "p_felucia", "p_christophsis"),
      
      (try_for_range, ":town_no", mainplanets_begin, mainplanets_end),
        (party_set_slot, ":town_no", slot_mainplanet_tournament_max_teams, 4),
        (party_set_slot, ":town_no", slot_mainplanet_tournament_max_team_size, 8),
      (try_end),
      (party_set_slot, "p_kessel", slot_mainplanet_tournament_max_team_size, 2),
      
      #start some tournaments
      (try_for_range, ":town_no", mainplanets_begin, mainplanets_end),
        (store_random_in_range, ":rand", 0, 100),
        (lt, ":rand", 20),
        (store_random_in_range, ":random_days", 12, 15),
        (party_set_slot, ":town_no", slot_mainplanet_has_tournament, ":random_days"),
      (try_end),
      
      
      
      (party_set_slot,"p_mandalore", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_mandalore", slot_mainplanet_arena_melee_1_team_size,   1),
      (party_set_slot,"p_mandalore", slot_mainplanet_arena_melee_2_num_teams,   4),
      (party_set_slot,"p_mandalore", slot_mainplanet_arena_melee_2_team_size,   1),
      (party_set_slot,"p_mandalore", slot_mainplanet_arena_melee_3_num_teams,   4),
      (party_set_slot,"p_mandalore", slot_mainplanet_arena_melee_3_team_size,   1),
      (call_script, "script_center_change_trade_good_production", "p_mandalore", "itm_linen", 110, 0),
      
      (party_set_slot,"p_christophsis", slot_mainplanet_arena_melee_1_num_teams,   4),
      (party_set_slot,"p_christophsis", slot_mainplanet_arena_melee_1_team_size,   4),
      (party_set_slot,"p_christophsis", slot_mainplanet_arena_melee_2_num_teams,   4),
      (party_set_slot,"p_christophsis", slot_mainplanet_arena_melee_2_team_size,   6),
      (party_set_slot,"p_christophsis", slot_mainplanet_arena_melee_3_num_teams,   4),
      (party_set_slot,"p_christophsis", slot_mainplanet_arena_melee_3_team_size,   8),
      (call_script, "script_center_change_trade_good_production", "p_christophsis", "itm_smoked_fish", 130, 0),
      
      (party_set_slot,"p_endor", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_endor", slot_mainplanet_arena_melee_1_team_size,   8),
      (party_set_slot,"p_endor", slot_mainplanet_arena_melee_2_num_teams,   2),
      (party_set_slot,"p_endor", slot_mainplanet_arena_melee_2_team_size,   8),
      (party_set_slot,"p_endor", slot_mainplanet_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_endor", slot_mainplanet_arena_melee_3_team_size,   8),
      (call_script, "script_center_change_trade_good_production", "p_endor", "itm_wine", 120, 0),
      
      (party_set_slot,"p_corellia", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_corellia", slot_mainplanet_arena_melee_1_team_size,   8),
      (party_set_slot,"p_corellia", slot_mainplanet_arena_melee_2_num_teams,   3),
      (party_set_slot,"p_corellia", slot_mainplanet_arena_melee_2_team_size,   8),
      (party_set_slot,"p_corellia", slot_mainplanet_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_corellia", slot_mainplanet_arena_melee_3_team_size,   5),
      (call_script, "script_center_change_trade_good_production", "p_corellia", "itm_oil", 130, 0),
      
      (party_set_slot,"p_naboo", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_naboo", slot_mainplanet_arena_melee_1_team_size,   3),
      (party_set_slot,"p_naboo", slot_mainplanet_arena_melee_2_num_teams,   2),
      (party_set_slot,"p_naboo", slot_mainplanet_arena_melee_2_team_size,   5),
      (party_set_slot,"p_naboo", slot_mainplanet_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_naboo", slot_mainplanet_arena_melee_3_team_size,   8),
      (call_script, "script_center_change_trade_good_production", "p_naboo", "itm_velvet", 80, 0),
      
      (party_set_slot,"p_kessel", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_kessel", slot_mainplanet_arena_melee_1_team_size,   4),
      (party_set_slot,"p_kessel", slot_mainplanet_arena_melee_2_num_teams,   3),
      (party_set_slot,"p_kessel", slot_mainplanet_arena_melee_2_team_size,   4),
      (party_set_slot,"p_kessel", slot_mainplanet_arena_melee_3_num_teams,   3),
      (party_set_slot,"p_kessel", slot_mainplanet_arena_melee_3_team_size,   6),
      (call_script, "script_center_change_trade_good_production", "p_kessel", "itm_ale", 130, 0),
      
      (party_set_slot,"p_dantooine", slot_mainplanet_arena_melee_1_num_teams,   4),
      (party_set_slot,"p_dantooine", slot_mainplanet_arena_melee_1_team_size,   4),
      (party_set_slot,"p_dantooine", slot_mainplanet_arena_melee_2_num_teams,   4),
      (party_set_slot,"p_dantooine", slot_mainplanet_arena_melee_2_team_size,   6),
      (party_set_slot,"p_dantooine", slot_mainplanet_arena_melee_3_num_teams,   4),
      (party_set_slot,"p_dantooine", slot_mainplanet_arena_melee_3_team_size,   8),
      (call_script, "script_center_change_trade_good_production", "p_dantooine", "itm_grain", 140, 0),
      (call_script, "script_center_change_trade_good_production", "p_dantooine", "itm_flour", 110, 0),
      
      (party_set_slot,"p_geonosis", slot_mainplanet_arena_melee_1_num_teams,   3),
      (party_set_slot,"p_geonosis", slot_mainplanet_arena_melee_1_team_size,   1),
      (party_set_slot,"p_geonosis", slot_mainplanet_arena_melee_2_num_teams,   3),
      (party_set_slot,"p_geonosis", slot_mainplanet_arena_melee_2_team_size,   3),
      (party_set_slot,"p_geonosis", slot_mainplanet_arena_melee_3_num_teams,   3),
      (party_set_slot,"p_geonosis", slot_mainplanet_arena_melee_3_team_size,   7),
      (call_script, "script_center_change_trade_good_production", "p_geonosis", "itm_wool", 130, 0),
      
      (party_set_slot,"p_mon_cal", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_mon_cal", slot_mainplanet_arena_melee_1_team_size,   2),
      (party_set_slot,"p_mon_cal", slot_mainplanet_arena_melee_2_num_teams,   2),
      (party_set_slot,"p_mon_cal", slot_mainplanet_arena_melee_2_team_size,   5),
      (party_set_slot,"p_mon_cal", slot_mainplanet_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_mon_cal", slot_mainplanet_arena_melee_3_team_size,   8),
      (call_script, "script_center_change_trade_good_production", "p_mon_cal", "itm_furs", 135, 0),
      
      (party_set_slot,"p_kashyyyk", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_kashyyyk", slot_mainplanet_arena_melee_1_team_size,   3),
      (party_set_slot,"p_kashyyyk", slot_mainplanet_arena_melee_2_num_teams,   2),
      (party_set_slot,"p_kashyyyk", slot_mainplanet_arena_melee_2_team_size,   5),
      (party_set_slot,"p_kashyyyk", slot_mainplanet_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_kashyyyk", slot_mainplanet_arena_melee_3_team_size,   8),
      (call_script, "script_center_change_trade_good_production", "p_kashyyyk", "itm_spice", 86, 0),
      
      (party_set_slot,"p_hoth", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_hoth", slot_mainplanet_arena_melee_1_team_size,   8),
      (party_set_slot,"p_hoth", slot_mainplanet_arena_melee_2_num_teams,   3),
      (party_set_slot,"p_hoth", slot_mainplanet_arena_melee_2_team_size,   4),
      (party_set_slot,"p_hoth", slot_mainplanet_arena_melee_3_num_teams,   3),
      (party_set_slot,"p_hoth", slot_mainplanet_arena_melee_3_team_size,   6),
      (call_script, "script_center_change_trade_good_production", "p_hoth", "itm_iron", 130, 0),
      
      (party_set_slot,"p_gamorr", slot_mainplanet_arena_melee_1_num_teams,   3),
      (party_set_slot,"p_gamorr", slot_mainplanet_arena_melee_1_team_size,   8),
      (party_set_slot,"p_gamorr", slot_mainplanet_arena_melee_2_num_teams,   4),
      (party_set_slot,"p_gamorr", slot_mainplanet_arena_melee_2_team_size,   6),
      (party_set_slot,"p_gamorr", slot_mainplanet_arena_melee_3_num_teams,   4),
      (party_set_slot,"p_gamorr", slot_mainplanet_arena_melee_3_team_size,   5),
      (call_script, "script_center_change_trade_good_production", "p_gamorr", "itm_smoked_fish", 140, 0),
      
      (party_set_slot,"p_yavin_iv", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_yavin_iv", slot_mainplanet_arena_melee_1_team_size,   8),
      (party_set_slot,"p_yavin_iv", slot_mainplanet_arena_melee_2_num_teams,   4),
      (party_set_slot,"p_yavin_iv", slot_mainplanet_arena_melee_2_team_size,   5),
      (party_set_slot,"p_yavin_iv", slot_mainplanet_arena_melee_3_num_teams,   4),
      (party_set_slot,"p_yavin_iv", slot_mainplanet_arena_melee_3_team_size,   7),
      (call_script, "script_center_change_trade_good_production", "p_yavin_iv", "itm_dried_meat", 120, 0),
      
      (party_set_slot,"p_tatooine", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_tatooine", slot_mainplanet_arena_melee_1_team_size,   4),
      (party_set_slot,"p_tatooine", slot_mainplanet_arena_melee_2_num_teams,   2),
      (party_set_slot,"p_tatooine", slot_mainplanet_arena_melee_2_team_size,   5),
      (party_set_slot,"p_tatooine", slot_mainplanet_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_tatooine", slot_mainplanet_arena_melee_3_team_size,   6),
      (call_script, "script_center_change_trade_good_production", "p_tatooine", "itm_pottery", 120, 0),
      
      (party_set_slot,"p_manaan", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_manaan", slot_mainplanet_arena_melee_1_team_size,   8),
      (party_set_slot,"p_manaan", slot_mainplanet_arena_melee_2_num_teams,   3),
      (party_set_slot,"p_manaan", slot_mainplanet_arena_melee_2_team_size,   4),
      (party_set_slot,"p_manaan", slot_mainplanet_arena_melee_3_num_teams,   3),
      (party_set_slot,"p_manaan", slot_mainplanet_arena_melee_3_team_size,   6),
      (call_script, "script_center_change_trade_good_production", "p_manaan", "itm_cheese", 100, 0),
      
      (party_set_slot,"p_coruscant", slot_mainplanet_arena_melee_1_num_teams,   3),
      (party_set_slot,"p_coruscant", slot_mainplanet_arena_melee_1_team_size,   8),
      (party_set_slot,"p_coruscant", slot_mainplanet_arena_melee_2_num_teams,   4),
      (party_set_slot,"p_coruscant", slot_mainplanet_arena_melee_2_team_size,   6),
      (party_set_slot,"p_coruscant", slot_mainplanet_arena_melee_3_num_teams,   4),
      (party_set_slot,"p_coruscant", slot_mainplanet_arena_melee_3_team_size,   5),
      (call_script, "script_center_change_trade_good_production", "p_coruscant", "itm_tools", 100, 0),
      
      (party_set_slot,"p_ryloth", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_ryloth", slot_mainplanet_arena_melee_1_team_size,   8),
      (party_set_slot,"p_ryloth", slot_mainplanet_arena_melee_2_num_teams,   4),
      (party_set_slot,"p_ryloth", slot_mainplanet_arena_melee_2_team_size,   5),
      (party_set_slot,"p_ryloth", slot_mainplanet_arena_melee_3_num_teams,   4),
      (party_set_slot,"p_ryloth", slot_mainplanet_arena_melee_3_team_size,   7),
      (call_script, "script_center_change_trade_good_production", "p_ryloth", "itm_salt", 100, 0),
      
      (party_set_slot,"p_nalhutta", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_nalhutta", slot_mainplanet_arena_melee_1_team_size,   4),
      (party_set_slot,"p_nalhutta", slot_mainplanet_arena_melee_2_num_teams,   2),
      (party_set_slot,"p_nalhutta", slot_mainplanet_arena_melee_2_team_size,   5),
      (party_set_slot,"p_nalhutta", slot_mainplanet_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_nalhutta", slot_mainplanet_arena_melee_3_team_size,   6),
      (call_script, "script_center_change_trade_good_production", "p_nalhutta", "itm_oil", 125, 0),
      
      #SW - new town data, town_19, town_20, town_21
      #town_19
      (party_set_slot,"p_bothawui", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_bothawui", slot_mainplanet_arena_melee_1_team_size,   4),
      (party_set_slot,"p_bothawui", slot_mainplanet_arena_melee_2_num_teams,   2),
      (party_set_slot,"p_bothawui", slot_mainplanet_arena_melee_2_team_size,   5),
      (party_set_slot,"p_bothawui", slot_mainplanet_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_bothawui", slot_mainplanet_arena_melee_3_team_size,   6),
      (call_script, "script_center_change_trade_good_production", "p_bothawui", "itm_cheese", 125, 0),
      #own_20
      (party_set_slot,"p_mustafar", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_mustafar", slot_mainplanet_arena_melee_1_team_size,   4),
      (party_set_slot,"p_mustafar", slot_mainplanet_arena_melee_2_num_teams,   2),
      (party_set_slot,"p_mustafar", slot_mainplanet_arena_melee_2_team_size,   5),
      (party_set_slot,"p_mustafar", slot_mainplanet_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_mustafar", slot_mainplanet_arena_melee_3_team_size,   6),
      (call_script, "script_center_change_trade_good_production", "p_mustafar", "itm_oil", 125, 0),
      #town_21
      (party_set_slot,"p_kamino", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_kamino", slot_mainplanet_arena_melee_1_team_size,   4),
      (party_set_slot,"p_kamino", slot_mainplanet_arena_melee_2_num_teams,   2),
      (party_set_slot,"p_kamino", slot_mainplanet_arena_melee_2_team_size,   5),
      (party_set_slot,"p_kamino", slot_mainplanet_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_kamino", slot_mainplanet_arena_melee_3_team_size,   6),
      (call_script, "script_center_change_trade_good_production", "p_kamino", "itm_tools", 125, 0),
      #town_22 - Taris - Added By Swyter
      (party_set_slot,"p_taris", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_taris", slot_mainplanet_arena_melee_1_team_size,   4),
      (party_set_slot,"p_taris", slot_mainplanet_arena_melee_2_num_teams,   2),
      (party_set_slot,"p_taris", slot_mainplanet_arena_melee_2_team_size,   5),
      (party_set_slot,"p_taris", slot_mainplanet_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_taris", slot_mainplanet_arena_melee_3_team_size,   6),
      (call_script, "script_center_change_trade_good_production", "p_taris", "itm_tools", 125, 0),
      #town_23 - Raxus Prime - Added By Swyter
      (party_set_slot,"p_raxusprime", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_raxusprime", slot_mainplanet_arena_melee_1_team_size,   4),
      (party_set_slot,"p_raxusprime", slot_mainplanet_arena_melee_2_num_teams,   2),
      (party_set_slot,"p_raxusprime", slot_mainplanet_arena_melee_2_team_size,   5),
      (party_set_slot,"p_raxusprime", slot_mainplanet_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_raxusprime", slot_mainplanet_arena_melee_3_team_size,   6),
      (call_script, "script_center_change_trade_good_production", "p_raxusprime", "itm_iron", 125, 0),
      #town_24 - Sarapin - Added By Swyter
      (party_set_slot,"p_sarapin", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_sarapin", slot_mainplanet_arena_melee_1_team_size,   4),
      (party_set_slot,"p_sarapin", slot_mainplanet_arena_melee_2_num_teams,   2),
      (party_set_slot,"p_sarapin", slot_mainplanet_arena_melee_2_team_size,   5),
      (party_set_slot,"p_sarapin", slot_mainplanet_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_sarapin", slot_mainplanet_arena_melee_3_team_size,   6),
      (call_script, "script_center_change_trade_good_production", "p_sarapin", "itm_tools", 125, 0),
      #town_25 - hypori
      (party_set_slot,"p_hypori", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_hypori", slot_mainplanet_arena_melee_1_team_size,   4),
      (party_set_slot,"p_hypori", slot_mainplanet_arena_melee_2_num_teams,   2),
      (party_set_slot,"p_hypori", slot_mainplanet_arena_melee_2_team_size,   5),
      (party_set_slot,"p_hypori", slot_mainplanet_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_hypori", slot_mainplanet_arena_melee_3_team_size,   6),
      (call_script, "script_center_change_trade_good_production", "p_hypori", "itm_pottery", 120, 0),
      #town_26 - Felucia
      (party_set_slot,"p_felucia", slot_mainplanet_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_felucia", slot_mainplanet_arena_melee_1_team_size,   8),
      (party_set_slot,"p_felucia", slot_mainplanet_arena_melee_2_num_teams,   3),
      (party_set_slot,"p_felucia", slot_mainplanet_arena_melee_2_team_size,   4),
      (party_set_slot,"p_felucia", slot_mainplanet_arena_melee_3_num_teams,   3),
      (party_set_slot,"p_felucia", slot_mainplanet_arena_melee_3_team_size,   6),
      (call_script, "script_center_change_trade_good_production", "p_felucia", "itm_oil", 100, 0),
      
      (try_for_range, ":unused", 0, 1),
        (call_script, "script_average_trade_good_productions"),
      (try_end),
      (call_script, "script_normalize_trade_good_productions"),
      
      
      (try_for_range, ":town_no", mainplanets_begin, mainplanets_end),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_smoked_fish", -12, 3),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_dried_meat", -12, 3),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_cattle_meat", -15, 3),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_cheese", -10, 3),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_chicken", -10, 3),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_honey", -9, 3),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_cabbages", -10, 3),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_butter", -12, 3),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_wine", -14, 2),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_flour", -13, 3),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_ale", -10, 3),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_apples", -10, 3),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_grain", -10, 3),
        
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_iron", -10, 3),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_wool", -10, 3),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_furs", -10, 3),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_oil", -12, 3),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_velvet", -3, 3),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_spice", -5, 3),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_linen", -3, 3),
      (try_end),
      
      
      
      # Towns (loop)
      (try_for_range, ":town_no", mainplanets_begin, mainplanets_end),
        (store_sub, ":offset", ":town_no", mainplanets_begin),
        (party_set_slot,":town_no", slot_party_type, spt_mainplanet),
        #        (store_add, ":cur_object_no", "trp_town_1_seneschal", ":offset"),
        #        (party_set_slot,":town_no", slot_mainplanet_seneschal, ":cur_object_no"),
        
        #Tavern recruitment and ale START 1/3
        (store_add, ":cur_object_no", "p_town_merc_1", ":offset"),
        (party_set_slot,":town_no", slot_mainplanet_mercs,":cur_object_no"),
        #Tavern recruitment and ale END 1/3
        
        (store_add, ":cur_object_no", "scn_mainplanet_mandalore_center", ":offset"),
        (party_set_slot,":town_no", slot_mainplanet_center, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_mainplanet_mandalore_castle", ":offset"),
        (party_set_slot,":town_no", slot_mainplanet_castle, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_mainplanet_mandalore_prison", ":offset"),
        (party_set_slot,":town_no", slot_mainplanet_prison, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_mainplanet_mandalore_center", ":offset"),
        #(store_add, ":cur_object_no", "scn_town_1_walls", ":offset"),   #switched walls to use center scenes
        (party_set_slot,":town_no", slot_mainplanet_walls, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_mainplanet_mandalore_cantina", ":offset"),
        (party_set_slot,":town_no", slot_mainplanet_cantina, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_mainplanet_mandalore_store", ":offset"),
        (party_set_slot,":town_no", slot_mainplanet_store, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_mainplanet_mandalore_arena", ":offset"),
        (party_set_slot,":town_no", slot_mainplanet_arena, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_mainplanet_mandalore_alley", ":offset"),
        (party_set_slot,":town_no", slot_mainplanet_alley, ":cur_object_no"),
        (store_add, ":cur_object_no", "trp_mainplanet_mandalore_mayor", ":offset"),
        (party_set_slot,":town_no", slot_mainplanet_elder, ":cur_object_no"),
        (store_add, ":cur_object_no", "trp_mainplanet_mandalore_bartender", ":offset"),
        (party_set_slot,":town_no", slot_mainplanet_bartender, ":cur_object_no"),
        (store_add, ":cur_object_no", "trp_mainplanet_mandalore_weaponsmith", ":offset"),
        (party_set_slot,":town_no", slot_mainplanet_weaponsmith, ":cur_object_no"),
        (store_add, ":cur_object_no", "trp_mainplanet_mandalore_armorer", ":offset"),
        (party_set_slot,":town_no", slot_mainplanet_armorer, ":cur_object_no"),
        (store_add, ":cur_object_no", "trp_mainplanet_mandalore_merchant", ":offset"),
        (party_set_slot,":town_no", slot_mainplanet_merchant, ":cur_object_no"),
        (store_add, ":cur_object_no", "trp_mainplanet_mandalore_horse_merchant", ":offset"),
        (party_set_slot,":town_no", slot_mainplanet_horse_merchant, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_mainplanet_mandalore_center", ":offset"),
        (party_set_slot,":town_no", slot_mainplanet_center, ":cur_object_no"),
        (party_set_slot,":town_no", slot_mainplanet_reinforcement_party_template, "pt_center_reinforcements"),
        
        #Swy - 0.9.0.4 moved the initial aura effect to this init part
        (party_add_particle_system, ":town_no", "psys_planet_icon_atmospheric_effect"),
        
        
      (try_end),
      
      #SW - modified to use arena_melee_fight only (nevermind, apprently no longer exists in 1.x?)
      #(party_set_slot,"p_mandalore", slot_mainplanet_arena_template, "mt_arena_melee_fight_no_ranged"),
      #(party_set_slot,"p_mandalore", slot_mainplanet_arena_template, "mt_arena_melee_fight"),
      
      # Castles
      (try_for_range, ":spacestation_no", castles_begin, castles_end),
        (store_sub, ":offset", ":spacestation_no", castles_begin),
        (val_mul, ":offset", 3),
        
        
          (assign, reg1, ":offset"),   
        
        #(store_add, ":senechal_troop_no", "trp_spacestation_1_seneschal", ":offset"),
        #(party_set_slot,":spacestation_no", slot_mainplanet_seneschal, ":senechal_troop_no"),
        (store_add, ":exterior_scene_no", "scn_spacestation_2_exterior", ":offset"),
        (party_set_slot,":spacestation_no", slot_spacestation_exterior, ":exterior_scene_no"),
        #(assign, reg2, ":exterior_scene_no"),
        (store_add, ":interior_scene_no", "scn_spacestation_2_interior", ":offset"),
        (party_set_slot,":spacestation_no", slot_mainplanet_castle, ":interior_scene_no"),
        #(assign, reg3, ":interior_scene_no"),
        (store_add, ":prison_scene_no", "scn_spacestation_2_prison", ":offset"),
        (party_set_slot,":spacestation_no", slot_mainplanet_prison, ":prison_scene_no"),
        #(assign, reg4, ":prison_scene_no"),
        
        #(display_log_message, "@spc{reg1}/ext={reg2}/int={reg3}/pris={reg4}"),
        
        (party_set_slot,":spacestation_no", slot_mainplanet_reinforcement_party_template, "pt_center_reinforcements"),
        (party_set_slot,":spacestation_no", slot_party_type, spt_castle),
        (party_set_slot,":spacestation_no", slot_center_is_besieged_by, -1),
      (try_end),
      
      # Set which castles need to be attacked with siege towers.
      #SW - commented out ability to use siege towers
      # (party_set_slot,"p_mandalore", slot_center_siege_with_belfry,   1),
      # (party_set_slot,"p_yavin_iv", slot_center_siege_with_belfry,   1),
      # (party_set_slot,"p_coruscant", slot_center_siege_with_belfry,   1),
      
      # (party_set_slot,"p_spacestation_1", slot_center_siege_with_belfry,   1),
      # (party_set_slot,"p_spacestation_2", slot_center_siege_with_belfry,   1),
      # (party_set_slot,"p_spacestation_3", slot_center_siege_with_belfry,   0),
      # (party_set_slot,"p_spacestation_4", slot_center_siege_with_belfry,   1),
      # (party_set_slot,"p_spacestation_5", slot_center_siege_with_belfry,   0),
      # (party_set_slot,"p_spacestation_6", slot_center_siege_with_belfry,   0),
      # (party_set_slot,"p_spacestation_7", slot_center_siege_with_belfry,   1),
      # (party_set_slot,"p_spacestation_8", slot_center_siege_with_belfry,   1),
      # (party_set_slot,"p_spacestation_9", slot_center_siege_with_belfry,   1),
      # (party_set_slot,"p_spacestation_10", slot_center_siege_with_belfry,   0),
      # (party_set_slot,"p_spacestation_11", slot_center_siege_with_belfry,   1),
      # (party_set_slot,"p_spacestation_13", slot_center_siege_with_belfry,   1),
      # (party_set_slot,"p_spacestation_21", slot_center_siege_with_belfry,   1),
      # (party_set_slot,"p_spacestation_25", slot_center_siege_with_belfry,   1),
      # (party_set_slot,"p_spacestation_38", slot_center_siege_with_belfry,   1),
      # (party_set_slot,"p_spacestation_34", slot_center_siege_with_belfry,   1),
      # (party_set_slot,"p_spacestation_35", slot_center_siege_with_belfry,   1),
      # (party_set_slot,"p_spacestation_40", slot_center_siege_with_belfry,   1),
      
      # Towns
      
      # Villages
      (call_script, "script_center_change_trade_good_production", "p_minorplanet_56", "itm_smoked_fish", 60, 0),
      (call_script, "script_center_change_trade_good_production", "p_minorplanet_35", "itm_smoked_fish", 60, 0),
      (call_script, "script_center_change_trade_good_production", "p_minorplanet_36", "itm_smoked_fish", 60, 0),
      (call_script, "script_center_change_trade_good_production", "p_minorplanet_66", "itm_smoked_fish", 50, 0),
      (call_script, "script_center_change_trade_good_production", "p_minorplanet_67", "itm_smoked_fish", 50, 0),
      
      (try_for_range, ":minorplanet_no", minorplanet_begin, minorplanet_end),
        #Not setting production for the cattle meat here.
        (store_random_in_range, ":rand", minorplanet_prod_min, minorplanet_prod_max),
        (call_script, "script_center_change_trade_good_production", ":minorplanet_no", "itm_dried_meat", ":rand", 0),
        (store_random_in_range, ":rand", minorplanet_prod_min, minorplanet_prod_max),
        (call_script, "script_center_change_trade_good_production", ":minorplanet_no", "itm_pork", ":rand", 0),
        (store_random_in_range, ":rand", minorplanet_prod_min, minorplanet_prod_max),
        (call_script, "script_center_change_trade_good_production", ":minorplanet_no", "itm_bread", ":rand", 0),
        (store_random_in_range, ":rand", minorplanet_prod_min, minorplanet_prod_max),
        (call_script, "script_center_change_trade_good_production", ":minorplanet_no", "itm_apples", ":rand", 0),
        (store_random_in_range, ":rand", minorplanet_prod_min, minorplanet_prod_max),
        (call_script, "script_center_change_trade_good_production", ":minorplanet_no", "itm_cheese", ":rand", 0),
        (store_random_in_range, ":rand", minorplanet_prod_min, minorplanet_prod_max),
        (call_script, "script_center_change_trade_good_production", ":minorplanet_no", "itm_chicken", ":rand", 0),
        (store_random_in_range, ":rand", minorplanet_prod_min, minorplanet_prod_max),
        (call_script, "script_center_change_trade_good_production", ":minorplanet_no", "itm_honey", ":rand", 0),
        (store_random_in_range, ":rand", minorplanet_prod_min, minorplanet_prod_max),
        (call_script, "script_center_change_trade_good_production", ":minorplanet_no", "itm_cabbages", ":rand", 0),
        (store_random_in_range, ":rand", minorplanet_prod_min, minorplanet_prod_max),
        (call_script, "script_center_change_trade_good_production", ":minorplanet_no", "itm_butter", ":rand", 0),
        (store_random_in_range, ":rand", minorplanet_prod_min, minorplanet_prod_max),
        (call_script, "script_center_change_trade_good_production", ":minorplanet_no", "itm_wine", ":rand", 0),
        (store_random_in_range, ":rand", minorplanet_prod_min, minorplanet_prod_max),
        (call_script, "script_center_change_trade_good_production", ":minorplanet_no", "itm_flour", ":rand", 0),
        (store_random_in_range, ":rand", minorplanet_prod_min, minorplanet_prod_max),
        (call_script, "script_center_change_trade_good_production", ":minorplanet_no", "itm_ale", ":rand", 0),
        (store_random_in_range, ":rand", minorplanet_prod_min, minorplanet_prod_max),
        (call_script, "script_center_change_trade_good_production", ":minorplanet_no", "itm_apples", ":rand", 0),
        (store_random_in_range, ":rand", minorplanet_prod_min, minorplanet_prod_max),
        (call_script, "script_center_change_trade_good_production", ":minorplanet_no", "itm_grain", ":rand", 0),
        (store_random_in_range, ":rand", minorplanet_prod_min, minorplanet_prod_max),
        (call_script, "script_center_change_trade_good_production", ":minorplanet_no", "itm_oil", ":rand", 0),
      (try_end),
      
      
      
      (try_for_range, ":minorplanet_no", minorplanet_begin, minorplanet_end),
        (store_random_in_range, ":random_land_quality", 0, 5),
        (party_set_slot, ":minorplanet_no", slot_minorplanet_land_quality, ":random_land_quality"),
        
        (store_random_in_range, ":random_cattle", 25, 75),
        (party_set_slot, ":minorplanet_no", slot_minorplanet_number_of_cattle, ":random_cattle"),
        #Reassigning the cattle production in the village
        (store_sub, ":production", ":random_cattle", 10),
        (val_div, ":production", 2),
        (call_script, "script_center_change_trade_good_production", ":minorplanet_no", "itm_cattle_meat", ":production", 0),
        
        
        (store_sub, ":offset", ":minorplanet_no", minorplanet_begin),
        
        (store_add, ":exterior_scene_no", "scn_minorplanet_1", ":offset"),
        (party_set_slot,":minorplanet_no", slot_spacestation_exterior, ":exterior_scene_no"),      #SW set village scene
        
        #SW debug
        # (assign, reg3, ":minorplanet_no"), #SW debug
        # (assign, reg4, ":offset"), #SW debug
        # (assign, reg5, ":exterior_scene_no"), #SW debug
        # (display_log_message, "@minorplanet_no = {reg3}, offset = {reg4}, exterior_scene_no = {reg5}"),   #SW debug
        
        (store_add, ":store_troop_no", "trp_minorplanet_admin_1", ":offset"),
        (party_set_slot,":minorplanet_no", slot_mainplanet_elder, ":store_troop_no"),
        
        (party_set_slot,":minorplanet_no", slot_party_type, spt_minorplanet),
        (party_set_slot,":minorplanet_no", slot_minorplanet_raided_by, -1),
        
        (call_script, "script_refresh_minorplanet_merchant_inventory", ":minorplanet_no"),
        (call_script, "script_refresh_minorplanet_merchant_inventory", ":minorplanet_no"),
        
        (call_script, "script_refresh_minorplanet_defenders", ":minorplanet_no"),
        (call_script, "script_refresh_minorplanet_defenders", ":minorplanet_no"),
        (call_script, "script_refresh_minorplanet_defenders", ":minorplanet_no"),
        (call_script, "script_refresh_minorplanet_defenders", ":minorplanet_no"),
        
        #Swy - 0.9.0.4 moved the initial aura effect to this init part
        (party_add_particle_system, ":minorplanet_no", "psys_planet_icon_atmospheric_effect"),
      (try_end),
      
      
      #      (store_sub, ":item_to_slot", slot_mainplanet_trade_good_productions_begin, trade_goods_begin),
      #      (try_for_range, ":center_no", centers_begin, centers_end),
      #        (str_clear, s3),
      #        (this_or_next|is_between, ":center_no", mainplanets_begin, mainplanets_end),
      #        (is_between, ":center_no", minorplanet_begin, minorplanet_end),
      #        (try_for_range, ":cur_good", trade_goods_begin, trade_goods_end),
      #          (store_add, ":cur_good_slot", ":cur_good", ":item_to_slot"),
      #          (str_store_party_name, s1, ":center_no"),
      #          (str_store_item_name, s2, ":cur_good"),
      #          (party_get_slot, ":center_production", ":center_no", ":cur_good_slot"),
      #          (assign, reg0, ":center_production"),
      #          (str_store_string, s3, "@{s3}^{s1} production for {s2}: {reg0}"),
      #        (try_end),
      #        (add_party_note_from_sreg, ":center_no", 2, s3, 0),
      #      (try_end),
      
      (try_for_range, ":center_no", centers_begin, centers_end),
        (party_set_slot, ":center_no", slot_center_last_spotted_enemy, -1),
        (party_set_slot, ":center_no", slot_center_is_besieged_by, -1),
        (party_set_slot, ":center_no", slot_center_last_taken_by_troop, -1),
        #Assigning random prosperity
        (store_random_in_range, ":random_prosperity_adder", -25, 15),
        (call_script, "script_get_center_ideal_prosperity", ":center_no"),
        (assign, ":prosperity", reg0),
        (val_add, ":prosperity", ":random_prosperity_adder"),
        (try_begin),
          (party_slot_eq, ":center_no", slot_party_type, spt_mainplanet),
          (val_add, ":prosperity", 20),
        (try_end),
        (val_clamp, ":prosperity", 0, 100),
        (party_set_slot, ":center_no", slot_mainplanet_prosperity, ":prosperity"),
      (try_end),
      
      #SW - moved after script_give_center_to_lord to have faction specific soldiers
      # #Initialize walkers
      # (try_for_range, ":center_no", centers_begin, centers_end),
      # (this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_mainplanet),
      # (party_slot_eq, ":center_no", slot_party_type, spt_minorplanet),
      # (try_for_range, ":walker_no", 0, num_town_walkers),
      # (call_script, "script_center_set_walker_to_type", ":center_no", ":walker_no", walkert_default),
      # (try_end),
      # (try_end),
      
      # Troops:
      
      #--------------------------------------------------------------------------------------------------------------------
      #SW - commented out old banner assigned and added new script written by grailknighthero
      
      # # Assign banners and renown.
      # # We assume there are enough banners for all faction heroes.
      # (assign, ":num_khergit_lords_assigned", 0),
      
      # (try_for_range, ":faction_hero", faction_heroes_begin, faction_heroes_end),
      # (store_troop_faction, ":faction_hero_faction", ":faction_hero"),
      # (try_begin),
      # (eq, ":faction_hero_faction", "fac_huttcartel"), #Khergit Khanate
      # (store_add, ":huttcartel_banners_begin", banner_scene_props_begin, khergit_banners_begin_offset),
      # (store_add, ":banner_id", ":huttcartel_banners_begin", ":num_khergit_lords_assigned"),
      # (troop_set_slot, ":faction_hero", slot_troop_banner_scene_prop, ":banner_id"),
      # (val_add, ":num_khergit_lords_assigned", 1),
      # (else_try),
      # (store_sub, ":hero_offset", ":faction_hero", faction_heroes_begin),
      # (val_sub, ":hero_offset", ":num_khergit_lords_assigned"),#Remove khergits from offset since their banners are assigned above here
      # (try_begin),
      # (gt, ":hero_offset", khergit_banners_begin_offset),#Do not add khergit banners to non-khergit lords
      # (val_add, ":hero_offset", khergit_banners_end_offset),
      # (val_sub, ":hero_offset", khergit_banners_begin_offset),
      # (try_end),
      # (store_add, ":banner_id", banner_scene_props_begin, ":hero_offset"),
      # (troop_set_slot, ":faction_hero", slot_troop_banner_scene_prop, ":banner_id"),
      # (try_end),
      # (store_character_level, ":level", ":faction_hero"),
      # (store_mul, ":renown", ":level", ":level"),
      # (val_div, ":renown", 2),
      # (try_begin),
      # (faction_slot_eq, ":faction_hero_faction", slot_faction_leader, ":faction_hero"),
      # (troop_set_slot, ":faction_hero", slot_troop_loyalty, 100),
      # (store_random_in_range, ":random_renown", 250, 400),
      # (else_try),
      # (store_random_in_range, ":random_loyalty", 50, 100),
      # (troop_set_slot, ":faction_hero", slot_troop_loyalty, ":random_loyalty"),
      # (store_random_in_range, ":random_renown", 100, 200),
      # (try_end),
      # (val_add, ":renown", ":random_renown"),
      # (troop_set_slot, ":faction_hero", slot_troop_renown, ":renown"),
      # (store_random_in_range, ":random_readiness", 0, 100),
      # (troop_set_slot, ":faction_hero", slot_troop_readiness_to_join_army, ":random_readiness"),
      # (troop_set_slot, ":faction_hero", slot_troop_readiness_to_follow_orders, 100),
      # (troop_set_slot, ":faction_hero", slot_troop_player_order_state, spai_undefined),
      # (troop_set_slot, ":faction_hero", slot_troop_player_order_object, -1),
      # (try_end),
      
      # #Correcting banners according to the player banner
      # (troop_get_slot, ":selected_banner_spr", "trp_player", slot_troop_banner_scene_prop),
      # (assign, ":end_cond", faction_heroes_end),
      # (try_for_range, ":cur_troop", faction_heroes_begin, ":end_cond"),
      # (troop_slot_eq, ":cur_troop", slot_troop_banner_scene_prop, ":selected_banner_spr"),
      # (troop_set_slot, ":cur_troop", slot_troop_banner_scene_prop, banner_scene_props_end_minus_one),
      # (assign, ":end_cond", 0),
      # (try_end),
      
      #SW - new banner assigned script from grailknighthero
      (try_for_range, ":faction_hero", faction_heroes_begin, faction_heroes_end),
        (store_troop_faction, ":faction_hero_faction", ":faction_hero"),
        (try_begin),
          (eq, ":faction_hero_faction", "fac_galacticempire"), #Swadia = Empire
          (troop_set_slot, ":faction_hero", slot_troop_banner_scene_prop, "spr_banner_a"),
        (else_try),
          (eq, ":faction_hero_faction", "fac_rebelalliance"), #Vaegir = Rebels
          (troop_set_slot, ":faction_hero", slot_troop_banner_scene_prop, "spr_banner_b"),
        (else_try),
          (eq, ":faction_hero_faction", "fac_huttcartel"), #Khergit Khanate = Hutt
          (troop_set_slot, ":faction_hero", slot_troop_banner_scene_prop, "spr_banner_c"),
          #(else_try),
          #  (eq, ":faction_hero_faction", "fac_faction_4"), #Nord
          #  (troop_set_slot, ":faction_hero", slot_troop_banner_scene_prop, "spr_banner_d"),
          #(else_try),
          #  (eq, ":faction_hero_faction", "fac_faction_5"), #Rhodok
          #  (troop_set_slot, ":faction_hero", slot_troop_banner_scene_prop, "spr_banner_e"),
        (try_end),
        (store_character_level, ":level", ":faction_hero"),
        (store_mul, ":renown", ":level", ":level"),
        (val_div, ":renown", 2),
        (try_begin),
          (faction_slot_eq, ":faction_hero_faction", slot_faction_leader, ":faction_hero"),
          (troop_set_slot, ":faction_hero", slot_troop_loyalty, 100),
          (store_random_in_range, ":random_renown", 250, 400),
        (else_try),
          (store_random_in_range, ":random_loyalty", 50, 100),
          (troop_set_slot, ":faction_hero", slot_troop_loyalty, ":random_loyalty"),
          (store_random_in_range, ":random_renown", 100, 200),
        (try_end),
        (val_add, ":renown", ":random_renown"),
        (troop_set_slot, ":faction_hero", slot_troop_renown, ":renown"),
        (store_random_in_range, ":random_readiness", 0, 100),
        (troop_set_slot, ":faction_hero", slot_troop_readiness_to_join_army, ":random_readiness"),
        (troop_set_slot, ":faction_hero", slot_troop_readiness_to_follow_orders, 100),
        (troop_set_slot, ":faction_hero", slot_troop_player_order_state, spai_undefined),
        (troop_set_slot, ":faction_hero", slot_troop_player_order_object, -1),
      (try_end),
      
      #--------------------------------------------------------------------------------------------------------------------
      
      #SW - modified script_give_center_to_lord
      #TEST
      #(call_script, "script_give_center_to_lord", "p_mandalore",  "trp_player", 0),
      #(call_script, "script_give_center_to_lord", "p_christophsis",  "trp_player", 0),
      #(call_script, "script_give_center_to_lord", "p_endor",  "trp_player", 0),
      #(call_script, "script_give_center_to_lord", "p_corellia",  "trp_player", 0),
      (call_script, "script_give_center_to_lord", "p_mandalore",  "trp_knight_1_4", 0),
      (call_script, "script_give_center_to_lord", "p_christophsis",  "trp_knight_1_7", 0),
      (call_script, "script_give_center_to_lord", "p_endor",  "trp_knight_1_3", 0),
      (call_script, "script_give_center_to_lord", "p_corellia",  "trp_knight_1_2", 0),
      (call_script, "script_give_center_to_lord", "p_naboo",  "trp_knight_1_1", 0),
      (call_script, "script_give_center_to_lord", "p_kessel",  "trp_knight_1_14", 0),
      (call_script, "script_give_center_to_lord", "p_dantooine",  "trp_knight_2_11", 0),
      (call_script, "script_give_center_to_lord", "p_geonosis",  "trp_knight_1_5", 0),
      (call_script, "script_give_center_to_lord", "p_mon_cal",  "trp_knight_2_9", 0),
      (call_script, "script_give_center_to_lord", "p_kashyyyk", "trp_knight_2_4", 0),
      (call_script, "script_give_center_to_lord", "p_hoth", "trp_knight_2_3", 0),
      (call_script, "script_give_center_to_lord", "p_gamorr", "trp_knight_3_10", 0),
      (call_script, "script_give_center_to_lord", "p_yavin_iv", "trp_rebelalliance_lord", 0),
      (call_script, "script_give_center_to_lord", "p_tatooine", "trp_huttcartel_lord", 0),
      (call_script, "script_give_center_to_lord", "p_manaan", "trp_knight_1_10", 0),
      (call_script, "script_give_center_to_lord", "p_coruscant", "trp_galacticempire_lord", 0),
      (call_script, "script_give_center_to_lord", "p_ryloth", "trp_knight_3_1", 0),
      (call_script, "script_give_center_to_lord", "p_nalhutta", "trp_knight_3_2", 0),
      #SW - new towns, town_19, town_20, town_21
      (call_script, "script_give_center_to_lord", "p_bothawui", "trp_knight_2_12", 0),
      (call_script, "script_give_center_to_lord", "p_mustafar", "trp_knight_1_17", 0),
      (call_script, "script_give_center_to_lord", "p_kamino", "trp_knight_1_20", 0),
      #SWY SWC 0.9.0.3 - Added Taris
      (call_script, "script_give_center_to_lord", "p_taris", "trp_knight_taris", 0),
      
      #SW - modified script_give_center_to_faction_aux so outposts (ie. castles) go to different factions (1=empire, 2=rebel, 3=hutt)
      #(call_script, "script_give_center_to_faction_aux", "p_spacestation_1", "fac_rebelalliance"),
      
      #Corellia Outpost - Give to the Rebels (Currently Empire)
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_2", "fac_rebelalliance"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_3", "fac_rebelalliance"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_4", "fac_rebelalliance"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_5", "fac_galacticempire"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_6", "fac_galacticempire"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_7", "fac_rebelalliance"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_8", "fac_huttcartel"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_9", "fac_galacticempire"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_10", "fac_galacticempire"),
      
      #Avatar Platform - Give to the Empire (currently Rebels)
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_11", "fac_galacticempire"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_12", "fac_galacticempire"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_13", "fac_galacticempire"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_14", "fac_huttcartel"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_15", "fac_rebelalliance"),
      
      #Kashyyyk Outpost - Give to the Empire (currently Rebels)
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_16", "fac_galacticempire"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_17", "fac_galacticempire"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_18", "fac_rebelalliance"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_19", "fac_rebelalliance"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_20", "fac_huttcartel"),
      
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_21", "fac_galacticempire"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_22", "fac_galacticempire"),
      
      #Corellia Battlestation - Give to Rebels (Currently Empire)
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_23", "fac_rebelalliance"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_24", "fac_galacticempire"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_25", "fac_galacticempire"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_26", "fac_galacticempire"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_27", "fac_galacticempire"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_28", "fac_galacticempire"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_29", "fac_rebelalliance"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_30", "fac_huttcartel"),
      
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_31", "fac_huttcartel"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_32", "fac_huttcartel"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_33", "fac_galacticempire"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_34", "fac_rebelalliance"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_35", "fac_galacticempire"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_36", "fac_galacticempire"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_37", "fac_rebelalliance"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_38", "fac_huttcartel"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_39", "fac_rebelalliance"),
      (call_script, "script_give_center_to_faction_aux", "p_spacestation_40", "fac_huttcartel"),
      
      #@> swy - set outpost icons depending of the faction - new map icons by Vector Dalon
      (call_script, "script_swy_map_outpost_icon_routine","icon_outpost_imp","icon_outpost_reb","icon_outpost_hut"),
      (call_script, "script_swy_map_outpost_icon_routine","icon_XQ_04_Station_3","icon_XQ_04_Station_2","icon_XQ_04_Station_5"),
      
      # fill_minorplanet_bound_centers
      #pass 1: Give one village to each castle
      (try_for_range, ":cur_center", castles_begin, castles_end),
        (assign, ":min_dist", 999999),
        (assign, ":min_dist_village", -1),
        (try_for_range, ":cur_village", minorplanet_begin, minorplanet_end),
          (neg|party_slot_ge, ":cur_village", slot_minorplanet_bound_center, 1), #skip villages which are already bound.
          (store_distance_to_party_from_party, ":cur_dist", ":cur_village", ":cur_center"),
          (lt, ":cur_dist", ":min_dist"),
          (assign, ":min_dist", ":cur_dist"),
          (assign, ":min_dist_village", ":cur_village"),
        (try_end),
        (party_set_slot, ":min_dist_village", slot_minorplanet_bound_center, ":cur_center"),
        (store_faction_of_party, ":town_faction", ":cur_center"),
        (call_script, "script_give_center_to_faction_aux", ":min_dist_village", ":town_faction"),
      (try_end),
      
      # Give family castles to certain nobles.
      #SW - removed give family castles to certain nobles
      #(call_script, "script_give_center_to_lord", "p_spacestation_29", "trp_knight_2_10", 0), #Nelag_Castle
      #(call_script, "script_give_center_to_lord", "p_spacestation_30", "trp_knight_3_4", 0), #Asugan_Castle
      #(call_script, "script_give_center_to_lord", "p_spacestation_35", "trp_knight_1_15", 0), #Haringoth_Castle
      
      #SWTESTING
      # (call_script, "script_give_center_to_lord", "p_spacestation_1", "trp_player", 0),
      # (call_script, "script_give_center_to_lord", "p_spacestation_2", "trp_player", 0),
      # (call_script, "script_give_center_to_lord", "p_spacestation_3", "trp_player", 0),
      # (call_script, "script_give_center_to_lord", "p_spacestation_4", "trp_player", 0),
      # (call_script, "script_give_center_to_lord", "p_spacestation_5", "trp_player", 0),
      # (call_script, "script_give_center_to_lord", "p_spacestation_6", "trp_player", 0),
      # (call_script, "script_give_center_to_lord", "p_spacestation_7", "trp_player", 0),
      # (call_script, "script_give_center_to_lord", "p_spacestation_8", "trp_player", 0),
      # (call_script, "script_give_center_to_lord", "p_spacestation_9", "trp_player", 0),
      # (call_script, "script_give_center_to_lord", "p_spacestation_10", "trp_player", 0),
      
      #SW - give dagobah to Yoda
      (call_script, "script_give_center_to_lord", "p_spacestation_4", "trp_knight_2_8", 0), #Dagobah to Yoda
      
      #pass 2: Give other villages to closest town.
      (try_for_range, ":cur_village", minorplanet_begin, minorplanet_end),
        (neg|party_slot_ge, ":cur_village", slot_minorplanet_bound_center, 1), #skip villages which are already bound.
        (assign, ":min_dist", 999999),
        (assign, ":min_dist_town", -1),
        (try_for_range, ":cur_town", mainplanets_begin, mainplanets_end),
          (store_distance_to_party_from_party, ":cur_dist", ":cur_village", ":cur_town"),
          (lt, ":cur_dist", ":min_dist"),
          (assign, ":min_dist", ":cur_dist"),
          (assign, ":min_dist_town", ":cur_town"),
        (try_end),
        (party_set_slot, ":cur_village", slot_minorplanet_bound_center, ":min_dist_town"),
        (store_faction_of_party, ":town_faction", ":min_dist_town"),
        (call_script, "script_give_center_to_faction_aux", ":cur_village", ":town_faction"),
      (try_end),
      
      (try_for_range, ":center_no", centers_begin, centers_end),
        (store_faction_of_party, ":original_faction", ":center_no"),
        (faction_get_slot, ":culture", ":original_faction", slot_faction_culture),
        (party_set_slot, ":center_no", slot_center_culture,  ":culture"),
        (party_set_slot, ":center_no", slot_center_original_faction,  ":original_faction"),
        (party_set_slot, ":center_no", slot_center_ex_faction,  ":original_faction"),
      (try_end),
      
      #SW - moved after script_give_center_to_lord to have faction specific soldiers
      #Initialize walkers
      (try_for_range, ":center_no", centers_begin, centers_end),
        (this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_mainplanet),
        (party_slot_eq, ":center_no", slot_party_type, spt_minorplanet),
        (try_for_range, ":walker_no", 0, num_town_walkers),
          (call_script, "script_center_set_walker_to_type", ":center_no", ":walker_no", walkert_default),
        (try_end),
      (try_end),
      
      (call_script, "script_update_minorplanet_market_towns"),
      
      #Assign only family structures of lords who doesn't have a father. Other troops will get the family tree automatically
      #SW - commented out faction knight wife, daughters
      # (troop_set_slot,"trp_knight_1_1",  slot_troop_spouse, "trp_knight_1_1_wife"),
      # (troop_set_slot,"trp_knight_2_1",  slot_troop_spouse, "trp_knight_2_1_wife"),
      # (troop_set_slot,"trp_knight_3_1",  slot_troop_spouse, "trp_knight_3_1_wife"),
      # (troop_set_slot,"trp_knight_4_1",  slot_troop_spouse, "trp_knight_4_1_wife"),
      # (troop_set_slot,"trp_knight_5_1",  slot_troop_spouse, "trp_knight_5_1_wife"),
      
      # (troop_set_slot,"trp_knight_1_2",  slot_troop_spouse, "trp_knight_1_2_wife"),
      # (troop_set_slot,"trp_knight_2_2",  slot_troop_spouse, "trp_knight_2_2_wife"),
      # (troop_set_slot,"trp_knight_3_2",  slot_troop_spouse, "trp_knight_3_2_wife"),
      # (troop_set_slot,"trp_knight_4_2",  slot_troop_spouse, "trp_knight_4_2_wife"),
      # (troop_set_slot,"trp_knight_5_2",  slot_troop_spouse, "trp_knight_5_2_wife"),
      
      # (troop_set_slot,"trp_knight_1_3",  slot_troop_spouse, "trp_knight_1_1_daughter"),
      # (troop_set_slot,"trp_knight_2_3",  slot_troop_spouse, "trp_knight_2_1_daughter"),
      # (troop_set_slot,"trp_knight_3_3",  slot_troop_spouse, "trp_knight_3_1_daughter"),
      # (troop_set_slot,"trp_knight_4_3",  slot_troop_spouse, "trp_knight_4_1_daughter"),
      # (troop_set_slot,"trp_knight_5_3",  slot_troop_spouse, "trp_knight_5_1_daughter"),
      
      # (troop_set_slot,"trp_knight_1_4",  slot_troop_spouse, "trp_knight_1_2_daughter"),
      # (troop_set_slot,"trp_knight_2_4",  slot_troop_spouse, "trp_knight_2_2_daughter"),
      # (troop_set_slot,"trp_knight_3_4",  slot_troop_spouse, "trp_knight_3_2_daughter"),
      # (troop_set_slot,"trp_knight_4_4",  slot_troop_spouse, "trp_knight_4_2_daughter"),
      # (troop_set_slot,"trp_knight_5_4",  slot_troop_spouse, "trp_knight_5_2_daughter"),
      
      ##      (troop_set_slot,"trp_rebelalliance_lord_a", slot_troop_spouse, "trp_rebelalliance_lady_a"),
      ##      (troop_set_slot,"trp_rebelalliance_lord_a", slot_troop_son, "trp_rebelalliance_lord_b"),
      ##      (troop_set_slot,"trp_rebelalliance_lord_a", slot_troop_sibling, "trp_rebelalliance_lady_c"),
      ##      (troop_set_slot,"trp_rebelalliance_lord_a", slot_troop_daughter, "trp_rebelalliance_lady_e"),
      ##
      ##      (troop_set_slot,"trp_rebelalliance_lord_b", slot_troop_daughter, "trp_rebelalliance_lady_b"),
      ##      (troop_set_slot,"trp_rebelalliance_lord_c", slot_troop_spouse, "trp_rebelalliance_lady_c"),
      ##      (troop_set_slot,"trp_rebelalliance_lord_d", slot_troop_daughter, "trp_rebelalliance_lady_d"),
      ##      (troop_set_slot,"trp_rebelalliance_lord_e", slot_troop_spouse, "trp_rebelalliance_lady_e"),
      ##      (troop_set_slot,"trp_rebelalliance_lord_f", slot_troop_daughter, "trp_rebelalliance_lady_f"),
      ##      (troop_set_slot,"trp_rebelalliance_lord_g", slot_troop_spouse, "trp_rebelalliance_lady_g"),
      ##      (troop_set_slot,"trp_rebelalliance_lord_h", slot_troop_daughter, "trp_rebelalliance_lady_h"),
      ##      (troop_set_slot,"trp_rebelalliance_lord_i", slot_troop_spouse, "trp_rebelalliance_lady_i"),
      ##      (troop_set_slot,"trp_rebelalliance_lord_j", slot_troop_daughter, "trp_rebelalliance_lady_j"),
      
      ##      (try_for_range, ":troop_id", merchants_begin, merchants_end),
      ##        (troop_set_slot, ":troop_id", slot_troop_occupation, slto_merchant),
      ##      (try_end),
      
      (try_for_range, ":troop_id", faction_heroes_begin, faction_heroes_end),
        (try_begin),
          (store_troop_faction, ":faction_id", ":troop_id"),
          (is_between, ":faction_id", factions_begin, factions_end),
          (troop_set_slot, ":troop_id", slot_troop_original_faction, ":faction_id"),
          (try_begin),
            (is_between, ":troop_id", pretenders_begin, pretenders_end),
            (faction_set_slot, ":faction_id", slot_faction_has_rebellion_chance, 1),
          (else_try),
            (troop_set_slot, ":troop_id", slot_troop_occupation, slto_faction_hero),
          (try_end),
        (try_end),
        (assign, ":initial_wealth", 6000),
        (try_begin),
          (store_troop_faction, ":faction", ":troop_id"),
          (faction_slot_eq, ":faction", slot_faction_leader, ":troop_id"),
          (assign, ":initial_wealth", 20000),
        (try_end),
        (troop_set_slot, ":troop_id", slot_troop_wealth, ":initial_wealth"),
      (try_end),
      
      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),#add town garrisons
        #Add initial center wealth
        (assign, ":initial_wealth", 2000),
        (try_begin),
          (is_between, ":center_no", mainplanets_begin, mainplanets_end),
          (val_mul, ":initial_wealth", 2),
        (try_end),
        (party_set_slot, ":center_no", slot_mainplanet_wealth, ":initial_wealth"),
        
        (assign, ":garrison_strength", 13),
        (try_begin),
          (party_slot_eq, ":center_no", slot_party_type, spt_mainplanet),
          (assign, ":garrison_strength", 40),
        (try_end),
        (try_for_range, ":unused", 0, ":garrison_strength"),
          (call_script, "script_cf_reinforce_party", ":center_no"),
        (try_end),
        ## ADD some XP initially
        (store_div, ":xp_amount", ":garrison_strength", 8),
        (val_add, ":xp_amount", 4),
        (try_for_range, ":unused", 0, ":xp_amount"),
          (store_random_in_range, ":xp", 7000, 9000),
          (party_upgrade_with_xp, ":center_no", ":xp", 0),
        (try_end),
        
        #Fill town food stores upto half the limit
        (call_script, "script_center_get_food_store_limit", ":center_no"),
        (assign, ":food_store_limit", reg0),
        (val_div, ":food_store_limit", 2),
        (party_set_slot, ":center_no", slot_party_food_store, ":food_store_limit"),
        
        #create lord parties
        (party_get_slot, ":center_lord", ":center_no", slot_mainplanet_lord),
        (ge, ":center_lord", 1),
        (troop_slot_eq, ":center_lord", slot_troop_leaded_party, 0),
        (call_script, "script_create_faction_hero_party", ":center_lord", ":center_no"),
        (assign, ":lords_party", "$pout_party"),
        (party_attach_to_party, ":lords_party", ":center_no"),
        (party_set_slot, ":center_no", slot_mainplanet_player_odds, 1000),
      (try_end),
      
      (call_script, "script_complete_family_relations"),
      (call_script, "script_complete_family_relations"),
      
      (try_for_range, ":troop_id", faction_ladies_begin, faction_ladies_end),
        (troop_set_slot, ":troop_id", slot_troop_occupation, slto_faction_lady),
        (troop_get_slot, ":cur_family", ":troop_id", slot_troop_father),
        (try_begin),
          (eq, ":cur_family", 0),
          (troop_get_slot, ":cur_family", ":troop_id", slot_troop_spouse),
        (try_end),
        (try_begin),
          (gt, ":cur_family", 0),
          (call_script, "script_get_troop_attached_party", ":cur_family"),
          (assign, ":cur_center", reg0),
          (gt, ":cur_center", 0),
          (troop_set_slot, ":troop_id", slot_troop_cur_center, ":cur_center"),
        (else_try),
          (store_troop_faction, ":faction_no", ":troop_id"),
          (call_script, "script_cf_select_random_walled_center_with_faction", ":faction_no", -1),
          (assign, ":cur_center", reg0),
          (troop_set_slot, ":troop_id", slot_troop_cur_center, ":cur_center"),
        (try_end),
      (try_end),
      
      (try_for_range, ":troop_id", heroes_begin, heroes_end),
        (troop_slot_eq, ":troop_id", slot_troop_occupation, slto_faction_lady),
        (troop_get_slot, ":cur_father", ":troop_id", slot_troop_father),
        (gt, ":cur_father", 0),# Lovers for daughters only
        (store_random_in_range, ":random_no", 0, 100),
        (le, ":random_no", 80),
        (call_script, "script_cf_get_random_faction_hero_as_lover", ":troop_id"),#Can fail
        (assign, ":cur_lover", reg0),
        (troop_set_slot, ":troop_id", slot_troop_lover, ":cur_lover"),
        (troop_set_slot, ":cur_lover", slot_troop_lover, ":troop_id"),
      (try_end),
      
      (try_for_range, ":troop_id", heroes_begin, heroes_end),
        (troop_get_slot, ":in_relation_1", ":troop_id", slot_troop_spouse),
        (troop_get_slot, ":in_relation_2", ":troop_id", slot_troop_sibling),
        (troop_get_slot, ":in_relation_3", ":troop_id", slot_troop_daughter),
        (troop_get_slot, ":in_relation_4", ":troop_id", slot_troop_son),
        (troop_get_slot, ":in_relation_5", ":troop_id", slot_troop_father),
        (troop_get_slot, ":in_relation_6", ":troop_id", slot_troop_mother),
        (troop_get_slot, ":in_relation_7", ":troop_id", slot_troop_lover),
        #        (troop_get_slot, ":troop_rank", ":troop_id", slot_troop_faction_rank),
        (store_troop_faction, ":troop_faction", ":troop_id"),
        
        (assign, ":troop_enemy_count", 0),
        (try_for_range, ":i_enemy_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
          (troop_slot_ge, ":troop_id", ":i_enemy_slot", 1),
          (val_add, ":troop_enemy_count", 1),
        (try_end),
        
        (try_for_range, ":i_enemy_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
          (troop_set_slot, ":troop_id", ":i_enemy_slot", -1),
        (try_end),
        
        (store_random_in_range, ":random_enemy_count", 0, 4),
        (val_add, ":random_enemy_count", ":troop_enemy_count"),
        (val_min, ":random_enemy_count", 5),
        (try_for_range, ":unused", ":troop_enemy_count", ":random_enemy_count"),
          (assign, ":possible_enemy_count", 0),
          (try_for_range, ":enemy_troop_id", heroes_begin, heroes_end),
            (neq, ":enemy_troop_id", ":troop_id"),
            (neq, ":enemy_troop_id", ":in_relation_1"),
            (neq, ":enemy_troop_id", ":in_relation_2"),
            (neq, ":enemy_troop_id", ":in_relation_3"),
            (neq, ":enemy_troop_id", ":in_relation_4"),
            (neq, ":enemy_troop_id", ":in_relation_5"),
            (neq, ":enemy_troop_id", ":in_relation_6"),
            (neq, ":enemy_troop_id", ":in_relation_7"),
            (store_troop_faction, ":enemy_troop_faction", ":enemy_troop_id"),
            (eq, ":enemy_troop_faction", ":troop_faction"),
            #            (troop_get_slot, ":enemy_troop_rank", ":enemy_troop_id", slot_troop_faction_rank),
            #            (lt, ":enemy_troop_rank", 4),
            #            (lt, ":troop_rank", 4),
            (assign, ":marked_as_enemy", 0),
            (try_for_range, ":i_enemy_slot_mark", slot_troop_enemies_begin, slot_troop_enemies_end),
              (troop_slot_eq, ":troop_id", ":i_enemy_slot_mark", ":enemy_troop_id"),
              (assign, ":marked_as_enemy", 1),
            (try_end),
            (eq, ":marked_as_enemy", 0),
            (val_add, ":possible_enemy_count", 1),
          (try_end),
          (store_random_in_range, ":random_enemy", 0, ":possible_enemy_count"),
          (assign, ":possible_enemy_count", 0),
          (assign, ":result", -1),
          (try_for_range, ":enemy_troop_id", heroes_begin, heroes_end),
            (eq, ":result", -1),
            (neq, ":enemy_troop_id", ":troop_id"),
            (neq, ":enemy_troop_id", ":in_relation_1"),
            (neq, ":enemy_troop_id", ":in_relation_2"),
            (neq, ":enemy_troop_id", ":in_relation_3"),
            (neq, ":enemy_troop_id", ":in_relation_4"),
            (neq, ":enemy_troop_id", ":in_relation_5"),
            (neq, ":enemy_troop_id", ":in_relation_6"),
            (neq, ":enemy_troop_id", ":in_relation_7"),
            (store_troop_faction, ":enemy_troop_faction", ":enemy_troop_id"),
            (eq, ":enemy_troop_faction", ":troop_faction"),
            #            (troop_get_slot, ":enemy_troop_rank", ":enemy_troop_id", slot_troop_faction_rank),
            #            (lt, ":enemy_troop_rank", 4),
            #            (lt, ":troop_rank", 4),
            (assign, ":marked_as_enemy", 0),
            (try_for_range, ":i_enemy_slot_mark", slot_troop_enemies_begin, slot_troop_enemies_end),
              (troop_slot_eq, ":troop_id", ":i_enemy_slot_mark", ":enemy_troop_id"),
              (assign, ":marked_as_enemy", 1),
            (try_end),
            (eq, ":marked_as_enemy", 0),
            (val_add, ":possible_enemy_count", 1),
            (gt, ":possible_enemy_count", ":random_enemy"),
            (assign, ":result", ":enemy_troop_id"),
          (try_end),
          
          (gt, ":result", 0),
          (assign, ":enemy_troop_enemy_count", 0),
          (try_for_range, ":i_enemy_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
            (troop_slot_ge, ":result", ":i_enemy_slot", 1),
            (val_add, ":enemy_troop_enemy_count", 1),
          (try_end),
          
          (lt, ":enemy_troop_enemy_count", 5),
          
          (assign, ":troop_enemy_count", 0),
          (try_for_range, ":i_enemy_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
            (troop_slot_ge, ":troop_id", ":i_enemy_slot", 1),
            (val_add, ":troop_enemy_count", 1),
          (try_end),
          
          (store_add, ":cur_slot", slot_troop_enemies_begin, ":troop_enemy_count"),
          (troop_set_slot, ":troop_id", ":cur_slot", ":result"),
          (store_add, ":cur_slot", slot_troop_enemies_begin, ":enemy_troop_enemy_count"),
          (troop_set_slot, ":result", ":cur_slot", ":troop_id"),
        (try_end),
      (try_end),
      
      (try_for_range, ":unused", 0, 8),
        (call_script, "script_spawn_bandits"),
      (try_end),
      
      #Tavern recruitment and ale START 2/3
      (call_script, "script_add_tavern_troops"),
      #Tavern recruitment and ale END 2/3
      
      (set_spawn_radius, 50),
      (try_for_range, ":unused", 0, 25),
        (spawn_around_party,"p_main_party","pt_jawas"),
      (try_end),
      
      (try_for_range, ":unused", 0, 6),
        (call_script, "script_update_trade_good_prices"),
      (try_end),
      
      (call_script, "script_assign_lords_to_empty_centers"),
      
      (call_script, "script_update_mercenary_units_of_towns"),
      (call_script, "script_update_companion_candidates_in_taverns"),
      (call_script, "script_update_ransom_brokers"),
      (call_script, "script_update_tavern_travelers"),
      (call_script, "script_update_tavern_minstels"),
      (call_script, "script_update_booksellers"),
      #SW - added script_update_fs_merchants, script_update_ce_merchants, script_update_iw_merchants, script_update_dp_merchants, script_update_ps_merchants, script_update_fs_trainers
      (call_script, "script_update_fs_trainers"),
      (call_script, "script_update_ce_merchants"),
      (call_script, "script_update_iw_merchants"),
      (call_script, "script_update_dp_merchants"),
      (call_script, "script_update_ps_merchants"),
      (call_script, "script_update_fs_merchants"),
      
      (try_for_range, ":minorplanet_no", minorplanet_begin, minorplanet_end),
        (call_script, "script_update_volunteer_troops_in_village", ":minorplanet_no"),
      (try_end),
      (try_for_range, ":cur_faction", factions_begin, factions_end),
        (call_script, "script_update_faction_notes", ":cur_faction"),
        (store_random_in_range, ":random_no", -60, 0),
        (faction_set_slot, ":faction_no", slot_faction_ai_last_offensive_time, ":random_no"),
      (try_end),
      (try_for_range, ":cur_troop", faction_heroes_begin, faction_heroes_end),
        (call_script, "script_update_troop_notes", ":cur_troop"),
      (try_end),
      (try_for_range, ":cur_center", centers_begin, centers_end),
        (call_script, "script_update_center_notes", ":cur_center"),
      (try_end),
      (call_script, "script_update_troop_notes", "trp_player"),
      
      (try_for_range, ":faction_no", factions_begin, factions_end),
        (call_script, "script_faction_recalculate_strength", ":faction_no"),
      (try_end),
      
      ##      (assign, "$players_faction", "fac_galacticempire"),
      ##      (call_script, "script_give_center_to_lord", "p_dantooine", "trp_player", 0),
      ##      (call_script, "script_give_center_to_lord", "p_coruscant", "trp_player", 0),
      ####      (call_script, "script_give_center_to_lord", "p_spacestation_10", "trp_player", 0),
      ##      (assign, "$g_spacestation_requested_by_player", "p_spacestation_10"),
      (call_script, "script_get_player_party_morale_values"),
      (party_set_morale, "p_main_party", reg0),
      
      #@> swy - set aura colors depending of the faction
      (call_script, "script_swy_map_planet_aura_routine",mainplanets_begin,mainplanets_end),
      (call_script, "script_swy_map_planet_aura_routine",minorplanet_begin,minorplanet_end),

      # Kham - Set Autofire Weapons
      (call_script, "script_set_auto_fire_weapon_slot"), 
  ]),
  
  
  # script_game_event_party_encounter:
  # This script is called from the game engine whenever player party encounters another party or a battle on the world map
  # INPUT:
  # param1: encountered_party
  # param2: second encountered_party (if this was a battle
  ("game_event_party_encounter",
    [
      (store_script_param_1, "$g_encountered_party"),
      (store_script_param_2, "$g_encountered_party_2"),# encountered_party2 is set when we come across a battle or siege, otherwise it's a negative value
      #       (store_encountered_party, "$g_encountered_party"),
      #       (store_encountered_party2,"$g_encountered_party_2"), # encountered_party2 is set when we come across a battle or siege, otherwise it's a minus value
      (store_faction_of_party, "$g_encountered_party_faction","$g_encountered_party"),
      (store_relation, "$g_encountered_party_relation", "$g_encountered_party_faction", "fac_player_faction"),
      (party_get_slot, "$g_encountered_party_type", "$g_encountered_party", slot_party_type),
      (party_get_template_id,"$g_encountered_party_template","$g_encountered_party"),
      #       (try_begin),
      #         (gt, "$g_encountered_party_2", 0),
      #         (store_faction_of_party, "$g_encountered_party_2_faction","$g_encountered_party_2"),
      #         (store_relation, "$g_encountered_party_2_relation", "$g_encountered_party_2_faction", "fac_player_faction"),
      #         (party_get_template_id,"$g_encountered_party_2_template","$g_encountered_party_2"),
      #       (else_try),
      #         (assign, "$g_encountered_party_2_faction",-1),
      #         (assign, "$g_encountered_party_2_relation", 0),
      #         (assign,"$g_encountered_party_2_template", -1),
      #       (try_end),
      
      #NPC companion changes begin
      (call_script, "script_party_count_fit_regulars", "p_main_party"),
      (assign, "$playerparty_prebattle_regulars", reg0),
      
      #        (try_begin),
      #            (assign, "$player_party__regulars", 0),
      #            (call_script, "script_party_count_fit_regulars", "p_main_party"),
      #            (gt, reg0, 0),
      #            (assign, "$player_party_contains_regulars", 1),
      #        (try_end),
      #NPC companion changes end
      
      
      (assign, "$g_last_rest_center", -1),
      (assign, "$talk_context", 0),
      (assign,"$g_player_surrenders",0),
      (assign,"$g_enemy_surrenders",0),
      (assign, "$g_leave_encounter",0),
      (assign, "$g_engaged_enemy", 0),
      #       (assign,"$waiting_for_arena_fight_result", 0),
      #       (assign,"$arena_bet_amount",0),
      #       (assign,"$g_player_raiding_village",0),
      (try_begin),
        (neg|is_between, "$g_encountered_party", centers_begin, centers_end),
        (rest_for_hours, 0), #stop waiting
      (try_end),
      #       (assign, "$g_permitted_to_center",0),
      (assign, "$new_encounter", 1), #check this in the menu.
      (try_begin),
        (lt, "$g_encountered_party_2",0), #Normal encounter. Not battle or siege.
        (try_begin),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_mainplanet),
          (jump_to_menu, "mnu_spacestation_outside"),
        (else_try),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
          (jump_to_menu, "mnu_spacestation_outside"),
        (else_try),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_ship),
          (jump_to_menu, "mnu_ship_reembark"),
        (else_try),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_minorplanet),
          (jump_to_menu, "mnu_village"),
        (else_try),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_cattle_herd),
          (jump_to_menu, "mnu_cattle_herd"),
        (else_try),
          (is_between, "$g_encountered_party", training_grounds_begin, training_grounds_end),
          (jump_to_menu, "mnu_training_ground"),
          # (else_try),
          # (eq, "$g_encountered_party", "p_zendar"),
          # (jump_to_menu, "mnu_zendar"),
          # (else_try),
          # (eq, "$g_encountered_party", "p_salt_mine"),
          # (jump_to_menu, "mnu_salt_mine"),
          # (else_try),
          # (eq, "$g_encountered_party", "p_four_ways_inn"),
          # (jump_to_menu, "mnu_four_ways_inn"),
          # (else_try),
          # (eq, "$g_encountered_party", "p_test_scene"),
          # (jump_to_menu, "mnu_test_scene"),
          # (else_try),
          # (eq, "$g_encountered_party", "p_battlefields"),
          # (jump_to_menu, "mnu_battlefields"),
          # (else_try),
          # (eq, "$g_encountered_party", "p_training_ground"),
          # (jump_to_menu, "mnu_tutorial"),
        (else_try),
          (eq, "$g_encountered_party", "p_camp_bandits"),
          (jump_to_menu, "mnu_camp"),
          #SW MF added Trade Alliance base
        (else_try),
          (this_or_next|eq, "$g_encountered_party", "p_shipyard_trade_federation"),
          (this_or_next|eq, "$g_encountered_party", "p_shipyard_kuat"),
          (this_or_next|eq, "$g_encountered_party", "p_shipyard_raxus"),
          (this_or_next|eq, "$g_encountered_party", "p_shipyard_corellia"),
          (this_or_next|eq, "$g_encountered_party", "p_shipyard_moncal"),
          (this_or_next|eq, "$g_encountered_party", "p_shipyard_mandalore"),
          (eq, "$g_encountered_party", "p_shipyard_fondor"),
          (jump_to_menu, "mnu_trade_base"),
        (else_try),
          (jump_to_menu, "mnu_simple_encounter"),
        (try_end),
      (else_try), #Battle or siege
        (try_begin),
          (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_mainplanet),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
          (try_begin),
            (eq, "$auto_enter_town", "$g_encountered_party"),
            (jump_to_menu, "mnu_town"),
          (else_try),
            (eq, "$auto_besiege_town", "$g_encountered_party"),
            (jump_to_menu, "mnu_besiegers_camp_with_allies"),
          (else_try),
            (jump_to_menu, "mnu_join_siege_outside"),
          (try_end),
        (else_try),
          (jump_to_menu, "mnu_pre_join"),
        (try_end),
      (try_end),
      (assign,"$auto_enter_town",0),
      (assign,"$auto_besiege_town",0),
  ]),
  
  #script_game_event_simulate_battle:
  # This script is called whenever the game simulates the battle between two parties on the map.
  # INPUT:
  # param1: Defender Party
  # param2: Attacker Party
  ("game_event_simulate_battle",
    [
      (store_script_param_1, ":root_defender_party"),
      (store_script_param_2, ":root_attacker_party"),
      
      # #--------------------------------------------------------------------------------------------------------------------------------
      # #SW _ DON'T USE THIS WORKAROUND BELOW - APPARENTLY IT CORRUPTS SAVED GAMES
      # #--------------------------------------------------------------------------------------------------------------------------------
      # #SW - START OF WORKAROUND FOR SCRIPT ERROR
      # (assign, ":root_defender_party_found", 0),
      # (assign, ":root_attacker_party_found", 0),
      # (try_for_parties, ":cur_party"),
      # (try_begin),
      # #check if root_defender_party is valid
      # (eq, ":cur_party", ":root_defender_party"),
      # (assign, ":root_defender_party_found", 1),
      # (try_end),
      # (try_begin),
      # #check if root_attacker_party is valid
      # (eq, ":cur_party", ":root_attacker_party"),
      # (assign, ":root_attacker_party_found", 1),
      # (try_end),
      # (try_end),
      # (assign, ":error", -1),
      # (try_begin),
      # (this_or_next|eq, ":root_defender_party_found", 0),
      # (eq, ":root_attacker_party_found", 0),
      # #one or more parties was not found, error!
      # (assign, ":error", 1),
      # (else_try),
      # (assign, ":error", 0),
      # (try_end),
      # #check if there were any errors
      # (try_begin),
      # (eq, ":error", 1),
      # #(display_log_message, "@DEBUG: ERROR - either the root_defender_party or root_attacker_party were NOT found!"),
      # (else_try),
      # #SW - END OF WORKAROUND FOR SCRIPT ERROR
      # #--------------------------------------------------------------------------------------------------------------------------------
      
      (try_begin),
        (store_faction_of_party, ":defender_faction", ":root_defender_party"),
        (store_faction_of_party, ":attacker_faction", ":root_attacker_party"),
        (neq, ":defender_faction", "fac_player_faction"),
        (neq, ":attacker_faction", "fac_player_faction"),
        (store_relation, ":reln", ":defender_faction", ":attacker_faction"),
        (ge, ":reln", 0),
        (set_trigger_result, 1),
      (else_try),
        (assign, ":trigger_result", 0),
        
        (try_begin),
          (this_or_next|eq, "$g_battle_simulation_cancel_for_party", ":root_defender_party"),
          (eq, "$g_battle_simulation_cancel_for_party", ":root_attacker_party"),
          (assign, "$g_battle_simulation_cancel_for_party", -1),
          (assign, "$auto_enter_town", "$g_battle_simulation_auto_enter_town_after_battle"),
          (assign, ":trigger_result", 1),
        (else_try),
          (try_begin),
            (this_or_next|party_slot_eq, ":root_defender_party", slot_party_retreat_flag, 1),
            (party_slot_eq, ":root_attacker_party", slot_party_retreat_flag, 1),
            (assign, ":trigger_result", 1), #End battle!
          (try_end),
          (party_set_slot, ":root_attacker_party", slot_party_retreat_flag, 0),
          
          ##         (assign, ":cancel_attack", 0),
          
          (party_collect_attachments_to_party, ":root_defender_party", "p_collective_ally"),
          (party_collect_attachments_to_party, ":root_attacker_party", "p_collective_enemy"),
          
          #          (call_script, "script_party_count_fit_for_battle", "p_collective_ally"),
          (call_script, "script_party_calculate_strength", "p_collective_ally", 0),
          (assign, ":defender_strength", reg0),
          #           (call_script, "script_party_count_fit_for_battle", "p_collective_enemy"),
          (call_script, "script_party_calculate_strength", "p_collective_enemy", 0),
          (assign, ":attacker_strength", reg0),
          
          (store_div, ":defender_strength", ":defender_strength", 20),
          (val_min, ":defender_strength", 50),
          (val_max, ":defender_strength", 1),
          (store_div, ":attacker_strength", ":attacker_strength", 20),
          (val_min, ":attacker_strength", 50),
          (val_add, ":attacker_strength", 1),
          (try_begin),
            #For sieges increase attacker casualties and reduce defender casualties.
            (this_or_next|party_slot_eq, ":root_defender_party", slot_party_type, spt_castle),
            (party_slot_eq, ":root_defender_party", slot_party_type, spt_mainplanet),
            (val_mul, ":defender_strength", 3),
            (val_div, ":defender_strength", 2),
            (val_div, ":attacker_strength", 2),
          (try_end),
          
          
          (try_begin),
            (neg|is_currently_night), #Don't fight at night
            (inflict_casualties_to_party_group, ":root_attacker_party", ":defender_strength", "p_temp_casualties"),
            (party_collect_attachments_to_party, ":root_attacker_party", "p_collective_enemy"),
          (try_end),
          (call_script, "script_party_count_fit_for_battle", "p_collective_enemy", 0),
          (assign, ":new_attacker_strength", reg0),
          
          (try_begin),
            (gt, ":new_attacker_strength", 0),
            (neg|is_currently_night), #Don't fight at night
            (inflict_casualties_to_party_group, ":root_defender_party", ":attacker_strength", "p_temp_casualties"),
            (party_collect_attachments_to_party, ":root_defender_party", "p_collective_ally"),
          (try_end),
          (call_script, "script_party_count_fit_for_battle", "p_collective_ally", 0),
          (assign, ":new_defender_strength", reg0),
          
          (try_begin),
            (this_or_next|eq, ":new_attacker_strength", 0),
            (eq, ":new_defender_strength", 0),
            # Battle concluded! determine winner
            
            (try_begin),
              (eq, ":new_attacker_strength", 0),
              (eq, ":new_defender_strength", 0),
              (assign, ":root_winner_party", -1),
              (assign, ":root_defeated_party", -1),
              (assign, ":collective_casualties", -1),
            (else_try),
              (eq, ":new_attacker_strength", 0),
              (assign, ":root_winner_party",   ":root_defender_party"),
              (assign, ":root_defeated_party", ":root_attacker_party"),
              (assign, ":collective_casualties",    "p_collective_enemy"),
            (else_try),
              (assign, ":root_winner_party", ":root_attacker_party"),
              (assign, ":root_defeated_party",  ":root_defender_party"),
              (assign, ":collective_casualties",  "p_collective_ally"),
            (try_end),
            
            (try_begin),
              (ge, ":root_winner_party", 0),
              (call_script, "script_get_nonempty_party_in_group", ":root_winner_party"),
              (assign, ":nonempty_winner_party", reg0),
              (store_faction_of_party, ":faction_receiving_prisoners", ":nonempty_winner_party"),
              (store_faction_of_party, ":defeated_faction", ":root_defeated_party"),
            (else_try),
              (assign, ":nonempty_winner_party", -1),
            (try_end),
            
            (try_begin),
              (ge, ":collective_casualties", 0),
              (party_get_num_companion_stacks, ":num_stacks", ":collective_casualties"),
            (else_try),
              (assign, ":num_stacks", 0),
            (try_end),
            (try_for_range, ":troop_iterator", 0, ":num_stacks"),
              (party_stack_get_troop_id, ":cur_troop_id", ":collective_casualties", ":troop_iterator"),
              (troop_is_hero, ":cur_troop_id"),
              (call_script, "script_remove_troop_from_prison", ":cur_troop_id"),
              (troop_set_slot, ":cur_troop_id", slot_troop_leaded_party, -1),
              (store_random_in_range, ":rand", 0, 100),
              (str_store_troop_name_link, s1, ":cur_troop_id"),
              (str_store_faction_name_link, s2, ":faction_receiving_prisoners"),
              (store_troop_faction, ":defeated_troop_faction", ":cur_troop_id"),
              (str_store_faction_name_link, s3, ":defeated_troop_faction"),
              (try_begin),
                (ge, ":rand", hero_escape_after_defeat_chance),
                (party_stack_get_troop_id, ":leader_troop_id", ":nonempty_winner_party", 0),
                (is_between, ":leader_troop_id", faction_heroes_begin, faction_heroes_end), #disable non-faction parties capturing enemy lords
                (party_add_prisoners, ":nonempty_winner_party", ":cur_troop_id", 1),
                (gt, reg0, 0),
                #(troop_set_slot, ":cur_troop_id", slot_troop_is_prisoner, 1),
                (troop_set_slot, ":cur_troop_id", slot_troop_prisoner_of_party, ":nonempty_winner_party"),
                # HC - Select the message color based on the circumstances. reg20 holds the color.
                (call_script, "script_get_message_color", news_lord_captured, ":cur_troop_id"),
                (display_log_message, "str_hero_taken_prisoner", reg20),
                #(display_log_message, "str_hero_taken_prisoner", 0xFF2222),
              (else_try),
                # HC - Select the message color based on the circumstances. reg20 holds the color.
                (call_script, "script_get_message_color", news_lord_defeated, ":cur_troop_id"),
                (display_message,"@{s1} of {s3} was defeated in battle but managed to escape.", reg20),
                #(display_message,"@{s1} of {s3} was defeated in battle but managed to escape.", 0x00FF00),
              (try_end),
              (try_begin),
                (store_troop_faction, ":cur_troop_faction", ":cur_troop_id"),
                (faction_slot_eq, ":cur_troop_faction", slot_faction_marshall, ":cur_troop_id"),
                #Marshall is defeated, refresh ai.
                (assign, "$g_recalculate_ais", 1),
              (try_end),
            (try_end),
            (try_begin),
              (ge, ":collective_casualties", 0),
              (party_get_num_prisoner_stacks, ":num_stacks", ":collective_casualties"),
            (else_try),
              (assign, ":num_stacks", 0),
            (try_end),
            (try_for_range, ":troop_iterator", 0, ":num_stacks"),
              (party_prisoner_stack_get_troop_id, ":cur_troop_id", ":collective_casualties", ":troop_iterator"),
              (troop_is_hero, ":cur_troop_id"),
              (call_script, "script_remove_troop_from_prison", ":cur_troop_id"),
              (store_troop_faction, ":cur_troop_faction", ":cur_troop_id"),
              (str_store_troop_name_link, s1, ":cur_troop_id"),
              (str_store_faction_name_link, s2, ":faction_receiving_prisoners"),
              (str_store_faction_name_link, s3, ":cur_troop_faction"),
              # HC - Select the message color based on the circumstances. reg20 holds the color.
              (call_script, "script_get_message_color", news_lord_freed, ":cur_troop_id"),
              (display_log_message,"str_hero_freed", reg20),
              #(display_log_message,"str_hero_freed", 0x00FF00),
            (try_end),
            
            (try_begin),
              (ge, ":collective_casualties", 0),
              (party_clear, "p_temp_party"),
              (assign, "$g_move_heroes", 0), #heroes are already processed above. Skip them here.
              (call_script, "script_party_add_party_prisoners", "p_temp_party", ":collective_casualties"),
              (call_script, "script_party_prisoners_add_party_companions", "p_temp_party", ":collective_casualties"),
              (distribute_party_among_party_group, "p_temp_party", ":root_winner_party"),
              (call_script, "script_clear_party_group", ":root_defeated_party"),
            (try_end),
            (assign, ":trigger_result", 1), #End battle!
            
            #Center captured
            (try_begin),
              (ge, ":collective_casualties", 0),
              (party_get_slot, ":cur_party_type", ":root_defeated_party", slot_party_type),
              (this_or_next|eq, ":cur_party_type", spt_mainplanet),
              (eq, ":cur_party_type", spt_castle),
              
              (assign, "$g_recalculate_ais", 1),
              
              (store_faction_of_party, ":winner_faction", ":root_winner_party"),
              (store_faction_of_party, ":defeated_faction", ":root_defeated_party"),
              
              (str_store_party_name, s1, ":root_defeated_party"),
              (str_store_faction_name, s2, ":winner_faction"),
              (str_store_faction_name, s3, ":defeated_faction"),
              # HC - Select the message color based on the circumstances. reg20 holds the color.
              (call_script, "script_get_message_color", news_center_captured, ":root_defeated_party"),
              (display_log_message, "str_center_captured", reg20),
              #(display_log_message, "str_center_captured", 0xFF2222),
              
              (try_begin),
                (eq, "$g_encountered_party", ":root_defeated_party"),
                ##                  (display_message, "@Player participation in siege called from g_encountered_party"),
                (call_script, "script_add_log_entry", logent_player_participated_in_siege, "trp_player",  "$g_encountered_party", 0, "$g_encountered_party_faction"),
              (try_end),
              ##             (try_begin),
              ##                  (eq, "$g_encountered_party_2", ":root_defeated_party"),
              ##                  (display_message, "@Player participation in siege called from game_event_simulate_battle thanks to g_encountered_party"),
              ##             (try_end),
              ##             (try_begin),
              ##                  (eq, "$g_enemy_party", ":root_defeated_party"),
              ##                  (display_message, "@Player participation in siege called from game_event_simulate_battle thanks to g_encountered_party"),
              ##             (try_end),
              
              
              (try_begin),
                (party_get_num_companion_stacks, ":num_stacks", ":root_winner_party"),
                (gt, ":num_stacks", 0),
                (party_stack_get_troop_id, ":leader_troop_no", ":root_winner_party", 0),
                (is_between, ":leader_troop_no", faction_heroes_begin, faction_heroes_end),
                (party_set_slot, ":root_defeated_party", slot_center_last_taken_by_troop, ":leader_troop_no"),
              (else_try),
                (party_set_slot, ":root_defeated_party", slot_center_last_taken_by_troop, -1),
              (try_end),
              
              (call_script, "script_lift_siege", ":root_defeated_party", 0),
              (call_script, "script_give_center_to_faction", ":root_defeated_party", ":winner_faction"),
              (try_begin),
                (eq, ":defeated_faction", "fac_player_supporters_faction"),
                (call_script, "script_add_notification_menu", "mnu_notification_center_lost", ":root_defeated_party", ":winner_faction"),
              (try_end),
              #Reduce prosperity of the center by 5
              (call_script, "script_change_center_prosperity", ":root_defeated_party", -5),
              (call_script, "script_order_best_besieger_party_to_guard_center", ":root_defeated_party", ":winner_faction"),
              (call_script, "script_cf_reinforce_party", ":root_defeated_party"),
              (call_script, "script_cf_reinforce_party", ":root_defeated_party"),
            (try_end),
          (try_end),
          
          #ADD XP
          (try_begin),
            (party_slot_eq, ":root_attacker_party", slot_party_type, spt_faction_hero_party),
            (store_random_in_range, ":random_num",0, 100),
            (lt, ":random_num", 25),
            (gt, ":new_attacker_strength", 0),
            (call_script, "script_upgrade_hero_party", ":root_attacker_party", 1000),
          (try_end),
          (try_begin),
            (party_slot_eq, ":root_defender_party", slot_party_type, spt_faction_hero_party),
            (store_random_in_range, ":random_num",0, 100),
            (lt, ":random_num", 25),
            (gt, ":new_defender_strength", 0),
            (call_script, "script_upgrade_hero_party", ":root_defender_party", 1000),
          (try_end),
          
          (store_random_in_range, ":random_num", 0, 100),
          (try_begin),
            (lt, ":random_num", 10),
            ##           (this_or_next|lt, ":random_num", 10),
            ##           (eq, ":cancel_attack", 1),
            (assign, ":trigger_result", 1), #End battle!
          (try_end),
        (try_end),
        (set_trigger_result, ":trigger_result"),
      (try_end),
      
      # #--------------------------------------------------------------------------------------------------------------------------------
      # DON'T DO THE SCRIPT WORKAROUND
      # #SW - added try_end for script workaround
      # (try_end),
      # #--------------------------------------------------------------------------------------------------------------------------------
      
  ]),
  
  #script_game_event_battle_end:
  # This script is called whenever the game ends the battle between two parties on the map.
  # INPUT:
  # param1: Defender Party
  # param2: Attacker Party
  ("game_event_battle_end",
    [
      ##       (store_script_param_1, ":root_defender_party"),
      ##       (store_script_param_2, ":root_attacker_party"),
      #Fixing deleted heroes
      (try_for_range, ":cur_troop", faction_heroes_begin, faction_heroes_end),
        (troop_get_slot, ":cur_party", ":cur_troop", slot_troop_leaded_party),
        (troop_get_slot, ":cur_prisoner_of_party", ":cur_troop", slot_troop_prisoner_of_party),
        (try_begin),
          (ge, ":cur_party", 0),
          (assign, ":continue", 0),
          (try_begin),
            (neg|party_is_active, ":cur_party"),
            (assign, ":continue", 1),
          (else_try),
            (party_count_companions_of_type, ":amount", ":cur_party", ":cur_troop"),
            (le, ":amount", 0),
            (assign, ":continue", 1),
          (try_end),
          (eq, ":continue", 1),
          (try_begin),
            (eq, "$cheat_mode", 1),
            (str_store_troop_name, s1, ":cur_troop"),
            (display_message, "@DEBUG: {s1} no longer leads a party."),
          (try_end),
          (troop_set_slot, ":cur_troop", slot_troop_leaded_party, -1),
        (try_end),
        (try_begin),
          (ge, ":cur_prisoner_of_party", 0),
          (assign, ":continue", 0),
          (try_begin),
            (neg|party_is_active, ":cur_prisoner_of_party"),
            (assign, ":continue", 1),
          (else_try),
            (party_count_prisoners_of_type, ":amount", ":cur_prisoner_of_party", ":cur_troop"),
            (le, ":amount", 0),
            (assign, ":continue", 1),
          (try_end),
          (eq, ":continue", 1),
          (try_begin),
            (eq, "$cheat_mode", 1),
            (str_store_troop_name, s1, ":cur_troop"),
            (display_message, "@DEBUG: {s1} is no longer a prisoner."),
          (try_end),
          (call_script, "script_remove_troop_from_prison", ":cur_troop"),
          #searching player
          (try_begin),
            (party_count_prisoners_of_type, ":amount", "p_main_party", ":cur_troop"),
            (gt, ":amount", 0),
            (troop_set_slot, ":cur_troop", slot_troop_prisoner_of_party, "p_main_party"),
            (assign, ":continue", 0),
            (try_begin),
              (eq, "$cheat_mode", 1),
              (str_store_troop_name, s1, ":cur_troop"),
              (display_message, "@DEBUG: {s1} is now a prisoner of player."),
            (try_end),
          (try_end),
          (eq, ":continue", 1),
          #searching faction heroes
          (try_for_range, ":cur_troop_2", faction_heroes_begin, faction_heroes_end),
            (eq, ":continue", 1),
            (troop_get_slot, ":cur_prisoner_of_party_2", ":cur_troop_2", slot_troop_leaded_party),
            (party_is_active, ":cur_prisoner_of_party_2"),
            (party_count_prisoners_of_type, ":amount", ":cur_prisoner_of_party_2", ":cur_troop"),
            (gt, ":amount", 0),
            (troop_set_slot, ":cur_troop", slot_troop_prisoner_of_party, ":cur_prisoner_of_party_2"),
            (assign, ":continue", 0),
            (try_begin),
              (eq, "$cheat_mode", 1),
              (str_store_troop_name, s1, ":cur_troop"),
              (str_store_party_name, s2, ":cur_prisoner_of_party_2"),
              (display_message, "@DEBUG: {s1} is now a prisoner of {s2}."),
            (try_end),
          (try_end),
          #searching walled centers
          (try_for_range, ":cur_prisoner_of_party_2", walled_centers_begin, walled_centers_end),
            (eq, ":continue", 1),
            (party_count_prisoners_of_type, ":amount", ":cur_prisoner_of_party_2", ":cur_troop"),
            (gt, ":amount", 0),
            (troop_set_slot, ":cur_troop", slot_troop_prisoner_of_party, ":cur_prisoner_of_party_2"),
            (assign, ":continue", 0),
            (try_begin),
              (eq, "$cheat_mode", 1),
              (str_store_troop_name, s1, ":cur_troop"),
              (str_store_party_name, s2, ":cur_prisoner_of_party_2"),
              (display_message, "@DEBUG: {s1} is now a prisoner of {s2}."),
            (try_end),
          (try_end),
        (try_end),
      (try_end),
  ]),
  
  #script_order_best_besieger_party_to_guard_center:
  # INPUT:
  # param1: defeated_center, param2: winner_faction
  # OUTPUT:
  # none
  ("order_best_besieger_party_to_guard_center",
    [
      (store_script_param, ":defeated_center", 1),
      (store_script_param, ":winner_faction", 2),
      (assign, ":best_party", -1),
      (assign, ":best_party_strength", 0),
      (try_for_range, ":faction_hero", faction_heroes_begin, faction_heroes_end),
        (troop_get_slot, ":faction_hero_party", ":faction_hero", slot_troop_leaded_party),
        (gt, ":faction_hero_party", 0),
        (store_distance_to_party_from_party, ":dist", ":faction_hero_party", ":defeated_center"),
        (lt, ":dist", 5),
        (store_faction_of_party, ":faction_hero_party_faction", ":faction_hero_party"),
        (eq, ":winner_faction", ":faction_hero_party_faction"),
        #If marshall has captured the castle, then do not leave him behind.
        (neg|faction_slot_eq, ":winner_faction", slot_faction_marshall, ":faction_hero"),
        (assign, ":has_besiege_ai", 0),
        (try_begin),
          (party_slot_eq, ":faction_hero_party", slot_party_ai_state, spai_besieging_center),
          (party_slot_eq, ":faction_hero_party", slot_party_ai_object, ":defeated_center"),
          (assign, ":has_besiege_ai", 1),
        (else_try),
          (party_slot_eq, ":faction_hero_party", slot_party_ai_state, spai_accompanying_army),
          (party_get_slot, ":faction_hero_party_commander_party", ":faction_hero_party", slot_party_commander_party),
          (party_slot_eq, ":faction_hero_party_commander_party", slot_party_ai_state, spai_besieging_center),
          (party_slot_eq, ":faction_hero_party_commander_party", slot_party_ai_object, ":defeated_center"),
          (assign, ":has_besiege_ai", 1),
        (try_end),
        (eq, ":has_besiege_ai", 1),
        (party_get_slot, ":faction_hero_party_strength", ":faction_hero_party", slot_party_cached_strength),#recently calculated
        (gt, ":faction_hero_party_strength", ":best_party_strength"),
        (assign, ":best_party_strength", ":faction_hero_party_strength"),
        (assign, ":best_party", ":faction_hero_party"),
      (try_end),
      (try_begin),
        (gt, ":best_party", 0),
        (call_script, "script_party_set_ai_state", ":best_party", spai_holding_center, ":defeated_center"),
        (party_set_slot, ":best_party", slot_party_commander_party, -1),
        (party_set_flags, ":best_party", pf_default_behavior, 1),
      (try_end),
  ]),
  
  #script_game_get_item_buy_price_factor:
  # This script is called from the game engine for calculating the buying price of any item.
  # INPUT:
  # param1: item_kind_id
  # OUTPUT:
  # trigger_result and reg0 = price_factor
  ("game_get_item_buy_price_factor",
    [
      (store_script_param_1, ":item_kind_id"),
      (assign, ":price_factor", 100),
      
      (call_script, "script_get_trade_penalty", ":item_kind_id"),
      (assign, ":trade_penalty", reg0),
      
      (try_begin),
        (is_between, "$g_encountered_party", centers_begin, centers_end),
        (is_between, ":item_kind_id", trade_goods_begin, trade_goods_end),
        (store_sub, ":item_slot_no", ":item_kind_id", trade_goods_begin),
        (val_add, ":item_slot_no", slot_mainplanet_trade_good_prices_begin),
        (party_get_slot, ":price_factor", "$g_encountered_party", ":item_slot_no"),
        (val_mul, ":price_factor", 100), #normalize price factor to range 0..100
        (val_div, ":price_factor", average_price_factor),
      (try_end),
      
      (store_add, ":penalty_factor", 100, ":trade_penalty"),
      
      (val_mul, ":price_factor", ":penalty_factor"),
      (val_div, ":price_factor", 100),
      
      (assign, reg0, ":price_factor"),
      (set_trigger_result, reg0),
  ]),
  
  #script_game_get_item_sell_price_factor:
  # This script is called from the game engine for calculating the selling price of any item.
  # INPUT:
  # param1: item_kind_id
  # OUTPUT:
  # trigger_result and reg0 = price_factor
  ("game_get_item_sell_price_factor",
    [
      (store_script_param_1, ":item_kind_id"),
      (assign, ":price_factor", 100),
      
      (call_script, "script_get_trade_penalty", ":item_kind_id"),
      (assign, ":trade_penalty", reg0),
      
      (try_begin),
        (is_between, "$g_encountered_party", centers_begin, centers_end),
        (is_between, ":item_kind_id", trade_goods_begin, trade_goods_end),
        (store_sub, ":item_slot_no", ":item_kind_id", trade_goods_begin),
        (val_add, ":item_slot_no", slot_mainplanet_trade_good_prices_begin),
        (party_get_slot, ":price_factor", "$g_encountered_party", ":item_slot_no"),
        (val_mul, ":price_factor", 100),#normalize price factor to range 0..100
        (val_div, ":price_factor", average_price_factor),
      (else_try),
        #increase trade penalty while selling
        (val_mul, ":trade_penalty", 4),
      (try_end),
      
      
      (store_add, ":penalty_divisor", 100, ":trade_penalty"),
      
      (val_mul, ":price_factor", 100),
      (val_div, ":price_factor", ":penalty_divisor"),
      
      (assign, reg0, ":price_factor"),
      (set_trigger_result, reg0),
  ]),
  
  # script_get_trade_penalty
  #
  # Input:
  # param1: troop_id,
  # Output: reg0
  
  ("get_trade_penalty",
    [
      (store_script_param_1, ":item_kind_id"),
      (assign, ":penalty",0),
      
      (party_get_skill_level, ":trade_skill", "p_main_party", skl_trade),
      (try_begin),
        (is_between, ":item_kind_id", trade_goods_begin, trade_goods_end),
        (assign, ":penalty",20),
        (store_mul, ":skill_bonus", ":trade_skill", 1),
        (val_sub, ":penalty", ":skill_bonus"),
      (else_try),
        (assign, ":penalty",100),
        (store_mul, ":skill_bonus", ":trade_skill", 5),
        (val_sub, ":penalty", ":skill_bonus"),
      (try_end),
      
      (assign, ":penalty_multiplier", 1000),
      ##       # Apply penalty if player is hostile to merchants faction
      ##      (store_relation, ":merchants_reln", "fac_merchants", "fac_player_supporters_faction"),
      ##      (try_begin),
      ##        (lt, ":merchants_reln", 0),
      ##        (store_sub, ":merchants_reln_dif", 10, ":merchants_reln"),
      ##        (store_mul, ":merchants_relation_penalty", ":merchants_reln_dif", 20),
      ##        (val_add, ":penalty_multiplier", ":merchants_relation_penalty"),
      ##      (try_end),
      
      # Apply penalty if player is on bad terms with the town
      (try_begin),
        (is_between, "$g_encountered_party", centers_begin, centers_end),
        (party_get_slot, ":center_relation", "$g_encountered_party", slot_center_player_relation),
        (store_mul, ":center_relation_penalty", ":center_relation", -3),
        (val_add, ":penalty_multiplier", ":center_relation_penalty"),
        (try_begin),
          (lt, ":center_relation", 0),
          (store_sub, ":center_penalty_multiplier", 100, ":center_relation"),
          (val_mul, ":penalty_multiplier", ":center_penalty_multiplier"),
          (val_div, ":penalty_multiplier", 100),
        (try_end),
      (try_end),
      
      # Apply penalty if player is on bad terms with the merchant (not currently used)
      (call_script, "script_troop_get_player_relation", "$g_talk_troop"),
      (assign, ":troop_reln", reg0),
      #(troop_get_slot, ":troop_reln", "$g_talk_troop", slot_troop_player_relation),
      (try_begin),
        (lt, ":troop_reln", 0),
        (store_sub, ":troop_reln_dif", 0, ":troop_reln"),
        (store_mul, ":troop_relation_penalty", ":troop_reln_dif", 20),
        (val_add, ":penalty_multiplier", ":troop_relation_penalty"),
      (try_end),
      
      (val_mul, ":penalty",  ":penalty_multiplier"),
      (val_div, ":penalty", 1000),
      (val_max, ":penalty", 1),
      (assign, reg0, ":penalty"),
  ]),
  
  #script_game_event_buy_item:
  # This script is called from the game engine when player buys an item.
  # INPUT:
  # param1: item_kind_id
  ("game_event_buy_item",
    [
      (store_script_param_1, ":item_kind_id"),
      (store_script_param_2, ":reclaim_mode"),
      (try_begin),
        (is_between, ":item_kind_id", trade_goods_begin, trade_goods_end),
        (store_sub, ":item_slot_no", ":item_kind_id", trade_goods_begin),
        (val_add, ":item_slot_no", slot_mainplanet_trade_good_prices_begin),
        (party_get_slot, ":multiplier", "$g_encountered_party", ":item_slot_no"),
        (try_begin),
          (eq, ":reclaim_mode", 0),
          (val_add, ":multiplier", 10),
        (else_try),
          (val_add, ":multiplier", 15),
        (try_end),
        (val_min, ":multiplier", maximum_price_factor),
        (party_set_slot, "$g_encountered_party", ":item_slot_no", ":multiplier"),
      (try_end),
  ]),
  
  #script_game_event_sell_item:
  # This script is called from the game engine when player sells an item.
  # INPUT:
  # param1: item_kind_id
  ("game_event_sell_item",
    [
      (store_script_param_1, ":item_kind_id"),
      (store_script_param_2, ":return_mode"),
      (try_begin),
        (is_between, ":item_kind_id", trade_goods_begin, trade_goods_end),
        (store_sub, ":item_slot_no", ":item_kind_id", trade_goods_begin),
        (val_add, ":item_slot_no", slot_mainplanet_trade_good_prices_begin),
        (party_get_slot, ":multiplier", "$g_encountered_party", ":item_slot_no"),
        (try_begin),
          (eq, ":return_mode", 0),
          (val_sub, ":multiplier", 15),
        (else_try),
          (val_sub, ":multiplier", 10),
        (try_end),
        (val_max, ":multiplier", minimum_price_factor),
        (party_set_slot, "$g_encountered_party", ":item_slot_no", ":multiplier"),
      (try_end),
  ]),
  
  
  # script_game_get_troop_wage
  # This script is called from the game engine for calculating troop wages.
  # Input:
  # param1: troop_id, param2: party-id
  # Output: reg0: weekly wage
  
  ("game_get_troop_wage",
    [
      (store_script_param_1, ":troop_id"),
      (store_script_param_2, ":unused"), #party id
      
      (assign,":wage", 0),
      (try_begin),
        (this_or_next|eq, ":troop_id", "trp_player"),
        (eq, ":troop_id", "trp_kidnapped_girl"),
      (else_try),
        (is_between, ":troop_id", pretenders_begin, pretenders_end),
      (else_try),
        (store_character_level, ":troop_level", ":troop_id"),
        (assign, ":wage", ":troop_level"),
        (val_add, ":wage", 3),
        (val_mul, ":wage", ":wage"),
        (val_div, ":wage", 25),
      (try_end),
      
      (try_begin), #mounted troops cost 65% more than the normal cost
        (troop_is_mounted, ":troop_id"),
        (val_mul, ":wage", 5),
        (val_div, ":wage", 3),
      (try_end),
      
      #SW - commented out since faction management will now uses these troops and we don't want everything to be really expensive
      #(try_begin), #mercenaries cost %50 more than the normal cost
      #  (is_between, ":troop_id", mercenary_troops_begin, mercenary_troops_end),
      #  (val_mul, ":wage", 3),
      #  (val_div, ":wage", 2),
      #(try_end),
      
      # HC - Don't make Heroes cost 2x as much.
      #(try_begin),
      #  (is_between, ":troop_id", companions_begin, companions_end),
      #(val_mul, ":wage", 2),
      #(try_end),
      
      #double ig88 wage
      (try_begin),
        (eq, ":troop_id", "trp_ig88"),
        (val_mul, ":wage", 2),
      (try_end),
      

        #(store_troop_faction, ":troop_fac", ":troop_id"),
        (troop_get_type, ":troop_type", ":troop_id"),
        (try_begin),
            (eq, ":troop_type", tf_tusken),
            (val_add, ":wage", 4),
            (val_mul, ":wage", 5),
            (val_div, ":wage", 4),
            (val_add, ":wage", 3),
        (else_try),
            (this_or_next|eq, ":troop_type",tf_battledroid),
            (eq, ":troop_type", tf_sbd),
            (val_max, ":wage",1),
            (val_mul, ":wage",4),
            (val_sub, ":wage",4),
            (val_div, ":wage",6),
            (try_begin),
                  (this_or_next|eq,":troop_id", "trp_b2series_enhanced"),
                  (this_or_next|eq,":troop_id", "trp_aseries_assassin"),
                  (this_or_next|eq,":troop_id", "trp_bxseries_commando"),
                  (this_or_next|eq,":troop_id", "trp_rebel_heavy_trooper"),                  
                  (this_or_next|eq,":troop_id", "trp_rebel_pilot_veteran"),
                  (this_or_next|eq,":troop_id", "trp_rebel_scout"),
                  (this_or_next|eq,":troop_id", "trp_rebel_honor_guard"),
                  (eq,":troop_id", "trp_cloaked_magna"),
                  (val_mul, ":wage", 2),
            (try_end),      
        (try_end),


      #SW - 50% more for all wages
      (val_mul, ":wage", 3),
      (val_div, ":wage", 2),
      
      (store_skill_level, ":leadership_level", "skl_leadership", "trp_player"),
      (store_mul, ":leadership_bonus", 8, ":leadership_level"),#5
      (store_sub, ":leadership_factor", 85, ":leadership_bonus"),#
      (val_mul, ":wage", ":leadership_factor"),  #wage = wage * (100 - 5*leadership)/100
      (val_div, ":wage", 100),
      
      (try_begin),
        (neq, ":troop_id", "trp_player"),
        (neq, ":troop_id", "trp_kidnapped_girl"),
        (neg|is_between, ":troop_id", pretenders_begin, pretenders_end),
        (val_max, ":wage", 1),
      (try_end),
      
      (assign, reg0, ":wage"),
      (set_trigger_result, reg0),
  ]),
  
  # script_game_get_total_wage
  # This script is called from the game engine for calculating total wage of the player party which is shown at the party window.
  # Input: none
  # Output: reg0: weekly wage
  
  ("game_get_total_wage",
    [
      (assign, ":total_wage", 0),
      (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
        (party_stack_get_size, ":stack_size", "p_main_party", ":i_stack"),
        (call_script, "script_game_get_troop_wage", ":stack_troop", 0),
        (val_mul, reg0, ":stack_size"),
        (val_add, ":total_wage", reg0),
      (try_end),
      (assign, reg0, ":total_wage"),
      (set_trigger_result, reg0),
  ]),
  
  # script_game_get_join_cost
  # This script is called from the game engine for calculating troop join cost.
  # Input:
  # param1: troop_id,
  # Output: reg0: weekly wage
  
  ("game_get_join_cost",
    [
      (store_script_param_1, ":troop_id"),
      
      (assign,":join_cost", 0),
      (try_begin),
        (troop_is_hero, ":troop_id"),
      (else_try),
        (store_character_level, ":troop_level", ":troop_id"),
        (assign, ":join_cost", ":troop_level"),
        (val_add, ":join_cost", 5),
        (val_mul, ":join_cost", ":join_cost"),
        (val_add, ":join_cost", 40),
        (val_div, ":join_cost", 5),
        (try_begin), #mounted troops cost %100 more than the normal cost
          #SW - modified to 50% more
          (troop_is_mounted, ":troop_id"),
          #(val_mul, ":join_cost", 2),
          (val_mul, ":join_cost", 3),
          (val_div, ":join_cost", 2),
        (try_end),
      (try_end),
      
      #double ig88 join_cost
      (try_begin),
        (eq, ":troop_id", "trp_ig88"),
        (val_mul, ":join_cost", 2),
      (try_end),
      
      #SW - 50% more for all join costs
      (val_mul, ":join_cost", 3),
      (val_div, ":join_cost", 2),

      (troop_get_type, ":troop_type", ":troop_id"),
      (try_begin),
            (eq, ":troop_type", tf_tusken),
            (val_add, ":join_cost", 25),
            (val_div, ":join_cost", 5),
            (val_div, ":join_cost", 7),
      (else_try),
            (this_or_next|eq, ":troop_type", tf_battledroid),
            (eq, ":troop_type", tf_sbd),
            (val_max, ":join_cost", 1),
            (val_mul, ":join_cost", 3),
            (val_sub, ":join_cost", 3),
            (val_div, ":join_cost", 4),
            (try_begin),
                  (this_or_next|eq,":troop_id", "trp_b2series_enhanced"),
                  (this_or_next|eq,":troop_id", "trp_aseries_assassin"),
                  (this_or_next|eq,":troop_id", "trp_bxseries_commando"),
                  (this_or_next|eq,":troop_id", "trp_rebel_heavy_trooper"),                  
                  (this_or_next|eq,":troop_id", "trp_rebel_pilot_veteran"),
                  (this_or_next|eq,":troop_id", "trp_rebel_scout"),
                  (this_or_next|eq,":troop_id", "trp_rebel_honor_guard"),
                  (eq,":troop_id", "trp_cloaked_magna"),
                  (val_mul, ":join_cost", 3),
            (try_end),
      (try_end),    

      
      (assign, reg0, ":join_cost"),
      (set_trigger_result, reg0),
  ]),
  
  
  # script_game_get_prisoner_price
  # This script is called from the game engine for calculating prisoner price
  # Input:
  # param1: troop_id,
  # Output: reg0
  
  ("game_get_prisoner_price",
    [
      (store_script_param_1, ":troop_id"),
      #(assign, reg0, 50),
      
      # HC - Modified Prisoner Costs for Band of Warriors Expanded by NCrawler
      (store_character_level,":troop_level",":troop_id"),
      (store_skill_level,":skill_level","skl_prisoner_management","trp_player"),
      (val_div,":troop_level",2),
      (val_div,":skill_level",2),
      (val_add,":skill_level",3),
      (store_mul,":price",":troop_level",":skill_level"),
      (val_mul,":price",2), # HC - Multiply by 2. The original script was from when prisoners were only 20 Denars.
      (assign,reg0,":price"),
      # HC - End price modification
      
      (try_begin),
        (is_between, "$g_talk_troop", ransom_brokers_begin, ransom_brokers_end),
        (store_character_level, ":troop_level", ":troop_id"),
        (assign, ":ransom_amount", ":troop_level"),
        (val_add, ":ransom_amount", 10),
        (val_mul, ":ransom_amount", ":ransom_amount"),
        (val_div, ":ransom_amount", 6),
      (try_end),
      (set_trigger_result, reg0),
  ]),
  
  
  # script_game_check_prisoner_can_be_sold
  # This script is called from the game engine for checking if a given troop can be sold.
  # Input:
  # param1: troop_id,
  # Output: reg0: 1= can be sold; 0= cannot be sold.
  
  ("game_check_prisoner_can_be_sold",
    [
      (store_script_param_1, ":troop_id"),
      (assign, reg0, 0),
      (try_begin),
        (neg|troop_is_hero, ":troop_id"),
        (assign, reg0, 1),
      (try_end),
      (set_trigger_result, reg0),
  ]),
  
  #script_game_event_detect_party:
  # This script is called from the game engine when player party inspects another party.
  # INPUT:
  # param1: Party-id
  ("game_event_detect_party",
    [
      (store_script_param_1, ":party_id"),
      (try_begin),
        (party_slot_eq, ":party_id", slot_party_type, spt_faction_hero_party),
        (party_stack_get_troop_id, ":leader", ":party_id", 0),
        (is_between, ":leader", faction_heroes_begin, faction_heroes_end),
        (call_script, "script_update_troop_location_notes", ":leader", 0),
      (else_try),
        (is_between, ":party_id", walled_centers_begin, walled_centers_end),
        (party_get_num_attached_parties, ":num_attached_parties",  ":party_id"),
        (try_for_range, ":attached_party_rank", 0, ":num_attached_parties"),
          (party_get_attached_party_with_rank, ":attached_party", ":party_id", ":attached_party_rank"),
          (party_stack_get_troop_id, ":leader", ":attached_party", 0),
          (is_between, ":leader", faction_heroes_begin, faction_heroes_end),
          (call_script, "script_update_troop_location_notes", ":leader", 0),
        (try_end),
      (try_end),
  ]),
  
  #script_game_event_undetect_party:
  # This script is called from the game engine when player party inspects another party.
  # INPUT:
  # param1: Party-id
  ("game_event_undetect_party",
    [
      (store_script_param_1, ":party_id"),
      (try_begin),
        (party_slot_eq, ":party_id", slot_party_type, spt_faction_hero_party),
        (party_stack_get_troop_id, ":leader", ":party_id", 0),
        (is_between, ":leader", faction_heroes_begin, faction_heroes_end),
        (call_script, "script_update_troop_location_notes", ":leader", 0),
      (try_end),
  ]),
  
  #script_game_get_statistics_line:
  # This script is called from the game engine when statistics page is opened.
  # INPUT:
  # param1: line_no
  ("game_get_statistics_line",
    [
      (store_script_param_1, ":line_no"),
      (try_begin),
        (eq, ":line_no", 0),
        (get_player_agent_kill_count, reg1),
        (str_store_string, s1, "str_number_of_troops_killed_reg1"),
        (set_result_string, s1),
      (else_try),
        (eq, ":line_no", 1),
        (get_player_agent_kill_count, reg1, 1),
        (str_store_string, s1, "str_number_of_troops_wounded_reg1"),
        (set_result_string, s1),
      (else_try),
        (eq, ":line_no", 2),
        (get_player_agent_own_troop_kill_count, reg1),
        (str_store_string, s1, "str_number_of_own_troops_killed_reg1"),
        (set_result_string, s1),
      (else_try),
        (eq, ":line_no", 3),
        (get_player_agent_own_troop_kill_count, reg1, 1),
        (str_store_string, s1, "str_number_of_own_troops_wounded_reg1"),
        (set_result_string, s1),
      (try_end),
  ]),
  
  #script_game_get_date_text:
  # This script is called from the game engine when the date needs to be displayed.
  # INPUT: arg1 = number of days passed since the beginning of the game
  # OUTPUT: result string = date
  ("game_get_date_text",
    [
      (store_script_param_2, ":num_hours"),
      (store_div, ":num_days", ":num_hours", 24),
      #SW - modified cur_day, cur_month, and cur_year
      (store_add, ":cur_day", ":num_days", 1),
      (assign, ":cur_month", 1),
      (assign, ":cur_year", 1),
      (assign, ":try_range", 99999),
      (try_for_range, ":unused", 0, ":try_range"),
        (try_begin),
          #SW - modified this section so all months have 35 days (commeted out the old code)
          (assign, ":month_day_limit", 35),
          # (this_or_next|eq, ":cur_month", 1),
          # (this_or_next|eq, ":cur_month", 3),
          # (this_or_next|eq, ":cur_month", 5),
          # (this_or_next|eq, ":cur_month", 7),
          # (this_or_next|eq, ":cur_month", 8),
          # (this_or_next|eq, ":cur_month", 10),
          # (eq, ":cur_month", 12),
          # (assign, ":month_day_limit", 31),
          # (else_try),
          # (this_or_next|eq, ":cur_month", 4),
          # (this_or_next|eq, ":cur_month", 6),
          # (this_or_next|eq, ":cur_month", 9),
          # (eq, ":cur_month", 11),
          # (assign, ":month_day_limit", 30),
          # (else_try),
          # (try_begin),
          # (store_div, ":cur_year_div_4", ":cur_year", 4),
          # (val_mul, ":cur_year_div_4", 4),
          # (eq, ":cur_year_div_4", ":cur_year"),
          # (assign, ":month_day_limit", 29),
          # (else_try),
          # (assign, ":month_day_limit", 28),
          # (try_end),
        (try_end),
        (try_begin),
          (gt, ":cur_day", ":month_day_limit"),
          (val_sub, ":cur_day", ":month_day_limit"),
          (val_add, ":cur_month", 1),
          (try_begin),
            #SW - modified so only 10 months
            (gt, ":cur_month", 10),
            (val_sub, ":cur_month", 10),
            (val_add, ":cur_year", 1),
          (try_end),
        (else_try),
          (assign, ":try_range", 0),
        (try_end),
      (try_end),
      (assign, reg1, ":cur_day"),
      (assign, reg2, ":cur_year"),
      (try_begin),
        (eq, ":cur_month", 1),
        (str_store_string, s1, "str_january_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 2),
        (str_store_string, s1, "str_february_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 3),
        (str_store_string, s1, "str_march_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 4),
        (str_store_string, s1, "str_april_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 5),
        (str_store_string, s1, "str_may_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 6),
        (str_store_string, s1, "str_june_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 7),
        (str_store_string, s1, "str_july_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 8),
        (str_store_string, s1, "str_august_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 9),
        (str_store_string, s1, "str_september_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 10),
        (str_store_string, s1, "str_october_reg1_reg2"),
        #SW - commented out months 11 & 12
        # (else_try),
        # (eq, ":cur_month", 11),
        # (str_store_string, s1, "str_november_reg1_reg2"),
        # (else_try),
        # (eq, ":cur_month", 12),
        # (str_store_string, s1, "str_december_reg1_reg2"),
      (try_end),
      (set_result_string, s1),
  ]),
  
  #script_game_get_money_text:
  # This script is called from the game engine when an amount of money needs to be displayed.
  # INPUT: arg1 = amount in units
  # OUTPUT: result string = money in text
  ("game_get_money_text",
    [
      (store_script_param_1, ":amount"),
      (try_begin),
        (eq, ":amount", 1),
        (str_store_string, s1, "str_1_denar"),
      (else_try),
        (assign, reg1, ":amount"),
        (str_store_string, s1, "str_reg1_denars"),
      (try_end),
      (set_result_string, s1),
  ]),
  
  #script_game_get_party_companion_limit:
  # This script is called from the game engine when the companion limit is needed for a party.
  # INPUT: arg1 = none
  # OUTPUT: reg0 = companion_limit
  ("game_get_party_companion_limit",
    [
      (assign, ":troop_no", "trp_player"),
      
      (assign, ":limit", 10),#
      (store_skill_level, ":skill", "skl_leadership", ":troop_no"),
      (store_attribute_level, ":charisma", ":troop_no", ca_charisma),
      (val_mul, ":skill", ":charisma"),
      (val_add, ":limit", ":skill"),
      #(val_add, ":limit", ":charisma"),
      
      (troop_get_slot, ":troop_renown", ":troop_no", slot_troop_renown),
      (store_div, ":renown_bonus", ":troop_renown", 36),#25
      (val_add, ":limit", ":renown_bonus"),
      
      (assign, reg0, ":limit"),
      (set_trigger_result, reg0),
  ]),
  
  
  #script_game_reset_player_party_name:
  # This script is called from the game engine when the player name is changed.
  # INPUT: none
  # OUTPUT: none
  ("game_reset_player_party_name",
    [(str_store_troop_name, s5, "trp_player"),
      (party_set_name, "p_main_party", s5),
  ]),
  
  # script_party_get_ideal_size @used for NPC parties.
  # Input: arg1 = party_no
  # Output: reg0: ideal size
  ("party_get_ideal_size",
    [
      (store_script_param_1, ":party_no"),
      (assign, ":limit", 30),
      (try_begin),
        (party_slot_eq, ":party_no", slot_party_type, spt_faction_hero_party),
        (party_stack_get_troop_id, ":party_leader", ":party_no", 0),
        (store_faction_of_party, ":faction_id", ":party_no"),
        (assign, ":limit", 10),
        
        (store_skill_level, ":skill", "skl_leadership", ":party_leader"),
        (store_attribute_level, ":charisma", ":party_leader", ca_charisma),
        (val_mul, ":skill", ":charisma"),#5
        (val_add, ":limit", ":skill"),
        #(val_add, ":limit", ":charisma"),
        
        (troop_get_slot, ":troop_renown", ":party_leader", slot_troop_renown),
        (store_div, ":renown_bonus", ":troop_renown", 12),#25
        (val_add, ":limit", ":renown_bonus"),
        
        (try_begin),
          (faction_slot_eq, ":faction_id", slot_faction_leader, ":party_leader"),
          (val_mul, ":limit", 2),#val_add
        (try_end),

      (try_end),
      (store_character_level, ":level", "trp_player"), #increase limits a little bit as the game progresses.
      (store_add, ":level_factor", 80, ":level"),#90
      (val_mul, ":limit", ":level_factor"),
      (val_div, ":limit", 80),#90

# Mando- faction limits
      
         #(troop_get_type, ":race", ":party_leader"),
         (try_begin),   
            (eq,":faction_id", "fac_galacticempire"),
            (val_mul, ":limit", 3),
            (val_div, ":limit", 2),
                  #(store_skill_level, ":skill_lvl", "skl_archery", ":party_leader"),
                  #(store_skill_level, ":skill_lvl", "skl_archery", ":party_leader"),
                  #(gt,":skill_level", 2),
         (else_try),          
            (eq,":faction_id", "fac_rebelalliance"), # (Me): Increase party size of mordor parties. 
            (val_mul, ":limit", 7), # 11CC: Was 2/3, upped to 3/4, elves wouldn't siege properly
                  (val_div, ":limit", 1),
         (try_end),         

      (assign, reg0, ":limit"),
  ]),
  
  
  #script_game_get_party_prisoner_limit:
  # This script is called from the game engine when the prisoner limit is needed for a party.
  # INPUT: arg1 = party_no
  # OUTPUT: reg0 = prisoner_limit
  ("game_get_party_prisoner_limit",
    [
      #      (store_script_param_1, ":party_no"),
      #(assign, ":troop_no", "trp_player"),
      
      (assign, ":limit", 0),
      #SW - modified prisoner_management to be a party skill
      #(store_skill_level, ":skill", "skl_prisoner_management", ":troop_no"),
      (party_get_skill_level, ":skill", "p_main_party", "skl_prisoner_management"),
      (store_mul, ":limit", ":skill", 5),
      (assign, reg0, ":limit"),
      (set_trigger_result, reg0),
  ]),
  
  #script_game_get_item_extra_text:
  # This script is called from the game engine when an item's properties are displayed.
  # INPUT: arg1 = item_no, arg2 = extra_text_id (this can be between 0-7 (7 included)), arg3 = item_modifier
  # OUTPUT: result_string = item extra text, trigger_result = text color (0 for default)
  ("game_get_item_extra_text",
    [
      (store_script_param, ":item_no", 1),
      (store_script_param, ":extra_text_id", 2),
      (store_script_param, ":item_modifier", 3),
      (try_begin),
        (is_between, ":item_no", food_begin, food_end),
        (try_begin),
          (eq, ":extra_text_id", 0),
          (assign, ":continue", 1),
          (try_begin),
            (eq, ":item_no", "itm_cattle_meat"),
            (eq, ":item_modifier", imod_rotten),
            (assign, ":continue", 0),
          (try_end),
          (eq, ":continue", 1),
          (item_get_slot, ":food_bonus", ":item_no", slot_item_food_bonus),
          (assign, reg1, ":food_bonus"),
          (set_result_string, "@+{reg1} to party morale"),
          (set_trigger_result, 0x4444FF),
        (try_end),
      (else_try),
        (is_between, ":item_no", readable_books_begin, readable_books_end),
        (try_begin),
          (eq, ":extra_text_id", 0),
          (item_get_slot, reg1, ":item_no", slot_item_intelligence_requirement),
          #SW - modified read to view
          (set_result_string, "@Requires {reg1} intelligence to view"),
          (set_trigger_result, 0xFFEEDD),
        (else_try),
          (eq, ":extra_text_id", 1),
          (item_get_slot, ":progress", ":item_no", slot_item_book_reading_progress),
          (val_div, ":progress", 10),
          (assign, reg1, ":progress"),
          #SW - modified read to view
          (set_result_string, "@Viewing Progress: {reg1}%"),
          (set_trigger_result, 0xFFEEDD),
        (try_end),
      (else_try),
        (is_between, ":item_no", reference_books_begin, reference_books_end),
        (try_begin),
          (eq, ":extra_text_id", 0),
          (try_begin),
            (eq, ":item_no", "itm_book_wound_treatment_reference"),
            (str_store_string, s1, "@wound treament"),
          (else_try),
            #SW - for new tactics book
            (eq, ":item_no", "itm_book_tactics_reference"),
            (str_store_string, s1, "@tactics"),
          (else_try),
            #SW - for new first_aid book
            (eq, ":item_no", "itm_book_first_aid_reference"),
            (str_store_string, s1, "@first aid"),
          (else_try),
            #SW - for new ironflesh book
            (eq, ":item_no", "itm_book_ironflesh_reference"),
            (str_store_string, s1, "@ironflesh"),
          (else_try),
            #SW - for new horse_archery_reference book
            (eq, ":item_no", "itm_book_horse_archery_reference"),
            (str_store_string, s1, "@mounted accuracy"),
          (else_try),
            (eq, ":item_no", "itm_book_training_reference"),
            (str_store_string, s1, "@trainer"),
          (else_try),
            (eq, ":item_no", "itm_book_surgery_reference"),
            #SW - modified surgery = force protect, nevermind
            (str_store_string, s1, "@surgery"),
            #(str_store_string, s1, "@force protect"),
          (else_try),
            (eq, ":item_no", "itm_book_trade_reference"),
            (str_store_string, s1, "@trade"),
          (try_end),
          (set_result_string, "@+1 to {s1} while in inventory"),
          #(set_trigger_result, 0xFFEEDD),
          (set_trigger_result, 0x00ff7f), #Green text
        (try_end),
        #==============================================================================================
        #SW - new extra text items
      (else_try),
        (eq, ":extra_text_id", 0),
        (eq, ":item_no", "itm_mand_arm_dummy"),
        (set_result_string, "@+1 to Ironflesh when worn"),
        (set_trigger_result, 0x00ff7f), #Green text
      #(else_try),
        #(eq, ":extra_text_id", 0),
        #(eq, ":item_no", "itm_mandalorian_deadeye_armor"),
        #(set_result_string, "@+1 to Ironflesh when worn"),
        #(set_trigger_result, 0x00ff7f), #Green text
      (else_try),
        (eq, ":extra_text_id", 0),
        (this_or_next|eq, ":item_no", "itm_glasses_yellow"),
        (eq, ":item_no", "itm_glasses_black"),
        (call_script,"script_get_key","$helmet_view_key"),
        (str_store_string,s1,s13),
        (set_result_string, "@+1 to Mounted Accuracy when worn^Press '{s1}' to enable Helmet View"),
        (set_trigger_result, 0x00ff7f), #Green text
      (else_try),
        (eq, ":extra_text_id", 0),
        (eq, ":item_no", "itm_lobot_headgear"),
        (set_result_string, "@+2 to Engineer when worn"),
        (set_trigger_result, 0x00ff7f), #Green text
      (else_try),
        (eq, ":extra_text_id", 0),
        (eq, ":item_no", "itm_eyepiece_tactics"),
        (set_result_string, "@+1 to Tactics when worn"),
        (set_trigger_result, 0x00ff7f), #Green text
      (else_try),
        (eq, ":extra_text_id", 0),
        (eq, ":item_no", "itm_eyepiece_leadership"),
        (set_result_string, "@+1 to Leadership when worn"),
        (set_trigger_result, 0x00ff7f), #Green text
      #(else_try),
        #(eq, ":extra_text_id", 0),
        #(eq, ":item_no", "itm_mandalorian_crushgaunts"),
        #(set_result_string, "@+1 to Power Strike when worn"),
        #(set_trigger_result, 0x00ff7f), #Green text
      (else_try),
        (eq, ":extra_text_id", 0),
        (eq, ":item_no", "itm_bacta_injector"),
        (call_script,"script_get_key","$bacta_injector_key"),
        (str_store_string,s1,s13),
        (set_result_string, "@Press '{s1}' to heal player^(Bacta Capsule required)"),
        (set_trigger_result, 0x00ff7f), #Green text
      (else_try),
        (eq, ":extra_text_id", 0),
        (eq, ":item_no", "itm_bacta_capsule"),
        (set_result_string, "@Heals 20hp^(Bacta Injector required)"),
        (set_trigger_result, 0x00ff7f), #Green text
      (else_try),
        (eq, ":extra_text_id", 0),
        #(this_or_next|eq, ":item_no", "itm_imperial_stormtrooper_helmet"),
        #(this_or_next|eq, ":item_no", "itm_imperial_stormtrooper_helmet_incinerator"),
        #(this_or_next|eq, ":item_no", "itm_imperial_stormtrooper_helmet_novatrooper"),
        #(this_or_next|eq, ":item_no", "itm_imperial_scout_trooper_helmet"),
        #(this_or_next|eq, ":item_no", "itm_shadow_scout_trooper_helmet"),
        #(this_or_next|eq, ":item_no", "itm_fang_helmet"),
        #(this_or_next|eq, ":item_no", "itm_eyepiece_tactics"),
        #(this_or_next|eq, ":item_no", "itm_eyepiece_leadership"),
        #(this_or_next|eq, ":item_no", "itm_defiler_helmet"),
        #(this_or_next|eq, ":item_no", "itm_mercenary_helmet"),
        #(this_or_next|eq, ":item_no", "itm_imperial_gunner_helmet"),
        #(this_or_next|eq, ":item_no", "itm_beak_helmet"),
        #(this_or_next|eq, ":item_no", "itm_black_sun_helmet"),
        #(this_or_next|eq, ":item_no", "itm_trandoshan_mask"),
        #(this_or_next|eq, ":item_no", "itm_wookiee_hunter_helmet"),
        #(this_or_next|eq, ":item_no", "itm_darth_vader_helmet"),
        #(this_or_next|eq, ":item_no", "itm_tusken_helmet"),
        #(this_or_next|eq, ":item_no", "itm_gas_mask"),
        #(this_or_next|eq, ":item_no", "itm_imperial_royal_guard_helmet"),
        #(this_or_next|eq, ":item_no", "itm_shadow_guard_helmet"),
        #(this_or_next|eq, ":item_no", "itm_imperial_trooper_helmet"),
        #(this_or_next|eq, ":item_no", "itm_rebel_honor_guard_helmet"),
        (this_or_next|eq, ":item_no", "itm_rep_helm_phase1_white"),
        (this_or_next|eq, ":item_no", "itm_rep_helm_phase1_blue"),
        (this_or_next|eq, ":item_no", "itm_rep_helm_phase1_green"),
        (this_or_next|eq, ":item_no", "itm_rep_helm_phase1_orange"),
        (this_or_next|eq, ":item_no", "itm_rep_helm_phase1_red"),
        (this_or_next|eq, ":item_no", "itm_rep_helm_phase1_yellow"),
        (this_or_next|eq, ":item_no", "itm_rep_helm_phase2_camo"),
        (this_or_next|eq, ":item_no", "itm_rep_helm_phase2_black"),
        (this_or_next|eq, ":item_no", "itm_rep_helm_phase2sniper"),
        (this_or_next|eq, ":item_no", "itm_rep_helm_phase2arf"),
        (this_or_next|eq, ":item_no", "itm_rep_helm_phase2scout"),
        (this_or_next|eq, ":item_no", "itm_phase_ii_helmet_clean"),
        (this_or_next|eq, ":item_no", "itm_phase_ii_helmet_worn"),
        (this_or_next|eq, ":item_no", "itm_phase_ii_helmet_501"),
        (this_or_next|eq, ":item_no", "itm_phase_ii_helmet_212"),
        (this_or_next|eq, ":item_no", "itm_phase_ii_helmet_442"),
        (this_or_next|eq, ":item_no", "itm_phase_ii_helmet_wolf"),
        (this_or_next|eq, ":item_no", "itm_phase_ii_helmet_shock"),
        (this_or_next|eq, ":item_no", "itm_phase_ii_helmet_Echo"),
        (this_or_next|eq, ":item_no", "itm_phase_ii_helmet_Rex"),
        (this_or_next|eq, ":item_no", "itm_phase_ii_helmet_Wolffe"),
        (this_or_next|eq, ":item_no", "itm_phase_ii_helmet_fives"),
        (this_or_next|eq, ":item_no", "itm_phase_ii_helmet_fox"),
        (this_or_next|eq, ":item_no", "itm_phase_ii_helmet_cody"),
        (this_or_next|eq, ":item_no", "itm_phase_ii_helmet_appo"),
        (this_or_next|eq, ":item_no", "itm_phase_ii_helmet_thorn"),
        (             eq, ":item_no", "itm_mand_helm_dummy"),
        (call_script,"script_get_key","$helmet_view_key"),
        (str_store_string,s1,s13),
        (set_result_string, "@Press '{s1}' to enable Helmet View"),
        (set_trigger_result, 0x00ff7f), #Green text
      (else_try),
        (this_or_next|eq, ":item_no", "itm_lightsaber_green"),
        (this_or_next|eq, ":item_no", "itm_lightsaber_blue"),
        (this_or_next|eq, ":item_no", "itm_lightsaber_orange"),
        (this_or_next|eq, ":item_no", "itm_lightsaber_purple"),
        (this_or_next|eq, ":item_no", "itm_lightsaber_yellow"),
        (this_or_next|eq, ":item_no", "itm_lightsaber_red"),
        (this_or_next|eq, ":item_no", "itm_force_throw_lightsaber_green_merch"),
        (this_or_next|eq, ":item_no", "itm_force_throw_lightsaber_blue_merch"),
        (this_or_next|eq, ":item_no", "itm_force_throw_lightsaber_orange_merch"),
        (this_or_next|eq, ":item_no", "itm_force_throw_lightsaber_purple_merch"),
        (this_or_next|eq, ":item_no", "itm_force_throw_lightsaber_yellow_merch"),
        (this_or_next|eq, ":item_no", "itm_force_throw_lightsaber_red_merch"),
        (this_or_next|eq, ":item_no", "itm_lightsaber_green_pike"),
        (this_or_next|eq, ":item_no", "itm_lightsaber_blue_pike"),
        (this_or_next|eq, ":item_no", "itm_lightsaber_orange_pike"),
        (this_or_next|eq, ":item_no", "itm_lightsaber_purple_pike"),
        (this_or_next|eq, ":item_no", "itm_lightsaber_yellow_pike"),
        (this_or_next|eq, ":item_no", "itm_lightsaber_red_pike"),
        (this_or_next|eq, ":item_no", "itm_force_throw_lightsaber_green_pike"),
        (this_or_next|eq, ":item_no", "itm_force_throw_lightsaber_blue_pike"),
        (this_or_next|eq, ":item_no", "itm_force_throw_lightsaber_orange_pike"),
        (this_or_next|eq, ":item_no", "itm_force_throw_lightsaber_purple_pike"),
        (this_or_next|eq, ":item_no", "itm_force_throw_lightsaber_yellow_pike"),
        (this_or_next|eq, ":item_no", "itm_force_throw_lightsaber_red_pike"),
        (this_or_next|eq, ":item_no", "itm_twilek_dagger"),
        (this_or_next|eq, ":item_no", "itm_twilek_dagger_throwing"),
        (this_or_next|eq, ":item_no", "itm_gamorrean_axe_1h"),
        (eq, ":item_no", "itm_throwing_axes"),
        (eq, ":extra_text_id", 0),
        (call_script,"script_get_key","$toggle_weapon_key"),
        (str_store_string,s1,s13),
        (set_result_string, "@Press '{s1}' to toggle weapon capabilities"),
        (set_trigger_result, 0x00ff7f), #Green text
        #(else_try),
        #   (eq, ":item_no", "itm_binocular"),
        #  (eq, ":extra_text_id", 0),
        #   (call_script,"script_get_key","$binoculars_key"),
        #   (str_store_string,s1,s13),
        #   (set_result_string, "@Press '{s1}' to change the zoom level"),
        #   (set_trigger_result, 0x00ff7f), #Green text
      (else_try),
        (this_or_next|eq, ":item_no", "itm_force_jump"),
        (eq, ":item_no", "itm_jetpack"),
        (eq, ":extra_text_id", 0),
        (call_script,"script_get_key","$jetpack_key"),
        (str_store_string,s1,s13),
        (set_result_string, "@Press '{s1}' to use"),
        (set_trigger_result, 0x00ff7f), #Green text
      (else_try),
        (this_or_next|eq, ":item_no", "itm_power_droid_grey"),
        (this_or_next|eq, ":item_no", "itm_power_droid_snow"),
        (eq, ":item_no", "itm_power_droid_tan"),
        (eq, ":extra_text_id", 0),
        (set_result_string, "@Refills ammo of nearby team when equipped"),
        (set_trigger_result, 0x00ff7f), #Green text
      (else_try),
        (eq, ":item_no", "itm_fxseries_droid_armor"),
        (eq, ":extra_text_id", 0),
        (set_result_string, "@Refills health of nearby team when equipped"),
        (set_trigger_result, 0x00ff7f), #Green text
      (else_try),
        (this_or_next|eq, ":item_no", "itm_force_lightning_ammo"),
        (eq, ":item_no", "itm_force_push_ammo"),
        (eq, ":extra_text_id", 0),
        (set_result_string, "@Ammo for Force Powers"),
        (set_trigger_result, 0xffffff), #white text
      (else_try),
        (eq, ":item_no", "itm_force_kill"),
        (eq, ":extra_text_id", 0),
        (set_result_string, "@Hurts player when used"),
        (set_trigger_result, 0xcdcb00), #yellow text
        # (else_try),
        # #(eq, ":item_no", "itm_medpac"),
        # (this_or_next|eq, ":item_no", "itm_medpac"),
        # (eq, ":item_no", "itm_medpac_adv"),
        # (eq, ":extra_text_id", 0),
        # (set_result_string, "@Heals player when thrown"),
        # (set_trigger_result, 0x00ff7f), #Green text
        
        
        #WEAPON CLIP EXTRA TEXT BEGIN
      (else_try),
        (is_between, ":item_no", ranged_weapons_begin, ranged_weapons_end),
        ##@> SWY | TEMP, WEAPON AMMO CLIP DB, UGLY, BUT WE NEED A SPECIFIC FUNCTION TO MANAGE - - -
        
        #swy@2013 Finally added dynamic db generation :-) Function up there ^
        ]+gen_ammodb()+[
        
        ##@> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        (eq, ":extra_text_id", 0),
        (item_get_slot, reg1,":item_no",slot_item_ammo_clip),
        (set_result_string, "@Ammo clip size: {reg1}"),
        (set_trigger_result, 0xFF6600), #orange text
        (str_clear, s1),
        
      (else_try),
        (this_or_next|eq, ":item_no", "itm_e11"),
        (this_or_next|eq, ":item_no", "itm_e11_hip"),
        (this_or_next|eq, ":item_no", "itm_a280"),
        (this_or_next|eq, ":item_no", "itm_a280_crouch"),
        (this_or_next|eq, ":item_no", "itm_a295"),
        (this_or_next|eq, ":item_no", "itm_a295_crouch"),
        (this_or_next|eq, ":item_no", "itm_dc15a"),
        (             eq, ":item_no", "itm_dc15a_hip"),
        (eq, ":extra_text_id", 1),
        (call_script,"script_get_key","$toggle_weapon_key"),
        (str_store_string,s1,s13),
        (set_result_string, "@Press '{s1}' to toggle weapon firing position"),
        (set_trigger_result, 0x00ff7f), #Green text
        
        # (else_try),
        # (eq, ":item_no", "itm_flame_rifle"),
        # (eq, ":extra_text_id", 0),
        # (set_result_string, "@Ammo clip size: 6"),
        # (set_trigger_result, 0xffffff), #white text
        # (else_try),
        # (eq, ":item_no", "itm_tusken_rifle"),
        # (eq, ":extra_text_id", 0),
        # (set_result_string, "@Ammo clip size: 7"),
        # (set_trigger_result, 0xffffff), #white text
        # (else_try),
        # (this_or_next|eq, ":item_no", "itm_mg15"),
        # (this_or_next|eq, ":item_no", "itm_t21"),
        # (this_or_next|eq, ":item_no", "itm_ion_pistol"),
        # (eq, ":item_no", "itm_concussion_rifle"),
        # (eq, ":extra_text_id", 0),
        # (set_result_string, "@Ammo clip size: 8"),
        # (set_trigger_result, 0xffffff), #white text
        # (else_try),
        # (this_or_next|eq, ":item_no", "itm_dlt19"),
        # (this_or_next|eq, ":item_no", "itm_dc15a"),
        # (this_or_next|eq, ":item_no", "itm_kisteer_1284"),
        # (this_or_next|eq, ":item_no", "itm_ion_blaster"),
        # (this_or_next|eq, ":item_no", "itm_q2"),
        # (this_or_next|eq, ":item_no", "itm_q2_stun"),
        # (this_or_next|eq, ":item_no", "itm_dl18"),
        # (eq, ":item_no", "itm_trandoshan_supressor"),
        # (eq, ":extra_text_id", 0),
        # (set_result_string, "@Ammo clip size: 10"),
        # (set_trigger_result, 0xffffff), #white text
        # (else_try),
        # (this_or_next|eq, ":item_no", "itm_corellian_destroyer_blaster"),
        # (this_or_next|eq, ":item_no", "itm_dlt19_scope"),
        # (this_or_next|eq, ":item_no", "itm_dlt20a"),
        # (this_or_next|eq, ":item_no", "itm_trandoshan_acp_array_gun"),
        # (this_or_next|eq, ":item_no", "itm_trandoshan_stun_gun"),
        # (this_or_next|eq, ":item_no", "itm_ee3"),
        # (this_or_next|eq, ":item_no", "itm_ee3_stun"),
        # (this_or_next|eq, ":item_no", "itm_geonosian_sonic_rifle"),
        # (this_or_next|eq, ":item_no", "itm_ddc_defender"),
        # (this_or_next|eq, ":item_no", "itm_elg3a"),
        # (this_or_next|eq, ":item_no", "itm_elg3a_stun"),
        # (this_or_next|eq, ":item_no", "itm_westar"),
        # (eq, ":item_no", "itm_westar_stun"),
        # (eq, ":extra_text_id", 0),
        # (set_result_string, "@Ammo clip size: 12"),
        # (set_trigger_result, 0xffffff), #white text
        # (else_try),
        # (this_or_next|eq, ":item_no", "itm_e5"),
        # (this_or_next|eq, ":item_no", "itm_senate_rifle"),
        # (eq, ":item_no", "itm_scout_trooper_pistol"),
        # (eq, ":extra_text_id", 0),
        # (set_result_string, "@Ammo clip size: 14"),
        # (set_trigger_result, 0xffffff), #white text
        # (else_try),
        # (this_or_next|eq, ":item_no", "itm_a280"),
        # (this_or_next|eq, ":item_no", "itm_a280_stun"),
        # (this_or_next|eq, ":item_no", "itm_bothan_bola_carabine"),
        # (this_or_next|eq, ":item_no", "itm_e11"),
        # (this_or_next|eq, ":item_no", "itm_e11_hip"),
        # (this_or_next|eq, ":item_no", "itm_e11_stun"),
        # (this_or_next|eq, ":item_no", "itm_wookiee_bowcaster"),
        # (this_or_next|eq, ":item_no", "itm_se14r"),
        # (this_or_next|eq, ":item_no", "itm_dh17"),
        # (eq, ":item_no", "itm_dh17_stun"),
        # (eq, ":extra_text_id", 0),
        # (set_result_string, "@Ammo clip size: 16"),
        # (set_trigger_result, 0xffffff), #white text
        # (else_try),
        # (this_or_next|eq, ":item_no", "itm_a295"),
        # (this_or_next|eq, ":item_no", "itm_a295_stun"),
        # (this_or_next|eq, ":item_no", "itm_mandalorian_heavy_blaster"),
        # (this_or_next|eq, ":item_no", "itm_dc15s"),
        # (this_or_next|eq, ":item_no", "itm_quicksnap_36t"),
        # (this_or_next|eq, ":item_no", "itm_dl44a"),
        # (this_or_next|eq, ":item_no", "itm_dl44a_stun"),
        # (eq, ":item_no", "itm_geonosian_sonic_pistol"),
        # (eq, ":extra_text_id", 0),
        # (set_result_string, "@Ammo clip size: 18"),
        # (set_trigger_result, 0xffffff), #white text
        # (else_try),
        # (eq, ":item_no", "itm_dl44b"),
        # (eq, ":extra_text_id", 0),
        # (set_result_string, "@Ammo clip size: 20"),
        # (set_trigger_result, 0xffffff), #white text
        # (else_try),
        # (eq, ":item_no", "itm_wrist_blaster"),
        # (eq, ":extra_text_id", 0),
        # (set_result_string, "@Ammo clip size: 24"),
        # (set_trigger_result, 0xffffff), #white text
      (else_try),
        (is_between, ":item_no", pistol_ammo_begin, pistol_ammo_end),
        (try_begin),
          (eq, ":extra_text_id", 0),
          (set_result_string, "@Usable in a Pistol"),
          (set_trigger_result, 0xffffff), #white text
        (try_end),
      (else_try),
        (is_between, ":item_no", rifle_ammo_begin, rifle_ammo_end),
        (try_begin),
          (eq, ":extra_text_id", 0),
          (set_result_string, "@Usable in a Rifle"),
          (set_trigger_result, 0xffffff), #white text
        (try_end),
      (else_try),
        (is_between, ":item_no", shield_bash_begin, shield_bash_end),
        (try_begin),
          (eq, ":extra_text_id", 0),
          (le, "$shield_bash_toggle", 0), #only display if shield bash is enabled
          (set_result_string, "@Allows Shield Bash"),
          (set_trigger_result, 0x00ff7f), #Green text
        (try_end),
      (else_try),
        (is_between, ":item_no", force_power_begin, force_power_end),
        (try_begin),
          (eq, ":extra_text_id", 0),
          (set_result_string, "@Requires Force Push or Force Lightning"),
          (set_trigger_result, 0xffffff), #white text
        (try_end),
      (else_try),
        (this_or_next|eq, ":item_no", "itm_force_lightning_ammo"),
        (eq, ":item_no", "itm_force_push_ammo"),
        (eq, ":extra_text_id", 0),
        (set_result_string, "@Ammo for Force Powers"),
        (set_trigger_result, 0xffffff), #white text
        
        # (else_try),
        # (eq, ":item_no", "itm_medpac_adv"),
        # (eq, ":extra_text_id", 0),
        # (set_result_string, "@Heals player when thrown"),
        # (set_trigger_result, 0x00ff7f), #Green text
        #==============================================================================================
      (try_end),
  ]),
  
  #script_game_on_disembark:
  # This script is called from the game engine when the player reaches the shore with a ship.
  # INPUT: pos0 = disembark position
  # OUTPUT: none
  ("game_on_disembark",
    [(jump_to_menu, "mnu_disembark"),
  ]),
  
  
  #script_game_context_menu_get_buttons:
  # This script is called from the game engine when the player clicks the right mouse button over a party on the map.
  # INPUT: arg1 = party_no
  # OUTPUT: none, fills the menu buttons
  ("game_context_menu_get_buttons",
    [(store_script_param, ":party_no", 1),
      (try_begin),
        (neq, ":party_no", "p_main_party"),
        (context_menu_add_item, "@Move here", cmenu_move),
      (try_end),
      (try_begin),
        (is_between, ":party_no", centers_begin, centers_end),
        (context_menu_add_item, "@View notes", 1),
      (else_try),
        (party_get_num_companion_stacks, ":num_stacks", ":party_no"),
        (gt, ":num_stacks", 0),
        (party_stack_get_troop_id, ":troop_no", ":party_no", 0),
        (is_between, ":troop_no", faction_heroes_begin, faction_heroes_end),
        (context_menu_add_item, "@View notes", 2),
      (try_end),

    ] + (is_a_wb_script==1 and [
    
    #swy-- add an Accompany option to the right-click menu for allied parties, mostly lifted from Native Warband...
    (try_begin),
     (neq,            ":party_no", "p_main_party"),
     (neg|is_between, ":party_no", centers_begin, spawn_points_end),
     
     (context_menu_add_item, "str_cmenu_follow", cmenu_follow),
    (try_end),
     
    ] or []) + [
  ]),
  
  #script_game_event_context_menu_button_clicked:
  # This script is called from the game engine when the player clicks on a button at the right mouse menu.
  # INPUT: arg1 = party_no, arg2 = button_value
  # OUTPUT: none
  ("game_event_context_menu_button_clicked",
    [(store_script_param, ":party_no", 1),
      (store_script_param, ":button_value", 2),
      (try_begin),
        (eq, ":button_value", 1),
        (change_screen_notes, 3, ":party_no"),
      (else_try),
        (eq, ":button_value", 2),
        (party_stack_get_troop_id, ":troop_no", ":party_no", 0),
        (change_screen_notes, 1, ":troop_no"),
      (try_end),
  ]),
  
  #script_game_get_skill_modifier_for_troop
  # This script is called from the game engine when a skill's modifiers are needed
  # INPUT: arg1 = troop_no, arg2 = skill_no
  # OUTPUT: trigger_result = modifier_value
  ("game_get_skill_modifier_for_troop",
    [(store_script_param, ":troop_no", 1),
      (store_script_param, ":skill_no", 2),
      (assign, ":modifier_value", 0),
      (troop_get_slot, ":spaceship", ":troop_no", slot_troop_has_spaceship),
      #get information for spaceship
      (try_begin),
        (gt, ":spaceship", 0), #troop has a spaceship
        #      (troop_get_inventory_capacity, ":inv_cap", ":troop_no"),
        #      (try_for_range, ":i_slot", 0, ":inv_cap"),
        #         (troop_get_inventory_slot, ":temp_item", ":troop_no", ":i_slot"),
        #         (is_between, ":temp_item", starships_begin, starships_end),
        (troop_get_slot, ":troop_capacity", ":troop_no", slot_ship_troop_capacity),
        (troop_get_slot, ":prisoner_capacity", ":troop_no", slot_ship_prisoner_capacity),
        (troop_get_slot, ":cargo_capacity", ":troop_no", slot_ship_cargo_capacity),
        (troop_get_slot, ":med_bay", ":troop_no", slot_ship_medical_bay),
        (troop_get_slot, ":combat_computer", ":troop_no", slot_ship_combat_computer),
        (troop_get_slot, ":trade_computer", ":troop_no", slot_ship_trade_computer),
        (troop_get_slot, ":scanner", ":troop_no", slot_ship_scanner),
        #      (try_end),
      (try_end),
      (try_begin),
        (eq, ":skill_no", "skl_wound_treatment"),
        (try_begin),
          (gt, ":spaceship", 0),
          (gt, ":med_bay", 0),
          (val_add, ":modifier_value", ":med_bay"),
        (try_end),
        (call_script, "script_get_troop_item_amount", ":troop_no", "itm_book_wound_treatment_reference"),
        (gt, reg0, 0),
        (val_add, ":modifier_value", 1),
      (else_try),
        #SW - for new tactics_reference book
        (eq, ":skill_no", "skl_tactics"),
        (try_begin),
          (gt, ":spaceship", 0),
          (gt, ":combat_computer", 0),
          (val_add, ":modifier_value", ":combat_computer"),
        (try_end),
        (call_script, "script_get_troop_item_amount", ":troop_no", "itm_book_tactics_reference"),
        (gt, reg0, 0),
        (val_add, ":modifier_value", 1),
      (else_try),
        #SW - for new first_aid_reference book
        (eq, ":skill_no", "skl_first_aid"),
        (try_begin),
          (gt, ":spaceship", 0),
          (gt, ":med_bay", 0),
          (val_add, ":modifier_value", ":med_bay"),
        (try_end),
        (call_script, "script_get_troop_item_amount", ":troop_no", "itm_book_first_aid_reference"),
        (gt, reg0, 0),
        (val_add, ":modifier_value", 1),
      (else_try),
        #SW - for new ironflesh_reference book
        (eq, ":skill_no", "skl_ironflesh"),
        (call_script, "script_get_troop_item_amount", ":troop_no", "itm_book_ironflesh_reference"),
        (gt, reg0, 0),
        (val_add, ":modifier_value", 1),
      (else_try),
        #SW - for new horse_archery_reference book
        (eq, ":skill_no", "skl_horse_archery"),
        (call_script, "script_get_troop_item_amount", ":troop_no", "itm_book_horse_archery_reference"),
        (gt, reg0, 0),
        (val_add, ":modifier_value", 1),
      (else_try),
        (eq, ":skill_no", "skl_trade"),
        (try_begin),
          (gt, ":spaceship", 0),
          (gt, ":trade_computer", 0),
          (val_add, ":modifier_value", ":trade_computer"),
        (try_end),
        (call_script, "script_get_troop_item_amount", ":troop_no", "itm_book_trade_reference"),
        (gt, reg0, 0),
        (val_add, ":modifier_value", 1),
      (else_try),
        (eq, ":skill_no", "skl_trainer"),
        (call_script, "script_get_troop_item_amount", ":troop_no", "itm_book_training_reference"),
        (gt, reg0, 0),
        (val_add, ":modifier_value", 1),
      (else_try),
        (eq, ":skill_no", "skl_surgery"),
        (try_begin),
          (gt, ":spaceship", 0),
          (gt, ":med_bay", 0),
          (val_add, ":modifier_value", ":med_bay"),
        (try_end),
        (call_script, "script_get_troop_item_amount", ":troop_no", "itm_book_surgery_reference"),
        (gt, reg0, 0),
        (val_add, ":modifier_value", 1),
        #------------------------------------------------------------------------
        #SW - more item modifiers below
      (else_try),
        # SW -  mandalorian_crusader armor
        (eq, ":skill_no", "skl_ironflesh"),
        #(troop_get_inventory_slot,":cur_item1",":troop_no",ek_head),
        (troop_get_inventory_slot,":cur_item2",":troop_no",ek_body),
        #(troop_get_inventory_slot,":cur_item3",":troop_no",ek_foot),
        #(eq, ":cur_item1", "itm_mandalorian_crusader_helmet"),
        (eq, ":cur_item2", "itm_mand_arm_dummy"),
        #(eq, ":cur_item3", "itm_mandalorian_crusader_boots"),
        (val_add, ":modifier_value", 1),
      #(else_try),
        ## SW - new mandalorian_deadeye armor
        #(eq, ":skill_no", "skl_ironflesh"),
        ##(troop_get_inventory_slot,":cur_item1",":troop_no",ek_head),
        #(troop_get_inventory_slot,":cur_item2",":troop_no",ek_body),
        ##(troop_get_inventory_slot,":cur_item3",":troop_no",ek_foot),
        ##(eq, ":cur_item1", "itm_mandalorian_deadeye_helmet"),
        #(eq, ":cur_item2", "itm_mandalorian_deadeye_armor"),
        ##(eq, ":cur_item3", "itm_mandalorian_deadeye_boots"),
        #(val_add, ":modifier_value", 1),
      (else_try),
        (eq, ":skill_no", "skl_horse_archery"),
        (troop_get_inventory_slot,":cur_item1",":troop_no",ek_head),
        (eq, ":cur_item1", "itm_glasses_black"),
        (val_add, ":modifier_value", 1),
      (else_try),
        (eq, ":skill_no", "skl_engineer"),
        (troop_get_inventory_slot,":cur_item1",":troop_no",ek_head),
        (eq, ":cur_item1", "itm_lobot_headgear"),
        (val_add, ":modifier_value", 2),
      (else_try),
        (eq, ":skill_no", "skl_horse_archery"),
        (troop_get_inventory_slot,":cur_item1",":troop_no",ek_head),
        (eq, ":cur_item1", "itm_glasses_yellow"),
        (val_add, ":modifier_value", 1),
      (else_try),
        (eq, ":skill_no", "skl_tactics"),
        (troop_get_inventory_slot,":cur_item1",":troop_no",ek_head),
        (eq, ":cur_item1", "itm_eyepiece_tactics"),
        (val_add, ":modifier_value", 1),
      (else_try),
        (eq, ":skill_no", "skl_leadership"),
        (try_begin),
          (gt, ":spaceship", 0),
          (gt, ":troop_capacity", 0),
          (val_add, ":modifier_value", ":troop_capacity"),
        (try_end),
        (troop_get_inventory_slot,":cur_item1",":troop_no",ek_head),
        (eq, ":cur_item1", "itm_eyepiece_leadership"),
        (val_add, ":modifier_value", 1),
      #(else_try),
        #(eq, ":skill_no", "skl_power_strike"),
        #(troop_get_inventory_slot,":cur_item1",":troop_no",ek_gloves),
        #(eq, ":cur_item1", "itm_mandalorian_crushgaunts"),
        #(val_add, ":modifier_value", 1),
        #SW starships skills continued
      (else_try),
        (eq, ":skill_no", "skl_spotting"),
        (gt, ":spaceship", 0),
        (gt, ":scanner", 0),
        (val_add, ":modifier_value", ":scanner"),
      (else_try),
        (eq, ":skill_no", "skl_inventory_management"),
        (gt, ":spaceship", 0),
        (gt, ":cargo_capacity", 0),
        (val_add, ":modifier_value", ":cargo_capacity"),
      (else_try),
        (eq, ":skill_no", "skl_prisoner_management"),
        (gt, ":spaceship", 0),
        (gt, ":prisoner_capacity", 0),
        (val_add, ":modifier_value", ":prisoner_capacity"),
        #-----------------------------------------------------------
      (try_end),
      (set_trigger_result, ":modifier_value"),
  ]),
  
  # Note to modders: Uncomment these if you'd like to use the following.
  
  ##  #script_game_check_party_sees_party
  ##  # This script is called from the game engine when a party is inside the range of another party
  ##  # INPUT: arg1 = party_no_seer, arg2 = party_no_seen
  ##  # OUTPUT: trigger_result = true or false (1 = true, 0 = false)
  ##  ("game_check_party_sees_party",
  ##   [
  ##     (store_script_param, ":party_no_seer", 1),
  ##     (store_script_param, ":party_no_seen", 2),
  ##     (set_trigger_result, 1),
  ##    ]),
  ##
  ##  #script_game_get_party_speed_multiplier
  ##  # This script is called from the game engine when a skill's modifiers are needed
  ##  # INPUT: arg1 = party_no
  ##  # OUTPUT: trigger_result = multiplier (scaled by 100, meaning that giving 100 as the trigger result does not change the party speed)
  #SW - uncommented script and modified so there is no-longer a penalty for moving at night
  ("game_get_party_speed_multiplier",
    [
      (store_script_param, ":party_no", 1),
      (party_stack_get_troop_id, ":party_leader", ":party_no", 0), # get party leaders trp_id to determine base speed
      (party_get_template_id,":cur_party_template",":party_no"), #or use template
      #speed setting for bandits/deserters
      (try_begin),
        (party_stack_get_troop_id, ":party_leader", ":party_no", 0),
        (this_or_next|is_between, ":party_leader", bandits_begin, bandits_end),
        (eq, ":cur_party_template", "pt_deserters"),
        (assign, ":base_speed", 80),
        # (else_try),
        # (party_slot_eq, ":party_no", slot_party_type, spt_station),
        # (assign, ":base_speed", 20), #set to 20 for Death Star
        #speed settings for patrols
      (else_try),
        (eq, ":cur_party_template", "pt_galacticempire_escort"),
        (party_get_slot, ":cur_home_base", ":party_no", slot_party_home_center),
        (party_get_slot, ":base_lvl", ":cur_home_base", slot_center_has_patrol),
        (try_begin),
          (eq, ":base_lvl", 1),
          (assign, ":base_speed", 105),
        (else_try),
          (eq, ":base_lvl", 2),
          (assign, ":base_speed", 100),
        (else_try),
          (eq, ":base_lvl", 3),
          (assign, ":base_speed", 110),
        (try_end),
        #speed setting for traders
      (else_try),
        (this_or_next|eq, ":cur_party_template", "pt_independent_traders"),
        (this_or_next|eq, ":cur_party_template", "pt_merchant_caravan"),
        (eq, ":cur_party_template", "pt_faction_caravan_party"),
        (assign, ":base_speed", 60),
        #player settings. These change based on ship type and drive upgrades
      (else_try),
        (eq, ":party_leader", 0),
        (troop_get_slot, ":ship_type", "trp_player", slot_troop_has_spaceship),
        (troop_get_slot, ":drive_lvl", "trp_player", slot_ship_drive),
        (assign, ":skip_drive", 0), #this is used below for not running the drive based speed upgrade for players without a ship
        (try_begin),
          (eq, ":ship_type", 0),
          (assign, ":base_speed", 70), # set for player without ship
          (assign, ":skip_drive", 1),
        (else_try),
          #get the base speed for that ship
          (party_get_slot, ":base_speed", ":ship_type", slot_spaceship_base_speed),
        (try_end),
        # (else_try),
        # (eq, ":ship_type", 1),
        # (assign, ":base_speed", 91),
        # (else_try),
        # (eq, ":ship_type", 2),
        # (assign, ":base_speed", 91),
        # (else_try),
        # (eq, ":ship_type", 3),
        # (assign, ":base_speed", 63),
        # (else_try),
        # (eq, ":ship_type", 4),
        # (assign, ":base_speed", 81),
        # (else_try),
        # (eq, ":ship_type", 5),
        # (assign, ":base_speed", 63),
        # (else_try),
        # (eq, ":ship_type", 6),
        # (assign, ":base_speed", 72),
        # (else_try),
        # (eq, ":ship_type", 7),
        # (assign, ":base_speed", 63),
        # (try_end),
        #now add a 10% increase of the base_speed set above for each lvl of drive upgrades
        (try_begin),
          (neq, ":skip_drive", 1),
          (store_mul, ":drive_mod", ":drive_lvl", 10), #10% increase per drive lvl
          (val_add, ":drive_mod", 100),
          (val_mul, ":base_speed", ":drive_mod"),
          (val_div, ":base_speed", 100),
        (try_end),
        
        #SW - add cheat menu speed increase for player
        (try_begin),
          (eq,"$cheat_mode",1),
          (try_begin),
            (le, "$cheat_speed_multiplier", 0), #safety incase this variable isn't set yet
            (assign, "$cheat_speed_multiplier", 1),
          (try_end),
          (val_mul, ":base_speed", "$cheat_speed_multiplier"),
        (try_end),
        
      (else_try),
        (assign, ":base_speed", 100), #set to 100 for all others
      (try_end),
      #general increases
      (try_begin),
        (is_currently_night),
        (val_mul, ":base_speed", 333),  #3x speed at night to negate penalty - 4 was too much, 3 is too litte (by about 11%).. truth is somewhere in between
        (val_div, ":base_speed", 100),
      (else_try),
        (val_mul, ":base_speed", 2),  #2x speed during the day to make spaceships faster
      (try_end),
      
      (val_clamp, ":base_speed", 0, 600),
      (set_trigger_result, ":base_speed"),
  ]),
  
  
  # script_npc_get_troop_wage
  # This script is called from module system to calculate troop wages for npc parties.
  # Input:
  # param1: troop_id
  # Output: reg0: weekly wage
  
  ("npc_get_troop_wage",
    [
      (store_script_param_1, ":troop_id"),
      (assign,":wage", 0),
      (try_begin),
        (troop_is_hero, ":troop_id"),
      (else_try),
        (store_character_level, ":wage", ":troop_id"),
        (val_mul, ":wage", ":wage"),
        (val_add, ":wage", 50),
        (val_div, ":wage", 30),
        (troop_is_mounted, ":troop_id"),
        (val_mul, ":wage", 5),
        (val_div, ":wage", 4),
        #(store_troop_faction, ":troop_fac", ":troop_id"),
        (troop_get_type, ":troop_type", ":troop_id"),
        (try_begin),
            (eq, ":troop_type", tf_tusken),
            (val_add, ":wage", 2),
            (val_mul, ":wage", 6),
            (val_div, ":wage", 5),
            (val_add, ":wage", 2),
        (else_try),
            (this_or_next|eq, ":troop_type",tf_battledroid),
            (eq, ":troop_type", tf_sbd),
            (val_max, ":wage",1),
            (val_mul, ":wage",4),
            (val_sub, ":wage",4),
            (val_div, ":wage",5),
            (try_begin),
                  (this_or_next|eq,":troop_id", "trp_b2series_enhanced"),
                  (this_or_next|eq,":troop_id", "trp_aseries_assassin"),
                  (this_or_next|eq,":troop_id", "trp_bxseries_commando"),
                  (this_or_next|eq,":troop_id", "trp_rebel_heavy_trooper"),                  
                  (this_or_next|eq,":troop_id", "trp_rebel_pilot_veteran"),
                  (this_or_next|eq,":troop_id", "trp_rebel_scout"),
                  (this_or_next|eq,":troop_id", "trp_rebel_honor_guard"),
                  (eq,":troop_id", "trp_cloaked_magna"),
                  (val_mul, ":wage", 2),
            (try_end),   
        (try_end),
      (try_end),
      (assign, reg0, ":wage"),
  ]),
  
  #script_setup_talk_info
  # INPUT: $g_talk_troop, $g_talk_troop_relation
  ("setup_talk_info",
    [
      (talk_info_set_relation_bar, "$g_talk_troop_relation"),
      (str_store_troop_name, s61, "$g_talk_troop"),
      (str_store_string, s61, "@ {s61}"),
      (assign, reg1, "$g_talk_troop_relation"),
      (str_store_string, s62, "str_relation_reg1"),
      (talk_info_set_line, 0, s61),
      (talk_info_set_line, 1, s62),
      (call_script, "script_describe_relation_to_s63", "$g_talk_troop_relation"),
      (talk_info_set_line, 3, s63),
  ]),
  
  #NPC companion changes begin
  #script_setup_talk_info_companions
  ("setup_talk_info_companions",
    [
      (call_script, "script_npc_morale", "$g_talk_troop"),
      (assign, ":troop_morale", reg0),
      
      (talk_info_set_relation_bar, ":troop_morale"),
      
      (str_store_troop_name, s61, "$g_talk_troop"),
      (str_store_string, s61, "@ {s61}"),
      (assign, reg1, ":troop_morale"),
      (str_store_string, s62, "str_morale_reg1"),
      (talk_info_set_line, 0, s61),
      (talk_info_set_line, 1, s62),
      (talk_info_set_line, 3, s63),
  ]),
  #NPC companion changes end
  
  #script_update_party_creation_random_limits
  # INPUT: none
  ("update_party_creation_random_limits",
    [
      (store_character_level, ":player_level", "trp_player"),
      (store_mul, ":upper_limit", ":player_level", 3),
      (val_add, ":upper_limit", 25),
      (val_min, ":upper_limit", 100),
      (set_party_creation_random_limits, 0, ":upper_limit"),
      (assign, reg0, ":upper_limit"),
  ]),
  
  #script_set_trade_route_between_centers
  # INPUT:
  # param1: center_no_1
  # param1: center_no_2
  ("set_trade_route_between_centers",
    [(store_script_param, ":center_no_1", 1),
      (store_script_param, ":center_no_2", 2),
      (assign, ":center_1_added", 0),
      (assign, ":center_2_added", 0),
      (try_for_range, ":cur_slot", slot_mainplanet_trade_routes_begin, slot_mainplanet_trade_routes_end),
        (try_begin),
          (eq, ":center_1_added", 0),
          (party_slot_eq, ":center_no_1", ":cur_slot", 0),
          (party_set_slot, ":center_no_1", ":cur_slot", ":center_no_2"),
          (assign, ":center_1_added", 1),
        (try_end),
        (try_begin),
          (eq, ":center_2_added", 0),
          (party_slot_eq, ":center_no_2", ":cur_slot", 0),
          (party_set_slot, ":center_no_2", ":cur_slot", ":center_no_1"),
          (assign, ":center_2_added", 1),
        (try_end),
      (try_end),
      (try_begin),
        (eq, ":center_1_added", 0),
        (str_store_party_name, s1, ":center_no_1"),
        (display_message, "@ERROR: More than 15 trade routes are given for {s1}."),
      (try_end),
      (try_begin),
        (eq, ":center_2_added", 0),
        (str_store_party_name, s1, ":center_no_2"),
        (display_message, "@ERROR: More than 15 trade routes are given for {s1}."),
      (try_end),
  ]),
  
  #script_center_change_trade_good_production
  # INPUT:
  # param1: center_no
  # param2: item_id
  # param3: production_rate (should be between -100 (for net consumption) and 100 (for net production)
  # param4: randomness (between 0-100)
  ("center_change_trade_good_production",
    [
      (store_script_param, ":center_no", 1),
      (store_script_param, ":item_no", 2),
      (store_script_param, ":production_rate", 3),
      #      (val_mul, ":production_rate", 5),
      (store_script_param, ":randomness", 4),
      (store_random_in_range, ":random_num", 0, ":randomness"),
      (store_random_in_range, ":random_sign", 0, 2),
      (try_begin),
        (eq, ":random_sign", 0),
        (val_add, ":production_rate", ":random_num"),
      (else_try),
        (val_sub, ":production_rate", ":random_num"),
      (try_end),
      (val_sub, ":item_no", trade_goods_begin),
      (val_add, ":item_no", slot_mainplanet_trade_good_productions_begin),
      
      (party_get_slot, ":old_production_rate", ":center_no", ":item_no"),
      (val_add, ":production_rate", ":old_production_rate"),
      (party_set_slot, ":center_no", ":item_no", ":production_rate"),
  ]),
  
  #script_average_trade_good_productions
  # INPUT: none
  ("average_trade_good_productions",
    [
      (store_sub, ":item_to_slot", slot_mainplanet_trade_good_productions_begin, trade_goods_begin),
      #      (store_sub, ":item_to_price_slot", slot_mainplanet_trade_good_prices_begin, trade_goods_begin),
      (try_for_range, ":center_no", mainplanets_begin, mainplanets_end),
        (this_or_next|is_between, ":center_no", mainplanets_begin, mainplanets_end),
        (is_between, ":center_no", minorplanet_begin, minorplanet_end),
        (try_for_range, ":other_center", centers_begin, centers_end),
          (this_or_next|is_between, ":center_no", mainplanets_begin, mainplanets_end),
          (is_between, ":center_no", minorplanet_begin, minorplanet_end),
          (neq, ":other_center", ":center_no"),
          (store_distance_to_party_from_party, ":cur_distance", ":center_no", ":other_center"),
          (lt, ":cur_distance", 110),
          (store_sub, ":dist_factor", 110, ":cur_distance"),
          (try_for_range, ":cur_good", trade_goods_begin, trade_goods_end),
            (store_add, ":cur_good_slot", ":cur_good", ":item_to_slot"),
            (party_get_slot, ":center_production", ":center_no", ":cur_good_slot"),
            (party_get_slot, ":other_center_production", ":other_center", ":cur_good_slot"),
            (store_sub, ":prod_dif", ":center_production", ":other_center_production"),
            (gt, ":prod_dif", 0),
            (store_mul, ":prod_dif_change", ":prod_dif", 1),
            ##            (try_begin),
            ##              (is_between, ":center_no", mainplanets_begin, mainplanets_end),
            ##              (is_between, ":other_center", mainplanets_begin, mainplanets_end),
            ##              (val_mul, ":cur_distance", 2),
            ##            (try_end),
            (val_mul ,":prod_dif_change", ":dist_factor"),
            (val_div ,":prod_dif_change", 110),
            (val_add, ":other_center_production", ":prod_dif_change"),
            (party_set_slot, ":other_center", ":cur_good_slot", ":other_center_production"),
          (try_end),
        (try_end),
      (try_end),
  ]),
  
  #script_normalize_trade_good_productions
  # INPUT: none
  ("normalize_trade_good_productions",
    [
      (store_sub, ":item_to_slot", slot_mainplanet_trade_good_productions_begin, trade_goods_begin),
      (try_for_range, ":cur_good", trade_goods_begin, trade_goods_end),
        (assign, ":total_production", 0),
        (assign, ":num_centers", 0),
        (store_add, ":cur_good_slot", ":cur_good", ":item_to_slot"),
        (try_for_range, ":center_no", centers_begin, centers_end),
          (val_add, ":num_centers", 1),
          (try_begin),
            (is_between, ":center_no", mainplanets_begin, mainplanets_end), #each town is weighted as 5 villages...
            (val_add, ":num_centers", 4),
          (try_end),
          (party_get_slot, ":center_production", ":center_no", ":cur_good_slot"),
          (val_add, ":total_production", ":center_production"),
        (try_end),
        (store_div, ":new_production_difference", ":total_production", ":num_centers"),
        (neq, ":new_production_difference", 0),
        (try_for_range, ":center_no", centers_begin, centers_end),
          (this_or_next|is_between, ":center_no", mainplanets_begin, mainplanets_end),
          (is_between, ":center_no", minorplanet_begin, minorplanet_end),
          (party_get_slot, ":center_production", ":center_no", ":cur_good_slot"),
          (val_sub, ":center_production", ":new_production_difference"),
          (party_set_slot, ":center_no", ":cur_good_slot", ":center_production"),
        (try_end),
      (try_end),
  ]),
  
  #script_update_trade_good_prices
  # INPUT: none
  ("update_trade_good_prices",
    [
      (try_for_range, ":center_no", centers_begin, centers_end),
        (this_or_next|is_between, ":center_no", mainplanets_begin, mainplanets_end),
        (is_between, ":center_no", minorplanet_begin, minorplanet_end),
        (call_script, "script_update_trade_good_price_for_party", ":center_no"),
      (try_end),
      #      (call_script, "script_update_trade_good_price_for_party", "p_zendar"),
      #      (call_script, "script_update_trade_good_price_for_party", "p_salt_mine"),
      #      (call_script, "script_update_trade_good_price_for_party", "p_four_ways_inn"),
  ]),
  
  #script_update_trade_good_price_for_party
  # INPUT: arg1 = party_no
  ("update_trade_good_price_for_party",
    [
      (store_script_param, ":center_no", 1),
      (try_for_range, ":cur_good", trade_goods_begin, trade_goods_end),
        (store_sub, ":cur_good_slot", ":cur_good", trade_goods_begin),
        (val_add, ":cur_good_slot", slot_mainplanet_trade_good_productions_begin),
        (store_sub, ":cur_good_price_slot", ":cur_good", trade_goods_begin),
        (val_add, ":cur_good_price_slot", slot_mainplanet_trade_good_prices_begin),
        (party_get_slot, ":production", ":center_no", ":cur_good_slot"),
        (party_get_slot, ":cur_price", ":center_no", ":cur_good_price_slot"),
        (try_begin),
          (lt, ":production", 0), #demand is greater than supply
          (store_mul, ":change_factor", ":production", -3), #price will be increased by his factor
        (else_try),
          (store_mul, ":change_factor", ":production", 3), #price will be decreased by this factor
        (try_end),
        #        (val_mul, ":change_factor", 2),
        (store_random_in_range, ":random_change", 0, ":change_factor"),
        (try_begin),
          (lt, ":production", 0), #demand is greater than supply
          (val_add, ":cur_price", ":random_change"),
        (else_try),
          (val_sub, ":cur_price", ":random_change"),
        (try_end),
        #Move price towards average by 2%...
        (store_sub, ":price_difference", ":cur_price", average_price_factor),
        (val_mul, ":price_difference", 97),
        (val_div, ":price_difference", 100),
        (store_add, ":new_price", average_price_factor, ":price_difference"),
        (val_clamp, ":new_price", minimum_price_factor, maximum_price_factor),
        (party_set_slot, ":center_no", ":cur_good_price_slot", ":new_price"),
      (try_end),
  ]),
  
  #script_do_merchant_town_trade
  # INPUT: arg1 = party_no (of the merchant), arg2 = center_no
  ("do_merchant_town_trade",
    [
      (store_script_param_1, ":party_no"),
      (store_script_param_2, ":center_no"),
      (call_script, "script_do_party_center_trade", ":party_no", ":center_no", 20), #change prices by 20%
      
      (assign, ":total_change", reg0),
      #Adding the earnings to the wealth (maximum changed price is the earning)
      (val_div, ":total_change", 2),
      (str_store_party_name, s1, ":party_no"),
      (str_store_party_name, s2, ":center_no"),
      (assign, reg1, ":total_change"),
      ##      (try_begin),
      ##        (eq, "$cheat_mode", 1),
      ##        (display_message, "@Merchant {s1} traded with {s2} and earned {reg1} denars."),
      ##      (try_end),
      
      #Adding tax revenue to the center
      (party_get_slot, ":accumulated_tariffs", ":center_no", slot_center_accumulated_tariffs),
      (party_get_slot, ":prosperity", ":center_no", slot_mainplanet_prosperity),
      (store_add, ":tax_gain", ":prosperity", 10),
      (val_mul, ":tax_gain", ":total_change"),
      (val_div, ":tax_gain", 2200), #(10 + prosperity) / 110 * 5% of the merchant's revenue.
      (val_add, ":accumulated_tariffs", ":tax_gain"),
      (party_set_slot, ":center_no", slot_center_accumulated_tariffs, ":accumulated_tariffs"),
      
      #      (try_begin),
      #        (is_between, ":center_no", mainplanets_begin, mainplanets_end),
      #        (party_get_slot, ":merchant",":center_no",slot_mainplanet_merchant),
      #        (gt, ":merchant", 0),
      #        (store_mul, ":merchant_profit", ":total_change", 1),
      #        (val_div, ":merchant_profit", 2),
      #        (troop_add_gold, ":merchant", ":merchant_profit"),
      #      (try_end),
      
      #Adding 1 to center prosperity
      (try_begin),
        (store_random_in_range, ":rand", 0, 100),
        (lt, ":rand", 35),
        (call_script, "script_change_center_prosperity", ":center_no", 1),
      (try_end),
      
  ]),
  
  #script_party_calculate_regular_strength:
  # INPUT:
  # param1: Party-id
  ("party_calculate_regular_strength",
    [
      (store_script_param_1, ":party"), #Party_id
      
      (assign, reg(0),0),
      (party_get_num_companion_stacks, ":num_stacks",":party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop",":party",":i_stack"),
        (neg|troop_is_hero, ":stack_troop"),
        (store_character_level, ":stack_strength", ":stack_troop"),
        (troop_get_type, ":troop_type", ":stack_troop"),# Mando: Clones are stronger, bonus for lower level clones, low level droids are weaker
        (try_begin),#MANDO
            (this_or_next|eq, ":troop_type", tf_battledroid),
            (eq, ":troop_type", tf_sbd),
            (val_max, ":stack_strength", 0),
            (val_div, ":stack_strength", 4),
            #(val_div, ":stack_strength", 4),
            (store_sub, ":stack_strength_sub_1", ":stack_strength",1),
            (store_mul, ":stck_str_sqrt_sub_1", ":stack_strength", ":stack_strength_sub_1"),
            (val_max, ":stck_str_sqrt_sub_1", 1),
            (val_div, ":stck_str_sqrt_sub_1", 4),#3
            (val_sub, ":stck_str_sqrt_sub_1", 2),#1
            (val_add, ":stack_strength",":stck_str_sqrt_sub_1"),
            (val_min, ":stack_strength", 88),
        (else_try),#native
            (val_add, ":stack_strength", 12),
            (val_mul, ":stack_strength", ":stack_strength"),
            (val_div, ":stack_strength", 100),
        (try_end),
        (try_begin),#MANDO
            (eq, ":troop_type", tf_tusken),
            (val_max, ":stack_strength", 5),
            (val_add, ":stack_strength", 8),#8
            (val_mul, ":stack_strength", 5),#5
            (val_div, ":stack_strength", 2),#3
        (try_end),
        (party_stack_get_size, ":stack_size",":party",":i_stack"),
        (party_stack_get_num_wounded, ":num_wounded",":party",":i_stack"),
        (val_sub, ":stack_size", ":num_wounded"),
        (val_mul, ":stack_strength", ":stack_size"),
        (val_add,reg(0), ":stack_strength"),
      (try_end),
  ]),
  
  
  
  
  #script_party_calculate_strength:
  # INPUT: arg1 = party_id, arg2 = exclude leader
  # OUTPUT: reg0 = strength
  
  ("party_calculate_strength",
    [
      (store_script_param_1, ":party"), #Party_id
      (store_script_param_2, ":exclude_leader"), #Party_id
      
      (assign, reg(0),0),
      (party_get_num_companion_stacks, ":num_stacks",":party"),
      (assign, ":first_stack", 0),
      (try_begin),
        (neq, ":exclude_leader", 0),
        (assign, ":first_stack", 1),
      (try_end),
      (try_for_range, ":i_stack", ":first_stack", ":num_stacks"),
        (party_stack_get_troop_id,     ":stack_troop",":party",":i_stack"),
        (store_character_level, ":stack_strength", ":stack_troop"),
        (troop_get_type, ":troop_type", ":stack_troop"),# Mando - Clones are stronger, bonus for lower level clones, low level droids are weaker
        (store_skill_level, ":skill_level", "skl_power_draw", ":stack_troop"),#force users
        (try_begin),#MANDO
            (this_or_next|eq, ":troop_type", tf_battledroid),
            (eq, ":troop_type", tf_sbd),
            (val_div, ":stack_strength", 4),
            (store_sub, ":stack_strength_mn_1", ":stack_strength",1),
            (store_mul, ":stck_str_sqrt_mn_1", ":stack_strength", ":stack_strength_mn_1"),
            (val_max, ":stck_str_sqrt_mn_1", 1),
            (val_div, ":stck_str_sqrt_mn_1", 4),#3
            (val_sub, ":stck_str_sqrt_mn_1", 2),#1
            (val_add, ":stack_strength",":stck_str_sqrt_mn_1"),
            (val_min, ":stack_strength", 77),#88
            (val_max, ":stack_strength", 0), #Kham - fix
        (else_try), 
            (gt, ":skill_level", 3),
            (this_or_next|troop_has_item_equipped, ":stack_troop", itm_force_push_ammo),
            (this_or_next|troop_has_item_equipped, ":stack_troop", itm_force_lightning_ammo),
            (this_or_next|troop_has_item_equipped, ":stack_troop", itm_force_kill),
            (this_or_next|troop_has_item_equipped, ":stack_troop", itm_force_choke),
            (this_or_next|troop_has_item_equipped, ":stack_troop", itm_force_protect),
            (this_or_next|troop_has_item_equipped, ":stack_troop", itm_force_shield),
            (this_or_next|troop_has_item_equipped, ":stack_troop", itm_force_power_ds_4),
            (troop_has_item_equipped, ":stack_troop", itm_force_power_ls_4),
            (val_add, ":stack_strength", 2),
            (val_mul, ":stack_strength", ":stack_strength"),
            (val_div, ":stack_strength", 40),
        (else_try),#native
            (val_add, ":stack_strength", 12),
            (val_mul, ":stack_strength", ":stack_strength"),
            (val_div, ":stack_strength", 100),
        (try_end),
        (try_begin),#MANDO
            (eq, ":troop_type", tf_tusken),
            (val_add, ":stack_strength", 8),#8
            (val_mul, ":stack_strength", 5),#5
            (val_div, ":stack_strength", 2),#3
            (val_max, ":stack_strength", 5), #kham - fix
        (try_end),
        (try_begin),
          (neg|troop_is_hero, ":stack_troop"),
          (party_stack_get_size, ":stack_size",":party",":i_stack"),
          (party_stack_get_num_wounded, ":num_wounded",":party",":i_stack"),
          (val_sub, ":stack_size", ":num_wounded"),
          (val_mul, ":stack_strength", ":stack_size"),
        (else_try),
          (troop_is_wounded, ":stack_troop"), #hero...
          (assign,":stack_strength",0),
        (try_end),
        (val_add,reg(0), ":stack_strength"),
      (try_end),
      (party_set_slot, ":party", slot_party_cached_strength, reg(0)),
  ]),
  
  
  #script_loot_player_items:
  # INPUT: arg1 = enemy_party_no
  # Output: none
  ("loot_player_items",
    [
      (store_script_param, ":enemy_party_no", 1),
      
      (troop_get_inventory_capacity, ":inv_cap", "trp_player"),
      (try_for_range, ":i_slot", 0, ":inv_cap"),
        (troop_get_inventory_slot, ":item_id", "trp_player", ":i_slot"),
        (ge, ":item_id", 0),
        (troop_get_inventory_slot_modifier, ":item_modifier", "trp_player", ":i_slot"),
        (try_begin),
          (is_between, ":item_id", trade_goods_begin, trade_goods_end),
          (assign, ":randomness", 20),
        (else_try),
          (is_between, ":item_id", horses_begin, horses_end),
          (assign, ":randomness", 15),
        (else_try),
          (this_or_next|is_between, ":item_id", weapons_begin, weapons_end),
          (is_between, ":item_id", ranged_weapons_begin, ranged_weapons_end),
          (assign, ":randomness", 5),
        (else_try),
          (this_or_next|is_between, ":item_id", armors_begin, armors_end),
          #SW - fixed code to be shields_begin
          #(is_between, ":item_id", armors_end, shields_end),
          (is_between, ":item_id", shields_begin, shields_end),
          (assign, ":randomness", 5),
        (try_end),
        (store_random_in_range, ":random_no", 0, 100),
        (lt, ":random_no", ":randomness"),
        (troop_remove_item, "trp_player", ":item_id"),
        
        (try_begin),
          (gt, ":enemy_party_no", 0),
          (party_get_slot, ":cur_loot_slot", ":enemy_party_no", slot_party_next_looted_item_slot),
          (val_add, ":cur_loot_slot", slot_party_looted_item_1),
          (party_set_slot, ":enemy_party_no", ":cur_loot_slot", ":item_id"),
          (val_sub, ":cur_loot_slot", slot_party_looted_item_1),
          (val_add, ":cur_loot_slot", slot_party_looted_item_1_modifier),
          (party_set_slot, ":enemy_party_no", ":cur_loot_slot", ":item_modifier"),
          (val_sub, ":cur_loot_slot", slot_party_looted_item_1_modifier),
          (val_add, ":cur_loot_slot", 1),
          (val_mod, ":cur_loot_slot", num_party_loot_slots),
          (party_set_slot, ":enemy_party_no", slot_party_next_looted_item_slot, ":cur_loot_slot"),
        (try_end),
      (try_end),
      (store_troop_gold, ":cur_gold", "trp_player"),
      (store_div, ":max_lost", ":cur_gold", 4),
      (store_div, ":min_lost", ":cur_gold", 10),
      (store_random_in_range, ":lost_gold", ":min_lost", ":max_lost"),
      (troop_remove_gold, "trp_player", ":lost_gold"),
  ]),
  
  
  #script_party_calculate_loot:
  # INPUT:
  # param1: Party-id
  # Returns num looted items in reg(0)
  
  ("party_calculate_loot",
    [
      (store_script_param_1, ":enemy_party"), #Enemy Party_id
      
      
      (call_script, "script_calculate_main_party_shares"),
      (assign, ":num_player_party_shares", reg0),
      #      (assign, ":num_ally_shares", reg1),
      #      (store_add, ":num_shares",  ":num_player_party_shares", ":num_ally_shares"),
      
      #Calculate player loot probability
      #      (assign, ":loot_probability", 100),
      #      (val_mul, ":loot_probability", 10),
      #      (val_div, ":loot_probability", ":num_shares"),
      
      (try_for_range, ":i_loot", 0, num_party_loot_slots),
        (store_add, ":cur_loot_slot", ":i_loot", slot_party_looted_item_1),
        (party_get_slot, ":item_no", "$g_enemy_party", ":cur_loot_slot"),
        (gt, ":item_no", 0),
        (party_set_slot, "$g_enemy_party", ":cur_loot_slot", 0),
        (val_sub, ":cur_loot_slot", slot_party_looted_item_1),
        (val_add, ":cur_loot_slot", slot_party_looted_item_1_modifier),
        (party_get_slot, ":item_modifier", "$g_enemy_party", ":cur_loot_slot"),
        (troop_add_item, "trp_temp_troop", ":item_no", ":item_modifier"),
      (try_end),
      (party_set_slot, "$g_enemy_party", slot_party_next_looted_item_slot, 0),
      
      (assign, ":num_looted_items",0),
      (try_begin),
        (this_or_next|party_slot_eq, "$g_enemy_party", slot_party_type, spt_faction_caravan),
        (party_slot_eq, "$g_enemy_party", slot_party_type, spt_minorplanet_farmer),
        (store_mul, ":plunder_amount", player_loot_share, 30),
        (val_mul, ":plunder_amount", "$g_strength_contribution_of_player"),
        (val_div, ":plunder_amount", 100),
        (val_div, ":plunder_amount", ":num_player_party_shares"),
        (try_begin),
          (party_slot_eq, "$g_enemy_party", slot_party_type, spt_faction_caravan),
          #          (val_clamp, ":plunder_amount", 1, 50),
          (reset_item_probabilities, 100),
          (assign, ":range_min", trade_goods_begin),
          (assign, ":range_max", trade_goods_end),
        (else_try),
          (val_div, ":plunder_amount", 5),
          #          (val_clamp, ":plunder_amount", 1, 10),
          (reset_item_probabilities, 1),
          (assign, ":range_min", food_begin),
          (assign, ":range_max", food_end),
        (try_end),
        (store_sub, ":item_to_price_slot", slot_mainplanet_trade_good_prices_begin, trade_goods_begin),
        (try_for_range, ":cur_goods", ":range_min", ":range_max"),
          (store_add, ":cur_price_slot", ":cur_goods", ":item_to_price_slot"),
          (party_get_slot, ":cur_price", "$g_enemy_party", ":cur_price_slot"),
          (assign, ":cur_probability", 100),
          (val_mul, ":cur_probability", average_price_factor),
          (val_div, ":cur_probability", ":cur_price"),
          (val_mul, ":cur_probability", average_price_factor),
          (val_div, ":cur_probability", ":cur_price"),
          (val_mul, ":cur_probability", average_price_factor),
          (val_div, ":cur_probability", ":cur_price"),
          (assign, reg0, ":cur_probability"),
          (set_item_probability_in_merchandise, ":cur_goods", ":cur_probability"),
        (try_end),
        (troop_add_merchandise, "trp_temp_troop", itp_type_goods, ":plunder_amount"),
        (assign, reg5, ":plunder_amount"),
        (val_add, ":num_looted_items", ":plunder_amount"),
      (try_end),
      
      #Now loot the defeated party
      (store_mul, ":loot_probability", player_loot_share, 3),
      (val_mul, ":loot_probability", "$g_strength_contribution_of_player"),
      (party_get_skill_level, ":player_party_looting", "p_main_party", "skl_looting"),
      (val_add, ":player_party_looting", 10),
      (val_mul, ":loot_probability", ":player_party_looting"),
      (val_div, ":loot_probability", 10),
      (val_div, ":loot_probability", ":num_player_party_shares"),
      
      (party_get_num_companion_stacks, ":num_stacks",":enemy_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id,     ":stack_troop",":enemy_party",":i_stack"),
        (neg|troop_is_hero, ":stack_troop"),
        (party_stack_get_size, ":stack_size",":enemy_party",":i_stack"),
        (try_for_range, ":unused", 0, ":stack_size"),
          (troop_loot_troop,"trp_temp_troop",":stack_troop",":loot_probability"),
        (try_end),
      (try_end),
      (troop_get_inventory_capacity, ":inv_cap", "trp_temp_troop"),
      (try_for_range, ":i_slot", 0, ":inv_cap"),
        (troop_get_inventory_slot, ":item_id", "trp_temp_troop", ":i_slot"),
        (ge, ":item_id", 0),
        (val_add, ":num_looted_items",1),
      (try_end),
      
      (assign, reg0, ":num_looted_items"),
  ]),
  
  #script_calculate_main_party_shares:
  # INPUT:
  # Returns number of player party shares in reg0
  
  ("calculate_main_party_shares",
    [
      (assign, ":num_player_party_shares",player_loot_share),
      # Add shares for player's party
      (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
      (try_for_range, ":i_stack", 1, ":num_stacks"),
        (party_stack_get_troop_id,     ":stack_troop","p_main_party",":i_stack"),
        (try_begin),
          (neg|troop_is_hero, ":stack_troop"),
          (party_stack_get_size, ":stack_size","p_main_party",":i_stack"),
          (val_add, ":num_player_party_shares", ":stack_size"),
        (else_try),
          (val_add, ":num_player_party_shares", hero_loot_share),
        (try_end),
      (try_end),
      
      (assign, reg0, ":num_player_party_shares"),
  ]),
  
  #script_party_give_xp_and_gold:
  # INPUT:
  # param1: destroyed Party-id
  # calculates and gives player paty's share of gold and xp.
  
  ("party_give_xp_and_gold",
    [
      (store_script_param_1, ":enemy_party"), #Party_id
      
      (call_script, "script_calculate_main_party_shares"),
      (assign, ":num_player_party_shares", reg0),
      
      #      (assign, ":num_ally_shares", reg1),
      #     (store_add, ":num_total_shares",  ":num_player_party_shares", ":num_ally_shares"),
      
      (assign, ":total_gain", 0),
      (party_get_num_companion_stacks, ":num_stacks",":enemy_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id,     ":stack_troop",":enemy_party",":i_stack"),
        (neg|troop_is_hero, ":stack_troop"),
        (party_stack_get_size, ":stack_size",":enemy_party",":i_stack"),
        (store_character_level, ":level", ":stack_troop"),
        (store_add, ":gain", ":level", 10),
        (val_mul, ":gain", ":gain"),
        (val_div, ":gain", 10),
        (store_mul, ":stack_gain", ":gain", ":stack_size"),
        (val_add, ":total_gain", ":stack_gain"),
      (try_end),
      
      (val_mul, ":total_gain", "$g_strength_contribution_of_player"),
      (val_div, ":total_gain", 100),
      
      (val_min, ":total_gain", 40000), #eliminate negative results
      
      
      #      (store_mul, ":player_party_xp_gain", ":total_gain", ":num_player_party_shares"),
      #      (val_div, ":player_party_xp_gain", ":num_total_shares"),
      
      (assign, ":player_party_xp_gain", ":total_gain"),
      
      (store_random_in_range, ":r", 50, 100),
      (val_mul, ":player_party_xp_gain", ":r"),
      (val_div, ":player_party_xp_gain", 100),
      
      (party_add_xp, "p_main_party", ":player_party_xp_gain"),
      
      (store_mul, ":player_gold_gain", ":total_gain", player_loot_share),
      (val_min, ":player_gold_gain", 60000), #eliminate negative results
      (store_random_in_range, ":r", 50, 100),
      (val_mul, ":player_gold_gain", ":r"),
      (val_div, ":player_gold_gain", 100),
      (val_div, ":player_gold_gain", ":num_player_party_shares"),
      
      #add gold now
      (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id,     ":stack_troop","p_main_party",":i_stack"),
        (try_begin),
          (troop_is_hero, ":stack_troop"),
          (call_script, "script_troop_add_gold", ":stack_troop", ":player_gold_gain"),
        (try_end),
      (try_end),
      
      #Add morale
      (assign, ":morale_gain", ":total_gain"),
      (val_div, ":morale_gain", ":num_player_party_shares"),
      (call_script, "script_change_player_party_morale", ":morale_gain"),
  ]),
  
  
  #script_setup_troop_meeting:
  # INPUT:
  # param1: troop_id with which meeting will be made.
  # param2: troop_dna (optional)
  
  ("setup_troop_meeting",
    [
      (store_script_param_1, ":meeting_troop"),
      (store_script_param_2, ":troop_dna"),
      (set_jump_mission,"mt_conversation_encounter"),
      (modify_visitors_at_site,"scn_conversation_scene"),(reset_visitors),
      (set_visitor,0,"trp_player"),
      #       (party_stack_get_troop_dna,":troop_dna",":meeting_party",0),
      (set_visitor,17,":meeting_troop",":troop_dna"),
      (jump_to_scene,"scn_conversation_scene"),
      (change_screen_map_conversation, ":meeting_troop"),
  ]),
  
  #script_setup_party_meeting:
  # INPUT:
  # param1: Party-id with which meeting will be made.
  
  ("setup_party_meeting",
    [
      (store_script_param_1, ":meeting_party"),
      (try_begin),
        (lt, "$g_encountered_party_relation", 0), #hostile
        #        (call_script, "script_music_set_situation_with_culture", mtf_sit_encounter_hostile),
      (try_end),
      (set_jump_mission,"mt_conversation_encounter"),      
      (modify_visitors_at_site,"scn_conversation_scene"),(reset_visitors),
      (set_visitor,0,"trp_player"),
      (party_stack_get_troop_id, ":meeting_troop",":meeting_party",0),
      (party_stack_get_troop_dna,":troop_dna",":meeting_party",0),
      (set_visitor,17,":meeting_troop",":troop_dna"),
      (jump_to_scene,"scn_conversation_scene"),
      (change_screen_map_conversation, ":meeting_troop"),
  ]),
  
  #script_party_remove_all_companions:
  # INPUT:
  # param1: Party-id from which  companions will be removed.
  # "$g_move_heroes" : controls if heroes will also be removed.
  
  ("party_remove_all_companions",
    [
      (store_script_param_1, ":party"), #Source Party_id
      (party_get_num_companion_stacks, ":num_companion_stacks",":party"),
      (try_for_range_backwards, ":stack_no", 0, ":num_companion_stacks"),
        (party_stack_get_troop_id,   ":stack_troop",":party",":stack_no"),
        (this_or_next|neg|troop_is_hero, ":stack_troop"),
        (eq, "$g_move_heroes", 1),
        (party_stack_get_size,  ":stack_size",":party",":stack_no"),
        (party_remove_members, ":party", ":stack_troop",  ":stack_size"),
      (try_end),
  ]),
  
  #script_party_remove_all_prisoners:
  # INPUT:
  # param1: Party-id from which  prisoners will be removed.
  # "$g_move_heroes" : controls if heroes will also be removed.
  
  ("party_remove_all_prisoners",
    [
      (store_script_param_1, ":party"), #Source Party_id
      (party_get_num_prisoner_stacks, ":num_prisoner_stacks",":party"),
      (try_for_range_backwards, ":stack_no", 0, ":num_prisoner_stacks"),
        (party_prisoner_stack_get_troop_id,   ":stack_troop",":party",":stack_no"),
        (this_or_next|neg|troop_is_hero, ":stack_troop"),
        (eq, "$g_move_heroes", 1),
        (party_prisoner_stack_get_size, ":stack_size",":party",":stack_no"),
        (party_remove_prisoners, ":party", ":stack_troop", ":stack_size"),
      (try_end),
  ]),
  
  #script_party_add_party_companions:
  # INPUT:
  # param1: Party-id to add the second part
  # param2: Party-id which will be added to the first one.
  # "$g_move_heroes" : controls if heroes will also be added.
  
  ("party_add_party_companions",
    [
      (store_script_param_1, ":target_party"), #Target Party_id
      (store_script_param_2, ":source_party"), #Source Party_id
      (party_get_num_companion_stacks, ":num_stacks",":source_party"),
      (try_for_range, ":stack_no", 0, ":num_stacks"),
        (party_stack_get_troop_id,     ":stack_troop",":source_party",":stack_no"),
        (this_or_next|neg|troop_is_hero, ":stack_troop"),
        (eq, "$g_move_heroes", 1),
        (party_stack_get_size,         ":stack_size",":source_party",":stack_no"),
        (party_add_members, ":target_party", ":stack_troop", ":stack_size"),
        (party_stack_get_num_wounded, ":num_wounded", ":source_party", ":stack_no"),
        (party_wound_members, ":target_party", ":stack_troop", ":num_wounded"),
      (try_end),
  ]),
  
  #script_party_add_party_prisoners:
  # INPUT:
  # param1: Party-id to add the second party
  # param2: Party-id which will be added to the first one.
  # "$g_move_heroes" : controls if heroes will also be added.
  
  ("party_add_party_prisoners",
    [
      (store_script_param_1, ":target_party"), #Target Party_id
      (store_script_param_2, ":source_party"), #Source Party_id
      (party_get_num_prisoner_stacks, ":num_stacks",":source_party"),
      (try_for_range, ":stack_no", 0, ":num_stacks"),
        (party_prisoner_stack_get_troop_id,     ":stack_troop",":source_party",":stack_no"),
        (this_or_next|neg|troop_is_hero, ":stack_troop"),
        (eq, "$g_move_heroes", 1),
        (party_prisoner_stack_get_size,         ":stack_size",":source_party",":stack_no"),
        (party_add_members, ":target_party", ":stack_troop", ":stack_size"),
      (try_end),
  ]),
  
  #script_party_prisoners_add_party_companions:
  # INPUT:
  # param1: Party-id to add the second part
  # param2: Party-id which will be added to the first one.
  # "$g_move_heroes" : controls if heroes will also be added.
  
  ("party_prisoners_add_party_companions",
    [
      (store_script_param_1, ":target_party"), #Target Party_id
      (store_script_param_2, ":source_party"), #Source Party_id
      (party_get_num_companion_stacks, ":num_stacks",":source_party"),
      (try_for_range, ":stack_no", 0, ":num_stacks"),
        (party_stack_get_troop_id,     ":stack_troop",":source_party",":stack_no"),
        (this_or_next|neg|troop_is_hero, ":stack_troop"),
        (eq, "$g_move_heroes", 1),
        (party_stack_get_size, ":stack_size",":source_party",":stack_no"),
        (party_add_prisoners, ":target_party", ":stack_troop", ":stack_size"),
      (try_end),
  ]),
  
  #script_party_prisoners_add_party_prisoners:
  # INPUT:
  # param1: Party-id to add the second part
  # param2: Party-id which will be added to the first one.
  # "$g_move_heroes" : controls if heroes will also be added.
  
  ("party_prisoners_add_party_prisoners",
    [
      (store_script_param_1, ":target_party"), #Target Party_id
      (store_script_param_2, ":source_party"), #Source Party_id
      (party_get_num_prisoner_stacks, ":num_stacks",":source_party"),
      (try_for_range, ":stack_no", 0, ":num_stacks"),
        (party_prisoner_stack_get_troop_id,     ":stack_troop",":source_party",":stack_no"),
        (this_or_next|neg|troop_is_hero, ":stack_troop"),
        (eq, "$g_move_heroes", 1),
        (party_prisoner_stack_get_size,         ":stack_size",":source_party",":stack_no"),
        (party_add_prisoners, ":target_party", ":stack_troop", ":stack_size"),
      (try_end),
  ]),
  
  # script_party_add_party:
  # INPUT:
  # param1: Party-id to add the second part
  # param2: Party-id which will be added to the first one.
  # "$g_move_heroes" : controls if heroes will also be added.
  
  ("party_add_party",
    [
      (store_script_param_1, ":target_party"), #Target Party_id
      (store_script_param_2, ":source_party"), #Source Party_id
      (call_script, "script_party_add_party_companions",          ":target_party", ":source_party"),
      (call_script, "script_party_prisoners_add_party_prisoners", ":target_party", ":source_party"),
  ]),
  
  
  #script_party_copy:
  # INPUT:
  # param1: Party-id to copy the second party
  # param2: Party-id which will be copied to the first one.
  
  ("party_copy",
    [
      (assign, "$g_move_heroes", 1),
      (store_script_param_1, ":target_party"), #Target Party_id
      (store_script_param_2, ":source_party"), #Source Party_id
      (party_clear, ":target_party"),
      (call_script, "script_party_add_party", ":target_party", ":source_party"),
  ]),
  
  
  #script_clear_party_group:
  # INPUT:
  # param1: Party-id of the root of the group.
  # This script will clear the root party and all parties attached to it recursively.
  
  ("clear_party_group",
    [
      (store_script_param_1, ":root_party"),
      (party_clear, ":root_party"),
      (party_get_num_attached_parties, ":num_attached_parties", ":root_party"),
      (try_for_range, ":attached_party_rank", 0, ":num_attached_parties"),
        (party_get_attached_party_with_rank, ":attached_party", ":root_party", ":attached_party_rank"),
        (call_script, "script_clear_party_group", ":attached_party"),
      (try_end),
  ]),
  
  #script_get_nonempty_party_in_group:
  # INPUT:
  # param1: Party-id of the root of the group.
  # OUTPUT: reg0: nonempy party-id
  
  ("get_nonempty_party_in_group",
    [
      (store_script_param_1, ":party_no"),
      (party_get_num_companion_stacks, ":num_companion_stacks", ":party_no"),
      (try_begin),
        (gt, ":num_companion_stacks", 0),
        (assign, reg0, ":party_no"),
      (else_try),
        (assign, reg0, -1),
        
        (party_get_num_attached_parties, ":num_attached_parties", ":party_no"),
        (try_for_range, ":attached_party_rank", 0, ":num_attached_parties"),
          (lt, reg0, 0),
          (party_get_attached_party_with_rank, ":attached_party", ":party_no", ":attached_party_rank"),
          (call_script, "script_get_nonempty_party_in_group", ":attached_party"),
        (try_end),
      (try_end),
  ]),
  
  #script_collect_prisoners_from_empty_parties:
  # INPUT:
  # param1: Party-id of the root of the group.
  # param2: Party to collect prisoners in.
  # make sure collection party is cleared before calling this.
  
  ("collect_prisoners_from_empty_parties",
    [
      (store_script_param_1, ":party_no"),
      (store_script_param_2, ":collection_party"),
      
      (party_get_num_companions, ":num_companions", ":party_no"),
      (try_begin),
        (eq, ":num_companions", 0), #party is empty (has no companions). Collect its prisoners.
        (party_get_num_prisoner_stacks, ":num_stacks",":party_no"),
        (try_for_range, ":stack_no", 0, ":num_stacks"),
          (party_prisoner_stack_get_troop_id,     ":stack_troop",":party_no",":stack_no"),
          (troop_is_hero, ":stack_troop"),
          (party_add_members, ":collection_party", ":stack_troop", 1),
        (try_end),
      (try_end),
      (party_get_num_attached_parties, ":num_attached_parties", ":party_no"),
      (try_for_range, ":attached_party_rank", 0, ":num_attached_parties"),
        (party_get_attached_party_with_rank, ":attached_party", ":party_no", ":attached_party_rank"),
        (call_script, "script_collect_prisoners_from_empty_parties", ":attached_party", ":collection_party"),
      (try_end),
  ]),
  
  
  
  #script_print_casualties_to_s0:
  # INPUT:
  # param1: Party_id, param2: 0 = use new line, 1 = use comma
  
  #OUTPUT:
  # string register 0.
  
  ("print_casualties_to_s0",
    [(store_script_param, ":party_no", 1),
      (store_script_param, ":use_comma", 2),
      (str_clear, s0),
      (assign, ":total_reported", 0),
      (assign, ":total_wounded", 0),
      (assign, ":total_killed", 0),
      (party_get_num_companion_stacks, ":num_stacks",":party_no"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop",":party_no",":i_stack"),
        (party_stack_get_size, ":stack_size",":party_no",":i_stack"),
        (party_stack_get_num_wounded, ":num_wounded",":party_no",":i_stack"),
        (store_sub, ":num_killed", ":stack_size", ":num_wounded"),
        (val_add, ":total_killed", ":num_killed"),
        (val_add, ":total_wounded", ":num_wounded"),
        (try_begin),
          (this_or_next|gt, ":num_killed", 0),
          (gt, ":num_wounded", 0),
          (store_add, reg3, ":num_killed", ":num_wounded"),
          (str_store_troop_name_by_count, s1, ":stack_troop", reg3),
          (try_begin),
            (troop_is_hero, ":stack_troop"),
            (assign, reg3, 0),
          (try_end),
          (try_begin),
            (gt, ":num_killed", 0),
            (gt, ":num_wounded", 0),
            (assign, reg4, ":num_killed"),
            (assign, reg5, ":num_wounded"),
            (str_store_string, s2, "@{reg4} killed, {reg5} wounded"),
          (else_try),
            (gt, ":num_killed", 0),
            (str_store_string, s2, "@killed"),
          (else_try),
            (str_store_string, s2, "@wounded"),
          (try_end),
          (try_begin),
            (eq, ":use_comma", 1),
            (try_begin),
              (eq, ":total_reported", 0),
              (str_store_string, s0, "@{reg3?{reg3}:} {s1} ({s2})"),
            (else_try),
              (str_store_string, s0, "@{s0}, {reg3?{reg3}:} {s1} ({s2})"),
            (try_end),
          (else_try),
            (str_store_string, s0, "@{s0}^{reg3?{reg3}:} {s1} ({s2})"),
          (try_end),
          (val_add, ":total_reported", 1),
        (try_end),
      (try_end),
      
      (try_begin),
        (this_or_next|gt, ":total_killed", 0),
        (gt, ":total_wounded", 0),
        (store_add, reg3, ":total_killed", ":total_wounded"),
        (try_begin),
          (gt, ":total_killed", 0),
          (gt, ":total_wounded", 0),
          (assign, reg4, ":total_killed"),
          (assign, reg5, ":total_wounded"),
          (str_store_string, s2, "@{reg4} killed, {reg5} wounded"),
        (else_try),
          (gt, ":total_killed", 0),
          (str_store_string, s2, "@killed"),
        (else_try),
          (str_store_string, s2, "@wounded"),
        (try_end),
        (str_store_string, s0, "@{s0}^TOTAL: {reg3} ({s2})"),
      (else_try),
        (try_begin),
          (eq, ":use_comma", 1),
          (str_store_string, s0, "@None"),
        (else_try),
          (str_store_string, s0, "@^None"),
        (try_end),
      (try_end),
  ]),
  
  #script_write_fit_party_members_to_stack_selection
  # INPUT:
  # param1: party_no, exclude_leader
  #OUTPUT:
  # trp_stack_selection_amounts slots (slot 0 = number of stacks, 1 = number of men fit, 2..n = stack sizes (fit))
  # trp_stack_selection_ids slots (2..n = stack troops)
  ("write_fit_party_members_to_stack_selection",
    [
      (store_script_param, ":party_no", 1),
      (store_script_param, ":exclude_leader", 2),
      (party_get_num_companion_stacks, ":num_stacks", ":party_no"),
      (assign, ":slot_index", 2),
      (assign, ":total_fit", 0),
      (try_for_range, ":stack_index", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop", ":party_no", ":stack_index"),
        (assign, ":num_fit", 0),
        (try_begin),
          (troop_is_hero, ":stack_troop"),
          (try_begin),
            (neg|troop_is_wounded, ":stack_troop"),
            (this_or_next|eq, ":exclude_leader", 0),
            (neq, ":stack_index", 0),
            (assign, ":num_fit",1),
          (try_end),
        (else_try),
          (party_stack_get_size, ":num_fit", ":party_no", ":stack_index"),
          (party_stack_get_num_wounded, ":num_wounded", ":party_no", ":stack_index"),
          (val_sub, ":num_fit", ":num_wounded"),
        (try_end),
        (try_begin),
          (gt, ":num_fit", 0),
          (troop_set_slot, "trp_stack_selection_amounts", ":slot_index", ":num_fit"),
          (troop_set_slot, "trp_stack_selection_ids", ":slot_index", ":stack_troop"),
          (val_add, ":slot_index", 1),
        (try_end),
        (val_add, ":total_fit", ":num_fit"),
      (try_end),
      (val_sub, ":slot_index", 2),
      (troop_set_slot, "trp_stack_selection_amounts", 0, ":slot_index"),
      (troop_set_slot, "trp_stack_selection_amounts", 1, ":total_fit"),
  ]),
  
  #script_remove_fit_party_member_from_stack_selection
  # INPUT:
  # param1: slot_index
  #OUTPUT:
  # reg0 = troop_no
  # trp_stack_selection_amounts slots (slot 0 = number of stacks, 1 = number of men fit, 2..n = stack sizes (fit))
  # trp_stack_selection_ids slots (2..n = stack troops)
  ("remove_fit_party_member_from_stack_selection",
    [
      (store_script_param, ":slot_index", 1),
      (val_add, ":slot_index", 2),
      (troop_get_slot, ":amount", "trp_stack_selection_amounts", ":slot_index"),
      (troop_get_slot, ":troop_no", "trp_stack_selection_ids", ":slot_index"),
      (val_sub, ":amount", 1),
      (troop_set_slot, "trp_stack_selection_amounts", ":slot_index", ":amount"),
      (troop_get_slot, ":total_amount", "trp_stack_selection_amounts", 1),
      (val_sub, ":total_amount", 1),
      (troop_set_slot, "trp_stack_selection_amounts", 1, ":total_amount"),
      (try_begin),
        (le, ":amount", 0),
        (troop_get_slot, ":num_slots", "trp_stack_selection_amounts", 0),
        (store_add, ":end_cond", ":num_slots", 2),
        (store_add, ":begin_cond", ":slot_index", 1),
        (try_for_range, ":index", ":begin_cond", ":end_cond"),
          (store_sub, ":prev_index", ":index", 1),
          (troop_get_slot, ":value", "trp_stack_selection_amounts", ":index"),
          (troop_set_slot, "trp_stack_selection_amounts", ":prev_index", ":value"),
          (troop_get_slot, ":value", "trp_stack_selection_ids", ":index"),
          (troop_set_slot, "trp_stack_selection_ids", ":prev_index", ":value"),
        (try_end),
        (val_sub, ":num_slots", 1),
        (troop_set_slot, "trp_stack_selection_amounts", 0, ":num_slots"),
      (try_end),
      (assign, reg0, ":troop_no"),
  ]),
  
  #script_remove_random_fit_party_member_from_stack_selection
  # INPUT:
  # none
  #OUTPUT:
  # reg0 = troop_no
  # trp_stack_selection_amounts slots (slot 0 = number of stacks, 1 = number of men fit, 2..n = stack sizes (fit))
  # trp_stack_selection_ids slots (2..n = stack troops)
  ("remove_random_fit_party_member_from_stack_selection",
    [
      (troop_get_slot, ":total_amount", "trp_stack_selection_amounts", 1),
      (store_random_in_range, ":random_troop", 0, ":total_amount"),
      (troop_get_slot, ":num_slots", "trp_stack_selection_amounts", 0),
      (store_add, ":end_cond", ":num_slots", 2),
      (try_for_range, ":index", 2, ":end_cond"),
        (troop_get_slot, ":amount", "trp_stack_selection_amounts", ":index"),
        (val_sub, ":random_troop", ":amount"),
        (lt, ":random_troop", 0),
        (assign, ":end_cond", 0),
        (store_sub, ":slot_index", ":index", 2),
      (try_end),
      (call_script, "script_remove_fit_party_member_from_stack_selection", ":slot_index"),
  ]),
  
  
  #script_cf_training_ground_sub_routine_1_for_melee_details
  # INPUT:
  # value
  #OUTPUT:
  # none
  ("cf_training_ground_sub_routine_1_for_melee_details",
    [
      (store_script_param, ":value", 1),
      (ge, "$temp_3", ":value"),
      (val_add, ":value", 1),
      (troop_get_slot, ":troop_id", "trp_stack_selection_ids", ":value"),
      (str_store_troop_name, s0, ":troop_id"),
  ]),
  
  #script_training_ground_sub_routine_2_for_melee_details
  # INPUT:
  # value
  #OUTPUT:
  # none
  ("training_ground_sub_routine_2_for_melee_details",
    [
      (store_script_param, ":value", 1),
      (val_sub, ":value", 1),
      (try_begin),
        (lt, ":value", 0),
        (call_script, "script_remove_random_fit_party_member_from_stack_selection"),
      (else_try),
        (call_script, "script_remove_fit_party_member_from_stack_selection", ":value"),
      (try_end),
      (assign, ":troop_id", reg0),
      (store_sub, ":slot_index", "$temp_2", 1),
      (troop_set_slot, "trp_temp_array_a", ":slot_index", ":troop_id"),
      (try_begin),
        (eq, "$temp", "$temp_2"),
        (call_script, "script_start_training_at_training_ground", -1, "$temp"),
      (else_try),
        (val_add, "$temp_2", 1),
        (jump_to_menu, "mnu_training_ground_selection_details_melee_2"),
      (try_end),
  ]),
  
  #script_cf_training_ground_sub_routine_for_training_result
  # INPUT:
  # arg1: troop_id, arg2: stack_no, arg3: troop_count, arg4: xp_ratio_to_add
  #OUTPUT:
  # none
  ("cf_training_ground_sub_routine_for_training_result",
    [
      (store_script_param, ":troop_id", 1),
      (store_script_param, ":stack_no", 2),
      (store_script_param, ":amount", 3),
      (store_script_param, ":xp_ratio_to_add", 4),
      
      (store_character_level, ":level", ":troop_id"),
      (store_add, ":level_added", ":level", 5),
      (store_mul, ":min_hardness", ":level_added", 3),
      (val_min, ":min_hardness", 100),
      (store_sub, ":hardness_dif", ":min_hardness", "$g_training_ground_training_hardness"),
      (val_max, ":hardness_dif", 0),
      (store_sub, ":hardness_dif", 100, ":hardness_dif"),
      (val_mul, ":hardness_dif", ":hardness_dif"),
      (val_div, ":hardness_dif", 10), # value over 1000
      ##     (assign, reg0, ":hardness_dif"),
      ##     (display_message, "@Hardness difference: {reg0}/1000"),
      (store_mul, ":xp_ratio_to_add_for_stack", ":xp_ratio_to_add", ":hardness_dif"),
      (val_div, ":xp_ratio_to_add_for_stack", 1000),
      (try_begin),
        (eq, ":troop_id", "trp_player"),
        (val_mul, ":xp_ratio_to_add_for_stack", 1),
      (else_try),
        (try_begin),
          (eq, "$g_mt_mode", ctm_melee),
          (try_begin),
            (this_or_next|troop_is_guarantee_ranged, ":troop_id"),
            (troop_is_guarantee_horse, ":troop_id"),
            (val_div, ":xp_ratio_to_add_for_stack", 4),
          (try_end),
        (else_try),
          (eq, "$g_mt_mode", ctm_mounted),
          (try_begin),
            (neg|troop_is_guarantee_horse, ":troop_id"),
            (assign, ":xp_ratio_to_add_for_stack", 0),
          (try_end),
        (else_try),
          (neg|troop_is_guarantee_ranged, ":troop_id"),
          (assign, ":xp_ratio_to_add_for_stack", 0),
        (try_end),
      (try_end),
      (val_add,  ":level", 1),
      (store_mul, ":xp_to_add", 100, ":level"),
      (val_mul, ":xp_to_add", ":amount"),
      (val_div, ":xp_to_add", 20),
      (val_mul, ":xp_to_add", ":xp_ratio_to_add_for_stack"),
      (val_div, ":xp_to_add", 1000),
      (store_mul, ":max_xp_to_add", ":xp_to_add", 3),
      (val_div, ":max_xp_to_add", 2),
      (store_div, ":min_xp_to_add", ":xp_to_add", 2),
      (store_random_in_range, ":random_xp_to_add", ":min_xp_to_add", ":max_xp_to_add"),
      (gt, ":random_xp_to_add", 0),
      (try_begin),
        (troop_is_hero, ":troop_id"),
        (add_xp_to_troop, ":random_xp_to_add", ":troop_id"),
        (store_div, ":proficiency_to_add", ":random_xp_to_add", 50),
        (try_begin),
          (gt, ":proficiency_to_add", 0),
          (troop_raise_proficiency, ":troop_id", "$g_training_ground_used_weapon_proficiency", ":proficiency_to_add"),
        (try_end),
      (else_try),
        (party_add_xp_to_stack, "p_main_party", ":stack_no", ":random_xp_to_add"),
      (try_end),
      (assign, reg0, ":random_xp_to_add"),
  ]),
  
  
  ##  #script_cf_print_troop_name_with_stack_index_to_s0
  ##  # INPUT:
  ##  # param1: stack_index
  ##
  ##  #OUTPUT:
  ##  # string register 0.
  ##  ("cf_print_troop_name_with_stack_index_to_s0",
  ##   [
  ##     (store_script_param_1, ":stack_index"),
  ##     (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
  ##     (lt, ":stack_index", ":num_stacks"),
  ##     (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":stack_index"),
  ##     (str_store_troop_name, s0, ":stack_troop"),
  ##    ]),
  
  #script_print_troop_owned_centers_in_numbers_to_s0
  # INPUT:
  # param1: troop_no
  #OUTPUT:
  # string register 0.
  ("print_troop_owned_centers_in_numbers_to_s0",
    [
      (store_script_param_1, ":troop_no"),
      (str_store_string, s0, "@nothing"),
      (assign, ":owned_towns", 0),
      (assign, ":owned_castles", 0),
      (assign, ":owned_villages", 0),
      (try_for_range_backwards, ":cur_center", centers_begin, centers_end),
        (party_slot_eq, ":cur_center", slot_mainplanet_lord, ":troop_no"),
        (try_begin),
          (party_slot_eq, ":cur_center", slot_party_type, spt_mainplanet),
          (val_add, ":owned_towns", 1),
        (else_try),
          (party_slot_eq, ":cur_center", slot_party_type, spt_castle),
          (val_add, ":owned_castles", 1),
        (else_try),
          (val_add, ":owned_villages", 1),
        (try_end),
      (try_end),
      (assign, ":num_types", 0),
      (try_begin),
        (gt, ":owned_villages", 0),
        (assign, reg0, ":owned_villages"),
        (store_sub, reg1, reg0, 1),
        (str_store_string, s0, "@{reg0} village{reg1?s:}"),
        (val_add, ":num_types", 1),
      (try_end),
      (try_begin),
        (gt, ":owned_castles", 0),
        (assign, reg0, ":owned_castles"),
        (store_sub, reg1, reg0, 1),
        (try_begin),
          (eq, ":num_types", 0),
          (str_store_string, s0, "@{reg0} castle{reg1?s:}"),
        (else_try),
          (str_store_string, s0, "@{reg0} castle{reg1?s:} and {s0}"),
        (try_end),
        (val_add, ":num_types", 1),
      (try_end),
      (try_begin),
        (gt, ":owned_towns", 0),
        (assign, reg0, ":owned_towns"),
        (store_sub, reg1, reg0, 1),
        (try_begin),
          (eq, ":num_types", 0),
          (str_store_string, s0, "@{reg0} town{reg1?s:}"),
        (else_try),
          (eq, ":num_types", 1),
          (str_store_string, s0, "@{reg0} town{reg1?s:} and {s0}"),
        (else_try),
          (str_store_string, s0, "@{reg0} town{reg1?s:}, {s0}"),
        (try_end),
      (try_end),
      (store_add, reg0, ":owned_villages", ":owned_castles"),
      (val_add, reg0, ":owned_towns"),
  ]),
  
  #script_get_random_melee_training_weapon
  # INPUT: none
  # OUTPUT: reg0 = weapon_1, reg1 = weapon_2
  ("get_random_melee_training_weapon",
    #SW - modified get_random_melee_training_weapon
    [
      (assign, ":weapon_1", -1),
      (assign, ":weapon_2", -1),
      (store_random_in_range, ":random_no", 0, 3),
      (try_begin),
        (eq, ":random_no", 0),
        #(assign, ":weapon_1", "itm_practice_staff"),
        (assign, ":weapon_1", "itm_vibro_axe_long_2h"),
      (else_try),
        (eq, ":random_no", 1),
        #(assign, ":weapon_1", "itm_practice_sword"),
        #(assign, ":weapon_2", "itm_practice_shield"),
        (assign, ":weapon_1", "itm_electro_staff_long"),
      (else_try),
        #(assign, ":weapon_1", "itm_heavy_practice_sword"),
        (assign, ":weapon_1", "itm_vibro_sword3_gold"),
        (assign, ":weapon_2", "itm_energy_shield_yellow_small"),
      (try_end),
      (assign, reg0, ":weapon_1"),
      (assign, reg1, ":weapon_2"),
  ]),
  
  #script_start_training_at_training_ground
  # INPUT:
  # param1: training_weapon_type, param2: training_param
  ("start_training_at_training_ground",
    [
      (val_add, "$g_training_ground_training_count", 1),
      (store_script_param, ":mission_weapon_type", 1),
      (store_script_param, ":training_param", 2),
      (assign, ":training_default_weapon_1", -1),
      (assign, ":training_default_weapon_2", -1),
      (assign, ":training_default_weapon_3", -1),
      (assign, "$scene_num_total_gourds_destroyed", 0),
      (try_begin),
        (eq, ":mission_weapon_type", itp_type_bow),
        (assign, "$g_training_ground_used_weapon_proficiency", wpt_archery),
        #(assign, ":training_default_weapon_1", "itm_practice_bow"),
        (try_begin),
          (eq, "$g_mt_mode", ctm_mounted),
          #swy (assign, ":training_default_weapon_2", "itm_practice_arrows_100_amount"),
        (else_try),
          #swy (assign, ":training_default_weapon_2", "itm_practice_arrows_10_amount"),
        (try_end),
      (else_try),
        (eq, ":mission_weapon_type", itp_type_crossbow),
        (assign, "$g_training_ground_used_weapon_proficiency", wpt_crossbow),
        #swy (assign, ":training_default_weapon_1", "itm_practice_crossbow"),
        #swy (assign, ":training_default_weapon_2", "itm_practice_bolts_9_amount"),
      (else_try),
        #SW - switched training ground to use lightsaber, DL-44 and DLT-19
        (try_begin),
          (eq, ":mission_weapon_type", itp_type_thrown),
          (assign, "$g_training_ground_used_weapon_proficiency", wpt_throwing),
          (try_begin),
            (eq, "$g_mt_mode", ctm_mounted),
            (assign, ":training_default_weapon_2", "itm_force_throw_lightsaber_tl"),
            #(assign, ":training_default_weapon_2", "itm_force_push"),
          (else_try),
            (assign, ":training_default_weapon_2", "itm_force_throw_lightsaber_t"),
            #(assign, ":training_default_weapon_2", "itm_force_push"),
          (try_end),
        (else_try),
          (eq, ":mission_weapon_type", itp_type_musket),
          #(assign, "$g_training_ground_used_weapon_proficiency", wpt_firearm),
          (assign, "$g_training_ground_used_weapon_proficiency", wpt_crossbow),
          (try_begin),
            (eq, "$g_mt_mode", ctm_mounted),
            (assign, ":training_default_weapon_1", "itm_dlt19"),
            (assign, ":training_default_weapon_2", "itm_laser_bolts_green_rifle"),
          (else_try),
            (assign, ":training_default_weapon_1", "itm_dlt19_training"),
            (assign, ":training_default_weapon_2", "itm_laser_bolts_training_rifle"),
          (try_end),
        (else_try),
          (eq, ":mission_weapon_type", itp_type_pistol),
          (assign, "$g_training_ground_used_weapon_proficiency", wpt_firearm),
          (try_begin),
            (eq, "$g_mt_mode", ctm_mounted),
            (assign, ":training_default_weapon_1", "itm_dl44a"),
            (assign, ":training_default_weapon_2", "itm_laser_bolts_green_pistol"),
          (else_try),
            (assign, ":training_default_weapon_1", "itm_dl44a_training"),
            (assign, ":training_default_weapon_2", "itm_laser_bolts_training_pistol"),
          (try_end),
        (else_try),
          #SW - modified training weapon and type (one to two_handed)
          (eq, ":mission_weapon_type", itp_type_two_handed_wpn),
          (assign, "$g_training_ground_used_weapon_proficiency", wpt_two_handed_weapon),
          (assign, ":training_default_weapon_1", "itm_lightsaber_yellow"),
        (else_try),
          (eq, ":mission_weapon_type", itp_type_polearm),
          (assign, "$g_training_ground_used_weapon_proficiency", wpt_polearm),
          #(assign, ":training_default_weapon_1", "itm_practice_lance"),
        (else_try),
          #weapon_type comes as -1 when melee training is selected
          #SW - modified to use wpt_two_handed_weapon, commented out get_random_mellee_weapon, hardcoded as lightsaber
          (assign, "$g_training_ground_used_weapon_proficiency", wpt_two_handed_weapon),
          #SW - I fixed script_get_random_melee_training_weapon
          (call_script, "script_get_random_melee_training_weapon"),
          (assign, ":training_default_weapon_1", reg0),
          (assign, ":training_default_weapon_2", reg1),
          #(assign, ":training_default_weapon_1", "itm_lightsaber_yellow"),
          #(assign, ":training_default_weapon_2", "itm_lightsaber_yellow"),
        (try_end),
        
        ##     (assign, "$g_training_ground_training_troop_stack_index", ":stack_index"),
        (try_begin),
          (eq, "$g_mt_mode", ctm_mounted),
          #SW - modified practice_horse to speeder
          (assign, ":training_default_weapon_3", "itm_practice_speeder"),
          (store_add, "$g_training_ground_training_scene", "scn_training_ground_horse_track_1", "$g_encountered_party"),
          (val_sub, "$g_training_ground_training_scene", training_grounds_begin),
        (else_try),
          (store_add, "$g_training_ground_training_scene", "scn_training_ground_ranged_melee_1", "$g_encountered_party"),
          (val_sub, "$g_training_ground_training_scene", training_grounds_begin),
        (try_end),
        
        (modify_visitors_at_site, "$g_training_ground_training_scene"),
        (reset_visitors),
        (set_visitor, 0, "trp_player"),
        
        (assign, ":selected_weapon", -1),
        (try_for_range, ":cur_slot", 0, 4),#equipment slots
          (troop_get_inventory_slot, ":cur_item", "trp_player", ":cur_slot"),
          (ge, ":cur_item", 0),
          (item_get_type, ":item_type", ":cur_item"),
          (try_begin),
            (eq, ":item_type", ":mission_weapon_type"),
            (eq, ":selected_weapon", -1),
            (assign, ":selected_weapon", ":cur_item"),
          (try_end),
        (try_end),
        (mission_tpl_entry_clear_override_items, "mt_training_ground_training", 0),
        (mission_tpl_entry_add_override_item, "mt_training_ground_training", 0, "itm_practice_boots"),
        (try_begin),
          (ge, ":training_default_weapon_1", 0),
          (try_begin),
            (ge, ":selected_weapon", 0),
            (mission_tpl_entry_add_override_item, "mt_training_ground_training", 0, ":selected_weapon"),
          (else_try),
            (mission_tpl_entry_add_override_item, "mt_training_ground_training", 0, ":training_default_weapon_1"),
          (try_end),
        (try_end),
        (try_begin),
          (ge, ":training_default_weapon_2", 0),
          (mission_tpl_entry_add_override_item, "mt_training_ground_training", 0, ":training_default_weapon_2"),
        (try_end),
        (try_begin),
          (ge, ":training_default_weapon_3", 0),
          (mission_tpl_entry_add_override_item, "mt_training_ground_training", 0, ":training_default_weapon_3"),
        (try_end),
        
        (assign, ":cur_visitor_point", 5),
        (troop_get_slot, ":num_fit", "trp_stack_selection_amounts", 1),
        (store_add, ":end_cond", 5, ":num_fit"),
        (val_min, ":end_cond", 13),
        (try_for_range, ":cur_visitor_point", 5, ":end_cond"),
          (call_script, "script_remove_random_fit_party_member_from_stack_selection"),
          (set_visitor, ":cur_visitor_point", reg0),
          (val_add, ":cur_visitor_point", 1),
        (try_end),
        (try_begin),
          (eq, "$g_mt_mode", ctm_melee),
          (assign, ":total_difficulty", 0),
          (try_for_range, ":i", 0, ":training_param"),
            (troop_get_slot, ":cur_troop", "trp_temp_array_a", ":i"),
            (store_add, ":cur_entry_point", ":i", 1),
            (set_visitor, ":cur_entry_point", ":cur_troop"),
            (mission_tpl_entry_clear_override_items, "mt_training_ground_training", ":cur_entry_point"),
            (mission_tpl_entry_add_override_item, "mt_training_ground_training", ":cur_entry_point", "itm_practice_boots"),
            (call_script, "script_get_random_melee_training_weapon"),
            (mission_tpl_entry_add_override_item, "mt_training_ground_training", ":cur_entry_point", reg0),
            (try_begin),
              (ge, reg1, 0),
              (mission_tpl_entry_add_override_item, "mt_training_ground_training", ":cur_entry_point", reg1),
            (try_end),
            (store_character_level, ":cur_troop_level", ":cur_troop"),
            (val_add, ":cur_troop_level", 10),
            (val_mul, ":cur_troop_level", ":cur_troop_level"),
            (val_add, ":total_difficulty", ":cur_troop_level"),
          (try_end),
          
          (assign, "$g_training_ground_training_num_enemies", ":training_param"),
          (assign, "$g_training_ground_training_hardness",  ":total_difficulty"),
          (store_add, ":number_multiplier", "$g_training_ground_training_num_enemies", 4),
          (val_mul, "$g_training_ground_training_hardness", ":number_multiplier"),
          (val_div, "$g_training_ground_training_hardness", 2400),
          (str_store_string, s0, "@Your opponents are ready for the fight."),
        (else_try),
          (eq, "$g_mt_mode", ctm_mounted),
          (try_begin),
            (eq, ":mission_weapon_type", itp_type_bow),
            #SW - lowered hardness to 200
            (assign, "$g_training_ground_training_hardness", 200),
            (assign, "$g_training_ground_training_num_gourds_to_destroy", 30),
          (else_try),
            (eq, ":mission_weapon_type", itp_type_thrown),
            #SW - lowered hardness to 200
            (assign, "$g_training_ground_training_hardness", 200),
            (assign, "$g_training_ground_training_num_gourds_to_destroy", 30),
          (else_try),
            (eq, ":mission_weapon_type", itp_type_one_handed_wpn),
            (assign, "$g_training_ground_training_hardness", 200),
            (assign, "$g_training_ground_training_num_gourds_to_destroy", 45),
            #SW - added num_gourds_to_destroy for other weapon types (causes script errors in game if you don't initialize it)
          (else_try),
            (eq, ":mission_weapon_type", itp_type_two_handed_wpn),
            (assign, "$g_training_ground_training_hardness", 200),
            (assign, "$g_training_ground_training_num_gourds_to_destroy", 45),
          (else_try),
            (eq, ":mission_weapon_type", itp_type_pistol),
            (assign, "$g_training_ground_training_hardness", 200),
            (assign, "$g_training_ground_training_num_gourds_to_destroy", 35),
          (else_try),
            (eq, ":mission_weapon_type", itp_type_musket),
            (assign, "$g_training_ground_training_hardness", 200),
            (assign, "$g_training_ground_training_num_gourds_to_destroy", 35),
          (else_try),
            (eq, ":mission_weapon_type", itp_type_polearm),
            (assign, "$g_training_ground_training_hardness", 280),
            (assign, "$g_training_ground_training_num_gourds_to_destroy", 35),
          (try_end),
          (str_store_string, s0, "@Try to destroy as many targets as you can. You have two and a half minutes to clear the track."),
        (else_try),
          (eq, "$g_mt_mode", ctm_ranged),
          (store_mul, "$g_training_ground_ranged_distance", ":training_param", 100),
          (assign, ":hardness_modifier", ":training_param"),
          (val_mul, ":hardness_modifier", ":hardness_modifier"),
          (try_begin),
            (eq, ":mission_weapon_type", itp_type_bow),
            (val_mul, ":hardness_modifier", 3),
            (val_div, ":hardness_modifier", 2),
          (else_try),
            (eq, ":mission_weapon_type", itp_type_thrown),
            (val_mul, ":hardness_modifier", 5),
            (val_div, ":hardness_modifier", 2),
            (val_mul, ":hardness_modifier", ":training_param"),
            (val_div, ":hardness_modifier", 2),
          (try_end),
          (store_mul, "$g_training_ground_training_hardness", 100, ":hardness_modifier"),
          (val_div, "$g_training_ground_training_hardness", 6000),
          (str_store_string, s0, "@Stay behind the line on the ground and shoot the targets. Try not to waste any shots."),
        (try_end),
        (jump_to_menu, "mnu_training_ground_description"),
      (try_end),
  ]),
  
  
  #script_print_party_to_s0:
  # INPUT:
  # param1: Party-id
  
  #OUTPUT:
  # string register 0.
  
  ##  ("print_party_to_s0",
  ##    [
  ##      (store_script_param_1, ":party"), #Party_id
  ##      (party_get_num_companion_stacks, ":num_stacks",":party"),
  ##      (str_store_string, s50, "str_none"),
  ##      (try_for_range, ":i_stack", 0, ":num_stacks"),
  ##        (party_stack_get_troop_id,     ":stack_troop",":party",":i_stack"),
  ##        (party_stack_get_size,         ":stack_size",":party",":i_stack"),
  ##        (str_store_troop_name_by_count, s61, ":stack_troop", ":stack_size"),
  ##        (try_begin),
  ##          (troop_is_hero, ":stack_troop"),
  ##          (str_store_string_reg, s51, s61),
  ##        (else_try),
  ##          (assign, reg60, ":stack_size"),
  ##          (str_store_string, s63, "str_reg60_s61"),
  ##        (try_end),
  ##        (try_begin),
  ##          (eq, ":i_stack", 0),
  ##          (str_store_string_reg, s50, s51),
  ##        (else_try),
  ##          (str_store_string, s50, "str_s50_comma_s51"),
  ##        (try_end),
  ##      (try_end),
  ##      (str_store_string_reg, s0, s50),
  ##  ]),
  
  
  
  #script_party_count_fit_regulars:
  # Returns the number of unwounded regular companions in a party
  # INPUT:
  # param1: Party-id
  
  ("party_count_fit_regulars",
    [
      (store_script_param_1, ":party"), #Party_id
      (party_get_num_companion_stacks, ":num_stacks",":party"),
      (assign, reg0, 0),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id,     ":stack_troop",":party",":i_stack"),
        (neg|troop_is_hero, ":stack_troop"),
        (party_stack_get_size,         ":stack_size",":party",":i_stack"),
        (party_stack_get_num_wounded, ":num_wounded",":party",":i_stack"),
        (val_sub, ":stack_size", ":num_wounded"),
        (val_add, reg0, ":stack_size"),
      (try_end),
  ]),
  
  
  #script_party_count_fit_for_battle:
  # Returns the number of unwounded companions in a party
  # INPUT:
  # param1: Party-id
  # OUTPUT: reg0 = result
  ("party_count_fit_for_battle",
    [
      (store_script_param_1, ":party"), #Party_id
      (party_get_num_companion_stacks, ":num_stacks",":party"),
      (assign, reg0, 0),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id,     ":stack_troop",":party",":i_stack"),
        (assign, ":num_fit",0),
        (try_begin),
          (troop_is_hero, ":stack_troop"),
          #          (store_troop_health, ":troop_hp", ":stack_troop"),
          (try_begin),
            (neg|troop_is_wounded, ":stack_troop"),
            #            (ge,  ":troop_hp", 20),
            (assign, ":num_fit",1),
          (try_end),
        (else_try),
          (party_stack_get_size,         ":num_fit",":party",":i_stack"),
          (party_stack_get_num_wounded, ":num_wounded",":party",":i_stack"),
          (val_sub, ":num_fit", ":num_wounded"),
        (try_end),
        (val_add, reg0, ":num_fit"),
      (try_end),
  ]),
  
  
  #script_party_count_members_with_full_health
  # Returns the number of unwounded regulars, and heroes other than player with 100% hitpoints in a party
  # INPUT:
  # param1: Party-id
  # OUTPUT: reg0 = result
  ("party_count_members_with_full_health",
    [
      (store_script_param_1, ":party"), #Party_id
      (party_get_num_companion_stacks, ":num_stacks",":party"),
      (assign, reg0, 0),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id,     ":stack_troop",":party",":i_stack"),
        (assign, ":num_fit",0),
        (try_begin),
          (troop_is_hero, ":stack_troop"),
          (neq, ":stack_troop", "trp_player"),
          (store_troop_health, ":troop_hp", ":stack_troop"),
          (try_begin),
            (ge,  ":troop_hp", 80),
            (assign, ":num_fit",1),
          (try_end),
        (else_try),
          (party_stack_get_size,         ":num_fit",":party",":i_stack"),
          (party_stack_get_num_wounded, ":num_wounded",":party",":i_stack"),
          (val_sub, ":num_fit", ":num_wounded"),
          (val_max, ":num_fit", 0),
        (try_end),
        (val_add, reg0, ":num_fit"),
      (try_end),
  ]),
  
  
  ##  ("get_fit_stack_with_rank",
  ##    [
  ##      (store_script_param_1, ":party"), #Party_id
  ##      (store_script_param_2, ":rank"), #Rank
  ##      (party_get_num_companion_stacks, ":num_stacks",":party"),
  ##      (assign, reg0, -1),
  ##      (assign, ":num_total", 0),
  ##      (try_for_range, ":i_stack", 0, ":num_stacks"),
  ##        (eq, reg(0), -1), #continue only if we haven't found the result yet.
  ##        (party_stack_get_troop_id,     ":stack_troop",":party",":i_stack"),
  ##        (assign, ":num_fit",0),
  ##        (try_begin),
  ##          (troop_is_hero, ":stack_troop"),
  ##          (store_troop_health, ":troop_hp", ":stack_troop"),
  ##          (try_begin),
  ##            (ge,  ":troop_hp", 20),
  ##            (assign, ":num_fit",1),
  ##          (try_end),
  ##        (else_try),
  ##          (party_stack_get_size,         ":num_fit",":party",":i_stack"),
  ##          (party_stack_get_num_wounded, ":num_wounded",":party",":i_stack"),
  ##          (val_sub, ":num_fit", ":num_wounded"),
  ##        (try_end),
  ##        (val_add, ":num_total", ":num_fit"),
  ##        (try_begin),
  ##          (lt, ":rank", ":num_total"),
  ##          (assign, reg(0), ":i_stack"),
  ##        (try_end),
  ##      (try_end),
  ##  ]),
  
  #script_get_stack_with_rank:
  # Returns the stack no, containing unwounded regular companions with rank rank.
  # INPUT:
  # param1: Party-id
  # param2: rank
  
  ("get_stack_with_rank",
    [
      (store_script_param_1, ":party"), #Party_id
      (store_script_param_2, ":rank"), #Rank
      (party_get_num_companion_stacks, ":num_stacks",":party"),
      (assign, reg(0), -1),
      (assign, ":num_total", 0),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (eq, reg(0), -1), #continue only if we haven't found the result yet.
        (party_stack_get_troop_id,     ":stack_troop",":party",":i_stack"),
        (neg|troop_is_hero, ":stack_troop"),
        (party_stack_get_size,         ":stack_size",":party",":i_stack"),
        (party_stack_get_num_wounded,  ":num_wounded",":party",":i_stack"),
        (val_sub, ":stack_size", ":num_wounded"),
        (val_add, ":num_total", ":stack_size"),
        (try_begin),
          (lt, ":rank", ":num_total"),
          (assign, reg(0), ":i_stack"),
        (try_end),
      (try_end),
  ]),
  
  #script_inflict_casualties_to_party:
  # INPUT:
  # param1: Party-id
  # param2: number of rounds
  
  #OUTPUT:
  # This script doesn't return a value but populates the parties p_temp_wounded and p_temp_killed with the wounded and killed.
  #Example:
  #  (script_inflict_casualties_to_party, "_p_main_party" ,50),
  #  Simulate 50 rounds of casualties to main_party.
  
  ("inflict_casualties_to_party",
    [
      (party_clear, "p_temp_casualties"),
      (store_script_param_1, ":party"), #Party_id
      (call_script, "script_party_count_fit_regulars", ":party"),
      (assign, ":num_fit", reg(0)), #reg(47) = number of fit regulars.
      (store_script_param_2, ":num_attack_rounds"), #number of attacks
      (try_for_range, ":unused", 0, ":num_attack_rounds"),
        (gt, ":num_fit", 0),
        (store_random_in_range, ":attacked_troop_rank", 0 , ":num_fit"), #attack troop with rank reg(46)
        (assign, reg1, ":attacked_troop_rank"),
        (call_script, "script_get_stack_with_rank", ":party", ":attacked_troop_rank"),
        (assign, ":attacked_stack", reg(0)), #reg(53) = stack no to attack.
        (party_stack_get_troop_id,     ":attacked_troop",":party",":attacked_stack"),
        (store_character_level, ":troop_toughness", ":attacked_troop"),
        (val_add, ":troop_toughness", 5),  #troop-toughness = level + 5
        (troop_get_type, ":troop_type", ":attacked_troop"),#different toughness per stack depending on troop type
        (try_begin),#MANDO: differernt toughness for specific races
            (eq, ":troop_type", tf_gamorrean),
            (val_mul, ":troop_toughness", 3),
            (val_add, ":troop_toughness", 8),
            (val_min, ":troop_toughness", 130),
        (else_try),
            (eq, ":troop_type", tf_wookiee),
            (val_add, ":troop_toughness", 2),
            (val_mul, ":troop_toughness", 3),
            (val_min, ":troop_toughness", 130),
        (else_try),
            (eq, ":troop_type", tf_tusken),
            (val_add, ":troop_toughness", 10),#3
            (val_mul, ":troop_toughness", 5),#3
            (val_div, ":troop_toughness", 4),#2
            #(val_add, ":troop_toughness", 8),
        (else_try),
            (eq, ":troop_type", tf_battledroid),
            (try_begin),
               (eq, ":troop_toughness", 28),
               (val_sub, ":troop_toughness", 15),
               (val_mul, ":troop_toughness", 3),#4, lessened droids have already advantage due to numbers
               (val_min, ":troop_toughness", 150),
            (else_try),
               #(val_sub, ":troop_toughness", 5),
               (val_div, ":troop_toughness", 2),
               (val_max, ":troop_toughness", 1),
            (try_end),
        (else_try),
            (eq, ":troop_type", tf_sbd),
            (val_mul, ":troop_toughness", 2),#3 lessened droids have already advantage due to numbers
            #(val_min, ":troop_toughness", 166),
        (try_end),
        # (try_for_range, ":slot", 0, 6),#armor gives extra toughness
        #     (troop_get_inventory_slot, ":item", ":attacked_troop", ":slot"),
        #     (item_get_type, ":type", ":item"),
        #     (try_begin),
        #        (eq, ":type", itp_type_shield),
        #        (this_or_next|eq, ":type", itp_type_head_armor),
        #        (item_get_hitpoints, ":hp", ":item"),
        #        (item_get_body_armor, ":resistance", ":item"),
        #        (item_get_speed_rating, ":speed", ":item"),
        #        (item_get_weapon_length, ":length", ":item"),
        #        (set_fixed_point_multiplier, 100),               
        #        (item_get_shield_heigth, ":height", ":item"),
        #        (convert_to_fixed_point,)
        #        (set_fixed_point_multiplier, 100),
        #        (val_add, ":resistance", 1),
        #        (val_mul, ":hp", ":resistance"),
        #        (val_add, ":height", ":length"),
        #        (val_add, ":length", 2),
               
        #        (eq, ":type", itp_type_body_armor),
        #     (item_get_head_armor, ":head_resistance", ":item"),
        #     (item_get_body_armor, ":body_resistance", ":item"),
        #     #(item_get_body_armor, "resistance", ":armor"),
        #     (try_begin),

            #hit_points(600)|body_armor(30)|spd_rtng(95)|weapon_length(80)
        #(else_try),
        #(else_try),
        (assign, ":casualty_chance", 10000),
        (val_div, ":casualty_chance", ":troop_toughness"), #dying chance
        (try_begin),
          (store_random_in_range, ":rand_num", 0 ,10000),
          (lt, ":rand_num", ":casualty_chance"), #check chance to be a casualty
          (store_random_in_range, ":rand_num2", 0, 2), #check if this troop will be wounded or killed
          (try_begin),
            (troop_is_hero,":attacked_troop"), #currently troop can't be a hero, but no harm in keeping this.
            (store_troop_health, ":troop_hp",":attacked_troop"),
            (val_sub, ":troop_hp", 45),
            (val_max, ":troop_hp", 1),
            (troop_set_health, ":attacked_troop", ":troop_hp"),
          (else_try),
            (lt, ":rand_num2", 1), #wounded
            (party_add_members, "p_temp_casualties", ":attacked_troop", 1),
            (party_wound_members, "p_temp_casualties", ":attacked_troop", 1),
            (party_wound_members, ":party", ":attacked_troop", 1),
          (else_try), #killed
            (party_add_members, "p_temp_casualties", ":attacked_troop", 1),
            (party_remove_members, ":party", ":attacked_troop", 1),
          (try_end),
          (val_sub, ":num_fit", 1), #adjust number of fit regulars.
        (try_end),
      (try_end),
  ]),
  
  
  #script_move_members_with_ratio:
  # INPUT:
  # param1: Source Party-id
  # param2: Target Party-id
  # pin_number = ratio of members to move, multiplied by 1000
  
  #OUTPUT:
  # This script doesn't return a value but moves some of the members of source party to target party according to the given ratio.
  ("move_members_with_ratio",
    [
      (store_script_param_1, ":source_party"), #Source Party_id
      (store_script_param_2, ":target_party"), #Target Party_id
      (party_get_num_prisoner_stacks, ":num_stacks",":source_party"),
      (try_for_range_backwards, ":stack_no", 0, ":num_stacks"),
        (party_prisoner_stack_get_troop_id,     ":stack_troop",":source_party",":stack_no"),
        (party_prisoner_stack_get_size,    ":stack_size",":source_party",":stack_no"),
        (store_mul, ":number_to_move",":stack_size","$pin_number"),
        (val_div, ":number_to_move", 1000),
        (party_remove_prisoners, ":source_party", ":stack_troop", ":number_to_move"),
        (assign, ":number_moved", reg0),
        (party_add_prisoners, ":target_party", ":stack_troop", ":number_moved"),
      (try_end),
      (party_get_num_companion_stacks, ":num_stacks",":source_party"),
      (try_for_range_backwards, ":stack_no", 0, ":num_stacks"),
        (party_stack_get_troop_id,     ":stack_troop",":source_party",":stack_no"),
        (party_stack_get_size,    ":stack_size",":source_party",":stack_no"),
        (store_mul, ":number_to_move",":stack_size","$pin_number"),
        (val_div, ":number_to_move", 1000),
        (party_remove_members, ":source_party", ":stack_troop", ":number_to_move"),
        (assign, ":number_moved", reg0),
        (party_add_members, ":target_party", ":stack_troop", ":number_moved"),
      (try_end),
  ]),
  
  
  # script_count_parties_of_faction_and_party_type:
  # counts number of active parties with a template and faction.
  # Input: arg1 = faction_no, arg2 = party_type
  # Output: reg0 = count
  
  ("count_parties_of_faction_and_party_type",
    [
      (store_script_param_1, ":faction_no"),
      (store_script_param_2, ":party_type"),
      (assign, reg0, 0),
      (try_for_parties, ":party_no"),
        (party_is_active, ":party_no"),
        (party_get_slot, ":cur_party_type", ":party_no", slot_party_type),
        (store_faction_of_party, ":cur_faction", ":party_no"),
        (eq, ":cur_party_type", ":party_type"),
        (eq, ":cur_faction", ":faction_no"),
        (val_add, reg0, 1),
      (try_end),
  ]),
  
  # script_faction_get_number_of_armies
  # Input: arg1 = faction_no
  # Output: reg0 = number_of_armies
  ("faction_get_number_of_armies",
    [
      (store_script_param_1, ":faction_no"),
      (assign, ":num_armies", 0),
      (try_for_range, ":troop_no", faction_heroes_begin, faction_heroes_end),
        (store_troop_faction, ":hero_faction_no", ":troop_no"),
        (eq, ":hero_faction_no", ":faction_no"),
        (troop_get_slot, ":hero_party", ":troop_no", slot_troop_leaded_party),
        (ge, ":hero_party", 0),
        (call_script, "script_party_count_fit_regulars", ":hero_party"),
        (assign, ":party_size", reg0),
        (call_script, "script_party_get_ideal_size", ":hero_party"),
        (assign, ":ideal_size", reg0),
        (val_mul, ":ideal_size", 60),
        (val_div, ":ideal_size", 100),
        (gt, ":party_size", ":ideal_size"),
        (val_add, ":num_armies", 1),
      (try_end),
      (assign, reg0, ":num_armies"),
  ]),
  
  
  # script_faction_recalculate_strength
  # Input: arg1 = faction_no
  # Output: reg0 = strength
  ("faction_recalculate_strength",
    [
      (store_script_param_1, ":faction_no"),
      
      (call_script, "script_faction_get_number_of_armies", ":faction_no"),
      (assign, ":num_armies", reg0),
      (assign, ":num_castles", 0),
      (assign, ":num_towns", 0),
      
      (try_for_range, ":center_no", centers_begin, centers_end),
        (store_faction_of_party, ":center_faction", ":center_no"),
        (eq, ":center_faction", ":faction_no"),
        (try_begin),
          (party_slot_eq, ":center_no", slot_party_type, spt_castle),
          (val_add, ":num_castles", 1),
        (else_try),
          (party_slot_eq, ":center_no", slot_party_type, spt_mainplanet),
          (val_add, ":num_towns", 1),
        (try_end),
      (try_end),
      
      (faction_set_slot, ":faction_no", slot_faction_num_armies, ":num_armies"),
      (faction_set_slot, ":faction_no", slot_faction_num_castles, ":num_castles"),
      (faction_set_slot, ":faction_no", slot_faction_num_towns, ":num_towns"),
      
  ]),
  
  #script_select_random_town:
  # This script selects a random town in range [mainplanets_begin, mainplanets_end)
  # INPUTS:
  # none
  
  #OUTPUT:
  # reg0: id of the selected random town
  ##  ("select_random_town",
  ##    [
  ##      (assign, ":num_towns", mainplanets_end),
  ##      (val_sub,":num_towns", mainplanets_begin),
  ##      (store_random, ":random_town", ":num_towns"),
  ##      (val_add,":random_town", mainplanets_begin),
  ##      (assign, reg0, ":random_town"),
  ##  ]),
  
  #  ("select_random_spawn_point",
  #    [
  #      (assign, reg(20), spawn_points_end),
  #      (val_sub,reg(20), spawn_points_begin),
  #      (store_random, reg(21), reg(20)),
  #      (val_add,reg(21), spawn_points_begin),
  #      (assign, "$pout_town", reg(21)),
  # ]),
  
  #script_cf_select_random_town_with_faction:
  # This script selects a random town in range [mainplanets_begin, mainplanets_end)
  # such that faction of the town is equal to given_faction
  # INPUT:
  # arg1 = faction_no
  
  #OUTPUT:
  # This script may return false if there is no matching town.
  # reg0 = town_no
  ("cf_select_random_town_with_faction",
    [
      (store_script_param_1, ":faction_no"),
      (assign, ":result", -1),
      # First count num matching spawn points
      (assign, ":no_towns", 0),
      (try_for_range,":cur_town", mainplanets_begin, mainplanets_end),
        (store_faction_of_party, ":cur_faction", ":cur_town"),
        (eq, ":cur_faction", ":faction_no"),
        (val_add, ":no_towns", 1),
      (try_end),
      (gt, ":no_towns", 0), #Fail if there are no towns
      (store_random_in_range, ":random_town", 0, ":no_towns"),
      (assign, ":no_towns", 0),
      (try_for_range,":cur_town", mainplanets_begin, mainplanets_end),
        (eq, ":result", -1),
        (store_faction_of_party, ":cur_faction", ":cur_town"),
        (eq, ":cur_faction", ":faction_no"),
        (val_add, ":no_towns", 1),
        (gt, ":no_towns", ":random_town"),
        (assign, ":result", ":cur_town"),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  #script_cf_select_random_minorplanet_with_faction:
  # This script selects a random village in range [minorplanet_begin, minorplanet_end)
  # such that faction of the village is equal to given_faction
  # INPUT:
  # arg1 = faction_no
  
  #OUTPUT:
  # This script may return false if there is no matching village.
  # reg0 = minorplanet_no
  ("cf_select_random_minorplanet_with_faction",
    [
      (store_script_param_1, ":faction_no"),
      (assign, ":result", -1),
      # First count num matching spawn points
      (assign, ":no_villages", 0),
      (try_for_range,":cur_village", minorplanet_begin, minorplanet_end),
        (store_faction_of_party, ":cur_faction", ":cur_village"),
        (eq, ":cur_faction", ":faction_no"),
        (val_add, ":no_villages", 1),
      (try_end),
      (gt, ":no_villages", 0), #Fail if there are no villages
      (store_random_in_range, ":random_village", 0, ":no_villages"),
      (assign, ":no_villages", 0),
      (try_for_range,":cur_village", minorplanet_begin, minorplanet_end),
        (eq, ":result", -1),
        (store_faction_of_party, ":cur_faction", ":cur_village"),
        (eq, ":cur_faction", ":faction_no"),
        (val_add, ":no_villages", 1),
        (gt, ":no_villages", ":random_village"),
        (assign, ":result", ":cur_village"),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  
  #script_cf_select_random_walled_center_with_faction:
  # This script selects a random center in range [centers_begin, centers_end)
  # such that faction of the town is equal to given_faction
  # INPUT:
  # arg1 = faction_no
  # arg2 = preferred_center_no
  
  #OUTPUT:
  # This script may return false if there is no matching town.
  # reg0 = town_no (Can fail)
  ("cf_select_random_walled_center_with_faction",
    [
      (store_script_param, ":faction_no", 1),
      (store_script_param, ":preferred_center_no", 2),
      (assign, ":result", -1),
      # First count num matching spawn points
      (assign, ":no_centers", 0),
      (try_for_range,":cur_center", walled_centers_begin, walled_centers_end),
        (store_faction_of_party, ":cur_faction", ":cur_center"),
        (eq, ":cur_faction", ":faction_no"),
        (val_add, ":no_centers", 1),
        (eq, ":cur_center", ":preferred_center_no"),
        (val_add, ":no_centers", 99),
      (try_end),
      (gt, ":no_centers", 0), #Fail if there are no centers
      (store_random_in_range, ":random_center", 0, ":no_centers"),
      (try_for_range,":cur_center", walled_centers_begin, walled_centers_end),
        (eq, ":result", -1),
        (store_faction_of_party, ":cur_faction", ":cur_center"),
        (eq, ":cur_faction", ":faction_no"),
        (val_sub, ":random_center", 1),
        (try_begin),
          (eq, ":cur_center", ":preferred_center_no"),
          (val_sub, ":random_center", 99),
        (try_end),
        (lt, ":random_center", 0),
        (assign, ":result", ":cur_center"),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  
  #script_cf_select_random_walled_center_with_faction_and_owner_priority_no_siege:
  # INPUT:
  # arg1 = faction_no
  # arg2 = owner_troop_no
  #OUTPUT:
  # This script may return false if there is no matching town.
  # reg0 = center_no (Can fail)
  ("cf_select_random_walled_center_with_faction_and_owner_priority_no_siege",
    [
      (store_script_param, ":faction_no", 1),
      (store_script_param, ":troop_no", 2),
      (assign, ":result", -1),
      (assign, ":no_centers", 0),
      (try_for_range,":cur_center", walled_centers_begin, walled_centers_end),
        (store_faction_of_party, ":cur_faction", ":cur_center"),
        (eq, ":cur_faction", ":faction_no"),
        (party_slot_eq, ":cur_center", slot_center_is_besieged_by, -1),
        (val_add, ":no_centers", 1),
        (party_slot_eq, ":cur_center", slot_mainplanet_lord, ":troop_no"),
        (val_add, ":no_centers", 1000),
      (try_end),
      (gt, ":no_centers", 0), #Fail if there are no centers
      (store_random_in_range, ":random_center", 0, ":no_centers"),
      (try_for_range,":cur_center", walled_centers_begin, walled_centers_end),
        (eq, ":result", -1),
        (store_faction_of_party, ":cur_faction", ":cur_center"),
        (eq, ":cur_faction", ":faction_no"),
        (party_slot_eq, ":cur_center", slot_center_is_besieged_by, -1),
        (val_sub, ":random_center", 1),
        (try_begin),
          (party_slot_eq, ":cur_center", slot_mainplanet_lord, ":troop_no"),
          (val_sub, ":random_center", 1000),
        (try_end),
        (lt, ":random_center", 0),
        (assign, ":result", ":cur_center"),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  
  #script_cf_select_random_walled_center_with_faction_and_less_strength_priority:
  # This script selects a random center in range [centers_begin, centers_end)
  # such that faction of the town is equal to given_faction
  # INPUT:
  # arg1 = faction_no
  # arg2 = preferred_center_no
  
  #OUTPUT:
  # This script may return false if there is no matching town.
  # reg0 = town_no (Can fail)
  ("cf_select_random_walled_center_with_faction_and_less_strength_priority",
    [
      (store_script_param, ":faction_no", 1),
      (store_script_param, ":preferred_center_no", 2),
      (assign, ":result", -1),
      # First count num matching spawn points
      (assign, ":no_centers", 0),
      (try_for_range, ":cur_center", walled_centers_begin, walled_centers_end),
        (store_faction_of_party, ":cur_faction", ":cur_center"),
        (eq, ":cur_faction", ":faction_no"),
        (party_slot_eq, ":cur_center", slot_center_is_besieged_by, -1),
        (val_add, ":no_centers", 1),
        (try_begin),
          (eq, ":cur_center", ":preferred_center_no"),
          (val_add, ":no_centers", 99),
        (try_end),
        ##        (call_script, "script_party_calculate_regular_strength", ":cur_center"),
        ##        (assign, ":strength", reg0),
        ##        (lt, ":strength", 80),
        ##        (store_sub, ":strength", 100, ":strength"),
        ##        (val_div, ":strength", 20),
        ##        (val_add, ":no_centers", ":strength"),
      (try_end),
      (gt, ":no_centers", 0), #Fail if there are no centers
      (store_random_in_range, ":random_center", 0, ":no_centers"),
      (try_for_range, ":cur_center", walled_centers_begin, walled_centers_end),
        (eq, ":result", -1),
        (store_faction_of_party, ":cur_faction", ":cur_center"),
        (eq, ":cur_faction", ":faction_no"),
        (party_slot_eq, ":cur_center", slot_center_is_besieged_by, -1),
        (val_sub, ":random_center", 1),
        (try_begin),
          (eq, ":cur_center", ":preferred_center_no"),
          (val_sub, ":random_center", 99),
        (try_end),
        ##        (try_begin),
        ##          (call_script, "script_party_calculate_regular_strength", ":cur_center"),
        ##          (assign, ":strength", reg0),
        ##          (lt, ":strength", 80),
        ##          (store_sub, ":strength", 100, ":strength"),
        ##          (val_div, ":strength", 20),
        ##          (val_sub, ":random_center", ":strength"),
        ##        (try_end),
        (lt, ":random_center", 0),
        (assign, ":result", ":cur_center"),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  
  #script_cf_select_random_town_at_peace_with_faction:
  # This script selects a random town in range [mainplanets_begin, mainplanets_end)
  # such that faction of the town is friendly to given_faction
  # INPUT:
  # arg1 = faction_no
  
  #OUTPUT:
  # This script may return false if there is no matching town.
  # reg0 = town_no
  ("cf_select_random_town_at_peace_with_faction",
    [
      (store_script_param_1, ":faction_no"),
      (assign, ":result", -1),
      # First count num matching towns
      (assign, ":no_towns", 0),
      (try_for_range,":cur_town", mainplanets_begin, mainplanets_end),
        (store_faction_of_party, ":cur_faction", ":cur_town"),
        (store_relation,":reln", ":cur_faction", ":faction_no"),
        (ge, ":reln", 0),
        (val_add, ":no_towns", 1),
      (try_end),
      (gt, ":no_towns", 0), #Fail if there are no towns
      (store_random_in_range, ":random_town", 0, ":no_towns"),
      (assign, ":no_towns", 0),
      (try_for_range,":cur_town", mainplanets_begin, mainplanets_end),
        (eq, ":result", -1),
        (store_faction_of_party, ":cur_faction", ":cur_town"),
        (store_relation,":reln", ":cur_faction", ":faction_no"),
        (ge, ":reln", 0),
        (val_add, ":no_towns", 1),
        (gt, ":no_towns", ":random_town"),
        (assign, ":result", ":cur_town"),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  #script_cf_select_random_town_at_peace_with_faction_in_trade_route
  # INPUT:
  # arg1 = town_no
  # arg2 = faction_no
  
  #OUTPUT:
  # This script may return false if there is no matching town.
  # reg0 = town_no
  ("cf_select_random_town_at_peace_with_faction_in_trade_route",
    [
      (store_script_param, ":town_no", 1),
      (store_script_param, ":faction_no", 2),
      (assign, ":result", -1),
      (assign, ":no_towns", 0),
      (try_for_range, ":cur_slot", slot_mainplanet_trade_routes_begin, slot_mainplanet_trade_routes_end),
        (party_get_slot, ":cur_town", ":town_no", ":cur_slot"),
        (gt, ":cur_town", 0),
        (store_faction_of_party, ":cur_faction", ":cur_town"),
        (store_relation, ":reln", ":cur_faction", ":faction_no"),
        (ge, ":reln", 0),
        (val_add, ":no_towns", 1),
      (try_end),
      (gt, ":no_towns", 0), #Fail if there are no towns
      (store_random_in_range, ":random_town", 0, ":no_towns"),
      (try_for_range, ":cur_slot", slot_mainplanet_trade_routes_begin, slot_mainplanet_trade_routes_end),
        (eq, ":result", -1),
        (party_get_slot, ":cur_town", ":town_no", ":cur_slot"),
        (gt, ":cur_town", 0),
        (store_faction_of_party, ":cur_faction", ":cur_town"),
        (store_relation, ":reln", ":cur_faction", ":faction_no"),
        (ge, ":reln", 0),
        (val_sub, ":random_town", 1),
        (lt, ":random_town", 0),
        (assign, ":result", ":cur_town"),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  ##  ("cf_select_faction_spawn_point",
  ##    [
  ##      # First count num matching spawn points
  ##      (assign, reg(24), 0),
  ##      (try_for_range,reg(25), spawn_points_begin, spawn_points_end),
  ##        (store_faction_of_party, reg(23), reg(25)),
  ##        (eq, reg(23), "$pin_faction"),
  ##        (val_add, reg(24), 1),
  ##      (end_try,0),
  ##      # reg4 now holds num towns of this faction.
  ##      (gt, reg(24), 0), #Fail if there are no towns
  ##      (store_random, reg(26), reg(24)),
  ##
  ##      (assign, reg(24), 0), # reg24 = num points of this faction.
  ##      (try_for_range,reg(25), spawn_points_begin, spawn_points_end),
  ##        (store_faction_of_party, reg(23), reg(25)),
  ##        (eq, reg(23), "$pin_faction"),
  ##        (try_begin,0),
  ##          (eq, reg(24), reg(26)),
  ##          (assign, "$pout_town", reg(25)), # result is this town
  ##        (end_try,0),
  ##        (val_add, reg(24), 1),
  ##      (end_try,0),
  ##  ]),
  
  
  #script_spawn_party_at_random_town:
  # This script selects a random town in range [mainplanets_begin, mainplanets_end)
  # such that faction of the town is equal to given_faction
  # and spawns a new party there.
  # INPUT:
  # $pin_faction: given_faction
  # $pin_party_template: given_party_template
  
  #OUTPUT:
  # This script may return false if party cannot be spawned.
  # $pout_party: id of the spawned party
  ##  ("spawn_party_at_random_town",
  ##    [
  ##      (call_script,"script_select_random_spawn_point"),
  ##      (set_spawn_radius,1),
  ##      (spawn_around_party,"$pout_town","$pin_party_template"),
  ##      (assign, "$pout_party", reg(0)),
  ##  ]),
  
  #script_cf_spawn_party_at_faction_town:
  # This script selects a random town in range [mainplanets_begin, mainplanets_end)
  # such that faction of the town is equal to given_faction
  # and spawns a new party there.
  # INPUT:
  # $pin_faction: given_faction
  # $pin_party_template: given_party_template
  
  #OUTPUT:
  # This script may return false if party cannot be spawned.
  # $pout_party: id of the spawned party
  ##  ("cf_spawn_party_at_faction_town",
  ##    [
  ##      (call_script,"script_cf_select_faction_spawn_point"),
  ##      (set_spawn_radius,1),
  ##      (spawn_around_party,"$pout_town","$pin_party_template"),
  ##      (assign, "$pout_party", reg(0)),
  ##  ]),
  
  #script_spawn_party_at_random_town_if_below_limit:
  # This script checks if number of parties
  # of specified template is less than limit,
  # If so, it selects a random town in range [mainplanets_begin, mainplanets_end)
  # and spawns a new party there.
  # INPUT:
  # $pin_party_template: given_party_template
  # $pin_limit: limit value
  
  #OUTPUT:
  # $pout_party: id of the spawned party
  # $pout_town: id of the selected faction town
  # Note:
  # This script may return false if number of parties
  # of specified template is greater or equal to limit,
  # or if party cannot be spawned.
  ##  ("cf_spawn_party_at_random_town_if_below_limit",
  ##    [
  ##      (store_num_parties_of_template, reg(22), "$pin_party_template"),
  ##      (lt,reg(22),"$pin_limit"), #check if we are below limit.
  ##      (call_script,"script_select_random_spawn_point"),
  ##      (set_spawn_radius,1),
  ##      (spawn_around_party,"$pout_town","$pin_party_template"),
  ##      (assign, "$pout_party", reg(0)),
  ##  ]),
  
  ##  #script_spawn_party_at_faction_town_if_below_limit:
  ##  # This script checks if number of parties
  ##  # of specified template is less than limit,
  ##  # If so, it selects a random town in range [mainplanets_begin, mainplanets_end)
  ##  # such that faction of the town is equal to given_faction
  ##  # and spawns a new party there.
  ##  # INPUT:
  ##  # $pin_faction: given_faction
  ##  # $pin_party_template: given_party_template
  ##  # $pin_limit: limit value
  ##
  ##  #OUTPUT:
  ##  # $pout_party: id of the spawned party
  ##  # $pout_town: id of the selected faction town
  ##  # Note:
  ##  # This script may return false if number of parties
  ##  # of specified template is greater or equal to limit,
  ##  # or if party cannot be spawned.
  ##  ("cf_spawn_party_at_faction_town_if_below_limit",
  ##    [
  ##      (store_num_parties_of_template, reg(22), "$pin_party_template"),
  ##      (lt,reg(22),"$pin_limit"), #check if we are below limit.
  ##      (call_script,"script_cf_select_faction_spawn_point"),
  ##      (set_spawn_radius,1),
  ##      (spawn_around_party,"$pout_town","$pin_party_template"),
  ##      (assign, "$pout_party", reg(0)),
  ##  ]),
  
  # script_shuffle_troop_slots:
  # Shuffles a range of slots of a given troop.
  # Used for exploiting a troop as an array.
  # Input: arg1 = troop_no, arg2 = slot_begin, arg3 = slot_end
  ("shuffle_troop_slots",
    [
      (store_script_param, ":troop_no", 1),
      (store_script_param, ":slots_begin", 2),
      (store_script_param, ":slots_end", 3),
      (try_for_range, ":cur_slot_no", ":slots_begin", ":slots_end"),
        (store_random_in_range, ":random_slot_no", ":slots_begin", ":slots_end"), #reg(58) = random slot. Now exchange slots reg(57) and reg(58)
        (troop_get_slot, ":cur_slot_value", ":troop_no", ":cur_slot_no"), #temporarily store the value in slot reg(57) in reg(59)
        (troop_get_slot, ":random_slot_value", ":troop_no", ":random_slot_no"), #temporarily store the value in slot reg(58) in reg(60)
        (troop_set_slot, ":troop_no", ":cur_slot_no", ":random_slot_value"), # Now exchange the two...
        (troop_set_slot, ":troop_no", ":random_slot_no", ":cur_slot_value"),
      (try_end),
  ]),
  
  
  # script_get_random_quest
  # Input: arg1 = troop_no (of the troop in conversation), arg2 = min_importance (of the quest)
  # Output: reg0 = quest_no (the slots of the quest will be filled after calling this script)
  ("get_random_quest",
    [
      (store_script_param_1, ":giver_troop"),
      
      (store_character_level, ":player_level", "trp_player"),
      (store_troop_faction, ":giver_faction_no", ":giver_troop"),
      
      (troop_get_slot, ":giver_party_no", ":giver_troop", slot_troop_leaded_party),
      (troop_get_slot, ":giver_reputation", ":giver_troop", slot_lord_reputation_type),
      
      (assign, ":giver_center_no", -1),
      (try_begin),
        (gt, ":giver_party_no", 0),
        (party_get_attached_to, ":giver_center_no", ":giver_party_no"),
      (else_try),
        (is_between, "$g_encountered_party", centers_begin, centers_end),
        (assign, ":giver_center_no", "$g_encountered_party"),
      (try_end),
      
      (try_begin),
        (troop_slot_eq, ":giver_troop", slot_troop_occupation, slto_faction_hero),
        (try_begin),
          (ge, "$g_talk_troop_faction_relation", 0),
          (assign, ":quests_begin", lord_quests_begin),
          (assign, ":quests_end", lord_quests_end),
        (else_try),
          (assign, ":quests_begin", enemy_lord_quests_begin),
          (assign, ":quests_end", enemy_lord_quests_end),
        (try_end),
      (else_try),
        (is_between, ":giver_troop", planet_admins_begin, planet_admins_end),
        (assign, ":quests_begin", minorplanet_elder_quests_begin),
        (assign, ":quests_end", minorplanet_elder_quests_end),
      (else_try),
        (is_between, ":giver_troop", mayors_begin, mayors_end),
        (assign, ":quests_begin", mayor_quests_begin),
        (assign, ":quests_end", mayor_quests_end),
      (else_try),
        (assign, ":quests_begin", lady_quests_begin),
        (assign, ":quests_end", lady_quests_end),
      (try_end),
      (assign, ":result", -1),
      (try_for_range, ":unused", 0, 20), #Repeat trial twenty times
        (eq, ":result", -1),
        (assign, ":quest_target_troop", -1),
        (assign, ":quest_target_center", -1),
        (assign, ":quest_target_faction", -1),
        (assign, ":quest_object_faction", -1),
        (assign, ":quest_object_troop", -1),
        (assign, ":quest_object_center", -1),
        (assign, ":quest_target_party", -1),
        (assign, ":quest_target_party_template", -1),
        (assign, ":quest_target_amount", -1),
        (assign, ":quest_target_dna", -1),
        (assign, ":quest_target_item", -1),
        (assign, ":quest_importance", 1),
        (assign, ":quest_xp_reward", 0),
        (assign, ":quest_gold_reward", 0),
        (assign, ":quest_convince_value", 0),
        (assign, ":quest_expiration_days", 0),
        (assign, ":quest_dont_give_again_period", 0),
        
        (store_random_in_range, ":quest_no", ":quests_begin", ":quests_end"),
        #TODO: Remove this when test is done
        #       (assign, ":quest_no", "qst_meet_spy_in_enemy_town"),
        #TODO: Remove this when test is done end
         
      #Kham - For Testing and Freelancer Quests
        (try_begin), (ge, "$cheat_imposed_quest", 0),(assign, ":quest_no", "$cheat_imposed_quest"),(try_end),

        (neg|check_quest_active,":quest_no"),
        (neg|quest_slot_ge, ":quest_no", slot_quest_dont_give_again_remaining_days, 1),
        (try_begin),
          # Village Elder quests
          (eq, ":quest_no", "qst_deliver_grain"),
          (try_begin),
            (is_between, ":giver_center_no", minorplanet_begin, minorplanet_end),
            #The quest giver is the village elder
            (call_script, "script_get_troop_item_amount", ":giver_troop", "itm_grain"),
            (eq, reg0, 0),
            (neg|party_slot_ge, ":giver_center_no", slot_mainplanet_prosperity, 40),
            (assign, ":quest_target_center", ":giver_center_no"),
            (store_random_in_range, ":quest_target_amount", 4, 8),
            (assign, ":quest_expiration_days", 30),
            # HC - Changed from 20 to 7
            (assign, ":quest_dont_give_again_period", 2),
            (assign, ":result", ":quest_no"),
          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_deliver_cattle"),
          (try_begin),
            (is_between, ":giver_center_no", minorplanet_begin, minorplanet_end),
            #The quest giver is the village elder
            (party_get_slot, ":num_cattle", ":giver_center_no", slot_minorplanet_number_of_cattle),
            (lt, ":num_cattle", 50),
            (assign, ":quest_target_center", ":giver_center_no"),
            (store_random_in_range, ":quest_target_amount", 5, 10),
            (assign, ":quest_expiration_days", 30),
            # HC - Changed from 20 to 2
            (assign, ":quest_dont_give_again_period", 2),
            (assign, ":result", ":quest_no"),
          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_train_peasants_against_bandits"),
          (try_begin),
            (is_between, ":giver_center_no", minorplanet_begin, minorplanet_end),
            #The quest giver is the village elder
            (store_skill_level, ":player_trainer", "skl_trainer", "trp_player"),
            (gt, ":player_trainer", 0),
            (store_random_in_range, ":quest_target_amount", 5, 8),
            (assign, ":quest_target_center", ":giver_center_no"),
            (assign, ":quest_expiration_days", 20),
            # HC - Changed from 40 to 4
            (assign, ":quest_dont_give_again_period", 4),
            (assign, ":result", ":quest_no"),
          (try_end),
        (else_try),
          # Mayor quests
          (eq, ":quest_no", "qst_escort_merchant_caravan"),
          (is_between, ":giver_center_no", centers_begin, centers_end),
          (store_random_party_in_range, ":quest_target_center", mainplanets_begin, mainplanets_end),
          (store_distance_to_party_from_party, ":dist", ":giver_center_no",":quest_target_center"),
          (assign, ":quest_gold_reward", ":dist"),
          (val_add, ":quest_gold_reward", 25),
          (val_mul, ":quest_gold_reward", 25),
          (val_div, ":quest_gold_reward", 20),
          (store_random_in_range, ":quest_target_amount", 6, 12),
          (assign, "$escort_merchant_caravan_mode", 0),
          (assign, ":result", ":quest_no"),
        (else_try),
          (eq, ":quest_no", "qst_deliver_wine"),
          (is_between, ":giver_center_no", centers_begin, centers_end),
          (store_random_party_in_range, ":quest_target_center", mainplanets_begin, mainplanets_end),
          (store_random_in_range, ":random_no", 0, 2),
          (try_begin),
            (eq, ":random_no", 0),
            (assign, ":quest_target_item", "itm_quest_wine"),
          (else_try),
            (assign, ":quest_target_item", "itm_quest_ale"),
          (try_end),
          (store_random_in_range, ":quest_target_amount", 6, 12),
          (store_distance_to_party_from_party, ":dist", ":giver_center_no",":quest_target_center"),
          (assign, ":quest_gold_reward", ":dist"),
          (val_add, ":quest_gold_reward", 2),
          (assign, ":multiplier", 5),
          (val_add, ":multiplier", ":quest_target_amount"),
          (val_mul, ":quest_gold_reward", ":multiplier"),
          (val_div, ":quest_gold_reward", 100),
          (val_mul, ":quest_gold_reward", 10),
          (store_item_value,"$qst_deliver_wine_debt",":quest_target_item"),
          (val_mul,"$qst_deliver_wine_debt",":quest_target_amount"),
          (val_mul,"$qst_deliver_wine_debt", 6),
          (val_div,"$qst_deliver_wine_debt",5),
          (assign, ":quest_expiration_days", 7),
          # HC - Changed from 20 to 5
          (assign, ":quest_dont_give_again_period", 5),
          (assign, ":result", ":quest_no"),
        (else_try),
          (eq, ":quest_no", "qst_troublesome_bandits"),
          (is_between, ":giver_center_no", centers_begin, centers_end),
          (store_character_level, ":quest_gold_reward", "trp_player"),
          (val_add, ":quest_gold_reward", 20),
          (val_mul, ":quest_gold_reward", 35),
          (val_div, ":quest_gold_reward",100),
          (val_mul, ":quest_gold_reward", 10),
          (assign, ":quest_expiration_days", 30),
          # HC - Changed from 30 to 7
          (assign, ":quest_dont_give_again_period", 7),
          (assign, ":result", ":quest_no"),
        (else_try),
          (eq, ":quest_no", "qst_kidnapped_girl"),
          (is_between, ":giver_center_no", centers_begin, centers_end),
          (store_random_in_range, ":quest_target_center", minorplanet_begin, minorplanet_end),
          (store_character_level, ":quest_target_amount"),
          (val_add, ":quest_target_amount", 15),
          (store_distance_to_party_from_party, ":dist", ":giver_center_no", ":quest_target_center"),
          (val_add, ":dist", 15),
          (val_mul, ":dist", 2),
          (val_mul, ":quest_target_amount", ":dist"),
          (val_div, ":quest_target_amount",100),
          (val_mul, ":quest_target_amount",10),
          (assign, ":quest_gold_reward", ":quest_target_amount"),
          (val_div, ":quest_gold_reward", 40),
          (val_mul, ":quest_gold_reward", 10),
          # HC - Changed from 30 to 5
          (assign, ":quest_dont_give_again_period", 5),
          (assign, ":result", ":quest_no"),
        (else_try),
          (eq, ":quest_no", "qst_move_cattle_herd"),
          (is_between, ":giver_center_no", centers_begin, centers_end),
          (call_script, "script_cf_select_random_town_at_peace_with_faction", ":giver_faction_no"),
          (neq, ":giver_center_no", reg0),
          (assign, ":quest_target_center", reg0),
          (store_distance_to_party_from_party, ":dist",":giver_center_no",":quest_target_center"),
          (assign, ":quest_gold_reward", ":dist"),
          (val_add, ":quest_gold_reward", 25),
          (val_mul, ":quest_gold_reward", 50),
          (val_div, ":quest_gold_reward", 20),
          (assign, ":quest_expiration_days", 20),
          # HC - Changed from 20 to 5
          (assign, ":quest_dont_give_again_period", 5),
          (assign, ":result", ":quest_no"),
        (else_try),
          (eq, ":quest_no", "qst_persuade_lords_to_make_peace"),
          (is_between, ":giver_center_no", centers_begin, centers_end),
          (store_faction_of_party, ":cur_object_faction", ":giver_center_no"),
          (call_script, "script_cf_faction_get_random_enemy_faction", ":cur_object_faction"),
          (assign, ":cur_target_faction", reg0),
          (call_script, "script_cf_get_random_lord_except_king_with_faction", ":cur_object_faction"),
          (assign, ":cur_object_troop", reg0),
          (call_script, "script_cf_get_random_lord_except_king_with_faction", ":cur_target_faction"),
          (assign, ":quest_target_troop", reg0),
          (assign, ":quest_object_troop", ":cur_object_troop"),
          (assign, ":quest_target_faction", ":cur_target_faction"),
          (assign, ":quest_object_faction", ":cur_object_faction"),
          (assign, ":quest_gold_reward", 12000),
          (assign, ":quest_convince_value", 7000),
          (assign, ":quest_expiration_days", 30),
          (assign, ":quest_dont_give_again_period", 100),
          (assign, ":result", ":quest_no"),
        (else_try),
          (eq, ":quest_no", "qst_deal_with_jawas"),
          (is_between, ":player_level", 0, 15),
          (is_between, ":giver_center_no", centers_begin, centers_end),
          (store_faction_of_party, ":cur_object_faction", ":giver_center_no"),
          (store_num_parties_destroyed_by_player, ":num_jawas_destroyed", "pt_jawas"),
          (party_template_set_slot,"pt_jawas",slot_party_template_num_killed,":num_jawas_destroyed"),
          (quest_set_slot,"$random_merchant_quest_no",slot_quest_current_state,0),
          (quest_set_slot,"$random_merchant_quest_no",slot_quest_target_party_template,"pt_jawas"),
          (assign, ":quest_gold_reward", 500),
          (assign, ":quest_xp_reward", 500),
          (assign, ":quest_expiration_days", 20),
          # HC - Changed from 30 to 7
          (assign, ":quest_dont_give_again_period", 7),
          (assign, ":result", ":quest_no"),
        (else_try),
          (eq, ":quest_no", "qst_deal_with_night_bandits"),
          (is_between, ":player_level", 0, 15),
          (is_between, ":giver_center_no", centers_begin, centers_end),
          (party_slot_ge, ":giver_center_no", slot_center_has_bandits, 1),
          (assign, ":quest_target_center", ":giver_center_no"),
          (assign, ":quest_expiration_days", 4),
          # HC - Changed from 15 to 7
          (assign, ":quest_dont_give_again_period", 7),
          (assign, ":result", ":quest_no"),
        (else_try),
          # Lady quests
          (eq, ":quest_no", "qst_rescue_lord_by_replace"),
          (try_begin),
            (ge, "$g_talk_troop_faction_relation", 0),
            (is_between, ":player_level", 5, 25),
            (troop_get_slot, ":cur_target_troop", ":giver_troop", slot_troop_father),
            (try_begin),
              (eq, ":cur_target_troop", 0),
              (troop_get_slot, ":cur_target_troop", ":giver_troop", slot_troop_spouse),
            (try_end),
            #(troop_slot_eq, ":cur_target_troop", slot_troop_is_prisoner, 1),#Skip if the lady's father/husband is not in prison
            (troop_slot_ge, ":cur_target_troop", slot_troop_prisoner_of_party, 0),
            (call_script, "script_search_troop_prisoner_of_party", ":cur_target_troop"),
            (assign, ":cur_target_center", reg0),
            (is_between, ":cur_target_center", mainplanets_begin, mainplanets_end),#Skip if he is not in a town
            (assign, ":quest_target_center", ":cur_target_center"),
            (assign, ":quest_target_troop", ":cur_target_troop"),
            (assign, ":quest_expiration_days", 30),
            (assign, ":quest_dont_give_again_period", 73),
            (assign, ":result", ":quest_no"),
          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_deliver_message_to_prisoner_lord"),
          (try_begin),
            (ge, "$g_talk_troop_faction_relation", 0),
            (is_between, ":player_level", 5, 25),
            (troop_get_slot, ":cur_target_troop", ":giver_troop", slot_troop_father),
            (try_begin),
              (eq, ":cur_target_troop", 0),
              (troop_get_slot, ":cur_target_troop", ":giver_troop", slot_troop_spouse),
            (try_end),
            #(troop_slot_eq, ":cur_target_troop", slot_troop_is_prisoner, 1),#Skip if the lady's father/husband is not in prison
            (troop_slot_ge, ":cur_target_troop", slot_troop_prisoner_of_party, 0),
            (call_script, "script_search_troop_prisoner_of_party", ":cur_target_troop"),
            (assign, ":cur_target_center", reg0),
            (is_between, ":cur_target_center", mainplanets_begin, mainplanets_end),#Skip if he is not in a town
            (assign, ":quest_target_center", ":cur_target_center"),
            (assign, ":quest_target_troop", ":cur_target_troop"),
            (assign, ":quest_expiration_days", 30),
            (assign, ":quest_dont_give_again_period", 30),
            (assign, ":result", ":quest_no"),
          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_duel_for_lady"),
          (try_begin),
            (ge, "$g_talk_troop_faction_relation", 0),
            (ge, ":player_level", 10),
            (call_script, "script_cf_troop_get_random_enemy_troop_with_occupation", ":giver_troop", slto_faction_hero),#Can fail
            (assign, ":cur_target_troop", reg0),
            (neg|troop_slot_eq, ":giver_troop", slot_troop_spouse, ":cur_target_troop"), #must not be in the family
            (neg|troop_slot_eq, ":giver_troop", slot_troop_father, ":cur_target_troop"),
            #(troop_slot_eq, ":cur_target_troop", slot_troop_is_prisoner, 0),
            (neg|troop_slot_ge, ":cur_target_troop", slot_troop_prisoner_of_party, 0),
            (troop_slot_ge, ":cur_target_troop", slot_troop_leaded_party, 0),
            (neg|troop_slot_eq, ":cur_target_troop", slot_lord_reputation_type, lrep_goodnatured),
            (neg|troop_slot_eq, ":cur_target_troop", slot_lord_reputation_type, lrep_upstanding),
            (assign, ":quest_target_troop", ":cur_target_troop"),
            (assign, ":quest_expiration_days", 30),
            (assign, ":quest_dont_give_again_period", 50),
            (assign, ":result", ":quest_no"),
          (try_end),
          # Enemy Lord Quests
        (else_try),
          (eq, ":quest_no", "qst_lend_surgeon"),
          (try_begin),
            (eq, "$g_defending_against_siege", 0),#Skip if the center is under siege (because of resting)
            (neq, ":giver_reputation", lrep_quarrelsome),
            (neq, ":giver_reputation", lrep_debauched),
            (assign, ":max_surgery_level", 0),
            (assign, ":best_surgeon", -1),
            (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
            (try_for_range, ":i_stack", 1, ":num_stacks"),
              (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
              (troop_is_hero, ":stack_troop"),
              (store_skill_level, ":cur_surgery_skill", skl_surgery, ":stack_troop"),
              (gt, ":cur_surgery_skill", ":max_surgery_level"),
              (assign, ":max_surgery_level", ":cur_surgery_skill"),
              (assign, ":best_surgeon", ":stack_troop"),
            (try_end),
            
            (store_character_level, ":cur_level", "trp_player"),
            (assign, ":required_skill", 5),
            (val_div, ":cur_level", 10),
            (val_add, ":required_skill", ":cur_level"),
            (ge, ":max_surgery_level", ":required_skill"), #Skip if party skill level is less than the required value
            
            (assign, ":quest_object_troop", ":best_surgeon"),
            (assign, ":quest_importance", 1),
            (assign, ":quest_xp_reward", 10),
            (assign, ":quest_gold_reward", 10),
            # HC - Changed from 50 to 10
            (assign, ":quest_dont_give_again_period", 10),
            (assign, ":result", ":quest_no"),
          (try_end),
          # Lord Quests
        (else_try),
          (eq, ":quest_no", "qst_meet_spy_in_enemy_town"),
          (try_begin),
            (eq, "$players_faction", ":giver_faction_no"),
            (neq, ":giver_reputation", lrep_goodnatured),
            (call_script, "script_troop_get_player_relation", ":giver_troop"),
            (assign, ":giver_relation", reg0),
            (gt, ":giver_relation", 3),
            (call_script, "script_cf_faction_get_random_enemy_faction", ":giver_faction_no"),
            (assign, ":enemy_faction", reg0),
            (store_relation, ":reln", ":enemy_faction", "fac_player_supporters_faction"),
            (lt, ":reln", 0),
            (call_script, "script_cf_select_random_town_with_faction", ":enemy_faction"),
            (assign, ":cur_target_center", reg0),
            #Just to make sure that there is a free walker
            (call_script, "script_cf_center_get_free_walker", ":cur_target_center"),
            (assign, ":quest_target_center", ":cur_target_center"),
            (store_random_in_range, ":quest_target_amount", secret_signs_begin, secret_signs_end),
            (assign, ":result", ":quest_no"),
            (assign, ":quest_gold_reward", 500),
            (assign, ":quest_expiration_days", 30),
            # HC - Changed from 50 to 7
            (assign, ":quest_dont_give_again_period", 7),
            (quest_set_slot, "qst_meet_spy_in_enemy_town", slot_quest_gold_reward, 500),
          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_raid_caravan_to_start_war"),
          (try_begin),
            (eq, "$players_faction", ":giver_faction_no"),
            (this_or_next|eq, ":giver_reputation", lrep_cunning),
            (this_or_next|eq, ":giver_reputation", lrep_quarrelsome),
            (             eq, ":giver_reputation", lrep_debauched),
            (gt, ":player_level", 10),
            (neg|faction_slot_eq, ":giver_faction_no", slot_faction_leader, ":giver_troop"),#Can not take the quest from the king
            (call_script, "script_cf_faction_get_random_friendly_faction", ":giver_faction_no"),#Can fail
            (assign, ":quest_target_faction", reg0),
            (store_troop_faction, ":quest_object_faction", ":giver_troop"),
            (assign, ":quest_target_party_template", "pt_faction_caravan_party"),
            (assign, ":quest_target_amount", 2),
            (assign, ":result", ":quest_no"),
            (assign, ":quest_expiration_days", 30),
            # HC - Changed from 100 to 5, just in case peace breaks out with Rebels and Empire.
            (assign, ":quest_dont_give_again_period", 100),
          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_deliver_message"),
          (try_begin),
            (ge, "$g_talk_troop_faction_relation", 0),
            (lt, ":player_level", 20),
            (call_script, "script_cf_get_random_lord_in_a_center_with_faction", ":giver_faction_no"),#Can fail
            (assign, ":cur_target_troop", reg0),
            (neq, ":cur_target_troop", ":giver_troop"),#Skip himself
            (call_script, "script_get_troop_attached_party", ":cur_target_troop"),
            (assign, ":cur_target_center", reg0),#cur_target_center will definitely be a valid center
            (neq,":giver_center_no", ":cur_target_center"),#Skip current center
            
            (assign, ":quest_target_center", ":cur_target_center"),
            (assign, ":quest_target_troop", ":cur_target_troop"),
            (assign, ":quest_xp_reward", 30),
            (assign, ":quest_gold_reward", 40),
            (assign, ":result", ":quest_no"),
            
            (assign, ":quest_expiration_days", 30),
          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_escort_lady"),
          (try_begin),
            (ge, "$g_talk_troop_faction_relation", 0),
            (ge, ":player_level", 10),
            (troop_get_slot, ":cur_object_troop", ":giver_troop", slot_troop_daughter),
            (store_random_in_range, ":random_no", 0, 2),
            (try_begin),
              (this_or_next|eq,  ":cur_object_troop", 0),
              (eq, ":random_no", 0),
              (troop_get_slot, ":cur_object_troop_2", ":giver_troop", slot_troop_spouse),
              (gt, ":cur_object_troop_2", 0),
              (assign, ":cur_object_troop", ":cur_object_troop_2"),
            (try_end),
            (gt, ":cur_object_troop", 0),#Skip lords without a lady
            ]+gender_fix(":cur_troop_gender", ":cur_object_troop")+[
            (eq, ":cur_troop_gender", 1),#Skip if it is not female
            (gt, ":giver_center_no", 0),#Skip if lord is outside the center
            (troop_slot_eq, ":cur_object_troop", slot_troop_cur_center, ":giver_center_no"),#Skip if the lady is not at the same center
            (call_script, "script_cf_select_random_town_with_faction", ":giver_faction_no"),#Can fail
            (assign, ":cur_target_center", reg0),
            (neq, ":cur_target_center", ":giver_center_no"),
            (hero_can_join),#Skip if player has no available slots
            
            (assign, ":quest_object_troop", ":cur_object_troop"),
            (assign, ":quest_target_center", ":cur_target_center"),
            (assign, ":quest_expiration_days", 20),
            # HC - Changed from 30 to 7
            (assign, ":quest_dont_give_again_period", 7),
            (assign, ":result", ":quest_no"),
          (try_end),
          ##        (else_try),
          ##          (eq, ":quest_no", "qst_hunt_down_raiders"),
          ##          (try_begin),
          ##            (gt, ":player_level", 10),
          ##            (faction_slot_eq, ":giver_faction_no", slot_faction_leader, ":giver_troop"),
          ##            (call_script, "script_cf_select_random_town_with_faction", ":giver_faction_no"),#Can fail
          ##            (assign, ":cur_object_center", reg0),
          ##            (neq, ":cur_object_center", ":giver_center_no"),#Skip current center
          ##            (call_script, "script_get_random_enemy_center", ":giver_party_no"),
          ##            (assign, ":cur_target_center", reg0),
          ##            (ge, ":cur_target_center", 0),
          ##            (store_faction_of_party, ":cur_target_faction", ":cur_target_center"),
          ##            (is_between,  ":cur_target_faction", factions_begin, factions_end),
          ##
          ##            (assign, ":quest_object_center", ":cur_object_center"),
          ##            (assign, ":quest_target_center", ":cur_target_center"),
          ##            (assign, ":quest_importance", 1),
          ##            (assign, ":quest_xp_reward", 1500),
          ##            (assign, ":quest_gold_reward", 1000),
          ##            (assign, ":result", ":quest_no"),
          ##          (try_end),
          ##        (else_try),
          ##          (eq, ":quest_no", "qst_bring_back_deserters"),
          ##          (try_begin),
          ##            (gt, ":player_level", 5),
          ##            (faction_get_slot, ":cur_target_party_template", ":giver_faction_no", slot_faction_deserter_party_template),
          ##            (faction_get_slot, ":cur_target_troop", ":giver_faction_no", slot_faction_deserter_troop),
          ##            (gt, ":cur_target_party_template", 0),#Skip factions with no deserter party templates
          ##            (store_num_parties_of_template, ":num_deserters", ":cur_target_party_template"),
          ##            (ge, ":num_deserters", 2),#Skip if there are less than 2 active deserter parties
          ##
          ##            (assign, ":quest_target_troop", ":cur_target_troop"),
          ##            (assign, ":quest_target_party_template", ":cur_target_party_template"),
          ##            (assign, ":quest_target_amount", 5),
          ##            (assign, ":quest_importance", 1),
          ##            (assign, ":quest_xp_reward", 500),
          ##            (assign, ":quest_gold_reward", 300),
          ##            (assign, ":result", ":quest_no"),
          ##          (try_end),
          ##        (else_try),
          ##          (eq, ":quest_no", "qst_deliver_supply_to_center_under_siege"),
          ##          (try_begin),
          ##            (gt, ":player_level", 10),
          ##            (gt, ":giver_center_no", 0),#Skip if lord is outside the center
          ##            (call_script, "script_cf_get_random_siege_location_with_faction", ":giver_faction_no"),#Can fail
          ##            (assign, ":quest_target_center", reg0),
          ##            (assign, ":quest_target_amount", 10),
          ##            (assign, ":quest_importance", 1),
          ##            (assign, ":quest_xp_reward", 500),
          ##            (assign, ":quest_gold_reward", 300),
          ##            (assign, ":result", ":quest_no"),
          ##          (try_end),
          ##        (else_try),
          ##          (eq, ":quest_no", "qst_rescue_lady_under_siege"),
          ##          (try_begin),
          ##            (gt, ":player_level", 15),
          ##            (troop_get_slot, ":cur_object_troop", ":giver_troop", slot_troop_daughter),
          ##            (store_random_in_range, ":random_no", 0, 2),
          ##            (try_begin),
          ##              (this_or_next|eq,  ":cur_object_troop", 0),
          ##              (eq, ":random_no", 0),
          ##              (troop_get_slot, ":cur_object_troop_2", ":giver_troop", slot_troop_spouse),
          ##              (gt, ":cur_object_troop_2", 0),
          ##              (assign, ":cur_object_troop", ":cur_object_troop_2"),
          ##            (try_end),
          ##            (gt, ":cur_object_troop", 0),#Skip lords without a lady
          ##            (troop_get_type, ":cur_troop_gender", ":cur_object_troop"),
          ##            (eq, ":cur_troop_gender", 1),#Skip if lady is not female
          ##            (troop_get_slot, ":cur_target_center", ":cur_object_troop", slot_troop_cur_center),
          ##            (is_between, ":cur_target_center", centers_begin, centers_end),#Skip if she is not in a center
          ##            (neq,":giver_center_no", ":cur_target_center"),#Skip current center
          ##            (call_script, "script_cf_get_random_siege_location_with_faction", ":giver_faction_no"),#Can fail
          ##            (assign, ":cur_target_center", reg0),
          ##            (troop_set_slot, ":cur_object_troop", slot_troop_cur_center, ":cur_target_center"),#Move lady to the siege location
          ##            (assign, ":quest_object_troop", ":cur_object_troop"),
          ##            (assign, ":quest_target_center", ":cur_target_center"),
          ##            (assign, ":quest_target_troop", ":giver_troop"),
          ##            (assign, ":quest_importance", 1),
          ##            (assign, ":quest_xp_reward", 200),
          ##            (assign, ":quest_gold_reward", 750),
          ##            (assign, ":result", ":quest_no"),
          ##          (try_end),
          ##        (else_try),
          ##          (eq, ":quest_no", "qst_deliver_message_to_lover"),
          ##          (try_begin),
          ##            (is_between, ":player_level", 5, 30),
          ##            (troop_get_slot, ":cur_target_troop", ":giver_troop", slot_troop_lover),
          ##            (gt, ":cur_target_troop", 0),#Skip lords without a lover
          ##            (troop_get_slot, ":cur_target_center", ":cur_target_troop", slot_troop_cur_center),
          ##            (is_between, ":cur_target_center", centers_begin, centers_end),#Skip if she is not in a center
          ##            (neq,":giver_center_no", ":cur_target_center"),#Skip current center
          ##            (assign, ":quest_target_troop", ":cur_target_troop"),
          ##            (assign, ":quest_target_center", ":cur_target_center"),
          ##            (assign, ":result", ":quest_no"),
          ##          (try_end),
          ##        (else_try),
          ##          (eq, ":quest_no", "qst_bring_reinforcements_to_siege"),
          ##          (try_begin),
          ##            (gt, ":player_level", 10),
          ##            (call_script, "script_cf_get_random_siege_location_with_attacker_faction", ":giver_faction_no"),#Can fail
          ##            (assign, ":cur_target_center", reg0),
          ##            (store_random_in_range, ":random_no", 5, 11),
          ##            (troops_can_join, ":random_no"),#Skip if the player doesn't have enough room
          ##            (call_script, "script_cf_get_number_of_random_troops_from_party", ":giver_party_no", ":random_no"),#Can fail
          ##            (assign, ":cur_object_troop", reg0),
          ##            (party_get_battle_opponent, ":cur_target_party", ":cur_target_center"),
          ##            (party_get_num_companion_stacks, ":num_stacks", ":cur_target_party"),
          ##            (gt, ":num_stacks", 0),#Skip if the besieger party has no troops
          ##            (party_stack_get_troop_id, ":cur_target_troop", ":cur_target_party", 0),
          ##            (troop_is_hero, ":cur_target_troop"),#Skip if the besieger party has no heroes
          ##            (neq, ":cur_target_troop", ":giver_troop"),#Skip if the quest giver is the same troop
          ##            (assign, ":quest_target_troop", ":cur_target_troop"),
          ##            (assign, ":quest_object_troop", ":cur_object_troop"),
          ##            (assign, ":quest_target_party", ":cur_target_party"),
          ##            (assign, ":quest_target_center", ":cur_target_center"),
          ##            (assign, ":quest_target_amount", ":random_no"),
          ##            (assign, ":quest_importance", 1),
          ##            (assign, ":quest_xp_reward", 400),
          ##            (assign, ":quest_gold_reward", 200),
          ##            (assign, ":result", ":quest_no"),
          ##          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_deliver_message_to_enemy_lord"),
          (try_begin),
            (ge, "$g_talk_troop_faction_relation", 0),
            (is_between, ":player_level", 5,25),
            (call_script, "script_cf_get_random_lord_from_another_faction_in_a_center", ":giver_faction_no"),#Can fail
            (assign, ":cur_target_troop", reg0),
            (call_script, "script_get_troop_attached_party", ":cur_target_troop"),
            (assign, ":quest_target_center", reg0),#quest_target_center will definitely be a valid center
            (assign, ":quest_target_troop", ":cur_target_troop"),
            (assign, ":quest_importance", 1),
            (assign, ":quest_xp_reward", 200),
            (assign, ":quest_gold_reward", 0),
            (assign, ":result", ":quest_no"),
            (assign, ":quest_expiration_days", 40),
          (try_end),
          ##        (else_try),
          ##          (eq, ":quest_no", "qst_bring_prisoners_to_enemy"),
          ##          (try_begin),
          ##            (gt, ":player_level", 10),
          ##            (is_between, ":giver_center_no", centers_begin, centers_end),#Skip if the quest giver is not at a center
          ##            (store_random_in_range, ":random_no", 5, 11),
          ##            (troops_can_join_as_prisoner, ":random_no"),#Skip if the player doesn't have enough room
          ##            (call_script, "script_get_random_enemy_town", ":giver_center_no"),
          ##            (assign, ":cur_target_center", reg0),
          ##            (ge, ":cur_target_center", 0),#Skip if there are no enemy towns
          ##            (store_faction_of_party, ":cur_target_faction", ":cur_target_center"),
          ##            (faction_get_slot, ":cur_object_troop", ":cur_target_faction", slot_faction_tier_5_troop),
          ##            (assign, ":quest_target_center", ":cur_target_center"),
          ##            (assign, ":quest_object_troop", ":cur_object_troop"),
          ##            (assign, ":quest_target_amount", ":random_no"),
          ##            (assign, ":quest_importance", 1),
          ##            (assign, ":quest_xp_reward", 300),
          ##            (assign, ":quest_gold_reward", 200),
          ##            (assign, ":result", ":quest_no"),
          ##          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_deal_with_bandits_at_lords_village"),
          (try_begin),
            (neq, ":giver_reputation", lrep_debauched),
            (neq, ":giver_reputation", lrep_quarrelsome),
            (ge, "$g_talk_troop_faction_relation", 0),
            (assign, ":end_cond", minorplanet_end),
            (assign, ":cur_target_center", -1),
            (try_for_range, ":cur_village", minorplanet_begin, ":end_cond"),
              (party_slot_eq, ":cur_village", slot_mainplanet_lord, ":giver_troop"),
              (party_slot_eq, ":cur_village", slot_minorplanet_infested_by_bandits, 1),
              (assign, ":cur_target_center", ":cur_village"),
              (assign, ":end_cond", 0),
            (try_end),
            (ge, ":cur_target_center", 0),
            (neg|check_quest_active, "qst_eliminate_bandits_infesting_village"),
            (assign, ":quest_target_center", ":cur_target_center"),
            (assign, ":result", ":quest_no"),
            (assign, ":quest_expiration_days", 30),
          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_raise_troops"),
          (try_begin),
            (neq, ":giver_reputation", lrep_martial),
            (neq, ":giver_faction_no", "fac_player_supporters_faction"), #we need tier_1_troop a valid value
            (ge, "$g_talk_troop_faction_relation", 0),
            (store_character_level, ":cur_level", "trp_player"),
            (gt, ":cur_level", 5),
            (troop_slot_ge, "trp_player", slot_troop_renown, 100),
            
            (store_random_in_range, ":quest_target_amount", 5, 8),
            (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
            (le, ":quest_target_amount", ":free_capacity"),
            (faction_get_slot, ":quest_object_troop", ":giver_faction_no", slot_faction_tier_1_troop),
            (store_random_in_range, ":level_up", 20, 40),
            (val_add, ":level_up", ":cur_level"),
            (val_div, ":level_up", 10),
            
            (store_mul, ":quest_gold_reward", ":quest_target_amount", 10),
            
            (assign, ":quest_target_troop", ":quest_object_troop"),
            (try_for_range, ":unused", 0, ":level_up"),
              (troop_get_upgrade_troop, ":level_up_troop", ":quest_target_troop", 0),
              (gt, ":level_up_troop", 0),
              (assign, ":quest_target_troop", ":level_up_troop"),
              (val_mul, ":quest_gold_reward", ":quest_gold_reward", 7),
              (val_div, ":quest_gold_reward", ":quest_gold_reward", 4),
            (try_end),
            
            ##            (try_begin),
            ##              (ge, ":cur_level", 15),
            ##              (faction_get_slot, ":cur_target_troop", ":giver_faction_no", slot_faction_tier_5_troop),
            ##              (assign, ":quest_gold_reward", 300),
            ##            (else_try),
            ##              (faction_get_slot, ":cur_target_troop", ":giver_faction_no", slot_faction_tier_4_troop),
            ##              (assign, ":quest_gold_reward", 150),
            ##            (try_end),
            ##            (gt, ":cur_target_troop", 0),
            (assign, ":quest_xp_reward", ":quest_gold_reward"),
            (val_mul, ":quest_xp_reward", 3),
            (val_div, ":quest_xp_reward", 10),
            (assign, ":result", ":quest_no"),
            (assign, ":quest_expiration_days", 120),
            (assign, ":quest_dont_give_again_period", 15),
          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_collect_taxes"),
          (try_begin),
            (neq, ":giver_reputation", lrep_goodnatured),
            (neq, ":giver_reputation", lrep_upstanding),
            (ge, "$g_talk_troop_faction_relation", 0),
            (call_script, "script_cf_troop_get_random_leaded_town_or_minorplanet_except_center", ":giver_troop", ":giver_center_no"),
            (assign, ":quest_target_center", reg0),
            (assign, ":quest_importance", 1),
            (assign, ":quest_gold_reward", 0),
            (assign, ":quest_xp_reward", 100),
            (assign, ":result", ":quest_no"),
            (assign, ":quest_expiration_days", 50),
            (assign, ":quest_dont_give_again_period", 20),
          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_hunt_down_fugitive"),
          (try_begin),
            (ge, "$g_talk_troop_faction_relation", 0),
            (call_script, "script_cf_select_random_minorplanet_with_faction", ":giver_faction_no"),
            (assign, ":quest_target_center", reg0),
            (store_random_in_range, ":quest_target_dna", 0, 1000000),
            (assign, ":result", ":quest_no"),
            (assign, ":quest_expiration_days", 30),
            # HC - Changed from 30 to 5
            (assign, ":quest_dont_give_again_period", 5),
          (try_end),
          ##        (else_try),
          ##          (eq, ":quest_no", "qst_capture_messenger"),
          ##          (try_begin),
          ##            (call_script, "script_cf_faction_get_random_enemy_faction", ":giver_faction_no"),
          ##            (assign, ":cur_target_faction", reg0),
          ##            (faction_get_slot, ":cur_target_troop", ":cur_target_faction", slot_faction_messenger_troop),
          ##            (gt, ":cur_target_troop", 0),#Checking the validiy of cur_target_troop
          ##            (store_num_parties_destroyed_by_player, ":quest_target_amount", "pt_messenger_party"),
          ##
          ##            (assign, ":quest_target_troop", ":cur_target_troop"),
          ##            (assign, ":quest_target_party_template", ":cur_target_party_template"),
          ##            (assign, ":quest_importance", 1),
          ##            (assign, ":quest_xp_reward", 700),
          ##            (assign, ":quest_gold_reward", 400),
          ##            (assign, ":result", ":quest_no"),
          ##          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_kill_local_merchant"),
          (try_begin),
            (this_or_next|eq, ":giver_reputation", lrep_quarrelsome),
            (this_or_next|eq, ":giver_reputation", lrep_cunning),
            (             eq, ":giver_reputation", lrep_debauched),
            (neg|faction_slot_eq, ":giver_faction_no", slot_faction_leader, ":giver_troop"),#Can not take the quest from the king
            (ge, "$g_talk_troop_faction_relation", 0),
            (gt, ":player_level", 5),
            (is_between, ":giver_center_no", mainplanets_begin, mainplanets_end),
            (assign, ":quest_importance", 1),
            (assign, ":quest_xp_reward", 300),
            (assign, ":quest_gold_reward", 1000),
            (assign, ":result", ":quest_no"),
            (assign, ":quest_expiration_days", 10),
            (assign, ":quest_dont_give_again_period", 30),
          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_bring_back_runaway_serfs"),
          (try_begin),
            (neq, ":giver_reputation", lrep_goodnatured),
            (neq, ":giver_reputation", lrep_upstanding),
            (ge, "$g_talk_troop_faction_relation", 0),
            (ge, ":player_level", 5),
            (gt, ":giver_center_no", 0),#Skip if lord is outside the center
            (eq, "$g_defending_against_siege", 0),#Skip if the center is under siege (because of resting)
            
            (assign, ":cur_object_center", -1),
            (try_for_range, ":cur_village", minorplanet_begin, minorplanet_end),
              (party_slot_eq, ":cur_village", slot_mainplanet_lord, ":giver_troop"),
              (store_distance_to_party_from_party, ":dist", ":cur_village", ":giver_center_no"),
              (lt, ":dist", 25),
              (assign, ":cur_object_center", ":cur_village"),
            (try_end),
            (ge, ":cur_object_center", 0),#Skip if the quest giver is not the owner of any villages around the center
            (call_script, "script_cf_select_random_town_with_faction", ":giver_faction_no"),
            (assign, ":cur_target_center", reg0),
            (neq, ":cur_target_center", ":giver_center_no"),#Skip current center
            (store_distance_to_party_from_party, ":dist", ":cur_target_center", ":giver_center_no"),
            (ge, ":dist", 20),
            (assign, ":quest_target_party_template", "pt_runaway_serfs"),
            (assign, ":quest_object_center", ":cur_object_center"),
            (assign, ":quest_target_center", ":cur_target_center"),
            (assign, ":quest_importance", 1),
            (assign, ":quest_xp_reward", 200),
            (assign, ":quest_gold_reward", 150),
            (assign, ":result", ":quest_no"),
            (assign, ":quest_expiration_days", 30),
            (assign, ":quest_dont_give_again_period", 20),
            (assign, "$qst_bring_back_runaway_serfs_num_parties_returned", 0),
            (assign, "$qst_bring_back_runaway_serfs_num_parties_fleed", 0),
          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_follow_spy"),
          (try_begin),
            (ge, "$g_talk_troop_faction_relation", 0),
            (neq, ":giver_reputation", lrep_goodnatured),
            (party_get_skill_level, ":tracking_skill", "p_main_party", "skl_tracking"),
            (ge, ":tracking_skill", 2),
            (ge, ":player_level", 10),
            (eq, "$g_defending_against_siege", 0), #Skip if the center is under siege (because of resting)
            (gt, ":giver_party_no", 0), #Skip if the quest giver doesn't have a party
            (gt, ":giver_center_no", 0), #skip if the quest giver is not in a center
            (party_slot_eq, "$g_encountered_party", slot_party_type, spt_mainplanet), #skip if we are not in a town.
            (party_get_position, pos2, "p_main_party"),
            (assign, ":min_distance", 99999),
            (try_for_range, ":unused_2", 0, 10),
              (call_script, "script_cf_get_random_enemy_center", ":giver_party_no"),
              (assign, ":random_object_center", reg0),
              (party_get_position, pos3, ":random_object_center"),
              (map_get_random_position_around_position, pos4, pos3, 6),
              (get_distance_between_positions, ":cur_distance", pos2, pos4),
              (lt, ":cur_distance", ":min_distance"),
              (assign, ":min_distance", ":cur_distance"),
              (assign, ":cur_object_center", ":random_object_center"),
              (copy_position, pos63, pos4), #Do not change pos63 until quest is accepted
            (try_end),
            (gt, ":cur_object_center", 0), #Skip if there are no enemy centers
            
            (assign, ":quest_object_center", ":cur_object_center"),
            (assign, ":quest_dont_give_again_period", 50),
            (assign, ":result", ":quest_no"),
            (assign, "$qst_follow_spy_run_away", 0),
            (assign, "$qst_follow_spy_meeting_state", 0),
            (assign, "$qst_follow_spy_meeting_counter", 0),
            (assign, "$qst_follow_spy_spy_back_in_town", 0),
            (assign, "$qst_follow_spy_partner_back_in_town", 0),
            (assign, "$qst_follow_spy_no_active_parties", 0),
          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_capture_enemy_hero"),
          (try_begin),
            (eq, "$players_faction", ":giver_faction_no"),
            (neg|faction_slot_eq, "$players_faction", slot_faction_marshall, "trp_player"),
            (ge, ":player_level", 15),
            (call_script, "script_cf_faction_get_random_enemy_faction", ":giver_faction_no"),#Can fail
            (assign, ":quest_target_faction", reg0),
            (assign, ":quest_expiration_days", 30),
            (assign, ":quest_dont_give_again_period", 80),
            (assign, ":quest_gold_reward", 2000),
            (assign, ":result", ":quest_no"),
          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_lend_companion"),
          (try_begin),
            (ge, "$g_talk_troop_faction_relation", 0),
            (assign, ":total_heroes", 0),
            (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
            (try_for_range, ":i_stack", 0, ":num_stacks"),
              (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
              (troop_is_hero, ":stack_troop"),
              (is_between, ":stack_troop", companions_begin, companions_end),
              (store_character_level, ":stack_level", ":stack_troop"),
              (ge, ":stack_level", 15),
              (assign, ":is_quest_hero", 0),
              (try_for_range, ":i_quest", 0, all_quests_end),
                (check_quest_active, ":i_quest"),
                (this_or_next|quest_slot_eq, ":i_quest", slot_quest_target_troop, ":stack_troop"),
                (quest_slot_eq, ":i_quest", slot_quest_object_troop, ":stack_troop"),
                (assign, ":is_quest_hero", 1),
              (try_end),
              (eq, ":is_quest_hero", 0),
              (val_add, ":total_heroes", 1),
            (try_end),
            (gt, ":total_heroes", 0),#Skip if party has no eligible heroes
            (store_random_in_range, ":random_hero", 0, ":total_heroes"),
            (assign, ":total_heroes", 0),
            (assign, ":cur_target_troop", -1),
            (try_for_range, ":i_stack", 0, ":num_stacks"),
              (eq, ":cur_target_troop", -1),
              (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
              (troop_is_hero, ":stack_troop"),
              (neq, ":stack_troop", "trp_player"),
              (store_character_level, ":stack_level", ":stack_troop"),
              (ge, ":stack_level", 15),
              (assign, ":is_quest_hero", 0),
              (try_for_range, ":i_quest", 0, all_quests_end),
                (check_quest_active, ":i_quest"),
                (this_or_next|quest_slot_eq, ":i_quest", slot_quest_target_troop, ":stack_troop"),
                (quest_slot_eq, ":i_quest", slot_quest_object_troop, ":stack_troop"),
                (assign, ":is_quest_hero", 1),
              (try_end),
              (eq, ":is_quest_hero", 0),
              (val_add, ":total_heroes", 1),
              (gt, ":total_heroes", ":random_hero"),
              (assign, ":cur_target_troop", ":stack_troop"),
            (try_end),
            (assign, ":quest_target_troop", ":cur_target_troop"),
            (store_current_day, ":quest_target_amount"),
            (val_add, ":quest_target_amount", 8),
            
            (assign, ":quest_importance", 1),
            (assign, ":quest_xp_reward", 300),
            (assign, ":quest_gold_reward", 400),
            (assign, ":result", ":quest_no"),
            (assign, ":quest_dont_give_again_period", 30),
          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_collect_debt"),
          (try_begin),
            (ge, "$g_talk_troop_faction_relation", 0),
            # Find a vassal (within the same faction?)
            (call_script, "script_cf_get_random_lord_in_a_center_with_faction", ":giver_faction_no"),#Can fail
            (assign, ":quest_target_troop", reg0),
            (neq, ":quest_target_troop", ":giver_troop"),#Skip himself
            (call_script, "script_get_troop_attached_party", ":quest_target_troop"),
            (assign, ":quest_target_center", reg0),#cur_target_center will definitely be a valid center
            (neq,":giver_center_no", ":quest_target_center"),#Skip current center
            
            (assign, ":quest_xp_reward", 30),
            (assign, ":quest_gold_reward", 40),
            (assign, ":result", ":quest_no"),
            (store_random_in_range, ":quest_target_amount", 6, 9),
            (val_mul, ":quest_target_amount", 500),
            (store_div, ":quest_convince_value", ":quest_target_amount", 5),
            (assign, ":quest_expiration_days", 90),
            # HC - Changed from 20 to 5
            (assign, ":quest_dont_give_again_period", 5),
          (try_end),
          ##        (else_try),
          ##          (eq, ":quest_no", "qst_capture_conspirators"),
          ##          (try_begin),
          ##            (eq, 1,0), #TODO: disable this for now
          ##            (ge, ":player_level", 10),
          ##            (is_between, ":giver_center_no", mainplanets_begin, mainplanets_end),#Skip if quest giver's center is not a town
          ##            (party_slot_eq, ":giver_center_no", slot_mainplanet_lord, ":giver_troop"),#Skip if the current center is not ruled by the quest giver
          ##            (call_script, "script_cf_get_random_faction_hero", ":giver_faction_no"),#Can fail
          ##
          ##            (assign, ":quest_target_troop", reg0),
          ##            (assign, ":quest_target_center", ":giver_center_no"),
          ##            (assign, ":quest_importance", 1),
          ##            (assign, ":quest_xp_reward", 10),
          ##            (assign, ":quest_gold_reward", 10),
          ##            (assign, ":result", ":quest_no"),
          ##            (store_character_level, ":cur_level"),
          ##            (val_div, ":cur_level", 5),
          ##            (val_max, ":cur_level", 3),
          ##            (store_add, ":max_parties", 4, ":cur_level"),
          ##            (store_random_in_range, "$qst_capture_conspirators_num_parties_to_spawn", 4, ":max_parties"),
          ##            (assign, "$qst_capture_conspirators_num_troops_to_capture", 0),
          ##            (assign, "$qst_capture_conspirators_num_parties_spawned", 0),
          ##            (assign, "$qst_capture_conspirators_leave_meeting_counter", 0),
          ##            (assign, "$qst_capture_conspirators_party_1", 0),
          ##            (assign, "$qst_capture_conspirators_party_2", 0),
          ##            (assign, "$qst_capture_conspirators_party_3", 0),
          ##            (assign, "$qst_capture_conspirators_party_4", 0),
          ##            (assign, "$qst_capture_conspirators_party_5", 0),
          ##            (assign, "$qst_capture_conspirators_party_6", 0),
          ##            (assign, "$qst_capture_conspirators_party_7", 0),
          ##          (try_end),
          ##        (else_try),
          ##          (eq, ":quest_no", "qst_defend_nobles_against_peasants"),
          ##          (try_begin),
          ##            (eq, 1,0), #TODO: disable this for now
          ##            (ge, ":player_level", 10),
          ##            (is_between, ":giver_center_no", mainplanets_begin, mainplanets_end),#Skip if quest giver's center is not a town
          ##            (party_slot_eq, ":giver_center_no", slot_mainplanet_lord, ":giver_troop"),#Skip if the current center is not ruled by the quest giver
          ##
          ##            (assign, ":quest_target_center", ":giver_center_no"),
          ##            (assign, ":quest_importance", 1),
          ##            (assign, ":quest_xp_reward", 10),
          ##            (assign, ":quest_gold_reward", 10),
          ##            (assign, ":result", ":quest_no"),
          ##            (store_character_level, ":cur_level"),
          ##            (val_div, ":cur_level", 5),
          ##            (val_max, ":cur_level", 4),
          ##            (store_add, ":max_parties", 4, ":cur_level"),
          ##            (store_random_in_range, "$qst_defend_nobles_against_peasants_num_peasant_parties_to_spawn", 4, ":cur_level"),
          ##            (store_random_in_range, "$qst_defend_nobles_against_peasants_num_noble_parties_to_spawn", 4, ":cur_level"),
          ##            (assign, "$qst_defend_nobles_against_peasants_num_nobles_to_save", 0),
          ##            (assign, "$qst_defend_nobles_against_peasants_num_nobles_saved", 0),
          ##            (assign, "$qst_defend_nobles_against_peasants_peasant_party_1", 0),
          ##            (assign, "$qst_defend_nobles_against_peasants_peasant_party_2", 0),
          ##            (assign, "$qst_defend_nobles_against_peasants_peasant_party_3", 0),
          ##            (assign, "$qst_defend_nobles_against_peasants_peasant_party_4", 0),
          ##            (assign, "$qst_defend_nobles_against_peasants_peasant_party_5", 0),
          ##            (assign, "$qst_defend_nobles_against_peasants_peasant_party_6", 0),
          ##            (assign, "$qst_defend_nobles_against_peasants_peasant_party_7", 0),
          ##            (assign, "$qst_defend_nobles_against_peasants_peasant_party_8", 0),
          ##            (assign, "$qst_defend_nobles_against_peasants_noble_party_1", 0),
          ##            (assign, "$qst_defend_nobles_against_peasants_noble_party_2", 0),
          ##            (assign, "$qst_defend_nobles_against_peasants_noble_party_3", 0),
          ##            (assign, "$qst_defend_nobles_against_peasants_noble_party_4", 0),
          ##            (assign, "$qst_defend_nobles_against_peasants_noble_party_5", 0),
          ##            (assign, "$qst_defend_nobles_against_peasants_noble_party_6", 0),
          ##            (assign, "$qst_defend_nobles_against_peasants_noble_party_7", 0),
          ##            (assign, "$qst_defend_nobles_against_peasants_noble_party_8", 0),
          ##          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_incriminate_loyal_commander"),
          (try_begin),
            (neq, ":giver_reputation", lrep_upstanding),
            (neq, ":giver_reputation", lrep_goodnatured),
            (eq, "$players_faction", ":giver_faction_no"),
            (ge, ":player_level", 10),
            (faction_slot_eq, ":giver_faction_no", slot_faction_leader, ":giver_troop"),
            (assign, ":try_times", 1),
            (assign, ":found", 0),
            (try_for_range, ":unused", 0, ":try_times"),
              (call_script, "script_cf_faction_get_random_enemy_faction", ":giver_faction_no"),#Can fail
              (assign, ":cur_target_faction", reg0),
              
              (faction_get_slot, ":cur_target_troop", ":cur_target_faction", slot_faction_leader),
              (assign, ":num_centerless_heroes", 0),
              (try_for_range, ":cur_faction_hero", faction_heroes_begin, faction_heroes_end),
                (troop_slot_eq, ":cur_faction_hero", slot_troop_occupation, slto_faction_hero),
                #(troop_slot_eq, ":cur_faction_hero", slot_troop_is_prisoner, 0),
                (neg|troop_slot_ge, ":cur_faction_hero", slot_troop_prisoner_of_party, 0),
                (neq, ":cur_target_troop", ":cur_faction_hero"),
                (store_troop_faction, ":cur_faction_hero_faction", ":cur_faction_hero"),
                (eq, ":cur_target_faction", ":cur_faction_hero_faction"),
                ##                (call_script, "script_get_number_of_hero_centers", ":cur_faction_hero"),
                ##                (eq, reg0, 0),
                (val_add, ":num_centerless_heroes", 1),
              (try_end),
              (gt, ":num_centerless_heroes", 0),
              (assign, ":cur_object_troop", -1),
              (store_random_in_range, ":random_faction_hero", 0, ":num_centerless_heroes"),
              (try_for_range, ":cur_faction_hero", faction_heroes_begin, faction_heroes_end),
                (eq, ":cur_object_troop", -1),
                (troop_slot_eq, ":cur_faction_hero", slot_troop_occupation, slto_faction_hero),
                (neq, ":cur_target_troop", ":cur_faction_hero"),
                (store_troop_faction, ":cur_faction_hero_faction", ":cur_faction_hero"),
                (eq, ":cur_target_faction", ":cur_faction_hero_faction"),
                ##                (call_script, "script_get_number_of_hero_centers", ":cur_faction_hero"),
                ##                (eq, reg0, 0),
                (val_sub, ":random_faction_hero", 1),
                (lt, ":random_faction_hero", 0),
                (assign, ":cur_object_troop", ":cur_faction_hero"),
              (try_end),
              
              (assign, ":cur_target_center", -1),
              (call_script, "script_get_troop_attached_party", ":cur_target_troop"),
              (is_between, reg0, mainplanets_begin, mainplanets_end),
              (party_slot_eq, reg0, slot_mainplanet_lord, ":cur_target_troop"),
              (assign, ":cur_target_center", reg0),
              
              (assign, ":try_times", -1),#Exit the second loop
              (assign, ":found", 1),
            (try_end),
            (eq, ":found", 1),
            
            (assign, "$incriminate_quest_sacrificed_troop", 0),
            
            (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
            (try_for_range, ":i_stack", 1, ":num_stacks"),
              (eq ,"$incriminate_quest_sacrificed_troop", 0),
              (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
              (neg|troop_is_hero, ":stack_troop"),
              (store_character_level, ":stack_troop_level", ":stack_troop"),
              (ge, ":stack_troop_level", 25),
              (assign, "$incriminate_quest_sacrificed_troop", ":stack_troop"),
            (try_end),
            (gt, "$incriminate_quest_sacrificed_troop", 0),
            
            (assign, ":quest_target_troop", ":cur_target_troop"),
            (assign, ":quest_object_troop", ":cur_object_troop"),
            (assign, ":quest_target_center", ":cur_target_center"),
            (assign, ":quest_target_faction", ":cur_target_faction"),
            
            (assign, ":quest_importance", 1),
            (assign, ":quest_xp_reward", 700),
            (assign, ":quest_gold_reward", 1000),
            (assign, ":result", ":quest_no"),
            (assign, ":quest_expiration_days", 30),
            (assign, ":quest_dont_give_again_period", 180),
          (try_end),
        (else_try),
          (eq, ":quest_no", "qst_capture_prisoners"),
          (try_begin),
            (eq, "$players_faction", ":giver_faction_no"),
            (call_script, "script_cf_faction_get_random_enemy_faction", ":giver_faction_no"),#Can fail
            (assign, ":cur_target_faction", reg0),
            (store_add, ":max_tier_no", slot_faction_tier_5_troop, 1),
            (store_random_in_range, ":random_tier_no", slot_faction_tier_2_troop, ":max_tier_no"),
            (faction_get_slot, ":cur_target_troop", ":cur_target_faction", ":random_tier_no"),
            (gt, ":cur_target_troop", 0),
            (store_random_in_range, ":quest_target_amount", 3, 7),
            (assign, ":quest_target_troop", ":cur_target_troop"),
            (assign, ":quest_target_faction", ":cur_target_faction"),
            (assign, ":quest_importance", 1),
            (store_character_level, ":quest_gold_reward", ":cur_target_troop"),
            (val_add, ":quest_gold_reward", 5),
            (val_mul, ":quest_gold_reward", ":quest_gold_reward"),
            (val_div, ":quest_gold_reward", 5),
            (val_mul, ":quest_gold_reward", ":quest_target_amount"),
            (assign, ":quest_xp_reward", ":quest_gold_reward"),
            (assign, ":result", ":quest_no"),
            (assign, ":quest_expiration_days", 90),
            (assign, ":quest_dont_give_again_period", 20),
          (try_end),
        (try_end),
      (try_end),
      (try_begin),
        (neq, ":result", -1),
        
        (try_begin),
          (ge, ":quest_target_center", 0),
          (store_faction_of_party, ":quest_target_faction", ":quest_target_center"),
        (try_end),
        
        (quest_set_slot, ":result", slot_quest_target_troop, ":quest_target_troop"),
        (quest_set_slot, ":result", slot_quest_target_center, ":quest_target_center"),
        (quest_set_slot, ":result", slot_quest_object_troop, ":quest_object_troop"),
        (quest_set_slot, ":result", slot_quest_target_faction, ":quest_target_faction"),
        (quest_set_slot, ":result", slot_quest_object_faction, ":quest_object_faction"),
        (quest_set_slot, ":result", slot_quest_object_center, ":quest_object_center"),
        (quest_set_slot, ":result", slot_quest_target_party, ":quest_target_party"),
        (quest_set_slot, ":result", slot_quest_target_party_template, ":quest_target_party_template"),
        (quest_set_slot, ":result", slot_quest_target_amount, ":quest_target_amount"),
        (quest_set_slot, ":result", slot_quest_importance, ":quest_importance"),
        (quest_set_slot, ":result", slot_quest_xp_reward, ":quest_xp_reward"),
        (quest_set_slot, ":result", slot_quest_gold_reward, ":quest_gold_reward"),
        (quest_set_slot, ":result", slot_quest_convince_value, ":quest_convince_value"),
        (quest_set_slot, ":result", slot_quest_expiration_days, ":quest_expiration_days"),
        (quest_set_slot, ":result", slot_quest_dont_give_again_period, ":quest_dont_give_again_period"),
        (quest_set_slot, ":result", slot_quest_current_state, 0),
        (quest_set_slot, ":result", slot_quest_giver_troop, ":giver_troop"),
        (quest_set_slot, ":result", slot_quest_giver_center, ":giver_center_no"),
        (quest_set_slot, ":result", slot_quest_target_dna, ":quest_target_dna"),
        (quest_set_slot, ":result", slot_quest_target_item, ":quest_target_item"),
      (try_end),
      
      (assign, reg0, ":result"),
  ]),
  
  
  
  
  # script_cf_get_random_enemy_center_within_range
  # Input: arg1 = party_no, arg2 = range (in kms)
  # Output: reg0 = center_no
  ("cf_get_random_enemy_center_within_range",
    [
      (store_script_param, ":party_no", 1),
      (store_script_param, ":range", 2),
      
      (assign, ":num_centers", 0),
      (store_faction_of_party, ":faction_no", ":party_no"),
      (try_for_range, ":cur_center", centers_begin, centers_end),
        (store_faction_of_party, ":cur_faction", ":cur_center"),
        (store_relation, ":cur_relation", ":faction_no", ":cur_faction"),
        (lt, ":cur_relation", 0),
        (store_distance_to_party_from_party, ":dist", ":party_no", ":cur_center"),
        (le, ":dist", ":range"),
        (val_add, ":num_centers", 1),
      (try_end),
      (gt, ":num_centers", 0),
      (store_random_in_range, ":random_center", 0, ":num_centers"),
      (assign, ":end_cond", centers_end),
      (try_for_range, ":cur_center", centers_begin, ":end_cond"),
        (store_faction_of_party, ":cur_faction", ":cur_center"),
        (store_relation, ":cur_relation", ":faction_no", ":cur_faction"),
        (lt, ":cur_relation", 0),
        (store_distance_to_party_from_party, ":dist", ":party_no", ":cur_center"),
        (le, ":dist", ":range"),
        (val_sub, ":random_center", 1),
        (lt, ":random_center", 0),
        (assign, ":result", ":cur_center"),
        (assign, ":end_cond", 0),#break
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  # script_cf_faction_get_random_enemy_faction
  # Input: arg1 = faction_no
  # Output: reg0 = faction_no (Can fail)
  ("cf_faction_get_random_enemy_faction",
    [
      (store_script_param_1, ":faction_no"),
      
      (assign, ":result", -1),
      (assign, ":count_factions", 0),
      (try_for_range, ":cur_faction", factions_begin, factions_end),
        (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
        (store_relation, ":cur_relation", ":faction_no", ":cur_faction"),
        (le, ":cur_relation", -1),
        (val_add, ":count_factions", 1),
      (try_end),
      (store_random_in_range,":random_faction",0,":count_factions"),
      (assign, ":count_factions", 0),
      (try_for_range, ":cur_faction", factions_begin, factions_end),
        (eq, ":result", -1),
        (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
        (store_relation, ":cur_relation", ":faction_no", ":cur_faction"),
        (le, ":cur_relation", -1),
        (val_add, ":count_factions", 1),
        (gt, ":count_factions", ":random_faction"),
        (assign, ":result", ":cur_faction"),
      (try_end),
      
      (neq, ":result", -1),
      (assign, reg0, ":result"),
  ]),
  
  # script_cf_faction_get_random_friendly_faction
  # Input: arg1 = faction_no
  # Output: reg0 = faction_no (Can fail)
  ("cf_faction_get_random_friendly_faction",
    [
      (store_script_param_1, ":faction_no"),
      
      (assign, ":result", -1),
      (assign, ":count_factions", 0),
      (try_for_range, ":cur_faction", factions_begin, factions_end),
        (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
        (neq, ":cur_faction", ":faction_no"),
        (store_relation, ":cur_relation", ":faction_no", ":cur_faction"),
        (ge, ":cur_relation", 0),
        (val_add, ":count_factions", 1),
      (try_end),
      (store_random_in_range,":random_faction",0,":count_factions"),
      (assign, ":count_factions", 0),
      (try_for_range, ":cur_faction", factions_begin, factions_end),
        (eq, ":result", -1),
        (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
        (neq, ":cur_faction", ":faction_no"),
        (store_relation, ":cur_relation", ":faction_no", ":cur_faction"),
        (ge, ":cur_relation", 0),
        (val_add, ":count_factions", 1),
        (gt, ":count_factions", ":random_faction"),
        (assign, ":result", ":cur_faction"),
      (try_end),
      
      (neq, ":result", -1),
      (assign, reg0, ":result"),
  ]),
  
  # script_cf_troop_get_random_enemy_troop_with_occupation
  # Input: arg1 = troop_no,
  # Output: reg0 = enemy_troop_no (Can fail)
  ("cf_troop_get_random_enemy_troop_with_occupation",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, ":occupation"),
      
      (assign, ":result", -1),
      (assign, ":count_enemies", 0),
      (try_for_range, ":cur_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
        (troop_get_slot, ":cur_enemy", ":troop_no", ":cur_slot"),
        (gt, ":cur_enemy", 0),
        (troop_slot_eq, ":cur_enemy", slot_troop_occupation, ":occupation"),
        (val_add, ":count_enemies", 1),
      (try_end),
      (store_random_in_range,":random_enemy",0,":count_enemies"),
      (assign, ":count_enemies", 0),
      (try_for_range, ":cur_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
        (eq, ":result", -1),
        (troop_get_slot, ":cur_enemy", ":troop_no", ":cur_slot"),
        (gt, ":cur_enemy", 0),
        (troop_slot_eq, ":cur_enemy", slot_troop_occupation, ":occupation"),
        (val_add, ":count_enemies", 1),
        (gt, ":count_enemies", ":random_enemy"),
        (assign, ":result", ":cur_enemy"),
      (try_end),
      
      (neq, ":result", -1),
      (assign, reg0, ":result"),
  ]),
  
  
  ##  # script_cf_troop_get_random_enemy_troop_as_a_town_lord
  ##  # Input: arg1 = troop_no
  ##  # Output: reg0 = enemy_troop_no (Can fail)
  ##  ("cf_troop_get_random_enemy_troop_as_a_town_lord",
  ##    [
  ##      (store_script_param_1, ":troop_no"),
  ##
  ##      (assign, ":result", -1),
  ##      (assign, ":count_enemies", 0),
  ##      (try_for_range, ":cur_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
  ##        (troop_get_slot, ":cur_enemy", ":troop_no", ":cur_slot"),
  ##        (gt, ":cur_enemy", 0),
  ##        (troop_slot_eq, ":cur_enemy", slot_troop_occupation, slto_faction_hero),
  ##        (call_script, "script_get_number_of_hero_centers", ":cur_enemy"),
  ##        (gt, reg0, 0),
  ##        (val_add, ":count_enemies", 1),
  ##      (try_end),
  ##      (store_random_in_range,":random_enemy",0,":count_enemies"),
  ##      (assign, ":count_enemies", 0),
  ##      (try_for_range, ":cur_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
  ##        (eq, ":result", -1),
  ##        (troop_get_slot, ":cur_enemy", ":troop_no", ":cur_slot"),
  ##        (gt, ":cur_enemy", 0),
  ##        (troop_slot_eq, ":cur_enemy", slot_troop_occupation, slto_faction_hero),
  ##        (call_script, "script_get_number_of_hero_centers", ":cur_enemy"),
  ##        (gt, reg0, 0),
  ##        (val_add, ":count_enemies", 1),
  ##        (gt, ":count_enemies", ":random_enemy"),
  ##        (assign, ":result", ":cur_enemy"),
  ##      (try_end),
  ##      (neq, ":result", -1),
  ##      (assign, reg0, ":result"),
  ##  ]),
  
  
  ##  # script_cf_get_random_enemy_with_valid_slot
  ##  # Input: arg1 = faction_no, arg2 = slot_no
  ##  # Output: reg0 = faction_no (Can fail)
  ##  ("cf_get_random_enemy_with_valid_slot",
  ##    [
  ##      (store_script_param_1, ":faction_no"),
  ##      (store_script_param_2, ":slot_no"),
  ##
  ##      (assign, ":result", -1),
  ##      (assign, ":count_factions", 0),
  ##      (try_for_range, ":cur_faction", factions_begin, factions_end),
  ##        (store_relation, ":cur_relation", ":faction_no", ":cur_faction"),
  ##        (le, ":cur_relation", -10),
  ##        (faction_get_slot, ":cur_value", ":cur_faction", ":slot_no"),
  ##        (gt, ":cur_value", 0),#Checking validity
  ##        (val_add, ":count_factions", 1),
  ##      (try_end),
  ##      (store_random_in_range,":random_faction",0,":count_factions"),
  ##      (assign, ":count_factions", 0),
  ##      (try_for_range, ":cur_faction", factions_begin, factions_end),
  ##        (eq, ":result", -1),
  ##        (store_relation, ":cur_relation", ":faction_no", ":cur_faction"),
  ##        (le, ":cur_relation", -10),
  ##        (faction_get_slot, ":cur_value", ":cur_faction", ":slot_no"),
  ##        (gt, ":cur_value", 0),#Checking validity
  ##        (val_add, ":count_factions", 1),
  ##        (gt, ":count_factions", ":random_faction"),
  ##        (assign, ":result", ":cur_faction"),
  ##      (try_end),
  ##
  ##      (neq, ":result", -1),
  ##      (assign, reg0, ":result"),
  ##  ]),
  
  
  ##  # script_cf_get_random_faction_hero
  ##  # Input: arg1 = faction_no
  ##  # Output: reg0 = troop_no (Can fail)
  ##  ("cf_get_random_faction_hero",
  ##    [
  ##      (store_script_param_1, ":faction_no"),
  ##      (assign, ":count_heroes", 0),
  ##      (try_for_range, ":center_no", centers_begin, centers_end),
  ##        (store_faction_of_party, ":cur_faction", ":center_no"),
  ##        (eq, ":cur_faction", ":faction_no"),
  ##        (party_get_slot, ":cur_lord", ":center_no", slot_mainplanet_lord),
  ##        (is_between, ":cur_lord", heroes_begin, heroes_end),
  ##        (val_add, ":count_heroes", 1),
  ##      (try_end),
  ##      (store_random_in_range, ":random_hero", 0, ":count_heroes"),
  ##      (assign, ":result", -1),
  ##      (assign, ":count_heroes", 0),
  ##      (try_for_range, ":center_no", centers_begin, centers_end),
  ##        (eq, ":result", -1),
  ##        (store_faction_of_party, ":cur_faction", ":center_no"),
  ##        (eq, ":cur_faction", ":faction_no"),
  ##        (party_get_slot, ":cur_lord", ":center_no", slot_mainplanet_lord),
  ##        (is_between, ":cur_lord", heroes_begin, heroes_end),
  ##        (val_add, ":count_heroes", 1),
  ##        (lt, ":random_hero", ":count_heroes"),
  ##        (assign, ":result", ":cur_lord"),
  ##      (try_end),
  ##      (neq, ":result", -1),
  ##      (assign, reg0, ":result"),
  ##  ]),
  
  
  # script_cf_get_random_faction_hero_as_lover
  # Input: arg1 = troop_no (of the lady)
  # Output: reg0 = troop_no (of the hero) (Can fail)
  ("cf_get_random_faction_hero_as_lover",
    [
      #      (store_script_param_1, ":cur_lady"),
      
      
      #      (troop_get_slot, ":cur_father", ":cur_lady", slot_troop_father),
      #      (troop_get_slot, ":fathers_rank", ":cur_father", slot_troop_faction_rank),
      (assign, ":result", -1),
      (assign, ":count_heroes", 0),
      (try_for_range, ":troop_no", faction_heroes_begin, faction_heroes_end),
        (troop_slot_eq, ":troop_no", slot_troop_lover, 0),
        (troop_slot_eq, ":troop_no", slot_troop_spouse, 0),
        #        (troop_get_slot, ":cur_rank", ":troop_no", slot_troop_faction_rank),
        #        (lt, ":cur_rank", ":fathers_rank"), # Only heroes with lower ranks may be the lovers of the daughters
        (val_add, ":count_heroes", 1),
      (try_end),
      (store_random_in_range,":random_hero",0,":count_heroes"),
      (assign, ":count_heroes", 0),
      (try_for_range, ":troop_no", faction_heroes_begin, faction_heroes_end),
        (eq, ":result", -1),
        (troop_slot_eq, ":troop_no", slot_troop_lover, 0),
        (troop_slot_eq, ":troop_no", slot_troop_spouse, 0),
        #        (troop_get_slot, ":cur_rank", ":troop_no", slot_troop_faction_rank),
        #        (lt, ":cur_rank", ":fathers_rank"), # Only heroes with lower ranks may be the lovers of the daughters
        (val_add, ":count_heroes", 1),
        (gt, ":count_heroes", ":random_hero"),
        (assign, ":result", ":troop_no"),
      (try_end),
      (neq, ":result", -1),
      (assign, reg0, ":result"),
  ]),
  
  
  ##  # script_cf_get_random_siege_location_with_faction
  ##  # Input: arg1 = faction_no
  ##  # Output: reg0 = center_no, Can Fail!
  ##  ("cf_get_random_siege_location_with_faction",
  ##    [
  ##      (store_script_param_1, ":faction_no"),
  ##      (assign, ":result", -1),
  ##      (assign, ":count_sieges", 0),
  ##      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
  ##        (party_get_battle_opponent, ":besieger_party", ":center_no"),
  ##        (gt, ":besieger_party", 0),
  ##        (store_faction_of_party, ":cur_faction_no", ":center_no"),
  ##        (eq, ":cur_faction_no", ":faction_no"),
  ##        (val_add, ":count_sieges", 1),
  ##      (try_end),
  ##      (store_random_in_range,":random_center",0,":count_sieges"),
  ##      (assign, ":count_sieges", 0),
  ##      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
  ##        (eq, ":result", -1),
  ##        (party_get_battle_opponent, ":besieger_party", ":center_no"),
  ##        (gt, ":besieger_party", 0),
  ##        (store_faction_of_party, ":cur_faction_no", ":center_no"),
  ##        (eq, ":cur_faction_no", ":faction_no"),
  ##        (val_add, ":count_sieges", 1),
  ##        (gt, ":count_sieges", ":random_center"),
  ##        (assign, ":result", ":center_no"),
  ##      (try_end),
  ##      (neq, ":result", -1),
  ##      (assign, reg0, ":result"),
  ##  ]),
  
  ##  # script_cf_get_random_siege_location_with_attacker_faction
  ##  # Input: arg1 = faction_no
  ##  # Output: reg0 = center_no, Can Fail!
  ##  ("cf_get_random_siege_location_with_attacker_faction",
  ##    [
  ##      (store_script_param_1, ":faction_no"),
  ##      (assign, ":result", -1),
  ##      (assign, ":count_sieges", 0),
  ##      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
  ##        (party_get_battle_opponent, ":besieger_party", ":center_no"),
  ##        (gt, ":besieger_party", 0),
  ##        (store_faction_of_party, ":cur_faction_no", ":besieger_party"),
  ##        (eq, ":cur_faction_no", ":faction_no"),
  ##        (val_add, ":count_sieges", 1),
  ##      (try_end),
  ##      (store_random_in_range,":random_center",0,":count_sieges"),
  ##      (assign, ":count_sieges", 0),
  ##      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
  ##        (eq, ":result", -1),
  ##        (party_get_battle_opponent, ":besieger_party", ":center_no"),
  ##        (gt, ":besieger_party", 0),
  ##        (store_faction_of_party, ":cur_faction_no", ":besieger_party"),
  ##        (eq, ":cur_faction_no", ":faction_no"),
  ##        (val_add, ":count_sieges", 1),
  ##        (gt, ":count_sieges", ":random_center"),
  ##        (assign, ":result", ":center_no"),
  ##      (try_end),
  ##      (neq, ":result", -1),
  ##      (assign, reg0, ":result"),
  ##  ]),
  
  
  
  ##  # script_cf_get_number_of_random_troops_from_party
  ##  # Input: arg1 = party_no, arg2 = number of troops to remove
  ##  # Output: reg0 = troop_no, Can fail if there are no slots having the required number of units!
  ##  ("cf_get_number_of_random_troops_from_party",
  ##    [
  ##      (store_script_param_1, ":party_no"),
  ##      (store_script_param_2, ":no_to_remove"),
  ##
  ##      (assign, ":result", -1),
  ##      (assign, ":count_stacks", 0),
  ##
  ##      (party_get_num_companion_stacks, ":num_stacks",":party_no"),
  ##      (try_for_range, ":i_stack", 0, ":num_stacks"),
  ##        (party_stack_get_size, ":stack_size",":party_no",":i_stack"),
  ##        (party_stack_get_num_wounded, ":num_wounded",":party_no",":i_stack"),
  ##        (val_sub, ":stack_size", ":num_wounded"),
  ##        (ge, ":stack_size", ":no_to_remove"),
  ##        (party_stack_get_troop_id, ":stack_troop",":party_no",":i_stack"),
  ##        (neg|troop_is_hero, ":stack_troop"),
  ##        (val_add, ":count_stacks", 1),
  ##      (try_end),
  ##      (store_random_in_range,":random_stack",0,":count_stacks"),
  ##      (assign, ":count_stacks", 0),
  ##      (try_for_range, ":i_stack", 0, ":num_stacks"),
  ##        (eq, ":result", -1),
  ##        (party_stack_get_size, ":stack_size",":party_no",":i_stack"),
  ##        (party_stack_get_num_wounded, ":num_wounded",":party_no",":i_stack"),
  ##        (val_sub, ":stack_size", ":num_wounded"),
  ##        (ge, ":stack_size", ":no_to_remove"),
  ##        (party_stack_get_troop_id, ":stack_troop",":party_no",":i_stack"),
  ##        (neg|troop_is_hero, ":stack_troop"),
  ##        (val_add, ":count_stacks", 1),
  ##        (gt, ":count_stacks", ":random_stack"),
  ##        (assign, ":result", ":stack_troop"),
  ##      (try_end),
  ##
  ##      (neq, ":result", -1),
  ##      (assign, reg0, ":result"),
  ##  ]),
  
  
  
  
  # script_cf_get_random_lord_in_a_center_with_faction
  # Input: arg1 = faction_no
  # Output: reg0 = troop_no, Can Fail!
  ("cf_get_random_lord_in_a_center_with_faction",
    [
      (store_script_param_1, ":faction_no"),
      (assign, ":result", -1),
      (assign, ":count_lords", 0),
      (try_for_range, ":lord_no", heroes_begin, heroes_end),
        (store_troop_faction, ":lord_faction_no", ":lord_no"),
        (eq, ":faction_no", ":lord_faction_no"),
        (troop_slot_eq, ":lord_no", slot_troop_occupation, slto_faction_hero),
        #(troop_slot_eq, ":lord_no", slot_troop_is_prisoner, 0),
        (neg|troop_slot_ge, ":lord_no", slot_troop_prisoner_of_party, 0),
        (troop_get_slot, ":lord_party", ":lord_no", slot_troop_leaded_party),
        (ge, ":lord_party", 0),
        (party_get_attached_to, ":lord_attachment", ":lord_party"),
        (is_between, ":lord_attachment", centers_begin, centers_end), #is troop in a center?
        (val_add, ":count_lords", 1),
      (try_end),
      (store_random_in_range, ":random_lord", 0, ":count_lords"),
      (assign, ":count_lords", 0),
      (try_for_range, ":lord_no", heroes_begin, heroes_end),
        (eq, ":result", -1),
        (store_troop_faction, ":lord_faction_no", ":lord_no"),
        (eq, ":faction_no", ":lord_faction_no"),
        (troop_slot_eq, ":lord_no", slot_troop_occupation, slto_faction_hero),
        #(troop_slot_eq, ":lord_no", slot_troop_is_prisoner, 0),
        (neg|troop_slot_ge, ":lord_no", slot_troop_prisoner_of_party, 0),
        (troop_get_slot, ":lord_party", ":lord_no", slot_troop_leaded_party),
        (ge, ":lord_party", 0),
        (party_get_attached_to, ":lord_attachment", ":lord_party"),
        (is_between, ":lord_attachment", centers_begin, centers_end), #is troop in a center?
        (val_add, ":count_lords", 1),
        (lt, ":random_lord", ":count_lords"),
        (assign, ":result", ":lord_no"),
      (try_end),
      (neq, ":result", -1),
      (assign, reg0, ":result"),
  ]),
  
  # script_cf_get_random_lord_except_king_with_faction
  # Input: arg1 = faction_no
  # Output: reg0 = troop_no, Can Fail!
  ("cf_get_random_lord_except_king_with_faction",
    [
      (store_script_param_1, ":faction_no"),
      (assign, ":result", -1),
      (assign, ":count_lords", 0),
      (try_for_range, ":lord_no", heroes_begin, heroes_end),
        (store_troop_faction, ":lord_faction_no", ":lord_no"),
        (eq, ":faction_no", ":lord_faction_no"),
        (neg|faction_slot_eq, ":faction_no", slot_faction_leader, ":lord_no"),
        (troop_slot_eq, ":lord_no", slot_troop_occupation, slto_faction_hero),
        #(troop_slot_eq, ":lord_no", slot_troop_is_prisoner, 0),
        (neg|troop_slot_ge, ":lord_no", slot_troop_prisoner_of_party, 0),
        (troop_get_slot, ":lord_party", ":lord_no", slot_troop_leaded_party),
        (ge, ":lord_party", 0),
        (val_add, ":count_lords", 1),
      (try_end),
      (store_random_in_range, ":random_lord", 0, ":count_lords"),
      (assign, ":count_lords", 0),
      (try_for_range, ":lord_no", heroes_begin, heroes_end),
        (eq, ":result", -1),
        (store_troop_faction, ":lord_faction_no", ":lord_no"),
        (eq, ":faction_no", ":lord_faction_no"),
        (neg|faction_slot_eq, ":faction_no", slot_faction_leader, ":lord_no"),
        (troop_slot_eq, ":lord_no", slot_troop_occupation, slto_faction_hero),
        #(troop_slot_eq, ":lord_no", slot_troop_is_prisoner, 0),
        (neg|troop_slot_ge, ":lord_no", slot_troop_prisoner_of_party, 0),
        (troop_get_slot, ":lord_party", ":lord_no", slot_troop_leaded_party),
        (ge, ":lord_party", 0),
        (val_add, ":count_lords", 1),
        (lt, ":random_lord", ":count_lords"),
        (assign, ":result", ":lord_no"),
      (try_end),
      (neq, ":result", -1),
      (assign, reg0, ":result"),
  ]),
  
  
  # script_cf_get_random_lord_from_another_faction_in_a_center
  # Input: arg1 = faction_no
  # Output: reg0 = troop_no, Can Fail!
  ("cf_get_random_lord_from_another_faction_in_a_center",
    [
      (store_script_param_1, ":faction_no"),
      (assign, ":result", -1),
      (assign, ":count_lords", 0),
      (try_for_range, ":lord_no", heroes_begin, heroes_end),
        (store_troop_faction, ":lord_faction_no", ":lord_no"),
        (neq, ":lord_faction_no", ":faction_no"),
        (store_relation, ":our_relation", ":lord_faction_no", "fac_player_supporters_faction"),
        (store_relation, ":lord_relation", ":lord_faction_no", ":faction_no"),
        (lt, ":lord_relation", 0),
        (ge, ":our_relation", 0),
        (troop_slot_eq, ":lord_no", slot_troop_occupation, slto_faction_hero),
        #(troop_slot_eq, ":lord_no", slot_troop_is_prisoner, 0),
        (neg|troop_slot_ge, ":lord_no", slot_troop_prisoner_of_party, 0),
        (troop_get_slot, ":lord_party", ":lord_no", slot_troop_leaded_party),
        (ge, ":lord_party", 0),
        (party_get_attached_to, ":lord_attachment", ":lord_party"),
        (is_between, ":lord_attachment", centers_begin, centers_end), #is troop in a center?
        (val_add, ":count_lords", 1),
      (try_end),
      (store_random_in_range, ":random_lord", 0, ":count_lords"),
      (assign, ":count_lords", 0),
      (try_for_range, ":lord_no", heroes_begin, heroes_end),
        (eq, ":result", -1),
        (store_troop_faction, ":lord_faction_no", ":lord_no"),
        (neq, ":lord_faction_no", ":faction_no"),
        (store_relation, ":our_relation", ":lord_faction_no", "fac_player_supporters_faction"),
        (store_relation, ":lord_relation", ":lord_faction_no", ":faction_no"),
        (lt, ":lord_relation", 0),
        (ge, ":our_relation", 0),
        (troop_slot_eq, ":lord_no", slot_troop_occupation, slto_faction_hero),
        #(troop_slot_eq, ":lord_no", slot_troop_is_prisoner, 0),
        (neg|troop_slot_ge, ":lord_no", slot_troop_prisoner_of_party, 0),
        (troop_get_slot, ":lord_party", ":lord_no", slot_troop_leaded_party),
        (ge, ":lord_party", 0),
        (party_get_attached_to, ":lord_attachment", ":lord_party"),
        (is_between, ":lord_attachment", centers_begin, centers_end), #is troop in a center?
        (val_add, ":count_lords", 1),
        (lt, ":random_lord", ":count_lords"),
        (assign, ":result", ":lord_no"),
      (try_end),
      (neq, ":result", -1),
      (assign, reg0, ":result"),
  ]),
  
  # script_get_closest_walled_center
  # Input: arg1 = party_no
  # Output: reg0 = center_no (closest)
  ("get_closest_walled_center",
    [
      (store_script_param_1, ":party_no"),
      (assign, ":min_distance", 9999999),
      (assign, reg0, -1),
      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
        (store_distance_to_party_from_party, ":party_distance", ":party_no", ":center_no"),
        (lt, ":party_distance", ":min_distance"),
        (assign, ":min_distance", ":party_distance"),
        (assign, reg0, ":center_no"),
      (try_end),
  ]),
  
  # script_get_closest_center
  # Input: arg1 = party_no
  # Output: reg0 = center_no (closest)
  ("get_closest_center",
    [
      (store_script_param_1, ":party_no"),
      (assign, ":min_distance", 9999999),
      (assign, reg0, -1),
      (try_for_range, ":center_no", centers_begin, centers_end),
        (store_distance_to_party_from_party, ":party_distance", ":party_no", ":center_no"),
        (lt, ":party_distance", ":min_distance"),
        (assign, ":min_distance", ":party_distance"),
        (assign, reg0, ":center_no"),
      (try_end),
  ]),
  
  
  # script_get_closest_center_of_faction
  # Input: arg1 = party_no, arg2 = faction_no
  # Output: reg0 = center_no (closest)
  ("get_closest_center_of_faction",
    [
      (store_script_param_1, ":party_no"),
      (store_script_param_2, ":faction_no"),
      (assign, ":min_distance", 99999),
      (assign, ":result", -1),
      (try_for_range, ":center_no", centers_begin, centers_end),
        (store_faction_of_party, ":faction_no", ":center_no"),
        (eq, ":faction_no", ":faction_no"),
        (store_distance_to_party_from_party, ":party_distance", ":party_no", ":center_no"),
        (lt, ":party_distance", ":min_distance"),
        (assign, ":min_distance", ":party_distance"),
        (assign, ":result", ":center_no"),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  # script_get_closest_walled_center_of_faction
  # Input: arg1 = party_no, arg2 = faction_no
  # Output: reg0 = center_no (closest)
  ("get_closest_walled_center_of_faction",
    [
      (store_script_param_1, ":party_no"),
      (store_script_param_2, ":faction_no"),
      (assign, ":min_distance", 99999),
      (assign, ":result", -1),
      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
        (store_faction_of_party, ":faction_no", ":center_no"),
        (eq, ":faction_no", ":faction_no"),
        (store_distance_to_party_from_party, ":party_distance", ":party_no", ":center_no"),
        (lt, ":party_distance", ":min_distance"),
        (assign, ":min_distance", ":party_distance"),
        (assign, ":result", ":center_no"),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  
  ##  # script_get_closest_town_of_faction
  ##  # Input: arg1 = party_no, arg2 = faction_no
  ##  # Output: reg0 = center_no (closest)
  ##  ("get_closest_town_of_faction",
  ##    [
  ##      (store_script_param_1, ":party_no"),
  ##      (store_script_param_2, ":faction_no"),
  ##      (assign, ":min_distance", 9999999),
  ##      (assign, ":result", -1),
  ##      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
  ##        (store_faction_of_party, ":faction_no", ":center_no"),
  ##        (eq, ":faction_no", ":faction_no"),
  ##        (party_slot_eq, ":center_no", slot_party_type, spt_mainplanet),
  ##        (store_distance_to_party_from_party, ":party_distance", ":party_no", ":center_no"),
  ##        (lt, ":party_distance", ":min_distance"),
  ##        (assign, ":min_distance", ":party_distance"),
  ##        (assign, ":result", ":center_no"),
  ##      (try_end),
  ##      (assign, reg0, ":result"),
  ##  ]),
  
  
  # script_let_nearby_parties_join_current_battle
  # Input: arg1 = besiege_mode, arg2 = dont_add_friends
  # Output: none
  ("let_nearby_parties_join_current_battle",
    [
      (store_script_param, ":besiege_mode", 1),
      (store_script_param, ":dont_add_friends", 2),
      (assign, ":join_distance", 5),
      (try_begin),
        (is_currently_night),
        (assign, ":join_distance", 3),
      (try_end),
      (try_for_parties, ":party_no"),
        (party_get_battle_opponent, ":opponent",":party_no"),
        (lt, ":opponent", 0), #party is not itself involved in a battle
        (party_get_attached_to, ":attached_to",":party_no"),
        (lt, ":attached_to", 0), #party is not attached to another party
        (get_party_ai_behavior, ":behavior", ":party_no"),
        (neq, ":behavior", ai_bhvr_in_town),
        
        
        (store_distance_to_party_from_party, ":distance", ":party_no", "p_main_party"),
        (lt, ":distance", ":join_distance"),
        
        (store_faction_of_party, ":faction_no", ":party_no"),
        (store_faction_of_party, ":enemy_faction", "$g_enemy_party"),
        (try_begin),
          (eq, ":faction_no", "fac_player_supporters_faction"),
          (assign, ":reln_with_player", 100),
        (else_try),
          (store_relation, ":reln_with_player", ":faction_no", "fac_player_supporters_faction"),
        (try_end),
        (try_begin),
          (eq, ":faction_no", ":enemy_faction"),
          (assign, ":reln_with_enemy", 100),
        (else_try),
          (store_relation, ":reln_with_enemy", ":faction_no", ":enemy_faction"),
        (try_end),
        
        (assign, ":enemy_side", 1),
        (try_begin),
          (neq, "$g_enemy_party", "$g_encountered_party"),
          (assign, ":enemy_side", 2),
        (try_end),
        
        (try_begin),
          (eq, ":besiege_mode", 0),
          (lt, ":reln_with_player", 0),
          (gt, ":reln_with_enemy", 0),
          (party_get_slot, ":party_type", ":party_no"),
          (eq, ":party_type", spt_faction_hero_party),
          (get_party_ai_behavior, ":ai_bhvr", ":party_no"),
          (neq, ":ai_bhvr", ai_bhvr_avoid_party),
          (party_quick_attach_to_current_battle, ":party_no", ":enemy_side"), #attach as enemy
          (str_store_party_name, s1, ":party_no"),
          (display_message, "str_s1_joined_battle_enemy", color_bad_news),
        (else_try),
          (eq, ":dont_add_friends", 0),
          (gt, ":reln_with_player", 0),
          (lt, ":reln_with_enemy", 0),
          (assign, ":do_join", 1),
          (try_begin),
            (eq, ":besiege_mode", 1),
            (assign, ":do_join", 0),
            (eq, ":faction_no", "$players_faction"),
            (faction_slot_eq, "$players_faction", slot_faction_marshall, "trp_player"),
            (assign, ":do_join", 1),
          (try_end),
          (eq, ":do_join", 1),
          (party_get_slot, ":party_type", ":party_no"),
          (eq, ":party_type", spt_faction_hero_party),
          (party_stack_get_troop_id, ":leader", ":party_no", 0),
          #       (troop_get_slot, ":player_relation", ":leader", slot_troop_player_relation),
          (call_script, "script_troop_get_player_relation", ":leader"),
          (assign, ":player_relation", reg0),
          (ge, ":player_relation", 0),
          (party_quick_attach_to_current_battle, ":party_no", 0), #attach as friend
          (str_store_party_name, s1, ":party_no"),
          (display_message, "str_s1_joined_battle_friend", color_good_news),
        (try_end),
      (try_end),
  ]),
  
  # script_party_wound_all_members_aux
  # Input: arg1 = party_no
  ("party_wound_all_members_aux",
    [
      (store_script_param_1, ":party_no"),
      
      (party_get_num_companion_stacks, ":num_stacks",":party_no"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop",":party_no",":i_stack"),
        (try_begin),
          (neg|troop_is_hero, ":stack_troop"),
          (party_stack_get_size, ":stack_size",":party_no",":i_stack"),
          (party_wound_members, ":party_no", ":stack_troop", ":stack_size"),
        (else_try),
          (troop_set_health, ":stack_troop", 0),
        (try_end),
      (try_end),
      (party_get_num_attached_parties, ":num_attached_parties", ":party_no"),
      (try_for_range, ":attached_party_rank", 0, ":num_attached_parties"),
        (party_get_attached_party_with_rank, ":attached_party", ":party_no", ":attached_party_rank"),
        (call_script, "script_party_wound_all_members_aux", ":attached_party"),
      (try_end),
      
  ]),
  
  
  
  # script_party_wound_all_members
  # Input: arg1 = party_no
  ("party_wound_all_members",
    [
      (store_script_param_1, ":party_no"),
      
      (call_script, "script_party_wound_all_members_aux", ":party_no"),
  ]),
  
  
  
  # script_calculate_battle_advantage
  # Output: reg0 = battle advantage
  ("calculate_battle_advantage",
    [
      (call_script, "script_party_count_fit_for_battle", "p_collective_friends"),
      (assign, ":friend_count", reg(0)),
      
      (party_get_skill_level, ":player_party_tactics",  "p_main_party", skl_tactics),
      (party_get_skill_level, ":ally_party_tactics",  "p_collective_friends", skl_tactics),
      (val_max, ":player_party_tactics", ":ally_party_tactics"),
      
      (call_script, "script_party_count_fit_for_battle", "p_collective_enemy"),
      (assign, ":enemy_count", reg(0)),
      
      (party_get_skill_level, ":enemy_party_tactics",  "p_collective_enemy", skl_tactics),
      
      (val_add, ":friend_count", 1),
      (val_add, ":enemy_count", 1),
      
      (try_begin),
        (ge, ":friend_count", ":enemy_count"),
        (val_mul, ":friend_count", 100),
        (store_div, ":ratio", ":friend_count", ":enemy_count"),
        (store_sub, ":raw_advantage", ":ratio", 100),
      (else_try),
        (val_mul, ":enemy_count", 100),
        (store_div, ":ratio", ":enemy_count", ":friend_count"),
        (store_sub, ":raw_advantage", 100, ":ratio"),
      (try_end),
      (val_mul, ":raw_advantage", 2),
      
      (val_mul, ":player_party_tactics", 30),
      (val_mul, ":enemy_party_tactics", 30),
      (val_add, ":raw_advantage", ":player_party_tactics"),
      (val_sub, ":raw_advantage", ":enemy_party_tactics"),
      (val_div, ":raw_advantage", 100),
      
      
      (assign, reg0, ":raw_advantage"),
      (display_message, "@Battle Advantage = {reg0}.", 0xFFFFFFFF),
  ]),
  
  
  # script_cf_check_enemies_nearby
  # Input: none
  # Output: none, fails when enemies are nearby
  ("cf_check_enemies_nearby",
    [
      (get_player_agent_no, ":player_agent"),
      (agent_is_alive, ":player_agent"),
      (agent_get_position, pos1, ":player_agent"),
      (assign, ":result", 0),
      (set_fixed_point_multiplier, 100),
      (try_for_agents,":cur_agent"),
        (neq, ":cur_agent", ":player_agent"),
        (agent_is_alive, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (neg|agent_is_ally, ":cur_agent"),
        (agent_get_position, pos2, ":cur_agent"),
        (get_distance_between_positions, ":cur_distance", pos1, pos2),
        (le, ":cur_distance", 1500), #15 meters
        (assign, ":result", 1),
      (try_end),
      (eq, ":result", 0),
  ]),
  
  # script_get_heroes_attached_to_center_aux
  # For internal use only
  ("get_heroes_attached_to_center_aux",
    [
      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":party_no_to_collect_heroes"),
      (party_get_num_companion_stacks, ":num_stacks",":center_no"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop",":center_no",":i_stack"),
        (troop_is_hero, ":stack_troop"),
        (party_add_members, ":party_no_to_collect_heroes", ":stack_troop", 1),
      (try_end),
      (party_get_num_attached_parties, ":num_attached_parties", ":center_no"),
      (try_for_range, ":attached_party_rank", 0, ":num_attached_parties"),
        (party_get_attached_party_with_rank, ":attached_party", ":center_no", ":attached_party_rank"),
        (call_script, "script_get_heroes_attached_to_center_aux", ":attached_party", ":party_no_to_collect_heroes"),
      (try_end),
  ]),
  
  # script_get_heroes_attached_to_center
  # Input: arg1 = center_no, arg2 = party_no_to_collect_heroes
  # Output: none, adds heroes to the party_no_to_collect_heroes party
  ("get_heroes_attached_to_center",
    [
      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":party_no_to_collect_heroes"),
      (party_clear, ":party_no_to_collect_heroes"),
      (call_script, "script_get_heroes_attached_to_center_aux", ":center_no", ":party_no_to_collect_heroes"),
      
      #rebellion changes begin -Arma
      (try_for_range, ":pretender", pretenders_begin, pretenders_end),
        (neq, ":pretender", "$supported_pretender"),
        (troop_slot_eq, ":pretender", slot_troop_cur_center, ":center_no"),
        (party_add_members, ":party_no_to_collect_heroes", ":pretender", 1),
      (try_end),
      
      #     (try_for_range, ":rebel_faction", rebel_factions_begin, rebel_factions_end),
      #        (faction_slot_eq, ":rebel_faction", slot_faction_state, sfs_inactive_rebellion),
      #        (faction_slot_eq, ":rebel_faction", slot_faction_inactive_leader_location, ":center_no"),
      #        (faction_get_slot, ":pretender", ":rebel_faction", slot_faction_leader),
      #        (party_add_members, ":party_no_to_collect_heroes", ":pretender", 1),
      #     (try_end),
      #rebellion changes end
      
      
  ]),
  
  
  # script_get_heroes_attached_to_center_as_prisoner_aux
  # For internal use only
  ("get_heroes_attached_to_center_as_prisoner_aux",
    [
      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":party_no_to_collect_heroes"),
      (party_get_num_prisoner_stacks, ":num_stacks",":center_no"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_prisoner_stack_get_troop_id, ":stack_troop",":center_no",":i_stack"),
        (troop_is_hero, ":stack_troop"),
        (party_add_members, ":party_no_to_collect_heroes", ":stack_troop", 1),
      (try_end),
      (party_get_num_attached_parties, ":num_attached_parties", ":center_no"),
      (try_for_range, ":attached_party_rank", 0, ":num_attached_parties"),
        (party_get_attached_party_with_rank, ":attached_party", ":center_no", ":attached_party_rank"),
        (call_script, "script_get_heroes_attached_to_center_as_prisoner_aux", ":attached_party", ":party_no_to_collect_heroes"),
      (try_end),
  ]),
  
  
  # script_get_heroes_attached_to_center_as_prisoner
  # Input: arg1 = center_no, arg2 = party_no_to_collect_heroes
  # Output: none, adds heroes to the party_no_to_collect_heroes party
  ("get_heroes_attached_to_center_as_prisoner",
    [
      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":party_no_to_collect_heroes"),
      (party_clear, ":party_no_to_collect_heroes"),
      (call_script, "script_get_heroes_attached_to_center_as_prisoner_aux", ":center_no", ":party_no_to_collect_heroes"),
  ]),
  
  ##
  ##  # script_cf_get_party_leader
  ##  # Input: arg1 = party_no
  ##  # Output: reg0 = troop_no of the leader (Can fail)
  ##  ("cf_get_party_leader",
  ##    [
  ##      (store_script_param_1, ":party_no"),
  ##
  ##      (party_get_num_companion_stacks, ":num_stacks",":party_no"),
  ##      (gt, ":num_stacks", 0),
  ##      (party_stack_get_troop_id, ":stack_troop", ":party_no", 0),
  ##      (troop_is_hero, ":stack_troop"),
  ##      (assign, reg0, ":stack_troop"),
  ##  ]),
  
  # script_give_center_to_faction
  # Input: arg1 = center_no, arg2 = faction
  ("give_center_to_faction",
    [
      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":faction_no"),
      (try_begin),
        (check_quest_active, "qst_join_siege_with_army"),
        (quest_slot_eq, "qst_join_siege_with_army", slot_quest_target_center, ":center_no"),
        (call_script, "script_abort_quest", "qst_join_siege_with_army", 0),
        #Reactivating follow army quest
        (faction_get_slot, ":faction_marshall", "$players_faction", slot_faction_marshall),
        (str_store_troop_name_link, s9, ":faction_marshall"),
        (setup_quest_text, "qst_follow_army"),
        (str_store_string, s2, "@{s9} wants you to resume following his army until further notice."),
        (call_script, "script_start_quest", "qst_follow_army", ":faction_marshall"),
        (assign, "$g_player_follow_army_warnings", 0),
      (try_end),
      (store_faction_of_party, ":old_faction", ":center_no"),
      (call_script, "script_give_center_to_faction_aux", ":center_no", ":faction_no"),
      (call_script, "script_update_minorplanet_market_towns"),
      
      (try_for_range, ":cur_faction", factions_begin, factions_end),
        (call_script, "script_faction_recalculate_strength", ":cur_faction"),
      (try_end),
      (assign, "$g_recalculate_ais", 1),
      
      (call_script, "script_activate_deactivate_player_faction", ":old_faction"),
      (try_begin),
        (eq, ":faction_no", "fac_player_supporters_faction"),
        (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
        (call_script, "script_give_center_to_lord", ":center_no", "trp_player", 0),
        (try_for_range, ":cur_village", minorplanet_begin, minorplanet_end),
          (store_faction_of_party, ":cur_minorplanet_faction", ":cur_village"),
          (eq, ":cur_minorplanet_faction", "fac_player_supporters_faction"),
          (neg|party_slot_eq, ":cur_village", slot_mainplanet_lord, "trp_player"),
          (call_script, "script_give_center_to_lord", ":cur_village", "trp_player", 0),
        (try_end),
      (try_end),
  ]),
  
  # script_give_center_to_faction_aux
  # Input: arg1 = center_no, arg2 = faction
  ("give_center_to_faction_aux",
    [
      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":faction_no"),
      
      (store_faction_of_party, ":old_faction", ":center_no"),
      (party_set_slot, ":center_no", slot_center_ex_faction, ":old_faction"),
      (party_set_faction, ":center_no", ":faction_no"),
      
      (try_begin),
        (party_slot_eq, ":center_no", slot_party_type, spt_minorplanet),
        (party_get_slot, ":farmer_party", ":center_no", slot_minorplanet_farmer_party),
        (gt, ":farmer_party", 0),
        (party_is_active, ":farmer_party"),
        (party_set_faction, ":farmer_party", ":faction_no"),
      (try_end),
      
      (party_get_slot, ":old_town_lord", ":center_no", slot_mainplanet_lord),
      (party_set_slot, ":center_no", slot_mainplanet_lord, stl_unassigned),
      (party_set_banner_icon, ":center_no", 0),#Removing banner
      
      (call_script, "script_update_faction_notes", ":old_faction"),
      (call_script, "script_update_faction_notes", ":faction_no"),
      (call_script, "script_update_center_notes", ":center_no"),
      (try_begin),
        (ge, ":old_town_lord", 0),
        (call_script, "script_update_troop_notes", ":old_town_lord"),
      (try_end),
      
      (try_for_range, ":other_center", centers_begin, centers_end),
        (party_slot_eq, ":other_center", slot_minorplanet_bound_center, ":center_no"),
        (call_script, "script_give_center_to_faction_aux", ":other_center", ":faction_no"),
      (try_end),
  ]),
  
  # script_change_troop_faction
  # Input: arg1 = troop_no, arg2 = faction
  ("change_troop_faction",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, ":faction_no"),
      (try_begin),
        #Reactivating inactive or defeated faction
        (is_between, ":faction_no", factions_begin, factions_end),
        (neg|faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
        (faction_set_slot, ":faction_no", slot_faction_state, sfs_active),
        (call_script, "script_store_average_center_value_per_faction"),
      (try_end),
      
      (troop_set_faction, ":troop_no", ":faction_no"),
      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
        (party_slot_eq, ":center_no", slot_mainplanet_lord, ":troop_no"),
        (party_set_faction, ":center_no", ":faction_no"),
        (try_for_range, ":minorplanet_no", minorplanet_begin, minorplanet_end),
          (party_slot_eq, ":minorplanet_no", slot_minorplanet_bound_center, ":center_no"),
          (party_set_faction, ":minorplanet_no", ":faction_no"),
          (party_get_slot, ":farmer_party_no", ":minorplanet_no", slot_minorplanet_farmer_party),
          (try_begin),
            (gt, ":farmer_party_no", 0),
            (party_is_active, ":farmer_party_no"),
            (party_set_faction, ":farmer_party_no", ":faction_no"),
          (try_end),
          (try_begin),
            (party_get_slot, ":old_town_lord", ":minorplanet_no", slot_mainplanet_lord),
            (neq, ":old_town_lord", ":troop_no"),
            (party_set_slot, ":minorplanet_no", slot_mainplanet_lord, stl_unassigned),
          (try_end),
        (try_end),
      (try_end),
      (try_for_range, ":minorplanet_no", minorplanet_begin, minorplanet_end),
        (party_slot_eq, ":minorplanet_no", slot_mainplanet_lord, ":troop_no"),
        (store_faction_of_party, ":minorplanet_faction", ":minorplanet_no"),
        (try_begin),
          (neq, ":minorplanet_faction", ":faction_no"),
          (party_set_slot, ":minorplanet_no", slot_mainplanet_lord, stl_unassigned),
        (try_end),
      (try_end),
      (try_begin),
        (troop_get_slot, ":leaded_party", ":troop_no", slot_troop_leaded_party),
        (ge, ":leaded_party", 0),
        (party_set_faction, ":leaded_party", ":faction_no"),
        (party_get_num_prisoner_stacks, ":num_stacks", ":leaded_party"),
        (try_for_range_backwards, ":troop_iterator", 0, ":num_stacks"),
          (party_prisoner_stack_get_troop_id, ":cur_troop_id", ":leaded_party", ":troop_iterator"),
          (store_troop_faction, ":cur_faction", ":cur_troop_id"),
          (troop_is_hero, ":cur_troop_id"),
          (eq, ":cur_faction", ":faction_no"),
          (call_script, "script_remove_troop_from_prison", ":cur_troop_id"),
          (party_remove_prisoners, ":leaded_party", ":cur_troop_id", 1),
        (try_end),
      (try_end),
      (call_script, "script_update_all_notes"),
      
      (call_script, "script_update_minorplanet_market_towns"),
      (assign, "$g_recalculate_ais", 1),
  ]),
  
  
  # script_give_center_to_lord
  # Input: arg1 = center_no, arg2 = lord_troop, arg3 = add_garrison_to_center
  ("give_center_to_lord",
    [
      (store_script_param, ":center_no", 1),
      (store_script_param, ":lord_troop_id", 2),
      (store_script_param, ":add_garrison", 3),
      
      (party_get_slot, ":old_lord_troop_id", ":center_no", slot_mainplanet_lord),
      
      (store_troop_faction, ":lord_troop_faction", ":lord_troop_id"),
      (try_begin),
        (eq, ":lord_troop_id", "trp_player"),
        (gt, "$players_faction", 0),
        (party_set_faction, ":center_no", "$players_faction"),
      (else_try),
        (eq, ":lord_troop_id", "trp_player"),
        (le, "$players_faction", 0),
        (party_set_faction, ":center_no", "fac_player_supporters_faction"),
      (else_try),
        (party_set_faction, ":center_no", ":lord_troop_faction"),
      (try_end),
      (party_set_slot, ":center_no", slot_mainplanet_lord, ":lord_troop_id"),
      
      (try_begin),
        (party_slot_eq, ":center_no", slot_party_type, spt_minorplanet),
        (party_get_slot, ":farmer_party_no", ":center_no", slot_minorplanet_farmer_party),
        (gt, ":farmer_party_no", 0),
        (party_is_active, ":farmer_party_no"),
        (store_faction_of_party, ":center_faction", ":center_no"),
        (party_set_faction, ":farmer_party_no", ":center_faction"),
      (try_end),
      
      (try_begin),
        (this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_mainplanet),
        (party_slot_eq, ":center_no", slot_party_type, spt_castle),
        #normal_banner_begin
        (troop_get_slot, ":cur_banner", ":lord_troop_id", slot_troop_banner_scene_prop),
        (gt, ":cur_banner", 0),
        (val_sub, ":cur_banner", banner_scene_props_begin),
        (val_add, ":cur_banner", banner_map_icons_begin),
        #@> Removed banners for planets / swy   (party_set_banner_icon, ":center_no", ":cur_banner"),
        
        # custom_banner_begin
        #        (troop_get_slot, ":flag_icon", ":lord_troop_id", slot_troop_custom_banner_map_flag_type),
        #        (ge, ":flag_icon", 0),
        #        (val_add, ":flag_icon", custom_banner_map_icons_begin),
        #        (party_set_banner_icon, ":center_no", ":flag_icon"),
      (try_end),
      
      (try_begin),
        (eq, ":lord_troop_id", "trp_player"),
        (neq, ":old_lord_troop_id", "trp_player"),
        (party_get_slot, ":center_relation", ":center_no", slot_center_player_relation),
        (is_between, ":center_relation", -4, 5),
        (call_script, "script_change_player_relation_with_center", ":center_no", 5),
        (gt, ":old_lord_troop_id", 0),
        (call_script, "script_change_player_relation_with_troop", ":old_lord_troop_id", -25),
      (try_end),
      
      (call_script, "script_update_troop_notes", ":lord_troop_id"),
      (call_script, "script_update_center_notes", ":center_no"),
      (call_script, "script_update_faction_notes", ":lord_troop_faction"),
      (try_begin),
        (ge, ":old_lord_troop_id", 0),
        (call_script, "script_update_troop_notes", ":old_lord_troop_id"),
        (store_troop_faction, ":old_lord_troop_faction", ":old_lord_troop_id"),
        (call_script, "script_update_faction_notes", ":old_lord_troop_faction"),
      (try_end),
      
      (try_begin),
        (eq, ":add_garrison", 1),
        (this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_mainplanet),
        (party_slot_eq, ":center_no", slot_party_type, spt_castle),
        (assign, ":garrison_strength", 3),
        (try_begin),
          (party_slot_eq, ":center_no", slot_party_type, spt_mainplanet),
          (assign, ":garrison_strength", 9),
        (try_end),
        (try_for_range, ":unused", 0, ":garrison_strength"),
          (call_script, "script_cf_reinforce_party", ":center_no"),
        (try_end),
        ## ADD some XP initially
        (try_for_range, ":unused", 0, 7),
          (store_random_in_range, ":xp", 1500, 2000),
          (party_upgrade_with_xp, ":center_no", ":xp", 0),
        (try_end),
      (try_end),
      
      (try_begin),
        (party_slot_eq, ":center_no", slot_party_type, spt_castle),
        (try_for_range, ":cur_village", minorplanet_begin, minorplanet_end),
          (party_slot_eq, ":cur_village", slot_minorplanet_bound_center, ":center_no"),
          (call_script, "script_give_center_to_lord", ":cur_village", ":lord_troop_id", 0),
        (try_end),
      (try_end),
      
      #SW - attempting to fix the town walkers after a town changes factions
      (try_begin),
        (this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_mainplanet),
        (party_slot_eq, ":center_no", slot_party_type, spt_castle),
        (call_script, "script_fix_town_walkers", ":center_no"),
      (try_end),
      
  ]),
  
  ##  # script_give_town_to_besiegers
  ##  # Input: arg1 = center_no, arg2 = besieger_party
  ##  ("give_town_to_besiegers",
  ##    [
  ##      (store_script_param_1, ":center_no"),
  ##      (store_script_param_2, ":besieger_party"),
  ##      (store_faction_of_party, ":besieger_faction", ":besieger_party"),
  ##
  ##      (try_begin),
  ##        (call_script, "script_cf_get_party_leader", ":besieger_party"),
  ##        (assign, ":new_leader", reg0),
  ##      (else_try),
  ##        (call_script, "script_select_faction_hero_for_new_center", ":besieger_faction"),
  ##        (assign, ":new_leader", reg0),
  ##      (try_end),
  ##
  ##      (call_script, "script_give_center_to_lord", ":center_no", ":new_leader"),
  ##
  ##      (try_for_parties, ":party_no"),
  ##        (get_party_ai_object, ":object", ":party_no"),
  ##        (get_party_ai_behavior, ":behavior", ":party_no"),
  ##        (eq, ":object", ":center_no"),
  ##        (this_or_next|eq, ":behavior", ai_bhvr_travel_to_party),
  ##        (eq, ":behavior", ai_bhvr_attack_party),
  ##        (party_set_ai_behavior, ":party_no", ai_bhvr_hold),
  ##        (party_set_slot, ":party_no", slot_party_ai_state, spai_undefined),
  ##        (party_set_flags, ":party_no", pf_default_behavior, 0),
  ##      (try_end),
  ##
  ##      #Staying at the center for a while
  ##      (party_set_ai_behavior, ":besieger_party", ai_bhvr_hold),
  ##      (party_set_slot, ":besieger_party", slot_party_ai_state, spai_undefined),
  ##      (party_set_flags, ":besieger_party", pf_default_behavior, 0),
  ##
  ##      (faction_get_slot, ":reinforcement_a", ":besieger_faction", slot_faction_reinforcements_a),
  ##      (faction_get_slot, ":reinforcement_b", ":besieger_faction", slot_faction_reinforcements_b),
  ##      (party_add_template, ":center_no", ":reinforcement_a"),
  ##      (party_add_template, ":center_no", ":reinforcement_b"),
  ##  ]),
  ##
  
  # script_get_number_of_hero_centers
  # Input: arg1 = troop_no
  # Output: reg0 = number of centers that are ruled by the hero
  ("get_number_of_hero_centers",
    [
      (store_script_param_1, ":troop_no"),
      (assign, ":result", 0),
      (try_for_range, ":center_no", centers_begin, centers_end),
        (party_slot_eq, ":center_no", slot_mainplanet_lord, ":troop_no"),
        (val_add, ":result", 1),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  
  ##  # script_cf_get_new_center_leader_chance_for_troop
  ##  # Input: arg1 = troop_no
  ##  # Output: reg0 = chance of the troop to rule a new center
  ##  ("cf_get_new_center_leader_chance_for_troop",
  ##    [
  ##      (store_script_param_1, ":troop_no"),
  ##      (troop_get_slot, ":troop_rank", ":troop_no", slot_troop_faction_rank),
  ##      (try_begin),
  ##        (eq, ":troop_rank", 4),
  ##        (assign, ":troop_chance", 1000),
  ##      (else_try),
  ##        (eq, ":troop_rank", 3),
  ##        (assign, ":troop_chance", 800),
  ##      (else_try),
  ##        (eq, ":troop_rank", 2),
  ##        (assign, ":troop_chance", 400),
  ##      (else_try),
  ##        (eq, ":troop_rank", 1),
  ##        (assign, ":troop_chance", 100),
  ##      (else_try),
  ##        (assign, ":troop_chance", 10),
  ##      (try_end),
  ##
  ##      (call_script, "script_get_number_of_hero_centers", ":troop_no"),
  ##      (assign, ":number_of_hero_centers", reg0),
  ##      (try_begin),
  ##        (gt, ":number_of_hero_centers", 0),
  ##        (val_mul, ":number_of_hero_centers", 2),
  ##        (val_mul, ":number_of_hero_centers", ":number_of_hero_centers"),
  ##        (val_div, ":troop_chance", ":number_of_hero_centers"),
  ##      (try_end),
  ##      (assign, reg0, ":troop_chance"),
  ##      (eq, reg0, 0),
  ##      (assign, reg0, 1),
  ##  ]),
  
  
  ##  # script_select_faction_hero_for_new_center
  ##  # Input: arg1 = faction_no
  ##  # Output: reg0 = troop_no as the new leader
  ##  ("select_faction_hero_for_new_center",
  ##    [
  ##      (store_script_param_1, ":faction"),
  ##
  ##      (assign, ":min_num_centers", -1),
  ##      (assign, ":min_num_centers_troop", -1),
  ##
  ##      (try_for_range, ":troop_no", faction_heroes_begin, faction_heroes_end),
  ##        (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_faction_hero),
  ##        (store_troop_faction, ":troop_faction", ":troop_no"),
  ##        (eq, ":troop_faction", ":faction"),
  ##        (call_script, "script_get_number_of_hero_centers", ":troop_no"),
  ##        (assign, ":num_centers", reg0),
  ##        (try_begin),
  ##          (lt, ":num_centers", ":min_num_centers"),
  ##          (assign, ":min_num_centers", ":num_centers"),
  ##          (assign, ":min_num_centers_troop", ":troop_no"),
  ##        (try_end),
  ##      (try_end),
  ##      (assign, reg0, ":min_num_centers_troop"),
  ##  ]),
  
  
  # script_cf_get_random_enemy_center
  # Input: arg1 = party_no
  # Output: reg0 = center_no
  ("cf_get_random_enemy_center",
    [
      (store_script_param_1, ":party_no"),
      
      (assign, ":result", -1),
      (assign, ":total_enemy_centers", 0),
      (store_faction_of_party, ":party_faction", ":party_no"),
      
      (try_for_range, ":center_no", centers_begin, centers_end),
        (store_faction_of_party, ":center_faction", ":center_no"),
        (store_relation, ":party_relation", ":center_faction", ":party_faction"),
        (lt, ":party_relation", 0),
        (val_add, ":total_enemy_centers", 1),
      (try_end),
      
      (gt, ":total_enemy_centers", 0),
      (store_random_in_range, ":random_center", 0, ":total_enemy_centers"),
      (assign, ":total_enemy_centers", 0),
      (try_for_range, ":center_no", centers_begin, centers_end),
        (eq, ":result", -1),
        (store_faction_of_party, ":center_faction", ":center_no"),
        (store_relation, ":party_relation", ":center_faction", ":party_faction"),
        (lt, ":party_relation", 0),
        (val_sub, ":random_center", 1),
        (lt, ":random_center", 0),
        (assign, ":result", ":center_no"),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  
  ##  # script_get_random_enemy_town
  ##  # Input: arg1 = party_no
  ##  # Output: reg0 = center_no
  ##  ("get_random_enemy_town",
  ##    [
  ##      (store_script_param_1, ":party_no"),
  ##
  ##      (assign, ":result", -1),
  ##      (assign, ":total_enemy_centers", 0),
  ##      (store_faction_of_party, ":party_faction", ":party_no"),
  ##
  ##      (try_for_range, ":center_no", mainplanets_begin, mainplanets_end),
  ##        (store_faction_of_party, ":center_faction", ":center_no"),
  ##        (neq, ":center_faction", ":party_faction"),
  ##        (val_add, ":total_enemy_centers", 1),
  ##      (try_end),
  ##
  ##      (try_begin),
  ##        (eq, ":total_enemy_centers", 0),
  ##      (else_try),
  ##        (store_random_in_range, ":random_center", 0, ":total_enemy_centers"),
  ##        (assign, ":total_enemy_centers", 0),
  ##        (try_for_range, ":center_no", mainplanets_begin, mainplanets_end),
  ##          (eq, ":result", -1),
  ##          (store_faction_of_party, ":center_faction", ":center_no"),
  ##          (neq, ":center_faction", ":party_faction"),
  ##          (store_relation, ":party_relation", ":center_faction", ":party_faction"),
  ##          (le, ":party_relation", -10),
  ##          (val_add, ":total_enemy_centers", 1),
  ##          (lt, ":random_center", ":total_enemy_centers"),
  ##          (assign, ":result", ":center_no"),
  ##        (try_end),
  ##      (try_end),
  ##      (assign, reg0, ":result"),
  ##  ]),
  
  
  
  # script_find_travel_location
  # Input: arg1 = center_no
  # Output: reg0 = new_center_no (to travel within the same faction)
  ("find_travel_location",
    [
      (store_script_param_1, ":center_no"),
      (store_faction_of_party, ":faction_no", ":center_no"),
      (assign, ":total_weight", 0),
      (try_for_range, ":cur_center_no", centers_begin, centers_end),
        (neq, ":center_no", ":cur_center_no"),
        (store_faction_of_party, ":center_faction_no", ":cur_center_no"),
        (eq, ":faction_no", ":center_faction_no"),
        
        (store_distance_to_party_from_party, ":cur_distance", ":center_no", ":cur_center_no"),
        (val_add, ":cur_distance", 1),
        
        (assign, ":new_weight", 100000),
        (val_div, ":new_weight", ":cur_distance"),
        (val_add, ":total_weight", ":new_weight"),
      (try_end),
      
      (assign, reg0, -1),
      
      (try_begin),
        (eq, ":total_weight", 0),
      (else_try),
        (store_random_in_range, ":random_weight", 0 , ":total_weight"),
        (assign, ":total_weight", 0),
        (assign, ":done", 0),
        (try_for_range, ":cur_center_no", centers_begin, centers_end),
          (eq, ":done", 0),
          (neq, ":center_no", ":cur_center_no"),
          (store_faction_of_party, ":center_faction_no", ":cur_center_no"),
          (eq, ":faction_no", ":center_faction_no"),
          
          (store_distance_to_party_from_party, ":cur_distance", ":center_no", ":cur_center_no"),
          (val_add, ":cur_distance", 1),
          
          (assign, ":new_weight", 100000),
          (val_div, ":new_weight", ":cur_distance"),
          (val_add, ":total_weight", ":new_weight"),
          (lt, ":random_weight", ":total_weight"),
          (assign, reg0, ":cur_center_no"),
          (assign, ":done", 1),
        (try_end),
      (try_end),
  ]),
  
  
  # script_get_relation_between_parties
  # Input: arg1 = party_no_1, arg2 = party_no_2
  # Output: reg0 = relation between parties
  ("get_relation_between_parties",
    [
      (store_script_param_1, ":party_no_1"),
      (store_script_param_2, ":party_no_2"),
      
      (store_faction_of_party, ":party_no_1_faction", ":party_no_1"),
      (store_faction_of_party, ":party_no_2_faction", ":party_no_2"),
      (try_begin),
        (eq, ":party_no_1_faction", ":party_no_2_faction"),
        (assign, reg0, 100),
      (else_try),
        (store_relation, ":relation", ":party_no_1_faction", ":party_no_2_faction"),
        (assign, reg0, ":relation"),
      (try_end),
  ]),
  # script_calculate_weekly_party_wage
  # Input: arg1 = party_no
  # Output: reg0 = weekly wage
  ("calculate_weekly_party_wage",
    [
      (store_script_param_1, ":party_no"),
      
      (assign, ":result", 0),
      (party_get_num_companion_stacks, ":num_stacks",":party_no"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop",":party_no",":i_stack"),
        (party_stack_get_size, ":stack_size",":party_no",":i_stack"),
        (call_script, "script_npc_get_troop_wage", ":stack_troop", ":party_no"),
        (assign, ":cur_wage", reg0),
        (val_mul, ":cur_wage", ":stack_size"),
        (val_add, ":result", ":cur_wage"),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  # script_calculate_player_faction_wage
  # Input: arg1 = party_no
  # Output: reg0 = weekly wage
  ("calculate_player_faction_wage",
    [(assign, ":nongarrison_wages", 0),
      (assign, ":garrison_wages", 0),
      (try_for_parties, ":party_no"),
        (assign, ":garrison_troop", 0),
        (try_begin),
          (this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_mainplanet),
          (party_slot_eq, ":party_no", slot_party_type, spt_castle),
          (party_slot_eq, ":party_no", slot_mainplanet_lord, "trp_player"),
          (assign, ":garrison_troop", 1),
        (try_end),
        (this_or_next|eq, ":party_no", "p_main_party"),
        (eq, ":garrison_troop", 1),
        (party_get_num_companion_stacks, ":num_stacks",":party_no"),
        (try_for_range, ":i_stack", 0, ":num_stacks"),
          (party_stack_get_troop_id, ":stack_troop",":party_no",":i_stack"),
          (party_stack_get_size, ":stack_size",":party_no",":i_stack"),
          (call_script, "script_game_get_troop_wage", ":stack_troop", ":party_no"),
          (assign, ":cur_wage", reg0),
          (val_mul, ":cur_wage", ":stack_size"),
          (try_begin),
            (eq, ":garrison_troop", 1),
            (val_add, ":garrison_wages", ":cur_wage"),
          (else_try),
            (val_add, ":nongarrison_wages", ":cur_wage"),
          (try_end),
        (try_end),
      (try_end),
      (val_div, ":garrison_wages", 2),#Half payment for garrisons
      (store_sub, ":total_payment", 14, "$g_cur_week_half_daily_wage_payments"), #between 0 and 7
      (val_mul, ":nongarrison_wages", ":total_payment"),
      (val_div, ":nongarrison_wages", 14),
      (store_add, reg0, ":nongarrison_wages", ":garrison_wages"),
  ]),
  
  # script_calculate_hero_weekly_net_income_and_add_to_wealth
  # Input: arg1 = troop_no
  # Output: none
  ("calculate_hero_weekly_net_income_and_add_to_wealth",
    [
      (store_script_param_1, ":troop_no"),
      
      (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
      (troop_get_slot, ":cur_wealth", ":troop_no", slot_troop_wealth),
      


      (store_faction_of_troop, ":hero_fac", ":troop_no"),# MANDO 
      (try_begin),
            (eq, ":hero_fac", fac_galacticempire),
            (assign, ":weekly_income", 3000), #let every hero receive 750 denars by default
      
            (store_character_level, ":troop_level", ":troop_no"),
            (store_mul, ":level_income", ":troop_level", 15),#10
            (val_add, ":weekly_income", ":level_income"),

       (else_try),
            (eq, ":hero_fac", fac_rebelalliance),
            (assign, ":weekly_income", 15000), #let every hero receive 750 denars by default
      
            (store_character_level, ":troop_level", ":troop_no"),
            (store_mul, ":level_income", ":troop_level", 12),#10
            (val_add, ":weekly_income", ":level_income"),

       (else_try),
            (assign, ":weekly_income", 2000), #let every hero receive 750 denars by default
      
            (store_character_level, ":troop_level", ":troop_no"),
            (store_mul, ":level_income", ":troop_level", 18),#10
            (val_add, ":weekly_income", ":level_income"),
       (try_end),     
                       
      (store_troop_faction,":faction_no", ":troop_no"),
      (try_begin), #check if troop is faction leader
        (faction_slot_eq, ":faction_no", slot_faction_leader, ":troop_no"),
        (val_add, ":weekly_income", 3700),#1500
      (try_end),
      
      (assign, ":cur_weekly_wage", 0),
      (try_begin),
        (gt, ":party_no",0),
        (call_script, "script_calculate_weekly_party_wage", ":party_no"),
        (assign, ":cur_weekly_wage", reg0),
      (try_end),
      (val_sub, ":weekly_income", ":cur_weekly_wage"),
      
      (val_add, ":cur_wealth", ":weekly_income"),
      (val_max, ":cur_wealth", 0),
      (troop_set_slot, ":troop_no", slot_troop_wealth, ":cur_wealth"),
  ]),
  
  # script_cf_reinforce_party
  # Input: arg1 = party_no,
  # Output: none
  # Adds reinforcement to party according to its type and faction
  ("cf_reinforce_party",
    [
      (store_script_param_1, ":party_no"),
      
      (store_faction_of_party, ":party_faction", ":party_no"),
      (party_get_slot, ":party_type",":party_no", slot_party_type),
      
      #Rebellion changes begin:
      (try_begin),
        (eq, ":party_type", spt_faction_hero_party),
        (party_stack_get_troop_id, ":leader", ":party_no"),
        (troop_get_slot, ":party_faction",  ":leader", slot_troop_original_faction),
        #            (this_or_next|is_between, ":party_faction", rebel_factions_begin, rebel_factions_end),
        #            (faction_get_slot, ":target_faction", ":party_faction", slot_faction_rebellion_target),
        #            (assign, ":party_faction", ":target_faction"),
        #            (assign, ":party_faction", "fac_galacticempire"),
      (try_end),
      #Rebellion changes end
      
      #SW - commented out this since I fixed the code with faction management (nevermind, testing if it is still required)
      (try_begin),
        (eq, ":party_faction", "fac_player_supporters_faction"),
        (party_get_slot, ":town_lord", ":party_no", slot_mainplanet_lord),
        (try_begin),
          (gt, ":town_lord", 0),
          (troop_get_slot, ":party_faction", ":town_lord", slot_troop_original_faction),
        (else_try),
          (party_get_slot, ":party_faction", ":party_no", slot_center_original_faction),
        (try_end),
      (try_end),
      
      (faction_get_slot, ":party_template_a", ":party_faction", slot_faction_reinforcements_a),
      (faction_get_slot, ":party_template_b", ":party_faction", slot_faction_reinforcements_b),
      (faction_get_slot, ":party_template_c", ":party_faction", slot_faction_reinforcements_c),
      
      (assign, ":party_template", 0),
      (store_random_in_range, ":rand", 0, 100),
      (try_begin),
        (this_or_next|eq, ":party_type", spt_mainplanet),
        (eq, ":party_type", spt_castle),  #CASTLE OR TOWN
        (try_begin),# Mando

        # (try_begin),
          #(try_for_range, ":party_no", centers_begin, centers_end),  
            #(troop_get_slot, ":leader_party", ":troop_no", slot_troop_leaded_party),
            #(party_slot_eq, ":party_no", slot_party_type, spt_faction_hero_party),
        # #(eq, ":party_type", spt_kingdom_hero_party),
            #(party_stack_get_troop_id, ":party_leader", ":party_no", 0),
            (party_is_active, ":party_no"), 
            #(eq, ":party_leader", "trp_galacticempire_lord"),
            (eq, ":party_no", "p_coruscant"),
            (try_begin),
                  (lt, ":rand",10),
                  (assign, ":party_template", "pt_cst_reinforcements_a"), #
            (else_try),
                  (lt, ":rand", 15),
                  (assign, ":party_template", "pt_cst_reinforcements_b"), #
            (else_try),      
                  (assign, ":party_template", "pt_cst_reinforcements_b"), #
            (try_end),
          #(try_end),

        (else_try),

          #SW - modified random percentage for party_template_a so lower tier troops were more common (old value was 65)
          (lt, ":rand", 70),
          (assign, ":party_template", ":party_template_a"),
        (else_try),
          (assign, ":party_template", ":party_template_b"),
        (try_end),
      (else_try),
        (eq, ":party_type", spt_faction_hero_party),
        (try_begin),#Mando

        # (try_begin),
        #   (try_for_range, ":troop_no", faction_heroes_begin, faction_heroes_end),  
        #     (troop_get_slot, ":leader_party", ":troop_no", slot_troop_leaded_party),
        #    # (party_slot_eq, ":party_no", slot_party_type, spt_faction_hero_party),
        # # #(eq, ":party_type", spt_kingdom_hero_party),
        #     (eq, ":party_no", ":leader_party"),
        #     (party_stack_get_troop_id, ":party_leader", ":party_no", 0),
        #     (party_is_active, ":party_no"), 
        #     (try_begin),
        #           (this_or_next|eq, ":party_leader", "trp_galacticempire_lord"),
        #           (this_or_next|eq, ":party_leader", "trp_knight_1_33"),
        #           (this_or_next|eq, ":party_leader", "trp_knight_1_35"),
        #           (eq, ":party_leader", "trp_knight_1_41"),
        #           (try_begin),
        #                 (lt, ":rand",5),
        #                 (assign, ":party_template", "pt_cst_reinforcements_a"), #
        #           (else_try),
        #                 (lt, ":rand", 10),
        #                 (assign, ":party_template", "pt_cst_reinforcements_b"), # 
        #           (else_try),
        #                 (assign, ":party_template", "pt_cst_reinforcements_c"), #
        #           (try_end),
        #     (else_try),
        #           (this_or_next|eq, ":party_leader", "trp_knight_1_2"),
        #           (this_or_next|eq, ":party_leader", "trp_knight_1_11"),
        #           (this_or_next|eq, ":party_leader", "trp_knight_1_13"),
        #           (this_or_next|eq, ":party_leader", "trp_knight_1_26"),
        #           (this_or_next|eq, ":party_leader", "trp_knight_1_29"),
        #           (eq, ":party_leader", "trp_knight_1_37"),
        #           (try_begin),
        #                 (lt, ":rand",30),
        #                 (assign, ":party_template", "pt_501stl_reinforcements_a"), #
        #           (else_try),
        #                 (lt, ":rand", 35),
        #                 (assign, ":party_template", "pt_501stl_reinforcements_b"), # 
        #           (else_try),
        #                 (assign, ":party_template", "pt_501stl_reinforcements_c"), #
        #           (try_end),
        #     (else_try),
        #           (this_or_next|eq, ":party_leader", "trp_knight_1_3"),
        #           (eq, ":party_leader", "trp_knight_1_25"),
        #           (try_begin),
        #                 (lt, ":rand",30),
        #                 (assign, ":party_template", "pt_7thsc_reinforcements_a"), #
        #           (else_try),
        #                 (lt, ":rand", 35),
        #                 (assign, ":party_template", "pt_7thsc_reinforcements_b"), # 
        #           (else_try),
        #                 (assign, ":party_template", "pt_7thsc_reinforcements_c"), #
        #           (try_end),
        #     (else_try),
        #           (eq, ":party_leader", "trp_knight_1_27"),
        #           (try_begin),
        #                 (lt, ":rand",30),
        #                 (assign, ":party_template", "pt_gm_reinforcements_a"), #
        #           (else_try),
        #                 (lt, ":rand", 35),
        #                 (assign, ":party_template", "pt_gm_reinforcements_b"), # 
        #           (else_try),
        #                 (assign, ":party_template", "pt_gm_reinforcements_c"), #
        #           (try_end),
        #     (else_try),
        #           (eq, ":party_leader", "trp_knight_1_30"),
        #           (try_begin),
        #                 (lt, ":rand",30),
        #                 (assign, ":party_template", "pt_104thb_reinforcements_a"), #
        #           (else_try),
        #                 (lt, ":rand", 35),
        #                 (assign, ":party_template", "pt_104thb_reinforcements_b"), # 
        #           (else_try),
        #                 (assign, ":party_template", "pt_104thb_reinforcements_c"), #
        #           (try_end),
        #     (try_end),
        #   (try_end),

        # (else_try),



          #SW - modified random percentage for party_template_a so lower tier troops were more common (old value was 50)
          (lt, ":rand", 55),
          (assign, ":party_template", ":party_template_a"),
        (else_try),
          #SW - modified random percentage for party_template_b so upper tier troops were less common (old value was 75)
          (lt, ":rand", 80),
          (assign, ":party_template", ":party_template_b"),
        (else_try),
          (assign, ":party_template", ":party_template_c"),
        (try_end),
      #(else_try),
      (try_end),
      
      (try_begin),
        (gt, ":party_template", 0),
        (party_add_template, ":party_no", ":party_template"),
      (try_end),
  ]),
  
  # script_hire_men_to_faction_hero_party
  # Input: arg1 = troop_no (hero of the party)
  # Output: none
  ("hire_men_to_faction_hero_party",
    [
      (store_script_param_1, ":troop_no"),
      
      (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
      (troop_get_slot, ":cur_wealth", ":troop_no", slot_troop_wealth),
      
      (assign, ":hiring_budget", ":cur_wealth"),
      (val_mul, ":hiring_budget", 3),
      (val_div, ":hiring_budget", 4),
      
      (assign, ":num_rounds", 1),
      
      (call_script, "script_party_get_ideal_size", ":party_no"),
      (assign, ":ideal_size", reg0),
      (store_mul, ":ideal_top_size", ":ideal_size", 3),
      (val_div, ":ideal_top_size", 2),
      
      (party_get_num_companions, ":party_size", ":party_no"),
      (try_for_range, ":unused", 0 , ":num_rounds"),
        (try_begin),
          (lt, ":party_size", ":ideal_size"),
          (gt, ":hiring_budget", reinforcement_cost),
          (gt, ":party_no", 0),
          (call_script, "script_cf_reinforce_party", ":party_no"),
          (val_sub, ":cur_wealth", reinforcement_cost),
          (troop_set_slot, ":troop_no", slot_troop_wealth, ":cur_wealth"),
        (else_try),
          (gt, ":party_size", ":ideal_top_size"),
          (store_troop_faction, ":troop_faction", ":troop_no"),
          (party_get_num_companion_stacks, ":num_stacks", ":party_no"),
          (assign, ":total_regulars", 0),
          (assign, ":total_regular_levels", 0),
          (try_for_range_backwards, ":i_stack", 0, ":num_stacks"),
            (party_stack_get_troop_id, ":stack_troop", ":party_no", ":i_stack"),
            (neg|troop_is_hero, ":stack_troop"),
            (party_stack_get_size, ":stack_size", ":party_no", ":i_stack"),
            (store_character_level, ":stack_level", ":stack_troop"),
            (store_troop_faction, ":stack_faction", ":stack_troop"),
            (try_begin),
              (eq, ":troop_faction", ":stack_faction"),
              (val_mul, ":stack_level", 3), #reducing the chance of the faction troops' removal
            (try_end),
            (val_mul, ":stack_level", ":stack_size"),
            (val_add, ":total_regulars", ":stack_size"),
            (val_add, ":total_regular_levels", ":stack_level"),
          (try_end),
          (gt, ":total_regulars", 0),
          (store_div, ":average_level", ":total_regular_levels", ":total_regulars"),
          (try_for_range_backwards, ":i_stack", 0, ":num_stacks"),
            (party_stack_get_troop_id, ":stack_troop", ":party_no", ":i_stack"),
            (neg|troop_is_hero, ":stack_troop"),
            (party_stack_get_size, ":stack_size", ":party_no", ":i_stack"),
            (store_character_level, ":stack_level", ":stack_troop"),
            (store_troop_faction, ":stack_faction", ":stack_troop"),
            (try_begin),
              (eq, ":troop_faction", ":stack_faction"),
              (val_mul, ":stack_level", 3),
            (try_end),
            (store_sub, ":level_dif", ":average_level", ":stack_level"),
            (val_div, ":level_dif", 3),
            (store_add, ":prune_chance", 10, ":level_dif"),
            (gt, ":prune_chance", 0),
            (call_script, "script_get_percentage_with_randomized_round", ":stack_size", ":prune_chance"),
            (gt, reg0, 0),
            (party_remove_members, ":party_no", ":stack_troop", reg0),
          (try_end),
        (try_end),
      (try_end),
  ]),
  
  # script_get_percentage_with_randomized_round
  # Input: arg1 = value, arg2 = percentage
  # Output: none
  ("get_percentage_with_randomized_round",
    [
      (store_script_param, ":value", 1),
      (store_script_param, ":percentage", 2),
      
      (store_mul, ":result", ":value", ":percentage"),
      (val_div, ":result", 100),
      (store_mul, ":used_amount", ":result", 100),
      (val_div, ":used_amount", ":percentage"),
      (store_sub, ":left_amount", ":value", ":used_amount"),
      (try_begin),
        (gt, ":left_amount", 0),
        (store_mul, ":chance", ":left_amount", ":percentage"),
        (store_random_in_range, ":random_no", 0, 100),
        (lt, ":random_no", ":chance"),
        (val_add, ":result", 1),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  # script_cf_create_merchant_party
  # Input: arg1 = troop_no,
  # Output: $pout_party = party_no
  ##  ("cf_create_merchant_party",
  ##    [
  ##      (store_script_param_1, ":troop_no"),
  ##      (store_troop_faction, ":troop_faction", ":troop_no"),
  ##
  ##      (call_script, "script_cf_select_random_town_at_peace_with_faction", ":troop_faction"),
  ##      (assign, ":center_no", reg0),
  ##
  ##      (assign, "$pout_party", -1),
  ##      (set_spawn_radius,0),
  ##      (spawn_around_party,":center_no", "pt_merchant_party"),
  ##      (assign, "$pout_party", reg0),
  ##
  ##      (party_set_faction, "$pout_party", ":troop_faction"),
  ##      (party_set_slot, "$pout_party", slot_party_type, spt_merchant_caravan),
  ##      (party_set_slot, "$pout_party", slot_party_ai_state, spai_undefined),
  ##      (troop_set_slot, ":troop_no", slot_troop_leaded_party, "$pout_party"),
  ##      (party_add_leader, "$pout_party", ":troop_no"),
  ##      (str_store_troop_name, s5, ":troop_no"),
  ##      (party_set_name, "$pout_party", "str_s5_s_caravan"),
  ##      (party_set_ai_behavior, "$pout_party", ai_bhvr_travel_to_party),
  ##      (party_set_ai_object, "$pout_party", ":center_no"),
  ##      (party_set_flags, "$pout_party", pf_default_behavior, 0),
  ##      (store_sub, ":item_to_price_slot", slot_mainplanet_trade_good_prices_begin, trade_goods_begin),
  ##      (try_for_range, ":cur_goods", trade_goods_begin, trade_goods_end),
  ##        (store_add, ":cur_goods_price_slot", ":cur_goods", ":item_to_price_slot"),
  ##        (party_set_slot, "$pout_party", ":cur_goods_price_slot", average_price_factor),
  ##      (try_end),
  ##      (troop_set_slot, ":troop_no", slot_troop_wealth, 2000),
  ##  ]),
  
  # script_create_cattle_herd
  # Input: arg1 = center_no, arg2 = amount (0 = default)
  # Output: reg0 = party_no
  ("create_cattle_herd",
    [
      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":amount"),
      
      (assign, ":herd_party", -1),
      (set_spawn_radius,1),
      
      (spawn_around_party,":center_no", "pt_cattle_herd"),
      (assign, ":herd_party", reg0),
      (party_get_position, pos1, ":center_no"),
      (call_script, "script_map_get_random_position_around_position_within_range", 1, 2),
      (party_set_position, ":herd_party", pos2),
      
      (party_set_slot, ":herd_party", slot_party_type, spt_cattle_herd),
      (party_set_slot, ":herd_party", slot_party_ai_state, spai_undefined),
      (party_set_ai_behavior, ":herd_party", ai_bhvr_hold),
      
      (party_set_slot, ":herd_party", slot_party_commander_party, -1), #we need this because 0 is player's party!
      
      (try_begin),
        (gt, ":amount", 0),
        (party_clear, ":herd_party"),
        (party_add_members, ":herd_party", "trp_cattle", ":amount"),
      (try_end),
      
      (assign, reg0, ":herd_party"),
  ]),
  
  #script_buy_cattle_from_village
  # Input: arg1 = minorplanet_no, arg2 = amount, arg3 = single_cost
  # Output: reg0 = party_no
  ("buy_cattle_from_village",
    [
      (store_script_param, ":minorplanet_no", 1),
      (store_script_param, ":amount", 2),
      (store_script_param, ":single_cost", 3),
      
      #Changing price of the cattle
      (try_for_range, ":unused", 0, ":amount"),
        (call_script, "script_game_event_buy_item", "itm_cattle_meat", 0),
        (call_script, "script_game_event_buy_item", "itm_cattle_meat", 0),
      (try_end),
      
      (party_get_slot, ":num_cattle", ":minorplanet_no", slot_minorplanet_number_of_cattle),
      (val_sub, ":num_cattle", ":amount"),
      (party_set_slot, ":minorplanet_no", slot_minorplanet_number_of_cattle, ":num_cattle"),
      (store_mul, ":cost", ":single_cost", ":amount"),
      (troop_remove_gold, "trp_player", ":cost"),
      
      (assign, ":continue", 1),
      (try_for_parties, ":cur_party"),
        (eq, ":continue", 1),
        (party_slot_eq, ":cur_party", slot_party_type, spt_cattle_herd),
        (store_distance_to_party_from_party, ":dist", ":minorplanet_no", ":cur_party"),
        (lt, ":dist", 6),
        (assign, ":subcontinue", 1),
        (try_begin),
          (check_quest_active, "qst_move_cattle_herd"),
          (quest_slot_eq, "qst_move_cattle_herd", slot_quest_target_party, ":cur_party"),
          (assign, ":subcontinue", 0),
        (try_end),
        (eq, ":subcontinue", 1),
        (party_add_members, ":cur_party", "trp_cattle", ":amount"),
        (assign, ":continue", 0),
        (assign, reg0, ":cur_party"),
      (try_end),
      (try_begin),
        (eq, ":continue", 1),
        (call_script, "script_create_cattle_herd", ":minorplanet_no", ":amount"),
      (try_end),
  ]),
  
  #script_kill_cattle_from_herd
  # Input: arg1 = party_no, arg2 = amount
  # Output: none (fills trp_temp_troop's inventory)
  ("kill_cattle_from_herd",
    [
      (store_script_param_1, ":party_no"),
      (store_script_param_2, ":amount"),
      
      (troop_clear_inventory, "trp_temp_troop"),
      (store_mul, ":meat_amount", ":amount", 2),
      (troop_add_items, "trp_temp_troop", "itm_cattle_meat", ":meat_amount"),
      
      (troop_get_inventory_capacity, ":inv_size", "trp_temp_troop"),
      (try_for_range, ":i_slot", 0, ":inv_size"),
        (troop_get_inventory_slot, ":item_id", "trp_temp_troop", ":i_slot"),
        (eq, ":item_id", "itm_cattle_meat"),
        (troop_set_inventory_slot_modifier, "trp_temp_troop", ":i_slot", imod_fresh),
      (try_end),
      
      (party_get_num_companions, ":num_cattle", ":party_no"),
      (try_begin),
        (ge, ":amount", ":num_cattle"),
        (remove_party, ":party_no"),
      (else_try),
        (party_remove_members, ":party_no", "trp_cattle", ":amount"),
      (try_end),
  ]),
  
  # script_create_faction_hero_party
  # Input: arg1 = troop_no, arg2 = center_no
  # Output: $pout_party = party_no
  ("create_faction_hero_party",
    [
      (store_script_param, ":troop_no", 1),
      (store_script_param, ":center_no", 2),
      
      (store_troop_faction, ":troop_faction_no", ":troop_no"),
      
      (assign, "$pout_party", -1),
      (set_spawn_radius,0),
      (spawn_around_party,":center_no", "pt_faction_hero_party"),
      (assign, "$pout_party", reg0),
      
      (party_set_faction, "$pout_party", ":troop_faction_no"),
      (party_set_slot, "$pout_party", slot_party_type, spt_faction_hero_party),
      (call_script, "script_party_set_ai_state", "$pout_party", spai_undefined, -1),
      (troop_set_slot, ":troop_no", slot_troop_leaded_party, "$pout_party"),
      (party_add_leader, "$pout_party", ":troop_no"),
      (str_store_troop_name, s5, ":troop_no"),
      (party_set_name, "$pout_party", "str_s5_s_party"),
      
      (party_set_slot, "$pout_party", slot_party_commander_party, -1), #we need this because 0 is player's party!
      
      #Setting the flag icon
      #normal_banner_begin
      (troop_get_slot, ":cur_banner", ":troop_no", slot_troop_banner_scene_prop),
      (try_begin),
        (gt, ":cur_banner", 0),
        (val_sub, ":cur_banner", banner_scene_props_begin),
        (val_add, ":cur_banner", banner_map_icons_begin),
        (party_set_banner_icon, "$pout_party", ":cur_banner"),
        #custom_banner_begin
        #      (troop_get_slot, ":flag_icon", ":troop_no", slot_troop_custom_banner_map_flag_type),
        #      (try_begin),
        #        (ge, ":flag_icon", 0),
        #        (val_add, ":flag_icon", custom_banner_map_icons_begin),
        #        (party_set_banner_icon, "$pout_party", ":flag_icon"),
      (try_end),
      
      #-------------------------------------------------------------------------------------
      #SW - trying to modify so a custom map icon is used for each faction army
      (try_begin),
        (eq, ":troop_faction_no", "fac_galacticempire"), #Swadia = Empire
        (try_begin),
          (eq, ":troop_no", "trp_galacticempire_lord"),  #emperor
          (party_set_icon, "$pout_party", "icon_imperial_star_destroyer"), ##@> REPLACED BY SWY   "icon_death_star"),
        (else_try),
          (eq, ":troop_no", "trp_knight_1_8"),  #thrawn
          (party_set_icon, "$pout_party", "icon_imperial_star_destroyer_interdictor"),
        (else_try),
          (is_between, ":troop_no", "trp_galacticempire_lord", "trp_knight_1_17"),
          (party_set_icon, "$pout_party", "icon_imperial_star_destroyer"),
        (else_try),
          (is_between, ":troop_no", "trp_knight_1_17", "trp_knight_1_33"),
          #(party_set_icon, "$pout_party", "icon_stormtrooper_transport"),
          (party_set_icon, "$pout_party", "icon_imperial_victory_c2_frigate"),
        (else_try),
          #(party_set_icon, "$pout_party", "icon_imperial_shuttle"),
          (party_set_icon, "$pout_party", "icon_imperial_dreadnaught_frigate"),
        (try_end),
      (else_try),
        (eq, ":troop_faction_no", "fac_rebelalliance"), #Vaegir = Rebels
        (try_begin),
          (is_between, ":troop_no", "trp_rebelalliance_lord", "trp_knight_2_12"),
          (party_set_icon, "$pout_party", "icon_moncal_cruiser"),
        (else_try),
          (is_between, ":troop_no", "trp_knight_2_12", "trp_knight_2_22"),
          (party_set_icon, "$pout_party", "icon_corellian_gunship"),
        (else_try),
          (this_or_next|eq,":troop_no","trp_knight_2_18"), # Antilles
          (eq,":troop_no","trp_knight_2_21"), # Nik Sant
          (party_set_icon, "$pout_party", "icon_corellian_corvette"),
        (else_try),
          (store_random_in_range,":chosen_ship",0,1),
          (try_begin),
            (eq,":chosen_ship",1),
            (party_set_icon, "$pout_party", "icon_corellian_gunship"),
          (else_try),
            (party_set_icon, "$pout_party", "icon_corellian_corvette"),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":troop_faction_no", "fac_huttcartel"), #Khergit Khanate = Hutt
        (try_begin),
          (is_between, ":troop_no", "trp_huttcartel_lord", "trp_knight_3_8"),
          (party_set_icon, "$pout_party", "icon_hutt_cruiser"),
        (else_try),
          (is_between, ":troop_no", "trp_knight_3_8", "trp_knight_3_15"),
          (party_set_icon, "$pout_party", "icon_hutt_frigate_mk2"),
        (else_try),
          #(party_set_icon, "$pout_party", "icon_hutt_transport"),
          (party_set_icon, "$pout_party", "icon_hutt_frigate_mk1"),
        (try_end),
      (else_try),
        (eq, ":troop_faction_no", "fac_player_supporters_faction"), #player_supporters_faction
        (party_set_icon, "$pout_party", "icon_z95"),
      (try_end),
      
      #SW - modify so a specific troop gets a unique icon
      #(try_begin),
      #  (eq, ":troop_no", "trp_galacticempire_lord"), #
      #  (party_set_icon, "$pout_party", "icon_faction1"),
      #(else_try),
      #  (eq, ":troop_no", "trp_rebelalliance_lord"), #
      #  (party_set_icon, "$pout_party", "icon_faction1"),
      #(else_try),
      #  (eq, ":troop_no", "trp_rebelalliance_lord"), #
      #  (party_set_icon, "$pout_party", "icon_faction1"),
      #(try_end),
      #-------------------------------------------------------------------------------------
      
      
      (try_begin),
        (troop_slot_eq, ":troop_no", slot_troop_spawned_before, 0),
        (troop_set_slot, ":troop_no", slot_troop_spawned_before, 1),
        #SW - modified create_faction_hero_party to have smaller party sizes
        #(assign, ":num_tries", 20),
        (assign, ":num_tries", 15),
        (try_begin),
          (store_troop_faction, ":troop_faction", ":troop_no"),
          (faction_slot_eq, ":troop_faction", slot_faction_leader, ":troop_no"),
          #SW - modified create_faction_hero_party to have smaller party sizes
          #(assign, ":num_tries", 50),
          (assign, ":num_tries", 40),
        (try_end),
        
        (try_for_range, ":unused", 0, ":num_tries"),
          (call_script, "script_hire_men_to_faction_hero_party", ":troop_no"),
        (try_end),
        
        (store_random_in_range, ":xp_rounds", 2, 6),
        (troop_get_slot, ":renown", ":troop_no", slot_troop_renown),
        (store_div, ":renown_xp_rounds", ":renown", 100),
        (val_add, ":xp_rounds", ":renown_xp_rounds"),
        (try_for_range, ":unused", 0, ":xp_rounds"),
          (call_script, "script_upgrade_hero_party", "$pout_party", 4000),
        (try_end),
      (try_end),
  ]),
  
  # script_create_faction_party_if_below_limit
  # Input: arg1 = faction_no, arg2 = party_type (variables beginning with spt_)
  # Output: reg0 = party_no
  ("create_faction_party_if_below_limit",
    [
      (store_script_param_1, ":faction_no"),
      (store_script_param_2, ":party_type"),
      
      (call_script, "script_count_parties_of_faction_and_party_type", ":faction_no", ":party_type"),
      (assign, ":party_count", reg0),
      
      (assign, ":party_count_limit", 0),
      (try_begin),
        ##        (eq, ":party_type", spt_forager),
        ##        (assign, ":party_count_limit", 1),
        ##      (else_try),
        ##        (eq, ":party_type", spt_scout),
        ##        (assign, ":party_count_limit", 1),
        ##      (else_try),
        # #SW - un-commented Faction Patrols
        # #http://forums.taleworlds.com/index.php/topic,8652.msg2331555.html#msg2331555
        # (eq, ":party_type", spt_patrol),
        # #(assign, ":party_count_limit", 1),
        # (assign, ":party_count_limit", 30),
        # (else_try),
        ##        (eq, ":party_type", spt_messenger),
        ##        (assign, ":party_count_limit", 1),
        ##      (else_try),
        (eq, ":party_type", spt_faction_caravan),
        #SW - increase faction_caravan limit from 5 to 12
        (assign, ":party_count_limit", 12),
        ##      (else_try),
        ##        (eq, ":party_type", spt_prisoner_train),
        ##        (assign, ":party_count_limit", 1),
      (try_end),
      
      (assign, reg0, -1),
      (try_begin),
        (lt, ":party_count", ":party_count_limit"),
        (call_script,"script_cf_create_faction_party", ":faction_no", ":party_type"),
      (try_end),
  ]),
  
  
  # script_cf_create_faction_party
  # Input: arg1 = faction_no, arg2 = party_type (variables beginning with spt_)
  # Output: reg0 = party_no
  ("cf_create_faction_party",
    [
      (store_script_param_1, ":faction_no"),
      (store_script_param_2, ":party_type"),
      
      (str_store_faction_name, s7, ":faction_no"),
      (assign, ":party_name_str", "str_no_string"),
      
      ##      (faction_get_slot, ":reinforcements_a", ":faction_no", slot_faction_reinforcements_a),
      (faction_get_slot, ":reinforcements_b", ":faction_no", slot_faction_reinforcements_b),
      ##      (faction_get_slot, ":reinforcements_c", ":faction_no", slot_faction_reinforcements_c),
      
      (try_begin),
        ##        (eq, ":party_type", spt_forager),
        ##        (assign, ":party_template", "pt_forager_party"),
        #        (assign, ":party_name_str", "str_s7_foragers"),
        ##      (else_try),
        ##        (eq, ":party_type", spt_scout),
        ##        (assign, ":party_template", "pt_scout_party"),
        #        (assign, ":party_name_str", "str_s7_scouts"),
        ##      (else_try),
        # #SW - un-commented Faction Patrols
        # #http://forums.taleworlds.com/index.php/topic,8652.msg2331555.html#msg2331555
        # (eq, ":party_type", spt_patrol),
        # (assign, ":party_template", "pt_patrol_party"),
        # #        (assign, ":party_name_str", "str_s7_patrol"),
        # (else_try),
        (eq, ":party_type", spt_faction_caravan),
        (assign, ":party_template", "pt_faction_caravan_party"),
        #        (assign, ":party_name_str", "str_s7_caravan"),
        ##      (else_try),
        ##        (eq, ":party_type", spt_messenger),
        ##        (assign, ":party_template", "pt_messenger_party"),
        #        (assign, ":party_name_str", "str_s7_messenger"),
        ##      (else_try),
        ##        (eq, ":party_type", spt_raider),
        ##        (assign, ":party_template", "pt_raider_party"),
        ##        (assign, ":party_name_str", "str_s7_raiders"),
        ##      (else_try),
        ##        (eq, ":party_type", spt_prisoner_train),
        ##        (assign, ":party_template", "pt_prisoner_train_party"),
        #        (assign, ":party_name_str", "str_s7_prisoner_train"),
      (try_end),
      
      (assign, ":result", -1),
      (try_begin),
        (try_begin),
          (eq, ":party_type", spt_faction_caravan),
          (call_script,"script_cf_select_random_town_with_faction", ":faction_no", -1),
          (set_spawn_radius, 0),
        (else_try), #not used at the moment
          (call_script,"script_cf_select_random_walled_center_with_faction", ":faction_no", -1),
          (set_spawn_radius, 1),
        (try_end),
        (assign, ":spawn_center", reg0),
        (is_between, ":spawn_center", centers_begin, centers_end),
        (spawn_around_party,":spawn_center",":party_template"),
        (assign, ":result", reg0),
        (party_set_faction, ":result", ":faction_no"),
        (try_begin),
          (eq, ":party_type", spt_faction_caravan),
          (party_set_slot, ":result", slot_party_home_center, ":spawn_center"),
          #SW - switch icon for spt_faction_caravan
          (try_begin),
            (eq, ":faction_no", "fac_galacticempire"),   #empire
            (party_set_icon, ":result", "icon_imperial_trade_frigate"),
          (else_try),
            (eq, ":faction_no", "fac_rebelalliance"), #rebel
            (party_set_icon, ":result", "icon_rebel_transport"),
          (else_try),
            (eq, ":faction_no", "fac_huttcartel"), #hutt
            (party_set_icon, ":result", "icon_hutt_trade"),
          (else_try),                        #other
            #(party_set_icon, ":result", "icon_imperial_trade_frigate"),
          (try_end),
        (try_end),
        (party_set_slot, ":result", slot_party_type, ":party_type"),
        (party_set_slot, ":result", slot_party_ai_state, spai_undefined),
        (try_begin),
          (neq, ":party_name_str", "str_no_string"),
          (party_set_name, ":result", ":party_name_str"),
        (try_end),
        
        (try_begin),
          ##          (eq, ":party_type", spt_forager),
          ##          (party_add_template, ":result", ":reinforcements_a"),
          ##        (else_try),
          ##          (eq, ":party_type", spt_scout),
          ##          (party_add_template, ":result", ":reinforcements_c"),
          ##        (else_try),
          ##          (eq, ":party_type", spt_patrol),
          ##          (party_add_template, ":result", ":reinforcements_a"),
          ##          (party_add_template, ":result", ":reinforcements_b"),
          ##        (else_try),
          (eq, ":party_type", spt_faction_caravan),
          (party_add_template, ":result", ":reinforcements_b"),
          (party_add_template, ":result", ":reinforcements_b"),
          (party_set_ai_behavior,":result",ai_bhvr_travel_to_party),
          (party_set_ai_object,":result",":spawn_center"),
          (party_set_flags, ":result", pf_default_behavior, 1),
          (store_sub, ":item_to_price_slot", slot_mainplanet_trade_good_prices_begin, trade_goods_begin),
          (try_for_range, ":cur_goods", trade_goods_begin, trade_goods_end),
            (store_add, ":cur_goods_price_slot", ":cur_goods", ":item_to_price_slot"),
            (party_set_slot, ":result", ":cur_goods_price_slot", average_price_factor),
          (try_end),
          ##        (else_try),
          ##          (eq, ":party_type", spt_messenger),
          ##          (faction_get_slot, ":messenger_troop", ":faction_no", slot_faction_messenger_troop),
          ##          (party_add_leader, ":result", ":messenger_troop"),
          ##          (party_set_ai_behavior,":result",ai_bhvr_travel_to_party),
          ##          (party_set_ai_object,":result",":spawn_center"),
          ##          (party_set_flags, ":result", pf_default_behavior, 0),
          ##        (else_try),
          ##          (eq, ":party_type", spt_raider),
          ##          (party_add_template, ":result", ":reinforcements_c"),
          ##          (party_add_template, ":result", ":reinforcements_b"),
          ##          (party_add_template, ":result", "pt_raider_captives"),
          ##        (else_try),
          ##          (eq, ":party_type", spt_prisoner_train),
          ##          (party_add_template, ":result", ":reinforcements_b"),
          ##          (party_add_template, ":result", ":reinforcements_a"),
          ##          (try_begin),
          ##            (call_script,"script_cf_faction_get_random_enemy_faction",":faction_no"),
          ##            (store_random_in_range,":r",0,3),
          ##            (try_begin),
          ##              (lt, ":r", 1),
          ##              (faction_get_slot, ":captive_reinforcements", reg0, slot_faction_reinforcements_b),
          ##            (else_try),
          ##              (faction_get_slot, ":captive_reinforcements", reg0, slot_faction_reinforcements_a),
          ##            (try_end),
          ##            (party_add_template, ":result", ":captive_reinforcements",1),
          ##          (else_try),
          ##            (party_add_template, ":result", "pt_default_prisoners"),
          ##          (try_end),
        (try_end),
      (try_end),
      (ge, ":result", 0),
      (assign, reg0, ":result"),
  ]),
  
  # script_get_troop_attached_party
  # Input: arg1 = troop_no
  # Output: reg0 = party_no (-1 if troop's party is not attached to a party)
  ("get_troop_attached_party",
    [
      (store_script_param_1, ":troop_no"),
      
      (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
      (assign, ":attached_party_no", -1),
      (try_begin),
        (ge, ":party_no", 0),
        (party_get_attached_to, ":attached_party_no", ":party_no"),
      (try_end),
      (assign, reg0, ":attached_party_no"),
  ]),
  
  
  # script_center_get_food_consumption
  # Input: arg1 = center_no
  # Output: reg0: food consumption (1 food item counts as 100 units)
  ("center_get_food_consumption",
    [
      (store_script_param_1, ":center_no"),
      (assign, ":food_consumption", 0),
      (try_begin),
        (party_slot_eq, ":center_no", slot_party_type, spt_mainplanet),
        (assign, ":food_consumption", 500),
      (else_try),
        (party_slot_eq, ":center_no", slot_party_type, spt_castle),
        (assign, ":food_consumption", 50),
      (try_end),
      (assign, reg0, ":food_consumption"),
  ]),
  
  # script_center_get_food_store_limit
  # Input: arg1 = center_no
  # Output: reg0: food consumption (1 food item counts as 100 units)
  ("center_get_food_store_limit",
    [
      (store_script_param_1, ":center_no"),
      (assign, ":food_store_limit", 0),
      (try_begin),
        (party_slot_eq, ":center_no", slot_party_type, spt_mainplanet),
        (assign, ":food_store_limit", 50000),
      (else_try),
        (party_slot_eq, ":center_no", slot_party_type, spt_castle),
        (assign, ":food_store_limit", 1500),
      (try_end),
      (assign, reg0, ":food_store_limit"),
  ]),
  
  # script_refresh_minorplanet_merchant_inventory
  # Input: arg1 = minorplanet_no
  # Output: none
  ("refresh_minorplanet_merchant_inventory",
    [
      (store_script_param_1, ":minorplanet_no"),
      (party_get_slot, ":merchant_troop", ":minorplanet_no", slot_mainplanet_elder),
      (reset_item_probabilities,0),
      (store_sub, ":item_to_price_slot", slot_mainplanet_trade_good_prices_begin, trade_goods_begin),
      (try_for_range, ":cur_goods", trade_goods_begin, trade_goods_end),
        (store_add, ":cur_price_slot", ":cur_goods", ":item_to_price_slot"),
        (party_get_slot, ":cur_price", ":minorplanet_no", ":cur_price_slot"),
        (assign, ":cur_probability", 100),
        (val_mul, ":cur_probability", average_price_factor),
        (val_div, ":cur_probability", ":cur_price"),
        (val_mul, ":cur_probability", average_price_factor),
        (val_div, ":cur_probability", ":cur_price"),
        (val_mul, ":cur_probability", average_price_factor),
        (val_div, ":cur_probability", ":cur_price"),
        (val_mul, ":cur_probability", average_price_factor),
        (val_div, ":cur_probability", ":cur_price"),
        (set_item_probability_in_merchandise, ":cur_goods", ":cur_probability"),
      (try_end),
      (set_item_probability_in_merchandise, "itm_spice", 0),
      (set_item_probability_in_merchandise, "itm_velvet", 0),
      (troop_add_merchandise, ":merchant_troop", itp_type_goods, 3),
      (troop_ensure_inventory_space, ":merchant_troop", 80),
      
      #Adding 1 prosperity to the village while reducing each 3000 gold from the elder
      (store_troop_gold, ":gold",":merchant_troop"),
      (try_begin),
        (gt, ":gold", 3500),
        (store_div, ":prosperity_added", ":gold", 3000),
        (store_mul, ":gold_removed", ":prosperity_added", 3000),
        (troop_remove_gold, ":merchant_troop", ":gold_removed"),
        (call_script, "script_change_center_prosperity", ":minorplanet_no", ":prosperity_added"),
      (try_end),
  ]),
  
  # script_refresh_minorplanet_defenders
  # Input: arg1 = minorplanet_no
  # Output: none
  ("refresh_minorplanet_defenders",
    [
      (store_script_param_1, ":minorplanet_no"),
      
      (assign, ":ideal_size", 50),
      (try_begin),
        (party_get_num_companions, ":party_size", ":minorplanet_no"),
        (lt, ":party_size", ":ideal_size"),
        (party_add_template, ":minorplanet_no", "pt_minorplanet_defenders"),
      (try_end),
  ]),
  
  # script_minorplanet_set_state
  # Input: arg1 = center_no arg2:new_state
  # Output: reg0: food consumption (1 food item counts as 100 units)
  ("minorplanet_set_state",
    [
      (store_script_param_1, ":minorplanet_no"),
      (store_script_param_2, ":new_state"),
      #      (party_get_slot, ":old_state", ":minorplanet_no", slot_minorplanet_state),
      (try_begin),
        (eq, ":new_state", 0),
        (party_set_extra_text, ":minorplanet_no", "str_empty_string"),
        (party_set_slot, ":minorplanet_no", slot_minorplanet_raided_by, -1),
      (else_try),
        (eq, ":new_state", svs_being_raided),
        (party_set_extra_text, ":minorplanet_no", "@(Being Raided)"),
      (else_try),
        (eq, ":new_state", svs_looted),
        (party_set_extra_text, ":minorplanet_no", "@(Looted)"),
        (party_set_slot, ":minorplanet_no", slot_minorplanet_raided_by, -1),
        (call_script, "script_change_center_prosperity", ":minorplanet_no", -30),
      (else_try),
        (eq, ":new_state", svs_under_siege),
        (party_set_extra_text, ":minorplanet_no", "@(Under Siege)"),
      (try_end),
      (party_set_slot, ":minorplanet_no", slot_minorplanet_state, ":new_state"),
  ]),
  
  
  # script_process_minorplanet_raids
  # Input: none
  # Output: none
  # called from triggers every two hours
  ("process_minorplanet_raids",
    [
      (try_for_range, ":minorplanet_no", minorplanet_begin, minorplanet_end),
        (party_get_slot, ":minorplanet_raid_progress", ":minorplanet_no", slot_minorplanet_raid_progress),
        (try_begin),
          (party_slot_eq, ":minorplanet_no", slot_minorplanet_state, 0), #village is normal
          (val_sub, ":minorplanet_raid_progress", 5),
          (val_max, ":minorplanet_raid_progress", 0),
          (party_set_slot, ":minorplanet_no", slot_minorplanet_raid_progress, ":minorplanet_raid_progress"),
        (else_try),
          (party_slot_eq, ":minorplanet_no", slot_minorplanet_state, svs_being_raided), #village is being raided
          # End raid unless there is an enemy party nearby
          (assign, ":raid_ended", 1),
          (party_get_slot, ":raider_party", ":minorplanet_no", slot_minorplanet_raided_by),
          (try_begin),
            (ge, ":raider_party", 0),
            (party_is_active, ":raider_party"),
            (this_or_next|neq, ":raider_party", "p_main_party"),
            (eq, "$g_player_is_captive", 0),
            (store_distance_to_party_from_party, ":distance", ":minorplanet_no", ":raider_party"),
            (lt, ":distance", raid_distance),
            (assign, ":raid_ended", 0),
          (try_end),
          (try_begin),
            (eq, ":raid_ended", 1),
            (call_script, "script_minorplanet_set_state",  ":minorplanet_no", 0), #clear raid flag
            (party_set_slot, ":minorplanet_no", slot_minorplanet_smoke_added, 0),
            (party_clear_particle_systems, ":minorplanet_no"),
          (else_try),
            (assign, ":raid_progress_increase", 11),
            (party_get_slot, ":jawa_party", ":minorplanet_no", slot_minorplanet_raided_by),
            (try_begin),
              (party_get_skill_level, ":looting_skill", ":jawa_party", "skl_looting"),
              (val_add, ":raid_progress_increase", ":looting_skill"),
            (try_end),
            (try_begin),
              (party_slot_eq, ":minorplanet_no", slot_center_has_watch_tower, 1),
              (val_mul, ":raid_progress_increase", 75),
              (val_div, ":raid_progress_increase", 100),
            (try_end),
            (val_add, ":minorplanet_raid_progress", ":raid_progress_increase"),
            (party_set_slot, ":minorplanet_no", slot_minorplanet_raid_progress, ":minorplanet_raid_progress"),
            (try_begin),
              (ge, ":minorplanet_raid_progress", 50),
              (party_slot_eq, ":minorplanet_no", slot_minorplanet_smoke_added, 0),
              #(party_add_particle_system, ":minorplanet_no", "psys_map_minorplanet_fire"),
              #(party_add_particle_system, ":minorplanet_no", "psys_map_minorplanet_fire_smoke"),
              #(party_set_icon, ":minorplanet_no", "icon_minorplanet_burnt_a"),
              (party_add_particle_system, ":minorplanet_no", "psys_planet_icon_raided_effect"),
              
              (party_set_slot, ":minorplanet_no", slot_minorplanet_smoke_added, 1),
            (try_end),
            (try_begin),
              (gt, ":minorplanet_raid_progress", 100),
              (str_store_party_name_link, s1, ":minorplanet_no"),
              (party_stack_get_troop_id, ":raid_leader", ":jawa_party"),
              (ge, ":raid_leader", 0),
              (str_store_party_name, s2, ":jawa_party"),
              # HC - Select the message color based on the circumstances. reg20 holds the color.
              (call_script, "script_get_message_color", news_minorplanet_looted, ":minorplanet_no"),
              (display_log_message, "@The planet of {s1} has been looted by {s2}.", reg20),
              (call_script, "script_minorplanet_set_state",  ":minorplanet_no", svs_looted),
              (party_set_slot, ":minorplanet_no", slot_minorplanet_raid_progress, 0),
              (party_set_slot, ":minorplanet_no", slot_minorplanet_recover_progress, 0),
              (try_begin),
                (store_faction_of_party, ":minorplanet_faction", ":minorplanet_no"),
                (this_or_next|party_slot_eq, ":minorplanet_no", slot_mainplanet_lord, "trp_player"),
                (eq, ":minorplanet_faction", "fac_player_supporters_faction"),
                (call_script, "script_add_notification_menu", "mnu_notification_minorplanet_raided", ":minorplanet_no", ":raid_leader"),
              (try_end),
              (call_script, "script_add_log_entry", logent_minorplanet_raided, ":raid_leader",  ":minorplanet_no", -1, -1),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, ":minorplanet_no", slot_minorplanet_state, svs_looted), #village is looted
          (party_get_slot, ":recover_progress", ":minorplanet_no", slot_minorplanet_recover_progress),
          (val_add, ":recover_progress", 1),
          (party_set_slot, ":minorplanet_no", slot_minorplanet_recover_progress, ":recover_progress"), #village looted
          (try_begin),
            (ge, ":recover_progress", 10),
            (party_slot_eq, ":minorplanet_no", slot_minorplanet_smoke_added, 1),
            (party_clear_particle_systems, ":minorplanet_no"),
            #(party_add_particle_system, ":minorplanet_no", "psys_map_minorplanet_looted_smoke"),
            (party_add_particle_system, ":minorplanet_no", "psys_planet_icon_raided_effect"),
            (party_set_slot, ":minorplanet_no", slot_minorplanet_smoke_added, 2),
          (try_end),
          (try_begin),
            (gt, ":recover_progress", 50),
            (party_slot_eq, ":minorplanet_no", slot_minorplanet_smoke_added, 2),
            (party_clear_particle_systems, ":minorplanet_no"),
            (party_set_slot, ":minorplanet_no", slot_minorplanet_smoke_added, 3),
            #(party_set_icon, ":minorplanet_no", "icon_minorplanet_deserted_a"),
          (try_end),
          (try_begin),
            (gt, ":recover_progress", 100),
            (call_script, "script_minorplanet_set_state",  ":minorplanet_no", 0),#village back to normal
            (party_set_slot, ":minorplanet_no", slot_minorplanet_recover_progress, 0),
            (party_clear_particle_systems, ":minorplanet_no"),
            (party_add_particle_system, ":minorplanet_no", "psys_planet_icon_atmospheric_effect"),
            (party_set_slot, ":minorplanet_no", slot_minorplanet_smoke_added, 0),
            (party_set_icon, ":minorplanet_no", "icon_minorplanet_a"),
          (try_end),
        (try_end),
      (try_end),
  ]),
  
  
  # script_process_sieges
  # Input: none
  # Output: none
  #called from triggers
  ("process_sieges",
    [
      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
        #Reducing siege hardness every day by 20
        (party_get_slot, ":siege_hardness", ":center_no", slot_center_siege_hardness),
        (val_sub, ":siege_hardness", 20),
        (val_max, ":siege_hardness", 0),
        (party_set_slot, ":center_no", slot_center_siege_hardness, ":siege_hardness"),
        
        (party_get_slot, ":town_food_store", ":center_no", slot_party_food_store),
        (call_script, "script_center_get_food_store_limit", ":center_no"),
        (assign, ":food_store_limit", reg0),
        (try_begin),
          (party_get_slot, ":besieger_party", ":center_no", slot_center_is_besieged_by),
          (ge, ":besieger_party", 0), #town is under siege
          
          #Reduce prosperity of besieged center by -1 with a 33% chance every day.
          (try_begin),
            (store_random_in_range, ":random_no", 0, 3),
            (eq, ":random_no", 0),
            (call_script, "script_change_center_prosperity", ":center_no", -1),
          (try_end),
          
          (store_faction_of_party, ":center_faction", ":center_no"),
          # Lift siege unless there is an enemy party nearby
          (assign, ":siege_lifted", 0),
          (try_begin),
            (try_begin),
              (neg|party_is_active, ":besieger_party"),
              (assign, ":siege_lifted", 1),
            (else_try),
              (store_distance_to_party_from_party, ":besieger_distance", ":center_no", ":besieger_party"),
              (gt, ":besieger_distance", 5),
              (assign, ":siege_lifted", 1),
            (try_end),
            (eq, ":siege_lifted", 1),
            (try_for_range, ":enemy_hero", faction_heroes_begin, faction_heroes_end),
              (troop_slot_eq, ":enemy_hero", slot_troop_occupation, slto_faction_hero),
              (troop_get_slot, ":enemy_party", ":enemy_hero", slot_troop_leaded_party),
              (ge, ":enemy_party", 0),
              (party_is_active, ":enemy_party"),
              (store_faction_of_party, ":party_faction", ":enemy_party"),
              (store_relation, ":reln", ":party_faction", ":center_faction"),
              (lt, ":reln", 0),
              (store_distance_to_party_from_party, ":distance", ":center_no", ":enemy_party"),
              (lt, ":distance", 4),
              (assign, ":besieger_party", ":enemy_party"),
              (party_set_slot, ":center_no", slot_center_is_besieged_by, ":enemy_party"),
              (assign, ":siege_lifted", 0),
            (try_end),
          (try_end),
          (try_begin),
            (eq, ":siege_lifted", 1),
            (call_script, "script_lift_siege", ":center_no", 1),
          (else_try),
            (call_script, "script_center_get_food_consumption", ":center_no"),
            (assign, ":food_consumption", reg0),
            (val_sub, ":town_food_store", ":food_consumption"), # reduce food only under siege???
            (try_begin),
              (le, ":town_food_store", 0), #town is starving
              (store_random_in_range, ":r", 0, 100),
              (lt, ":r", 10),
              (call_script, "script_party_wound_all_members", ":center_no"), # town falls with 10% chance if starving
            (try_end),
          (try_end),
        (else_try),
          #town is not under siege...
          (val_add, ":town_food_store", 30), #add 30 food (significant for castles only.
        (try_end),
        
        (val_min, ":town_food_store", ":food_store_limit"),
        (val_max, ":town_food_store", 0),
        (party_set_slot, ":center_no", slot_party_food_store, ":town_food_store"),
      (try_end),
  ]),
  
  # script_lift_siege
  # Input: arg1 = center_no, arg2 = display_message
  # Output: none
  #called from triggers
  ("lift_siege",
    [
      (store_script_param, ":center_no", 1),
      (store_script_param, ":display_message", 2),
      (party_set_slot, ":center_no", slot_center_is_besieged_by, -1), #clear siege
      (call_script, "script_minorplanet_set_state",  ":center_no", 0), #clear siege flag
      (try_begin),
        (eq, ":center_no", "$g_player_besiege_town"),
        (assign, "$g_siege_method", 0), #remove siege progress
      (try_end),
      (try_begin),
        (eq, ":display_message", 1),
        (str_store_party_name_link, s3, ":center_no"),
        # HC - Select the message color based on the circumstances. reg20 holds the color.
        (call_script, "script_get_message_color", news_center_siege_lifted, ":center_no"),
        (display_message, "@{s3} is no longer under siege.", reg20),
        #(display_message, "@{s3} is no longer under siege.", 0xFFBB00),
      (try_end),
  ]),
  
  
  # script_process_alarms
  # Input: none
  # Output: none
  #called from triggers
  ("process_alarms",
    [(try_for_range, ":center_no", centers_begin, centers_end),
        (party_set_slot, ":center_no", slot_center_last_spotted_enemy, -1),
      (try_end),
      (assign, ":spotting_range", 2),
      (try_begin),
        (is_currently_night),
        #SW - switching to a 2 so there is no penalty at night
        #(assign, ":spotting_range", 1),
        (assign, ":spotting_range", 2),
      (try_end),
      (try_begin),
        (party_slot_eq, ":center_no", slot_center_has_watch_tower, 1),
        (val_mul, ":spotting_range", 2),
      (try_end),
      (try_for_parties, ":party_no"),
        (party_slot_eq, ":party_no", slot_party_type, spt_faction_hero_party),
        (neg|party_is_in_any_town, ":party_no"),
        (store_faction_of_party, ":party_faction", ":party_no"),
        (try_for_range, ":center_no", centers_begin, centers_end),
          (store_distance_to_party_from_party, ":distance", ":party_no", ":center_no"),
          (le, ":distance", ":spotting_range"),
          (store_faction_of_party, ":center_faction", ":center_no"),
          (store_relation, ":reln", ":center_faction", ":party_faction"),
          (lt, ":reln", 0),
          (party_set_slot, ":center_no", slot_center_last_spotted_enemy, ":party_no"),
        (try_end),
      (try_end),
      (try_for_range, ":center_no", centers_begin, centers_end),
        (store_faction_of_party, ":center_faction", ":center_no"),
        (this_or_next|party_slot_eq, ":center_no", slot_mainplanet_lord, "trp_player"),
        (eq, ":center_faction", "$players_faction"),
        (party_get_slot, ":enemy_party", ":center_no", slot_center_last_spotted_enemy),
        (ge, ":enemy_party", 0),
        (store_distance_to_party_from_party, ":dist", "p_main_party", ":center_no"),
        (assign, ":has_messenger", 0),
        (try_begin),
          (this_or_next|party_slot_eq, ":center_no", slot_mainplanet_lord, "trp_player"),
          (eq, ":center_faction", "fac_player_supporters_faction"),
          (party_slot_eq, ":center_no", slot_center_has_messenger_post, 1),
          (assign, ":has_messenger", 1),
        (try_end),
        (this_or_next|lt, ":dist", 30),
        (eq, ":has_messenger", 1),
        (str_store_party_name_link, s1, ":center_no"),
        (display_message, "@Enemies spotted near {s1}.", color_bad_news),
      (try_end),
  ]),
  
  
  # script_party_set_ai_state
  # Input: arg1 = party_no, arg2 = new_ai_state, arg3 = action_object (if necessary)
  # Output: none (Can fail)
  ("party_set_ai_state",
    [
      (store_script_param, ":party_no", 1),
      (store_script_param, ":new_ai_state", 2),
      (store_script_param, ":new_ai_object", 3),
      
      (party_get_slot, ":old_ai_state", ":party_no", slot_party_ai_state),
      (party_get_slot, ":old_ai_object", ":party_no", slot_party_ai_object),
      (party_get_attached_to, ":attached_to_party", ":party_no"),
      (assign, ":party_is_in_town", 0),
      (try_begin),
        (is_between, ":attached_to_party", centers_begin, centers_end),
        (assign, ":party_is_in_town", ":attached_to_party"),
      (try_end),
      
      (party_set_slot, ":party_no", slot_party_follow_me, 0),
      
      (try_begin),
        (eq, ":old_ai_state", ":new_ai_state"),
        (eq, ":old_ai_object", ":new_ai_object"),
        #do nothing. Nothing is changed.
      (else_try),
        (try_begin),
          (eq, ":new_ai_state", spai_accompanying_army),
          (party_set_ai_behavior, ":party_no", ai_bhvr_escort_party),
          (party_set_ai_object, ":party_no", ":new_ai_object"),
          (party_set_flags, ":party_no", pf_default_behavior, 0),
          (try_begin),
            (gt, ":party_is_in_town", 0),
            (party_detach, ":party_no"),
          (try_end),
        (else_try),
          (eq, ":new_ai_state", spai_besieging_center),
          (party_get_position, pos1, ":new_ai_object"),
          (map_get_random_position_around_position, pos2, pos1, 2),
          (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_point),
          (party_set_ai_target_position, ":party_no", pos2),
          (party_set_ai_object, ":party_no", ":new_ai_object"),
          (party_set_flags, ":party_no", pf_default_behavior, 0),
          (party_set_slot, ":party_no", slot_party_follow_me, 1),
          (party_set_slot, ":party_no", slot_party_ai_substate, 0),
          (try_begin),
            (gt, ":party_is_in_town", 0),
            (neq, ":party_is_in_town", ":new_ai_object"),
            (party_detach, ":party_no"),
          (try_end),
        (else_try),
          (eq, ":new_ai_state", spai_holding_center),
          (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
          (party_set_ai_object, ":party_no", ":new_ai_object"),
          (party_set_flags, ":party_no", pf_default_behavior, 0),
          (try_begin),
            (gt, ":party_is_in_town", 0),
            (neq, ":party_is_in_town", ":new_ai_object"),
            (party_detach, ":party_no"),
          (try_end),
        (else_try),
          (eq, ":new_ai_state", spai_patrolling_around_center),
          (party_get_position, pos1, ":new_ai_object"),
          (map_get_random_position_around_position, pos2, pos1, 1),
          (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_point),
          (party_set_ai_target_position, ":party_no", pos2),
          (party_set_ai_object, ":party_no", ":new_ai_object"),
          (party_set_ai_patrol_radius, ":party_no", 5),
          (party_set_flags, ":party_no", pf_default_behavior, 0),
          (party_set_slot, ":party_no", slot_party_follow_me, 1),
          (party_set_slot, ":party_no", slot_party_ai_substate, 0),
          (try_begin),
            (gt, ":party_is_in_town", 0),
            (party_detach, ":party_no"),
          (try_end),
        (else_try),
          (eq, ":new_ai_state", spai_recruiting_troops),
          (party_get_position, pos1, ":new_ai_object"),
          (map_get_random_position_around_position, pos2, pos1, 2),
          (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_point),
          (party_set_ai_target_position, ":party_no", pos2),
          (party_set_ai_object, ":party_no", ":new_ai_object"),
          (party_set_flags, ":party_no", pf_default_behavior, 0),
          (party_set_slot, ":party_no", slot_party_ai_substate, 0),
          (try_begin),
            (gt, ":party_is_in_town", 0),
            (neq, ":party_is_in_town", ":new_ai_object"),
            (party_detach, ":party_no"),
          (try_end),
        (else_try),
          (eq, ":new_ai_state", spai_raiding_around_center),
          (party_get_position, pos1, ":new_ai_object"),
          (map_get_random_position_around_position, pos2, pos1, 1),
          (party_set_ai_behavior, ":party_no", ai_bhvr_patrol_location),
          (party_set_ai_patrol_radius, ":party_no", 10),
          (party_set_ai_target_position, ":party_no", pos2),
          (party_set_ai_object, ":party_no", ":new_ai_object"),
          (party_set_flags, ":party_no", pf_default_behavior, 0),
          (party_set_slot, ":party_no", slot_party_follow_me, 1),
          (party_set_slot, ":party_no", slot_party_ai_substate, 0),
          (try_begin),
            (gt, ":party_is_in_town", 0),
            (neq, ":party_is_in_town", ":new_ai_object"),
            (party_detach, ":party_no"),
          (try_end),
        (else_try),
          ##          (eq, ":new_ai_state", spai_raiding_village),
          ##          (party_get_position, pos1, ":new_ai_object"),
          ##          (map_get_random_position_around_position, pos2, pos1, 1),
          ##          (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_point),
          ##          (party_set_ai_target_position, ":party_no", pos2),
          ##          (party_set_ai_object, ":party_no", ":new_ai_object"),
          ##          (party_set_flags, ":party_no", pf_default_behavior, 0),
          ##          (party_set_slot, ":party_no", slot_party_follow_me, 1),
          ##          (try_begin),
          ##            (gt, ":party_is_in_town", 0),
          ##            (neq, ":party_is_in_town", ":new_ai_object"),
          ##            (party_detach, ":party_no"),
          ##          (try_end),
          ##        (else_try),
          (eq, ":new_ai_state", spai_engaging_army),
          (party_set_ai_behavior, ":party_no", ai_bhvr_attack_party),
          (party_set_ai_object, ":party_no", ":new_ai_object"),
          (party_set_flags, ":party_no", pf_default_behavior, 0),
          (try_begin),
            (gt, ":party_is_in_town", 0),
            (party_detach, ":party_no"),
          (try_end),
        (else_try),
          (eq, ":new_ai_state", spai_retreating_to_center),
          (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
          (party_set_ai_object, ":party_no", ":new_ai_object"),
          (party_set_flags, ":party_no", pf_default_behavior, 1),
          (party_set_slot, ":party_no", slot_party_commander_party, -1),
          (try_begin),
            (gt, ":party_is_in_town", 0),
            (neq, ":party_is_in_town", ":new_ai_object"),
            (party_detach, ":party_no"),
          (try_end),
        (else_try),
          (eq, ":new_ai_state", spai_undefined),
          (party_set_ai_behavior, ":party_no", ai_bhvr_hold),
          (party_set_flags, ":party_no", pf_default_behavior, 0),
        (try_end),
      (try_end),
      
      (party_set_slot, ":party_no", slot_party_ai_state, ":new_ai_state"),
      (party_set_slot, ":party_no", slot_party_ai_object, ":new_ai_object"),
      
  ]),
  
  # script_decide_faction_party_ais
  # Input: none
  # Output: none
  #called from triggers
  ("decide_faction_party_ais",
    [
      (try_for_range, ":faction_no", factions_begin, factions_end),
        (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
        (neq, ":faction_no", "fac_player_supporters_faction"),
        (faction_get_slot, ":faction_ai_state", ":faction_no", slot_faction_ai_state),
        (neq, ":faction_ai_state", sfai_default),
        (faction_get_slot, ":faction_ai_object", ":faction_no", slot_faction_ai_object),
        (faction_get_slot, ":faction_marshall", ":faction_no", slot_faction_marshall),
        (gt, ":faction_marshall", 0),
        (neq, ":faction_marshall", "trp_player"),
        (troop_get_slot, ":faction_marshall_party", ":faction_marshall", slot_troop_leaded_party),
        (gt, ":faction_marshall_party", 0),
        (try_begin),
          (eq, ":faction_ai_state", sfai_gathering_army),
          (call_script, "script_party_set_ai_state", ":faction_marshall_party", spai_undefined, -1),
          (party_set_ai_initiative, ":faction_marshall_party", 100),
        (else_try),
          (eq, ":faction_ai_state", sfai_attacking_center),
          (call_script, "script_party_set_ai_state", ":faction_marshall_party", spai_besieging_center, ":faction_ai_object"),
          (party_set_ai_initiative, ":faction_marshall_party", 50),
        (else_try),
          (eq, ":faction_ai_state", sfai_raiding_village),
          (call_script, "script_party_set_ai_state", ":faction_marshall_party", spai_raiding_around_center, ":faction_ai_object"),
          (party_set_ai_initiative, ":faction_marshall_party", 50),
        (else_try),
          (eq, ":faction_ai_state", sfai_attacking_enemies_around_center),
          (call_script, "script_party_set_ai_state", ":faction_marshall_party", spai_patrolling_around_center, ":faction_ai_object"),
          (party_set_ai_initiative, ":faction_marshall_party", 50),
        (else_try),
          (eq, ":faction_ai_state", sfai_attacking_enemy_army),
          (call_script, "script_party_set_ai_state", ":faction_marshall_party", spai_engaging_army, ":faction_ai_object"),
          (party_set_ai_initiative, ":faction_marshall_party", 50),
        (try_end),
        (party_set_slot, ":faction_marshall_party", slot_party_commander_party, -1),
      (try_end),
      
      (try_for_range, ":troop_no", faction_heroes_begin, faction_heroes_end),
        (try_begin),
          (store_troop_faction, ":troop_faction", ":troop_no"),
          (neg|faction_slot_eq, ":troop_faction", slot_faction_marshall, ":troop_no"),
          (troop_get_slot, ":troop_party", ":troop_no", slot_troop_leaded_party),
          (gt, ":troop_party", 0),
          (party_is_active, ":troop_party"),
          (party_set_ai_initiative, ":troop_party", 100),
        (try_end),
        (call_script, "script_calculate_troop_ai", ":troop_no"),
      (try_end),
      
      (try_for_range, ":troop_no", faction_heroes_begin, faction_heroes_end),
        (call_script, "script_calculate_troop_ai_under_command", ":troop_no"),
      (try_end),
  ]),
  
  # script_party_decide_next_ai_state_under_command
  # Input: arg1 = party_no
  # Output: none
  #called from triggers
  ("party_decide_next_ai_state_under_command",
    [
      (store_script_param_1, ":party_no"),
      (party_get_slot, ":commander_party", ":party_no", slot_party_commander_party),
      (try_begin),
        (party_is_active, ":commander_party"),
        (party_get_slot, ":commander_ai_state", ":commander_party", slot_party_ai_state),
        (party_get_slot, ":commander_ai_object", ":commander_party", slot_party_ai_object),
        (store_faction_of_party, ":faction_no", ":party_no"),
        
        (store_distance_to_party_from_party, ":distance_to_commander", ":party_no", ":commander_party"),
        (try_begin),
          (gt, ":distance_to_commander", 5),
          (call_script, "script_party_set_ai_state", ":party_no", spai_accompanying_army, ":commander_party"),
        (else_try),
          (try_begin),
            (eq, ":commander_party", "p_main_party"),
            (call_script, "script_party_set_ai_state", ":party_no", spai_accompanying_army, "p_main_party"),
          (else_try),
            (eq, ":commander_ai_state", spai_besieging_center),
            (store_distance_to_party_from_party, ":distance_to_object", ":party_no", ":commander_ai_object"),
            (le, ":distance_to_object", 5),
            (call_script, "script_party_set_ai_state", ":party_no", spai_besieging_center, ":commander_ai_object"),
          (else_try),
            #find current center
            (party_get_attached_to, ":cur_center_no", ":commander_party"),
            (assign, ":handled", 0),
            (try_begin),
              (lt, ":cur_center_no", 0),
              (party_get_cur_town, ":cur_center_no", ":commander_party"),
            (try_end),
            (try_begin),
              (eq, ":commander_ai_state", spai_holding_center),
              (call_script, "script_party_set_ai_state", ":party_no", spai_holding_center, ":commander_ai_object"),
              (assign, ":handled", 1),
            (else_try),
              (eq, ":commander_ai_state", spai_undefined),
              (is_between, ":cur_center_no", centers_begin, centers_end),
              (call_script, "script_party_set_ai_state", ":party_no", spai_holding_center, ":cur_center_no"),
              (assign, ":handled", 1),
            (try_end),
            (eq, ":handled", 1),
          (else_try),
            (faction_get_slot, ":faction_marshall", ":faction_no", slot_faction_marshall),
            (ge, ":faction_marshall", 0),
            (troop_slot_eq, ":faction_marshall", slot_troop_leaded_party, ":commander_party"),
            (call_script, "script_party_set_ai_state", ":party_no", spai_accompanying_army, ":commander_party"),
          (else_try),
            (this_or_next|eq, ":commander_ai_state", spai_patrolling_around_center),
            (this_or_next|eq, ":commander_ai_state", spai_raiding_around_center),
            (eq, ":commander_ai_state", spai_engaging_army),
            (call_script, "script_party_set_ai_state", ":party_no", spai_accompanying_army, ":commander_party"),
          (else_try),
            #Commander doesn't need accompany. Cancel
            (call_script, "script_party_set_ai_state", ":party_no", spai_undefined, -1),
            (party_set_slot, ":party_no", slot_party_commander_party, -1),
          (try_end),
        (try_end),
      (try_end),
  ]),
  
  # script_faction_hero_decide_next_ai_state_follow_or_not
  # Input: arg1 = troop_no
  # Output: none
  #called from triggers
  ("faction_hero_decide_next_ai_state_follow_or_not",
    [
      (store_script_param_1, ":troop_no"),
      (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
      
      (try_begin),
        (party_get_slot, ":old_ai_state", ":party_no", slot_party_ai_state),
        
        (assign, ":cancel", 0),
        (try_begin), #if we are retreating to a center keep retreating
          (eq, ":old_ai_state", spai_retreating_to_center),
          (neg|party_is_in_any_town, ":party_no"),
          (assign, ":cancel", 1),
        (try_end),
        (eq, ":cancel", 0),
        
        (party_get_slot, ":our_strength", ":party_no", slot_party_cached_strength),
        (store_div, ":min_strength_behind", ":our_strength", 2),
        
        (assign, ":under_siege", 0),
        #find current center
        (party_get_attached_to, ":cur_center_no", ":party_no"),
        (try_begin),
          (lt, ":cur_center_no", 0),
          (party_get_cur_town, ":cur_center_no", ":party_no"),
        (try_end),
        (try_begin),
          (neg|is_between, ":cur_center_no", centers_begin, centers_end),
          (assign, ":cur_center_no", -1),
          (assign, ":cur_center_nearby_strength", 0),
          (store_sub, ":cur_center_left_strength", 1000000),#must be higher than our strength
        (else_try),
          (party_get_slot, ":cur_center_nearby_strength", ":cur_center_no", slot_party_nearby_friend_strength),
          (store_sub, ":cur_center_left_strength", ":cur_center_nearby_strength", ":our_strength"),
          (party_get_slot, ":besieger_party", ":cur_center_no", slot_center_is_besieged_by),
          (gt, ":besieger_party", 0),
          (party_is_active, ":besieger_party"),
          (assign, ":under_siege", 1),
        (try_end),
        
        (store_troop_faction, ":faction_no", ":troop_no"),
        (faction_get_slot, ":faction_ai_state",  ":faction_no", slot_faction_ai_state),
        
        (party_get_slot, ":commander_party", ":party_no", slot_party_commander_party),
        (try_begin),
          (ge, ":commander_party", 0),
          (try_begin),
            (party_is_active, ":commander_party"),
            (try_begin),
              (store_faction_of_party, ":commander_faction", ":commander_party"),
              (neq, ":faction_no", ":commander_faction"),
              (assign, ":continue", 0),
              (try_begin),
                (neq, ":commander_party", "p_main_party"),
                (assign, ":continue", 1),
              (else_try),
                (neq, "$players_faction", ":faction_no"),
                (assign, ":continue", 1),
              (try_end),
              (eq, ":continue", 1),
              (assign, ":commander_party", -1),
            (try_end),
          (else_try),
            (assign, ":commander_party", -1),
          (try_end),
        (try_end),
        
        (faction_get_slot, ":num_towns", ":faction_no", slot_faction_num_towns),
        (store_mul, ":faction_center_value", ":num_towns", 2),
        (faction_get_slot, ":num_castles", ":faction_no", slot_faction_num_castles),
        (val_add, ":faction_center_value", ":num_castles"),
        (val_mul, ":faction_center_value", 10),
        (val_max, ":faction_center_value", 5),
        
        (troop_get_slot, ":readiness", ":troop_no", slot_troop_readiness_to_join_army),
        
        (assign, ":chance_to_follow_other_party", 0),
        (assign, ":target_to_follow_other_party", -1),
        
        (try_begin), #follow other party
          (eq, ":under_siege", 0),
          (ge, ":cur_center_left_strength", ":min_strength_behind"),
          (assign, ":continue", 0),
          (try_begin),
            (ge, ":commander_party", 0),
            (gt, "$party_relative_strength", 30),
            (assign, ":continue", 1),
          (else_try),
            (gt, "$party_relative_strength", 50),
            (lt, "$ratio_of_prisoners", 50),
            (assign, ":continue", 1),
          (try_end),
          (eq, ":continue", 1),
          (try_begin),
            (eq, ":faction_no", "fac_player_supporters_faction"),
            (neg|troop_slot_eq, ":troop_no", slot_troop_player_order_state, spai_undefined),
            (assign, ":continue", 0),
          (try_end),
          (eq, ":continue", 1),
          (faction_get_slot, ":faction_marshall", ":faction_no", slot_faction_marshall),
          (ge, ":faction_marshall", 0),
          #(troop_slot_eq, ":faction_marshall", slot_troop_is_prisoner, 0),
          (neg|troop_slot_ge, ":faction_marshall", slot_troop_prisoner_of_party, 0),
          (troop_get_slot, ":faction_marshall_party", ":faction_marshall", slot_troop_leaded_party),
          (neq, ":faction_marshall", ":troop_no"),
          (ge, ":faction_marshall_party", 0),
          (try_begin),
            (eq, ":faction_ai_state", sfai_gathering_army),
            (assign, ":old_target_to_follow_other_party", -1),
            (try_begin),
              (ge, ":commander_party", 0),
              (assign, ":old_target_to_follow_other_party", ":commander_party"),
            (try_end),
            
            (assign, ":continue", 0),
            (try_begin),
              (ge, ":readiness", 60),
              (assign, ":continue", 1),
            (else_try),
              (ge, ":readiness", 10),
              (eq, ":old_target_to_follow_other_party", ":faction_marshall_party"),
              (assign, ":continue", 1),
            (try_end),
            
            (try_begin),
              (eq, ":continue", 1),
              (store_distance_to_party_from_party, ":dist", ":faction_marshall_party", ":party_no"),
              (store_sub, ":chance", 120, ":dist"),
              ##            (val_mul, ":chance", 3),
              ##            (val_div, ":chance", 2),
              (val_min, ":chance", 100),
              (val_max, ":chance", 20),
              (store_sub, ":faction_advantage_effect", "$g_average_center_value_per_faction", ":faction_center_value"),
              (val_mul, ":faction_advantage_effect", 2),
              (val_add, ":chance", ":faction_advantage_effect"),
              (val_max, ":chance", 10),
              
              (assign, ":target_to_follow_other_party", ":faction_marshall_party"),
              (assign, ":chance_to_follow_other_party", ":chance"),
              (try_begin),
                (eq, ":old_target_to_follow_other_party", ":target_to_follow_other_party"),
                (val_mul, ":chance_to_follow_other_party", 1000),
              (try_end),
            (try_end),
          (else_try),
            (this_or_next|eq, ":faction_ai_state", sfai_attacking_center),
            (this_or_next|eq, ":faction_ai_state", sfai_raiding_village),
            (this_or_next|eq, ":faction_ai_state", sfai_attacking_enemies_around_center),
            (eq, ":faction_ai_state", sfai_attacking_enemy_army),
            (eq, ":commander_party", ":faction_marshall_party"),
            (ge, ":readiness", 10),
            (assign, ":target_to_follow_other_party", ":faction_marshall_party"),
            (assign, ":chance_to_follow_other_party", 100000),
          (try_end),
        (try_end),
        (try_begin), #follow other party with initiative
          (le, ":chance_to_follow_other_party", 0),
          (eq, ":under_siege", 0),
          (ge, ":cur_center_left_strength", ":min_strength_behind"),
          (assign, ":continue", 0),
          (try_begin),
            (ge, ":commander_party", 0),
            (gt, "$party_relative_strength", 40),
            (assign, ":continue", 1),
          (else_try),
            (gt, "$party_relative_strength", 75),
            (lt, "$ratio_of_prisoners", 50),
            (assign, ":continue", 1),
          (try_end),
          (eq, ":continue", 1),
          (try_begin),
            (eq, ":faction_no", "fac_player_supporters_faction"),
            (neg|troop_slot_eq, ":troop_no", slot_troop_player_order_state, spai_undefined),
            (neg|troop_slot_eq, ":troop_no", slot_troop_player_order_state, spai_accompanying_army),
            (assign, ":continue", 0),
          (try_end),
          (eq, ":continue", 1),
          (neg|faction_slot_eq, ":faction_no", slot_faction_leader, ":troop_no"),
          
          (assign, ":old_target_to_follow_other_party", -1),
          (try_begin),
            (ge, ":commander_party", 0),
            (assign, ":old_target_to_follow_other_party", ":commander_party"),
          (try_end),
          
          (troop_get_slot, ":hero_renown", ":troop_no", slot_troop_renown),
          
          (assign, ":num_available_to_follow", 0),
          (try_begin),
            (eq, "p_main_party", ":old_target_to_follow_other_party"),
            (val_add, ":num_available_to_follow", 1),
            (eq, "p_main_party", ":old_target_to_follow_other_party"),
            (val_add, ":num_available_to_follow", 999),
          (try_end),
          (try_for_range, ":other_hero", faction_heroes_begin, faction_heroes_end),
            (neq, ":other_hero", ":troop_no"),
            (store_troop_faction, ":troop_faction", ":other_hero"),
            (eq, ":troop_faction", ":faction_no"),
            (troop_get_slot, ":other_party", ":other_hero", slot_troop_leaded_party),
            (ge, ":other_party", 0),
            (troop_get_slot, ":other_hero_renown", ":other_hero", slot_troop_renown),
            (lt, ":hero_renown", ":other_hero_renown"),
            (neg|party_slot_ge, ":other_party", slot_party_commander_party, 0), #other party is not under command itself.
            (store_distance_to_party_from_party, ":dist", ":other_party", ":party_no"),
            (lt, ":dist", 25),
            (party_slot_eq, ":other_party", slot_party_follow_me, 1),
            (val_add, ":num_available_to_follow", 1),
            (eq, ":other_party", ":old_target_to_follow_other_party"),
            (val_add, ":num_available_to_follow", 999),
          (try_end),
          (gt, ":num_available_to_follow", 0),
          (store_random_in_range, ":random_party_to_follow", 0, ":num_available_to_follow"),
          (try_begin),
            (eq, "p_main_party", ":old_target_to_follow_other_party"),
            (val_sub, ":random_party_to_follow", 1),
            (try_begin),
              (eq, "p_main_party", ":old_target_to_follow_other_party"),
              (val_sub, ":random_party_to_follow", 999),
            (try_end),
            (lt, ":random_party_to_follow", 0),
            (store_mul, ":chance", 100, "$g_average_center_value_per_faction"),#this value is calculated at the beginning of the game
            (val_div, ":chance", ":faction_center_value"),
            (val_max, ":chance", 10),
            (assign, ":chance_to_follow_other_party", ":chance"),
            (val_mul, ":chance_to_follow_other_party", 2),#trp_player is always the leader
            (assign, ":target_to_follow_other_party", "p_main_party"),
            (eq, ":old_target_to_follow_other_party", ":target_to_follow_other_party"),
            (val_mul, ":chance_to_follow_other_party", 100),
          (try_end),
          (try_for_range, ":other_hero", faction_heroes_begin, faction_heroes_end),
            (eq, ":target_to_follow_other_party", -1),
            (neq, ":other_hero", ":troop_no"),
            (store_troop_faction, ":troop_faction", ":other_hero"),
            (eq, ":troop_faction", ":faction_no"),
            (troop_get_slot, ":other_party", ":other_hero", slot_troop_leaded_party),
            (ge, ":other_party", 0),
            (troop_get_slot, ":other_hero_renown", ":other_hero", slot_troop_renown),
            (lt, ":hero_renown", ":other_hero_renown"),
            (neg|party_slot_ge, ":other_party", slot_party_commander_party, 0), #other party is not under command itself.
            (store_distance_to_party_from_party, ":dist", ":other_party", ":party_no"),
            (lt, ":dist", 25),
            (party_slot_eq, ":other_party", slot_party_follow_me, 1),
            (val_sub, ":random_party_to_follow", 1),
            (try_begin),
              (eq, ":other_party", ":old_target_to_follow_other_party"),
              (val_sub, ":random_party_to_follow", 999),
            (try_end),
            (lt, ":random_party_to_follow", 0),
            (store_mul, ":chance", 100, "$g_average_center_value_per_faction"),#this value is calculated at the beginning of the game
            (val_div, ":chance", ":faction_center_value"),
            (val_max, ":chance", 10),
            (assign, ":chance_to_follow_other_party", ":chance"),
            (try_begin),
              (faction_slot_eq, ":faction_no", slot_faction_leader, ":other_hero"),
              (val_mul, ":chance_to_follow_other_party", 2),
            (try_end),
            (assign, ":target_to_follow_other_party", ":other_party"),
            (eq, ":old_target_to_follow_other_party", ":target_to_follow_other_party"),
            (val_mul, ":chance_to_follow_other_party", 100),
          (try_end),
        (try_end),
        
        (assign, ":sum_chances", ":chance_to_follow_other_party"),
        (val_add, ":sum_chances", 600),
        (store_random_in_range, ":random_no", 0, ":sum_chances"),
        (try_begin),
          (val_sub, ":random_no", ":chance_to_follow_other_party"),
          (lt, ":random_no", 0),
          (party_set_slot, ":party_no", slot_party_commander_party, ":target_to_follow_other_party"),
        (else_try),
          (party_set_slot, ":party_no", slot_party_commander_party, -1),
        (try_end),
      (try_end),
  ]),
  
  
  # script_faction_hero_decide_next_ai_state
  # Input: arg1 = troop_no
  # Output: none
  #called from triggers
  ("faction_hero_decide_next_ai_state",
    [
      (store_script_param_1, ":troop_no"),
      (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
      
      (try_begin),
        (party_get_slot, ":our_strength", ":party_no", slot_party_cached_strength),
        (store_div, ":min_strength_behind", ":our_strength", 2),
        (party_get_slot, ":our_follower_strength", ":party_no", slot_party_follower_strength),
        
        (store_troop_faction, ":faction_no", ":troop_no"),
        
        #find current center
        (assign, ":besieger_party", -1),
        (party_get_attached_to, ":cur_center_no", ":party_no"),
        (try_begin),
          (lt, ":cur_center_no", 0),
          (party_get_cur_town, ":cur_center_no", ":party_no"),
        (try_end),
        (try_begin),
          (neg|is_between, ":cur_center_no", centers_begin, centers_end),
          (assign, ":cur_center_no", -1),
          (assign, ":cur_center_nearby_strength", 0),
          (store_sub, ":cur_center_left_strength", 1000000),#must be higher than our strength
        (else_try),
          (party_get_slot, ":cur_center_nearby_strength", ":cur_center_no", slot_party_nearby_friend_strength),
          (store_sub, ":cur_center_left_strength", ":cur_center_nearby_strength", ":our_strength"),
          (party_get_slot, ":besieger_party", ":cur_center_no", slot_center_is_besieged_by),
          (try_begin),
            (neg|party_is_active, ":besieger_party"),
            (assign, ":besieger_party", -1),
          (try_end),
          (store_faction_of_party, ":cur_center_faction", ":cur_center_no"),
          (store_relation, ":cur_center_relation", ":cur_center_faction", ":faction_no"),
        (try_end),
        
        (party_get_slot, ":old_ai_state", ":party_no", slot_party_ai_state),
        (party_get_slot, ":old_ai_object", ":party_no", slot_party_ai_object),
        
        (assign, ":cancel", 0),
        (try_begin), #if we are retreating to a center keep retreating
          (eq, ":old_ai_state", spai_retreating_to_center),
          (neg|party_is_in_any_town, ":party_no"),
          (assign, ":cancel", 1),
        (try_end),
        (eq, ":cancel", 0),
        
        ##        (faction_get_slot, ":faction_ai_state",  ":faction_no", slot_faction_ai_state),
        ##        (faction_get_slot, ":faction_ai_object", ":faction_no", slot_faction_ai_object),
        
        (faction_get_slot, ":num_towns", ":faction_no", slot_faction_num_towns),
        (store_mul, ":faction_center_value", ":num_towns", 2),
        (faction_get_slot, ":num_castles", ":faction_no", slot_faction_num_castles),
        (val_add, ":faction_center_value", ":num_castles"),
        (val_mul, ":faction_center_value", 10),
        (val_max, ":faction_center_value", 5),
        
        (assign, ":chance_move_to_home_center", 0),
        (assign, ":target_move_to_home_center", -1),
        (assign, ":chance_move_to_other_center", 0),
        (assign, ":target_move_to_other_center", -1),
        (assign, ":chance_besiege_enemy_center", 0),
        (assign, ":target_besiege_enemy_center", -1),
        (assign, ":chance_patrol_around_center", 0),
        (assign, ":target_patrol_around_center", -1),
        (assign, ":chance_raid_around_center", 0),
        (assign, ":target_raid_around_center", -1),
        (assign, ":chance_recruit_troops", 0),
        (assign, ":target_recruit_troops", -1),
        
        (try_begin),#Moving to home center
          (eq, ":besieger_party", -1),
          (assign, ":old_target_move_to_home_center", -1),
          (try_begin),
            (eq, ":old_ai_state", spai_holding_center),
            (assign, ":old_target_move_to_home_center", ":old_ai_object"),
          (try_end),
          (try_begin),
            (is_between, ":cur_center_no", centers_begin, centers_end), #already in our center
            (party_slot_eq,  ":cur_center_no", slot_mainplanet_lord, ":troop_no"),
            (assign, ":target_move_to_home_center", ":cur_center_no"),
            (assign, ":chance_move_to_home_center", 100),
          (try_end),
          (try_begin),
            (eq, ":target_move_to_home_center", -1),
            (this_or_next|gt, "$party_relative_strength", 20),#stay inside if strength is too low
            (eq, ":cur_center_no", -1),
            (ge, ":cur_center_left_strength", ":min_strength_behind"),#stay inside if center strength is too low
            (call_script, "script_cf_troop_get_random_leaded_walled_center_with_less_strength_priority", ":troop_no", ":old_target_move_to_home_center"),#Can fail
            (assign, ":target_move_to_home_center", reg0),
            (assign, ":chance_move_to_home_center", 50),
            (try_begin),
              (eq, ":old_target_move_to_home_center", ":target_move_to_home_center"),
              (val_mul, ":chance_move_to_home_center", 100),
            (try_end),
          (try_end),
        (try_end),
        (try_begin),#Moving to other center
          (try_begin),
            (ge, ":besieger_party", 0),
            (ge, ":cur_center_relation", 0),
            (assign, ":chance_move_to_other_center", 50000),
            (assign, ":target_move_to_other_center", ":cur_center_no"),
          (else_try),
            (assign, ":old_target_move_to_other_center", -1),
            (try_begin),
              (eq, ":old_ai_state", spai_holding_center),
              (assign, ":old_target_move_to_other_center", ":old_ai_object"),
            (try_end),
            ##            (try_begin),
            ##              (party_slot_eq, ":party_no", slot_party_ai_state, spai_holding_center),
            ##              (party_get_slot, ":target_move_to_other_center", ":party_no", slot_party_ai_object),
            ##              (try_begin),
            ##                (call_script, "script_party_calculate_regular_strength", ":target_move_to_other_center"),
            ##                (assign, ":strength", reg0),
            ##                (le, ":strength", 10),
            ##                (assign, ":chance_move_to_other_center", 500),
            ##              (else_try),
            ##                (assign, ":chance_move_to_other_center", 30),
            ##              (try_end),
            ##            (try_end),
            (try_begin),
              (eq, ":target_move_to_other_center", -1),
              (try_begin),
                (this_or_next|le, "$party_relative_strength", 20),#stay inside if strength is too low
                (lt, ":cur_center_left_strength", ":min_strength_behind"),#stay inside if center strength is too low
                (is_between, ":cur_center_no", centers_begin, centers_end),
                (ge, ":cur_center_relation", 0),
                (assign, ":chance_move_to_other_center", 500),
                (assign, ":target_move_to_other_center", ":cur_center_no"),
              (else_try),
                (call_script, "script_cf_select_random_walled_center_with_faction_and_less_strength_priority", ":faction_no", ":old_target_move_to_other_center"),
                (assign, ":target_move_to_other_center", reg0),
                (assign, ":chance_move_to_other_center", 10),
                (party_get_slot, ":lord_of_center", ":target_move_to_other_center", slot_mainplanet_lord),
                (try_begin),
                  (call_script, "script_cf_troop_check_troop_is_enemy", ":troop_no", ":lord_of_center"),
                  (assign, ":chance_move_to_other_center", 1),
                (try_end),
                (try_begin),
                  (eq, ":old_target_move_to_other_center", ":target_move_to_other_center"),
                  (val_mul, ":chance_move_to_other_center", 1000),
                (try_end),
              (try_end),
            (try_end),
          (try_end),
        (try_end),
        (try_begin),
          (lt, "$party_relative_strength", 50),
          (store_sub, ":factor", 100, "$party_relative_strength"),
          (try_begin),
            (gt, ":chance_move_to_home_center", 0),
            (val_mul, ":chance_move_to_home_center", 200),
            (val_div, ":chance_move_to_home_center", ":factor"),
          (else_try),
            (val_mul, ":chance_move_to_other_center", 200),
            (val_div, ":chance_move_to_other_center", ":factor"),
          (try_end),
        (try_end),
        (try_begin),
          (gt,  "$ratio_of_prisoners", 50),
          (try_begin),
            (gt, ":chance_move_to_home_center", 0),
            (val_mul, ":chance_move_to_home_center", 2),
          (else_try),
            (val_mul, ":chance_move_to_other_center", 2),
          (try_end),
        (try_end),
        (try_begin), #Recruiting troops
          (eq, ":besieger_party", -1),
          (ge, ":cur_center_left_strength", ":min_strength_behind"),#stay inside if center strength is too low
          (assign, ":old_target_recruit_troops", -1),
          (try_begin),
            (eq, ":old_ai_state", spai_recruiting_troops),
            (assign, ":old_target_recruit_troops", ":old_ai_object"),
          (try_end),
          (troop_get_slot, ":original_faction", ":troop_no", slot_troop_original_faction),
          (faction_get_slot, ":original_faction_culture", ":original_faction", slot_faction_culture),
          (assign, ":num_villages", 0),
          (try_for_range, ":minorplanet_no", minorplanet_begin, minorplanet_end),
            (store_faction_of_party, ":minorplanet_faction_no", ":minorplanet_no"),
            (store_relation, ":reln", ":minorplanet_faction_no", ":faction_no"),
            (this_or_next|ge, ":reln", 0),
            (party_slot_eq, ":minorplanet_no", slot_center_culture, ":original_faction_culture"),
            (assign, ":faction_factor", 1),
            (try_begin),
              (eq, ":minorplanet_faction_no", ":faction_no"),
              (assign, ":faction_factor", 20),
            (try_end),
            (assign, ":amount_factor", 1),
            (party_get_slot, ":volunteer_amount", ":minorplanet_no", slot_center_npc_volunteer_troop_amount),
            (try_begin),
              (gt, ":volunteer_amount", 0),
              (val_add, ":volunteer_amount", 5),
              (val_add, ":amount_factor", ":volunteer_amount"),
            (try_end),
            (store_distance_to_party_from_party, ":dist", ":minorplanet_no", ":party_no"),
            (store_sub, ":dist_factor", 100, ":dist"),
            (val_max, ":dist_factor", 10),
            (assign, ":raid_factor", 100),
            (try_begin),
              (party_slot_eq, ":minorplanet_no", slot_minorplanet_state, svs_being_raided),
              (assign, ":raid_factor", 1),
            (try_end),
            (store_mul, ":minorplanet_point", ":faction_factor", ":dist_factor"),
            (val_mul, ":minorplanet_point", ":raid_factor"),
            (val_mul, ":minorplanet_point", ":amount_factor"),
            (try_begin),
              (eq, ":minorplanet_no", ":old_target_recruit_troops"),
              (val_mul, ":minorplanet_point", 100),
            (try_end),
            (val_add, ":num_villages", ":minorplanet_point"),
          (try_end),
          (gt, ":num_villages", 0),
          (store_random_in_range, ":random_minorplanet_no", 0, ":num_villages"),
          (try_for_range, ":minorplanet_no", minorplanet_begin, minorplanet_end),
            (eq, ":target_recruit_troops", -1),
            (store_faction_of_party, ":minorplanet_faction_no", ":minorplanet_no"),
            (store_relation, ":reln", ":minorplanet_faction_no", ":faction_no"),
            (this_or_next|ge, ":reln", 0),
            (party_slot_eq, ":minorplanet_no", slot_center_culture, ":original_faction_culture"),
            (assign, ":faction_factor", 1),
            (try_begin),
              (eq, ":minorplanet_faction_no", ":faction_no"),
              (assign, ":faction_factor", 20),
            (try_end),
            (assign, ":amount_factor", 1),
            (party_get_slot, ":volunteer_amount", ":minorplanet_no", slot_center_npc_volunteer_troop_amount),
            (try_begin),
              (gt, ":volunteer_amount", 0),
              (val_add, ":volunteer_amount", 5),
              (val_add, ":amount_factor", ":volunteer_amount"),
            (try_end),
            (store_distance_to_party_from_party, ":dist", ":minorplanet_no", ":party_no"),
            (store_sub, ":dist_factor", 100, ":dist"),
            (val_max, ":dist_factor", 10),
            (assign, ":raid_factor", 100),
            (try_begin),
              (party_slot_eq, ":minorplanet_no", slot_minorplanet_state, svs_being_raided),
              (assign, ":raid_factor", 1),
            (try_end),
            (store_mul, ":minorplanet_point", ":faction_factor", ":dist_factor"),
            (val_mul, ":minorplanet_point", ":raid_factor"),
            (val_mul, ":minorplanet_point", ":amount_factor"),
            (try_begin),
              (eq, ":minorplanet_no", ":old_target_recruit_troops"),
              (val_mul, ":minorplanet_point", 100),
            (try_end),
            (val_sub, ":random_minorplanet_no", ":minorplanet_point"),
            (lt, ":random_minorplanet_no", 0),
            (assign, ":target_recruit_troops", ":minorplanet_no"),
            (assign, ":chance_recruit_troops", 3),
            (try_begin),
              (eq, ":old_target_recruit_troops", ":target_recruit_troops"),
              (val_mul, ":chance_recruit_troops", 1000),
            (try_end),
          (try_end),
        (try_end),
        (try_begin), #raid villages
          (eq, ":besieger_party", -1),
          (ge, ":cur_center_left_strength", ":min_strength_behind"),#stay inside if center strength is too low
          (gt, "$party_relative_strength", 75),
          (lt,  "$ratio_of_prisoners", 50),
          (assign, ":old_target_raid_around_center", -1),
          (try_begin),
            (eq, ":old_ai_state", spai_raiding_around_center),
            (assign, ":old_target_raid_around_center", ":old_ai_object"),
          (try_end),
          (assign, ":num_villages", 0),
          (try_for_range, ":enemy_minorplanet_no", minorplanet_begin, minorplanet_end),
            (call_script, "script_get_center_faction_relation_including_player", ":enemy_minorplanet_no", ":faction_no"),
            (lt, reg0, 0),
            (assign, ":raided_by_self", 0),
            (try_begin),
              (party_slot_eq, ":enemy_minorplanet_no", slot_minorplanet_state, svs_being_raided),
              (party_slot_eq, ":enemy_minorplanet_no", slot_minorplanet_raided_by, ":party_no"),
              (assign, ":raided_by_self", 1),
            (try_end),
            (this_or_next|party_slot_eq, ":enemy_minorplanet_no", slot_minorplanet_state, 0), #village is not already raided
            (eq, ":raided_by_self", 1),
            (store_distance_to_party_from_party, ":dist", ":enemy_minorplanet_no", ":party_no"),
            (store_sub, ":dist_factor", 75, ":dist"),
            (val_max, ":dist_factor", 3),
            (val_add, ":num_villages", ":dist_factor"),
            (eq, ":enemy_minorplanet_no", ":old_target_raid_around_center"),
            (val_add, ":num_villages", 10000),
          (try_end),
          (gt, ":num_villages", 0),
          (store_random_in_range, ":random_minorplanet_no", 0, ":num_villages"),
          (try_for_range, ":enemy_minorplanet_no", minorplanet_begin, minorplanet_end),
            (eq, ":target_raid_around_center", -1),
            (call_script, "script_get_center_faction_relation_including_player", ":enemy_minorplanet_no", ":faction_no"),
            (lt, reg0, 0),
            (assign, ":raided_by_self", 0),
            (try_begin),
              (party_slot_eq, ":enemy_minorplanet_no", slot_minorplanet_state, svs_being_raided),
              (party_slot_eq, ":enemy_minorplanet_no", slot_minorplanet_raided_by, ":party_no"),
              (assign, ":raided_by_self", 1),
            (try_end),
            (this_or_next|party_slot_eq, ":enemy_minorplanet_no", slot_minorplanet_state, 0), #village is not already raided
            (eq, ":raided_by_self", 1),
            (store_distance_to_party_from_party, ":dist", ":enemy_minorplanet_no", ":party_no"),
            (store_sub, ":dist_factor", 75, ":dist"),
            (val_max, ":dist_factor", 3),
            (val_sub, ":random_minorplanet_no", ":dist_factor"),
            (try_begin),
              (eq, ":enemy_minorplanet_no", ":old_target_raid_around_center"),
              (val_sub, ":random_minorplanet_no", 10000),
            (try_end),
            (lt, ":random_minorplanet_no", 0),
            (assign, ":target_raid_around_center", ":enemy_minorplanet_no"),
            (assign, ":chance_raid_around_center", 30),
            (try_begin),
              (eq, ":old_target_raid_around_center", ":target_raid_around_center"),
              (val_mul, ":chance_raid_around_center", 100),
            (try_end),
          (try_end),
        (try_end),
        (try_begin), #besiege center
          (eq, ":besieger_party", -1),
          (ge, ":cur_center_left_strength", ":min_strength_behind"),#stay inside if center strength is too low
          (assign, ":continue", 0),
          (try_begin),
            (eq, ":old_ai_state", spai_besieging_center),
            (gt, "$party_relative_strength", 30),
            (assign, ":continue", 1),
          (else_try),
            (gt, "$party_relative_strength", 75),
            (lt, "$ratio_of_prisoners", 50),
            (assign, ":continue", 1),
          (try_end),
          (eq, ":continue", 1),
          
          (assign, ":our_estimated_str", ":our_follower_strength"),
          (val_add, ":our_estimated_str", ":our_strength"),
          
          (assign, ":old_target_besiege_enemy_center", -1),
          (try_begin),
            (eq, ":old_ai_state", spai_besieging_center),
            (assign, ":old_target_besiege_enemy_center", ":old_ai_object"),
          (try_end),
          
          (assign, ":best_besiege_center", -1),
          (assign, ":best_besiege_center_score", 0),
          (try_for_range, ":enemy_walled_center", walled_centers_begin, walled_centers_end),
            (party_get_slot, ":other_besieger_party", ":enemy_walled_center", slot_center_is_besieged_by),
            (assign, ":besieger_own_faction", 0),
            (try_begin),
              (ge, ":other_besieger_party", 0),
              (party_is_active, ":other_besieger_party"),
              (store_faction_of_party, ":besieger_faction", ":other_besieger_party"),
              (eq, ":besieger_faction", ":faction_no"),
              (assign, ":besieger_own_faction", 1),
            (try_end),
            (this_or_next|eq, ":other_besieger_party", -1),
            (eq, ":besieger_own_faction", 1),
            (call_script, "script_get_center_faction_relation_including_player", ":enemy_walled_center", ":faction_no"),
            (assign, ":reln", reg0),
            (lt, ":reln", 0),
            (val_mul, ":reln", -1),
            (val_add, ":reln", 50),
            (store_distance_to_party_from_party, ":dist", ":enemy_walled_center", ":party_no"),
            (store_sub, ":dist_factor", 75, ":dist"),
            (val_max, ":dist_factor", 3),
            (party_get_slot, ":center_str", ":enemy_walled_center", slot_party_cached_strength),
            (party_get_slot, ":center_near_str", ":enemy_walled_center", slot_party_nearby_friend_strength),
            (val_add, ":center_str", ":center_near_str"),
            
            (store_mul, ":relative_center_str", ":center_str", 100),
            (val_div, ":relative_center_str", ":our_estimated_str"),
            (store_sub, ":center_score", 1000, ":relative_center_str"),
            (val_max, ":center_score", 1),
            
            (val_mul, ":center_score", ":reln"),
            (val_mul, ":center_score", ":dist_factor"),
            
            (try_begin),
              (party_slot_eq, ":enemy_walled_center", slot_mainplanet_lord, "trp_player"),
              (call_script, "script_troop_get_player_relation", ":troop_no"),
              (assign, ":player_relation", reg0),
              #(troop_get_slot, ":player_relation", ":troop_no", slot_troop_player_relation),
              (lt, ":player_relation", 0),
              (store_sub, ":multiplier", 50, ":player_relation"),
              (val_mul, ":center_score", ":multiplier"),
              (val_div, ":center_score", 50),
            (try_end),
            
            (try_begin),
              (eq, ":enemy_walled_center", ":old_target_besiege_enemy_center"),
              (val_mul, ":center_score", 100),
            (try_end),
            (try_begin),
              (gt, ":center_score", ":best_besiege_center_score"),
              (assign, ":best_besiege_center_score", ":center_score"),
              (assign, ":best_besiege_center", ":enemy_walled_center"),
            (try_end),
          (try_end),
          
          (ge, ":best_besiege_center", 0),
          (assign, ":chance_besiege_enemy_center", 20),
          (assign, ":target_besiege_enemy_center", ":best_besiege_center"),
          (try_begin),
            (eq, ":old_target_besiege_enemy_center", ":target_besiege_enemy_center"),
            (val_mul, ":chance_besiege_enemy_center", 100),
          (try_end),
        (try_end),
        (try_begin), #patrol alarmed center.
          (eq, ":besieger_party", -1),
          (ge, ":cur_center_left_strength", ":min_strength_behind"),#stay inside if center strength is too low
          (ge, "$party_relative_strength", 60),
          (try_begin),
            (party_slot_eq, ":party_no", slot_party_ai_state, spai_patrolling_around_center),
            (party_get_slot, ":target_patrol_around_center", ":party_no", slot_party_ai_object),
          (try_end),
          
          (assign, ":old_target_patrol_around_center", -1),
          (try_begin),
            (eq, ":old_ai_state", spai_patrolling_around_center),
            (assign, ":old_target_patrol_around_center", ":old_ai_object"),
          (try_end),
          
          (assign, ":best_patrol_score", 0),
          (assign, ":best_patrol_target", -1),
          (try_for_range, ":center_no", centers_begin, centers_end), #find closest center that has spotted enemies.
            (store_faction_of_party, ":center_faction", ":center_no"),
            (eq, ":center_faction", ":faction_no"),
            (store_distance_to_party_from_party, ":distance", ":party_no", ":center_no"),
            (store_sub, ":this_center_score", 100, ":distance"),
            (val_max, ":this_center_score", 1),
            (try_begin),
              (party_slot_ge, ":center_no", slot_center_last_spotted_enemy, 0),
              (val_mul, ":this_center_score", 100),
            (try_end),
            (try_begin),
              (party_slot_eq, ":center_no", slot_mainplanet_lord, ":troop_no"),
              (val_mul, ":this_center_score", 2),
            (try_end),
            (try_begin),
              (eq, ":center_no", ":old_target_patrol_around_center"),
              (val_mul, ":this_center_score", 1000),
            (try_end),
            (try_begin),
              (gt, ":this_center_score", ":best_patrol_score"),
              (assign, ":best_patrol_score", ":this_center_score"),
              (assign, ":best_patrol_target", ":center_no"),
            (try_end),
          (try_end),
          (try_begin),
            (gt, ":best_patrol_score", 0),
            (assign, ":target_patrol_around_center", ":best_patrol_target"),
          (try_end),
          (try_begin),
            (is_between, ":target_patrol_around_center", centers_begin, centers_end),
            (assign, ":chance_patrol_around_center", 80),
          (try_end),
          (try_begin),
            (troop_slot_ge, ":troop_no", slot_troop_change_to_faction, 1),
            (val_mul, ":chance_patrol_around_center", 10),
          (try_end),
          (try_begin),
            (eq, ":old_target_patrol_around_center", ":target_patrol_around_center"),
            (val_mul, ":chance_patrol_around_center", 100),
          (try_end),
        (try_end),
        
        ##        (try_begin), #cancel actions
        ##          (party_get_slot, ":ai_state", ":party_no", slot_party_ai_state),
        ##          (party_get_slot, ":ai_object", ":party_no", slot_party_ai_object),
        ##          (neq, ":ai_state", spai_undefined),
        ##          (assign, ":cancel_cur_action", 0),
        ##          (try_begin),
        ##            (eq, ":ai_state", spai_patrolling_around_center),
        ##            (neg|party_slot_ge, ":ai_object", slot_center_last_spotted_enemy, 0),
        ##            (store_random_in_range, ":rand", 0, 100),
        ##            (lt, ":rand", 25),
        ##            (assign, ":cancel_cur_action", 1),
        ##          (else_try),
        ##            (this_or_next|eq, ":ai_state", spai_besieging_center),
        ##            (eq, ":ai_state", spai_raiding_around_center),
        ##            (store_faction_of_party, ":ai_object_faction", ":ai_object"),
        ##            (store_relation, ":ai_object_relation", ":ai_object_faction", ":faction_no"),
        ##            (ge, ":ai_object_relation", 0),
        ##            (assign, ":cancel_cur_action", 1),
        ##          (try_end),
        ##          (eq, ":cancel_cur_action", 0),
        ##          (assign, ":chance_stay", 100),
        ##        (try_end),
        
        ##        (try_begin),
        ##          (eq, ":siege_going_badly", 1),
        ##          (assign, ":chance_besiege_enemy_center", 0),
        ##          (assign, ":chance_stay", 0),
        ##        (try_end),
        ##        (try_begin),
        ##          (eq, ":siege_going_well", 1),
        ##          (assign, ":chance_move_to_home_center", 0),
        ##          (assign, ":chance_move_to_other_center", 0),
        ##          (assign, ":chance_patrol_around_center", 0),
        ##          (assign, ":chance_besiege_enemy_center", 0),
        ##          (assign, ":chance_help_besieged_center", 0),
        ##        (try_end),
        
        (assign, ":sum_chances", ":chance_move_to_home_center"),
        (val_add, ":sum_chances", ":chance_move_to_other_center"),
        (val_add, ":sum_chances", ":chance_recruit_troops"),
        (val_add, ":sum_chances", ":chance_raid_around_center"),
        (val_add, ":sum_chances", ":chance_besiege_enemy_center"),
        (val_add, ":sum_chances", ":chance_patrol_around_center"),
        ##        (val_add, ":sum_chances", ":chance_stay"),
        (val_max, ":sum_chances", 1),
        (store_random_in_range, ":random_no", 0, ":sum_chances"),
        (try_begin),
          (val_sub, ":random_no", ":chance_move_to_home_center"),
          (lt, ":random_no", 0),
          (call_script, "script_party_set_ai_state", ":party_no", spai_holding_center, ":target_move_to_home_center"),
          (party_set_flags, ":party_no", pf_default_behavior, 1),
          (party_set_slot, ":party_no", slot_party_commander_party, -1),
        (else_try),
          (val_sub, ":random_no", ":chance_move_to_other_center"),
          (lt, ":random_no", 0),
          (call_script, "script_party_set_ai_state", ":party_no", spai_holding_center, ":target_move_to_other_center"),
          (party_set_slot, ":party_no", slot_party_commander_party, -1),
        (else_try),
          (val_sub, ":random_no", ":chance_recruit_troops"),
          (lt, ":random_no", 0),
          (call_script, "script_party_set_ai_state", ":party_no", spai_recruiting_troops, ":target_recruit_troops"),
          (party_set_slot, ":party_no", slot_party_commander_party, -1),
        (else_try),
          (val_sub, ":random_no", ":chance_raid_around_center"),
          (lt, ":random_no", 0),
          (call_script, "script_party_set_ai_state", ":party_no", spai_raiding_around_center, ":target_raid_around_center"),
          (party_set_slot, ":party_no", slot_party_commander_party, -1),
        (else_try),
          (val_sub, ":random_no", ":chance_besiege_enemy_center"),
          (lt, ":random_no", 0),
          (call_script, "script_party_set_ai_state", ":party_no", spai_besieging_center, ":target_besiege_enemy_center"),
        (else_try),
          (val_sub, ":random_no", ":chance_patrol_around_center"),
          (lt, ":random_no", 0),
          (call_script, "script_party_set_ai_state", ":party_no", spai_patrolling_around_center, ":target_patrol_around_center"),
          (party_set_slot, ":party_no", slot_party_commander_party, -1),
        (else_try),
          (call_script, "script_party_set_ai_state", ":party_no", spai_undefined, -1),
          (party_set_slot, ":party_no", slot_party_commander_party, -1),
        (try_end),
      (try_end),
  ]),
  
  
  
  # script_process_faction_parties_ai
  # This is called more frequently than decide_faction_parties_ai
  # Input: none
  # Output: none
  #called from triggers
  ("process_faction_parties_ai",
    [
      (try_for_range, ":troop_no", faction_heroes_begin, faction_heroes_end),
        (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_faction_hero),
        #(troop_slot_eq, ":troop_no", slot_troop_is_prisoner, 0),
        (neg|troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
        (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
        (gt, ":party_no", 0),
        (call_script, "script_process_hero_ai", ":troop_no"),
      (try_end),
  ]),
  
  
  
  # script_process_hero_ai
  # This is called more frequently than script_decide_faction_party_ais
  # Input: none
  # Output: none
  #called from triggers
  ("process_hero_ai",
    [
      (store_script_param_1, ":troop_no"),
      (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
      (store_faction_of_party, ":faction_no", ":party_no"),
      (party_get_slot, ":ai_state", ":party_no", slot_party_ai_state),
      (party_get_slot, ":ai_object", ":party_no", slot_party_ai_object),
      (try_begin),
        (eq, ":ai_state", spai_besieging_center),
        (try_begin),
          (party_slot_eq, ":ai_object", slot_center_is_besieged_by, -1),
          (store_distance_to_party_from_party, ":distance", ":party_no", ":ai_object"),
          (lt, ":distance", 3),
          (try_begin),
            (party_slot_ge, ":party_no", slot_party_commander_party, 0),
            (party_get_slot, ":commander_party", ":party_no", slot_party_commander_party),
            (party_set_slot, ":ai_object", slot_center_is_besieged_by, ":commander_party"),
          (else_try),
            (party_set_slot, ":ai_object", slot_center_is_besieged_by, ":party_no"),
          (try_end),
          (store_current_hours, ":cur_hours"),
          (party_set_slot, ":ai_object", slot_center_siege_begin_hours, ":cur_hours"),
          
          (str_store_party_name_link, s1, ":ai_object"),
          (str_store_troop_name_link, s2, ":troop_no"),
          (str_store_faction_name_link, s3, ":faction_no"),
          # HC - Select the message color based on the circumstances. reg20 holds the color.
          # TODO: is ":ai_object" going to work?
          (call_script, "script_get_message_color", news_center_under_siege, ":ai_object"),
          (display_log_message, "@{s1} has been besieged by {s2} of {s3}.", reg20),
          #(display_log_message, "@{s1} has been besieged by {s2} of {s3}.", 0xFF2222),
          (try_begin),
            (store_faction_of_party, ":ai_object_faction", ":ai_object"),
            (this_or_next|party_slot_eq, ":ai_object", slot_mainplanet_lord, "trp_player"),
            (eq, ":ai_object_faction", "fac_player_supporters_faction"),
            (call_script, "script_add_notification_menu", "mnu_notification_center_under_siege", ":ai_object", ":troop_no"),
          (try_end),
          (call_script, "script_minorplanet_set_state", ":ai_object", svs_under_siege),
          (assign, "$g_recalculate_ais", 1),
        (try_end),
      (else_try),
        (eq, ":ai_state", spai_recruiting_troops),
        (try_begin),
          (store_distance_to_party_from_party, ":distance", ":party_no", ":ai_object"),
          (lt, ":distance", 3),
          (store_current_hours, ":cur_hours"),
          (party_get_slot, ":substate", ":party_no", slot_party_ai_substate),
          (val_add, ":substate", 1),
          (party_set_slot, ":party_no", slot_party_ai_substate, ":substate"),
          (try_begin),
            (ge, ":substate", 4),
            (party_set_slot, ":party_no", slot_party_ai_substate, ":cur_hours"),
            (call_script, "script_party_set_ai_state", ":party_no", spai_undefined, -1),
            (party_set_flags, ":party_no", pf_default_behavior, 0),
            (party_set_slot, ":party_no", slot_party_commander_party, -1),
            (party_get_slot, ":troop_type", ":ai_object", slot_center_npc_volunteer_troop_type),
            (party_get_slot, ":troop_amount", ":ai_object", slot_center_npc_volunteer_troop_amount),
            (party_set_slot, ":ai_object", slot_center_npc_volunteer_troop_amount, -1),
            (party_add_members, ":party_no", ":troop_type", ":troop_amount"),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":ai_state", spai_raiding_around_center),
        (party_slot_eq, ":party_no", slot_party_ai_substate, 0),
        (assign, ":selected_village", 0),
        (try_for_range, ":enemy_minorplanet_no", minorplanet_begin, minorplanet_end),
          (eq, ":selected_village", 0),
          (store_faction_of_party, ":enemy_minorplanet_faction", ":enemy_minorplanet_no"),
          (try_begin),
            (party_slot_eq, ":enemy_minorplanet_no", slot_mainplanet_lord, "trp_player"),
            (store_relation, ":reln", "fac_player_supporters_faction", ":faction_no"),
          (else_try),
            (store_relation, ":reln", ":enemy_minorplanet_faction", ":faction_no"),
          (try_end),
          (lt, ":reln", 0),
          (store_distance_to_party_from_party, ":dist", ":enemy_minorplanet_no", ":party_no"),
          (lt, ":dist", 15),
          (party_slot_eq, ":enemy_minorplanet_no", slot_minorplanet_state, 0), #village is not already raided
          #CHANGE STATE TO RAID THIS VILLAGE
          (assign, ":selected_village", ":enemy_minorplanet_no"),
        (try_end),
        (try_begin),
          (eq, ":selected_village", 0),
          (is_between, ":ai_object", minorplanet_begin, minorplanet_end),
          (assign, ":selected_village", ":ai_object"),
        (try_end),
        (try_begin),
          (gt, ":selected_village", 0),
          (call_script, "script_party_set_ai_state", ":party_no", spai_raiding_around_center, ":selected_village"),
          (try_begin),
            (faction_slot_eq, ":faction_no", slot_faction_marshall, ":troop_no"),
            (faction_slot_eq, ":faction_no", slot_faction_ai_state, sfai_raiding_village),
            (faction_set_slot, ":faction_no", slot_faction_ai_object, ":selected_village"),
          (try_end),
          (party_get_position, pos1, ":selected_village"),
          (map_get_random_position_around_position, pos2, pos1, 1),
          (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_point),
          (party_set_ai_target_position, ":party_no", pos2),
          (party_set_ai_object, ":party_no", ":selected_village"),
          (party_set_slot, ":party_no", slot_party_ai_substate, 1),
        (try_end),
      (else_try),
        (eq, ":ai_state", spai_raiding_around_center),#substate is 1
        (try_begin),
          (store_distance_to_party_from_party, ":distance", ":party_no", ":ai_object"),
          (lt, ":distance", 2),
          (try_begin),
            (party_slot_eq, ":ai_object", slot_minorplanet_state, 0),
            (call_script, "script_minorplanet_set_state", ":ai_object", svs_being_raided),
            (party_set_slot, ":ai_object", slot_minorplanet_raided_by, ":party_no"),
            (try_begin),
              (store_faction_of_party, ":minorplanet_faction", ":ai_object"),
              (this_or_next|party_slot_eq, ":ai_object", slot_mainplanet_lord, "trp_player"),
              (eq, ":minorplanet_faction", "fac_player_supporters_faction"),
              (store_distance_to_party_from_party, ":dist", "p_main_party", ":ai_object"),
              (this_or_next|lt, ":dist", 30),
              (party_slot_eq, ":ai_object", slot_center_has_messenger_post, 1),
              (call_script, "script_add_notification_menu", "mnu_notification_minorplanet_raid_started", ":ai_object", ":troop_no"),
            (try_end),
          (else_try),
            (party_slot_eq, ":ai_object", slot_minorplanet_state, svs_being_raided),
          (else_try),
            #if anything other than being_raided leave
            (party_set_slot, ":party_no", slot_party_ai_substate, 0),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":ai_state", spai_retreating_to_center),
        (try_begin),
          (party_get_battle_opponent, ":enemy_party", ":party_no"),
          (ge, ":enemy_party", 0), #we are in a battle! we may be caught in a loop!
          (call_script, "script_party_set_ai_state", ":party_no", spai_undefined, -1),
          (party_set_flags, ":party_no", pf_default_behavior, 0),
          (party_set_slot, ":party_no", slot_party_commander_party, -1),
        (try_end),
      (else_try),
        (eq, ":ai_state", spai_patrolling_around_center),
        (try_begin),
          (party_slot_eq, ":party_no", slot_party_ai_substate, 0),
          (store_distance_to_party_from_party, ":distance", ":party_no", ":ai_object"),
          (lt, ":distance", 3),
          (party_set_slot, ":party_no", slot_party_ai_substate, 1),
          (party_set_ai_behavior, ":party_no", ai_bhvr_patrol_party),
          (party_set_ai_object, ":party_no", ":ai_object"),
        (try_end),
      (else_try),
        (eq, ":ai_state", spai_holding_center),
        (party_get_attached_to, ":cur_town", ":party_no"),
        # Make the party sortie outside, so that it will drive away any enemies??
        (try_begin),
          (is_between, ":cur_town", walled_centers_begin, walled_centers_end),
          (assign, ":sortie_chance", 50),
          (try_begin),
            (party_get_attached_to, ":cur_town", ":party_no"),
            (party_slot_ge, ":party_no", slot_center_is_besieged_by, 0), #town is under siege
            (assign, ":sortie_chance", 5),
          (try_end),
          (store_random_in_range, ":rand", 0, 100),
          (lt, ":rand", ":sortie_chance"),
          (assign, ":enemies_nearby", 0),
          (call_script, "script_party_calculate_regular_strength", ":party_no"),
          (assign, ":our_strength", reg0),
          (try_for_range, ":enemy_hero", faction_heroes_begin, faction_heroes_end),
            (store_troop_faction, ":enemy_hero_faction", ":enemy_hero"),
            (store_relation, ":reln", ":enemy_hero_faction", ":faction_no"),
            (lt, ":reln", 0),
            (troop_get_slot, ":enemy_party", ":enemy_hero", slot_troop_leaded_party),
            (gt, ":enemy_party", 0),
            (party_is_active, ":enemy_party"),
            (store_distance_to_party_from_party, ":dist", ":enemy_party", ":party_no"),
            (lt, ":dist", 7),
            (call_script, "script_party_calculate_regular_strength", "p_collective_enemy"),
            (gt, reg0, ":our_strength"),
            (assign, ":enemies_nearby", 1),
          (try_end),
          (eq, ":enemies_nearby", 0),
          (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
          (party_set_ai_object, ":party_no", ":ai_object"),
          (party_set_flags, ":party_no", pf_default_behavior, 0),
          (party_detach, ":party_no"),
        (try_end),
      (try_end),
  ]),
  
  
  
  # script_select_faction_marshall
  # Input: arg1: faction_no
  # Output: none
  #called from triggers
  ("select_faction_marshall",
    [
      (store_script_param_1, ":faction_no"),
      (faction_get_slot, ":faction_leader", ":faction_no", slot_faction_leader),
      (faction_get_slot, ":old_faction_marshall", ":faction_no", slot_faction_marshall),
      (assign, ":total_renown", 0),
      (try_for_range, ":loop_var", "trp_faction_heroes_including_player_begin", faction_heroes_end),
        (assign, ":cur_troop", ":loop_var"),
        (assign, ":continue", 0),
        (try_begin),
          (eq, ":loop_var", "trp_faction_heroes_including_player_begin"),
          (assign, ":cur_troop", "trp_player"),
          (try_begin),
            (eq, ":faction_no", "$players_faction"),
            (assign, ":continue", 1),
          (try_end),
        (else_try),
          (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_faction_hero),
          (store_troop_faction, ":cur_faction", ":cur_troop"),
          (eq, ":cur_faction", ":faction_no"),
          (troop_get_slot, ":cur_party", ":cur_troop", slot_troop_leaded_party),
          (gt, ":cur_party", 0),
          (party_is_active, ":cur_party"),
          (call_script, "script_party_count_fit_for_battle", ":cur_party"),
          (assign, ":party_fit_for_battle", reg0),
          (call_script, "script_party_get_ideal_size", ":cur_party"),
          (assign, ":ideal_size", reg0),
          (store_mul, ":relative_strength", ":party_fit_for_battle", 100),
          (val_div, ":relative_strength", ":ideal_size"),
          (ge, ":relative_strength", 25),
          (assign, ":continue", 1),
        (try_end),
        (eq, ":continue", 1),
        (troop_get_slot, ":renown", ":cur_troop", slot_troop_renown),
        (try_begin),
          (eq, ":cur_troop", "trp_player"),
          (neq, ":old_faction_marshall", "trp_player"),
          (assign, ":renown", 0),
        (try_end),
        (try_begin),
          (eq, ":cur_troop", ":faction_leader"),
          (val_mul, ":renown", 3),
          (val_div, ":renown", 4),
        (try_end),
        (try_begin),
          (eq, ":cur_troop", ":old_faction_marshall"),
          (val_mul, ":renown", 1000),
        (try_end),
        (val_add, ":total_renown", ":renown"),
      (try_end),
      (assign, ":result", -1),
      (try_begin),
        (gt, ":total_renown", 0),
        (store_random_in_range, ":random_renown", 0, ":total_renown"),
        (try_for_range, ":loop_var", "trp_faction_heroes_including_player_begin", faction_heroes_end),
          (eq, ":result", -1),
          (assign, ":cur_troop", ":loop_var"),
          (assign, ":continue", 0),
          (try_begin),
            (eq, ":loop_var", "trp_faction_heroes_including_player_begin"),
            (assign, ":cur_troop", "trp_player"),
            (try_begin),
              (eq, ":faction_no", "$players_faction"),
              (assign, ":continue", 1),
            (try_end),
          (else_try),
            (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_faction_hero),
            (store_troop_faction, ":cur_faction", ":cur_troop"),
            (eq, ":cur_faction", ":faction_no"),
            (troop_get_slot, ":cur_party", ":cur_troop", slot_troop_leaded_party),
            (gt, ":cur_party", 0),
            (party_is_active, ":cur_party"),
            (call_script, "script_party_count_fit_for_battle", ":cur_party"),
            (assign, ":party_fit_for_battle", reg0),
            (call_script, "script_party_get_ideal_size", ":cur_party"),
            (assign, ":ideal_size", reg0),
            (store_mul, ":relative_strength", ":party_fit_for_battle", 100),
            (val_div, ":relative_strength", ":ideal_size"),
            (ge, ":relative_strength", 25),
            (assign, ":continue", 1),
          (try_end),
          (eq, ":continue", 1),
          (troop_get_slot, ":renown", ":cur_troop", slot_troop_renown),
          (try_begin),
            (eq, ":cur_troop", "trp_player"),
            (neq, ":old_faction_marshall", "trp_player"),
            (assign, ":renown", 0),
          (try_end),
          (try_begin),
            (eq, ":cur_troop", ":faction_leader"),
            (val_mul, ":renown", 3),
            (val_div, ":renown", 4),
          (try_end),
          (try_begin),
            (eq, ":cur_troop", ":old_faction_marshall"),
            (val_mul, ":renown", 1000),
          (try_end),
          (val_sub, ":random_renown", ":renown"),
          (lt, ":random_renown", 0),
          (assign, ":result", ":cur_troop"),
        (try_end),
      (try_end),
      (try_begin),
        (eq, "$cheat_mode", 1),
        (ge, ":result", 0),
        (str_store_troop_name, s1, ":result"),
        (str_store_faction_name, s2, ":faction_no"),
        (display_message, "@{s1} is chosen as the marshall of {s2}.", color_quest_and_faction_news),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  # script_get_center_faction_relation_including_player
  # Input: arg1: center_no, arg2: target_faction_no
  # Output: reg0: relation
  #called from triggers
  ("get_center_faction_relation_including_player",
    [
      (store_script_param, ":center_no", 1),
      (store_script_param, ":target_faction_no", 2),
      (store_faction_of_party, ":center_faction", ":center_no"),
      (store_relation, ":reln", ":center_faction", ":target_faction_no"),
      (try_begin),
        (party_slot_eq, ":center_no", slot_mainplanet_lord, "trp_player"),
        (store_relation, ":reln", "fac_player_supporters_faction", ":target_faction_no"),
      (try_end),
      (assign, reg0, ":reln"),
  ]),
  
  # script_decide_faction_ai
  # Input: arg1: faction_no
  # Output: none
  #called from triggers
  ("decide_faction_ai",
    [
      (store_script_param_1, ":faction_no"),
      (faction_get_slot, ":old_faction_ai_state", ":faction_no", slot_faction_ai_state),
      (faction_get_slot, ":old_faction_ai_object", ":faction_no", slot_faction_ai_object),
      (faction_get_slot, ":old_faction_ai_last_offensive_time", ":faction_no", slot_faction_ai_last_offensive_time),
      (assign, ":faction_marshall_party", -1),
      (assign, ":faction_marshall_army_strength", 1),#0 might cause division by zero problems
      (assign, ":faction_marshall_num_followers", 1),
      (call_script, "script_select_faction_marshall", ":faction_no"),
      (assign, ":faction_marshall", reg0),
      (assign, ":marshall_changed", 0),
      (try_begin),
        (neg|faction_slot_eq, ":faction_no", slot_faction_marshall, ":faction_marshall"),
        (assign, ":marshall_changed", 1),
        (eq, "$players_faction", ":faction_no"),
        (str_store_troop_name_link, s1, ":faction_marshall"),
        (str_store_faction_name_link, s2, ":faction_no"),
        (display_message, "@{s1} is the new marshall of {s2}.", color_quest_and_faction_news),
        (call_script, "script_check_and_finish_active_army_quests_for_faction", ":faction_no"),
      (try_end),
      (faction_set_slot, ":faction_no", slot_faction_marshall, ":faction_marshall"),
      (try_begin),
        (gt, ":faction_marshall", 0),
        (troop_get_slot, ":faction_marshall_party", ":faction_marshall", slot_troop_leaded_party),
        (gt, ":faction_marshall_party", 0),
        (party_get_slot, ":faction_marshall_army_strength", ":faction_marshall_party", slot_party_cached_strength),
        (party_get_slot, ":follower_strength", ":faction_marshall_party", slot_party_follower_strength),
        (val_add, ":faction_marshall_army_strength", ":follower_strength"),
        (try_for_range, ":cur_troop", faction_heroes_begin, faction_heroes_end),
          (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_faction_hero),
          (troop_get_slot, ":cur_party", ":cur_troop", slot_troop_leaded_party),
          (gt, ":cur_party", 0),
          (party_is_active, ":cur_party"),
          (party_slot_eq, ":cur_party", slot_party_commander_party, ":faction_marshall_party"),
          (val_add, ":faction_marshall_num_followers", 1),
        (try_end),
      (try_end),
      
      (faction_get_slot, ":marshall_num_old_followers", ":faction_no", slot_faction_ai_offensive_max_followers),
      (val_max, ":marshall_num_old_followers", 1),
      (store_mul, ":offensive_rating", ":faction_marshall_num_followers", 100),
      (val_mul, ":offensive_rating", ":faction_marshall_num_followers"),
      (val_div, ":offensive_rating", ":marshall_num_old_followers"),
      (val_div, ":offensive_rating", ":marshall_num_old_followers"),
      (val_min, ":offensive_rating", 100),#Max 100% efficiency
      
      (faction_get_slot, ":num_armies", ":faction_no", slot_faction_num_armies),
      (faction_get_slot, ":num_castles", ":faction_no", slot_faction_num_castles),
      (faction_get_slot, ":num_towns",  ":faction_no", slot_faction_num_towns),
      
      (store_current_hours, ":cur_hours"),
      (store_sub, ":offensive_hours", ":cur_hours", ":old_faction_ai_last_offensive_time"),
      
      (assign, ":num_enemies", 0),
      (try_for_range, ":cur_faction", factions_begin, factions_end),
        (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
        (store_relation, ":reln", ":cur_faction", ":faction_no"),
        (lt, ":reln", 0),
        (val_add, ":num_enemies", 1),
      (try_end),
      
      (assign, ":chance_defend", 0),
      (assign, ":chance_gathering_army", 0),
      (assign, ":chance_attacking_center", 0),
      (assign, ":chance_raiding_village", 0),
      (assign, ":chance_attacking_enemy_army", 0),
      (assign, ":chance_attacking_enemies_around_center", 0),
      
      (assign, ":target_attacking_center", -1),
      (assign, ":target_raiding_village", -1),
      (assign, ":target_attacking_enemy_army", -1),
      (assign, ":target_attacking_enemies_around_center", -1),
      
      (try_begin),#Defend
        (eq, ":old_faction_ai_state", sfai_default),
        (assign, ":chance_defend", 100),
      (else_try),
        (eq, ":old_faction_ai_state", sfai_gathering_army),
        (gt, ":offensive_hours", 180),
        (assign, ":chance_defend", 10000),#army can not be gathered, cancel
        #else, keep it as 0
      (else_try),
        (store_div, ":chance_defend", ":offensive_hours", 10),
        (store_mul, ":marshall_change_effect", ":marshall_changed", 300),
        (val_add, ":chance_defend", ":marshall_change_effect"),
      (try_end),
      (try_begin),#Gathering army
        (eq, ":old_faction_ai_state", sfai_default),
        (gt, ":faction_marshall_party", 0),
        (try_begin),
          #No chance of gathering an army if there are no enemies
          (gt, ":num_enemies", 0),
          (store_mul, ":num_enemies_effect", ":num_enemies", 20),
          (val_add, ":chance_gathering_army", ":num_enemies_effect"),
          
          #Last offensive
          (store_sub, ":last_offensive_effect", ":offensive_hours", 24 * 4),
          (val_min, ":last_offensive_effect", 200),
          (val_add, ":chance_gathering_army", ":last_offensive_effect"),
          
          #Number of walled centers (inversely related)
          (store_mul, ":center_value", ":num_towns", 2),
          (val_add, ":center_value", ":num_castles"),
          (val_mul, ":center_value", 10),
          (val_max, ":center_value", 5),
          (store_sub, ":num_centers_effect", "$g_average_center_value_per_faction", ":center_value"),
          (val_add, ":chance_gathering_army", ":num_centers_effect"),
          
          #Number of armies (inversely related)
          (store_mul, ":num_armies_effect", ":num_armies", 4),
          (store_sub, ":num_armies_effect", 80, ":num_armies_effect"),
          (val_add, ":chance_gathering_army", ":num_armies_effect"),
          
          #Number of walled centers under siege
          (assign, ":num_centers_under_siege", 0),
          (try_for_range, ":cur_center", walled_centers_begin, walled_centers_end),
            (party_slot_ge, ":cur_center", slot_center_is_besieged_by, 0),
            (store_faction_of_party, ":center_faction", ":cur_center"),
            (eq, ":center_faction", ":faction_no"),
            (val_add, ":num_centers_under_siege", 1),
          (try_end),
          (store_mul, ":num_centers_under_siege_effect", ":num_centers_under_siege", 100),
          (val_add, ":chance_gathering_army", ":num_centers_under_siege_effect"),
        (try_end),
      (else_try),
        (eq, ":old_faction_ai_state", sfai_gathering_army),
        (this_or_next|lt, ":offensive_hours", 60),
        (lt, ":faction_marshall_num_followers", 4),
        (assign, ":chance_gathering_army", 3000),
      (try_end),
      (try_begin),#Attacking center
        (neq, ":old_faction_ai_state", sfai_default),
        (gt, ":faction_marshall_party", 0),
        (assign, ":old_target_attacking_center", -1),
        (try_begin),
          (eq, ":old_faction_ai_state", sfai_attacking_center),
          (assign, ":old_target_attacking_center", ":old_faction_ai_object"),
        (try_end),
        (assign, ":best_besiege_center", -1),
        (assign, ":best_besiege_center_score", 0),
        (try_for_range, ":enemy_walled_center", walled_centers_begin, walled_centers_end),
          (party_get_slot, ":besieger_party", ":enemy_walled_center", slot_center_is_besieged_by),
          (assign, ":besieger_own_faction", 0),
          (try_begin),
            (ge, ":besieger_party", 0),
            (party_is_active, ":besieger_party"),
            (store_faction_of_party, ":besieger_faction", ":besieger_party"),
            (eq, ":besieger_faction", ":faction_no"),
            (assign, ":besieger_own_faction", 1),
          (try_end),
          (this_or_next|eq, ":besieger_party", -1),
          (eq, ":besieger_own_faction", 1),
          (call_script, "script_get_center_faction_relation_including_player", ":enemy_walled_center", ":faction_no"),
          (assign, ":reln", reg0),
          (lt, ":reln", 0),
          (val_mul, ":reln", -1),
          (val_add, ":reln", 50),
          (store_distance_to_party_from_party, ":dist", ":enemy_walled_center", ":faction_marshall_party"),
          (val_add, ":dist", 20),
          (party_get_slot, ":center_str", ":enemy_walled_center", slot_party_cached_strength),
          (party_get_slot, ":center_near_str", ":enemy_walled_center", slot_party_nearby_friend_strength),
          (val_add, ":center_str", ":center_near_str"),
          (val_add, ":center_str", 1),
          (store_mul, ":center_score", 1000, ":faction_marshall_army_strength"),
          (val_div, ":center_score", ":center_str"),
          (gt, ":center_score", 1500),
          (val_min, ":center_score", 20000),#20 times stronger means an easy victory, distance is more important
          (try_begin),
            (party_slot_eq, ":enemy_walled_center", slot_mainplanet_lord, "trp_player"),
            (call_script, "script_troop_get_player_relation", ":faction_marshall"),
            (assign, ":player_relation", reg0),
            #(troop_get_slot, ":player_relation", ":faction_marshall", slot_troop_player_relation),
            (lt, ":player_relation", 0),
            (store_sub, ":multiplier", 50, ":player_relation"),
            (val_mul, ":center_score", ":multiplier"),
            (val_div, ":center_score", 50),
          (try_end),
          (try_begin),
            (party_slot_eq, ":enemy_walled_center", slot_center_original_faction, ":faction_no"),
            (val_mul, ":center_score", 2),
          (try_end),
          (try_begin),
            (party_slot_eq, ":enemy_walled_center", slot_center_ex_faction, ":faction_no"),
            (val_mul, ":center_score", 2),
          (try_end),
          (val_mul, ":center_score", ":reln"),
          (val_div, ":center_score", ":dist"),
          
          (try_begin),
            (eq, ":enemy_walled_center", ":old_target_attacking_center"),
            (val_mul, ":center_score", 100),
          (try_end),
          (try_begin),
            (gt, ":center_score", ":best_besiege_center_score"),
            (assign, ":best_besiege_center_score", ":center_score"),
            (assign, ":best_besiege_center", ":enemy_walled_center"),
          (try_end),
        (try_end),
        
        (ge, ":best_besiege_center", 0),
        #Center with equal strength at 30 kms away will have a center_score of 1300 (with -40 reln)
        (store_div, ":chance_attacking_center", ":best_besiege_center_score", 15),
        (val_min, ":chance_attacking_center", 1000),
        (assign, ":target_attacking_center", ":best_besiege_center"),
        (try_begin),
          (eq, ":old_target_attacking_center", ":target_attacking_center"),
          (val_mul, ":chance_attacking_center", 100),
        (try_end),
        
        (val_mul, ":chance_attacking_center", ":offensive_rating"),
        (val_div, ":chance_attacking_center", 100),
      (try_end),
      (try_begin),#Raiding village
        (neq, ":old_faction_ai_state", sfai_default),
        (gt, ":faction_marshall_party", 0),
        (assign, ":old_target_raiding_village", -1),
        (try_begin),
          (eq, ":old_faction_ai_state", sfai_raiding_village),
          (assign, ":old_target_raiding_village", ":old_faction_ai_object"),
        (try_end),
        
        (assign, ":num_minorplanet_points", 0),
        (try_for_range, ":enemy_minorplanet_no", minorplanet_begin, minorplanet_end),
          (call_script, "script_get_center_faction_relation_including_player", ":enemy_minorplanet_no", ":faction_no"),
          (lt, reg0, 0),
          (store_distance_to_party_from_party, ":dist", ":enemy_minorplanet_no", ":faction_marshall_party"),
          (lt, ":dist", 120),
          (this_or_next|party_slot_eq, ":enemy_minorplanet_no", slot_minorplanet_state, 0), #village is not already raided
          (party_slot_eq, ":enemy_minorplanet_no", slot_minorplanet_state, svs_being_raided),
          (store_sub, ":dist_point", 150, ":dist"),
          (val_add, ":num_minorplanet_points", ":dist_point"),
          (eq, ":enemy_minorplanet_no", ":old_target_raiding_village"),
          (val_add, ":num_minorplanet_points", 10000),
        (try_end),
        (gt, ":num_minorplanet_points", 0),
        (store_random_in_range, ":random_minorplanet_no", 0, ":num_minorplanet_points"),
        (try_for_range, ":enemy_minorplanet_no", minorplanet_begin, minorplanet_end),
          (eq, ":target_raiding_village", -1),
          (call_script, "script_get_center_faction_relation_including_player", ":enemy_minorplanet_no", ":faction_no"),
          (lt, reg0, 0),
          (store_distance_to_party_from_party, ":dist", ":enemy_minorplanet_no", ":faction_marshall_party"),
          (lt, ":dist", 120),
          (this_or_next|party_slot_eq, ":enemy_minorplanet_no", slot_minorplanet_state, 0), #village is not already raided
          (party_slot_eq, ":enemy_minorplanet_no", slot_minorplanet_state, svs_being_raided),
          (store_sub, ":dist_point", 150, ":dist"),
          (val_sub, ":random_minorplanet_no", ":dist_point"),
          (try_begin),
            (eq, ":enemy_minorplanet_no", ":old_target_raiding_village"),
            (val_sub, ":random_minorplanet_no", 10000),
          (try_end),
          (lt, ":random_minorplanet_no", 0),
          (assign, ":target_raiding_village", ":enemy_minorplanet_no"),
          (assign, ":chance_raiding_village", 20),
          (try_begin),
            (eq, ":old_target_raiding_village", ":target_raiding_village"),
            (val_mul, ":chance_raiding_village", 100),
          (try_end),
          
          (val_mul, ":chance_raiding_village", ":offensive_rating"),
          (val_div, ":chance_raiding_village", 100),
        (try_end),
      (try_end),
      (try_begin),#Attacking enemy army
        (neq, ":old_faction_ai_state", sfai_default),
        (gt, ":faction_marshall_party", 0),
        (assign, ":old_target_attacking_enemy_army", -1),
        (try_begin),
          (eq, ":old_faction_ai_state", sfai_attacking_enemy_army),
          (assign, ":old_target_attacking_enemy_army", ":old_faction_ai_object"),
        (try_end),
        
        (assign, ":best_attack_army", -1),
        (assign, ":best_attack_army_score", 0),
        (try_for_range, ":cur_faction", factions_begin, factions_end),
          (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
          (faction_get_slot, ":cur_faction_marshall", ":cur_faction", slot_faction_marshall),
          (ge, ":cur_faction_marshall", 0),
          (troop_slot_eq, ":cur_faction_marshall", slot_troop_occupation, slto_faction_hero),
          (troop_get_slot, ":cur_faction_marshall_party", ":cur_faction_marshall", slot_troop_leaded_party),
          (ge, ":cur_faction_marshall_party", 0),
          (party_is_active, ":cur_faction_marshall_party"),
          (store_troop_faction, ":cur_faction_marshall_faction", ":cur_faction_marshall"),
          (store_relation, ":rel", ":cur_faction_marshall_faction", ":faction_no"),
          (lt, ":rel", 0),
          (this_or_next|faction_slot_eq, ":cur_faction_marshall_faction", slot_faction_ai_state, sfai_attacking_center),
          (faction_slot_eq, ":cur_faction_marshall_faction", slot_faction_ai_state, sfai_raiding_village),
          (party_get_slot, ":cur_faction_marshall_party_follower_strength", ":cur_faction_marshall_party", slot_party_follower_strength),
          (party_get_slot, ":cur_faction_marshall_party_strength", ":cur_faction_marshall_party", slot_party_cached_strength),
          (val_add, ":cur_faction_marshall_party_strength", ":cur_faction_marshall_party_follower_strength"),
          (store_mul, ":attack_army_score", ":cur_faction_marshall_party_strength", 1000),
          (val_div, ":attack_army_score", ":faction_marshall_army_strength"),
          (try_begin),
            (gt, ":attack_army_score", 850),
            (store_sub, ":attack_army_score", 1700, ":attack_army_score"),
          (try_end),
          (gt, ":attack_army_score", 0),
          (val_mul, ":attack_army_score", 2),
          (try_begin),
            (faction_slot_eq, ":cur_faction_marshall_faction", slot_faction_ai_state, sfai_attacking_center),
            (val_mul, ":attack_army_score", 10),
          (else_try),
            (faction_slot_eq, ":cur_faction_marshall_faction", slot_faction_ai_state, sfai_raiding_village),
            (val_mul, ":attack_army_score", 3),
          (try_end),
          (try_begin),
            (eq, ":old_target_attacking_enemy_army", ":cur_faction_marshall_party"),
            (val_mul, ":attack_army_score", 100),
          (try_end),
          (store_distance_to_party_from_party, ":dist", ":cur_faction_marshall_party", ":faction_marshall_party"),
          (val_add, ":dist", 20),
          (val_div, ":attack_army_score", ":dist"),
          (gt, ":attack_army_score", ":best_attack_army_score"),
          (assign, ":best_attack_army", ":cur_faction_marshall_party"),
          (assign, ":best_attack_army_score", ":attack_army_score"),
        (try_end),
        (ge, ":best_attack_army", 0),
        #Army having with equal strength and 30 kms away will have a best_attack_army_score of 28
        (store_mul, ":chance_attacking_enemy_army", ":best_attack_army_score", 2),
        (val_min, ":chance_attacking_enemy_army", 1500),
        (assign, ":target_attacking_enemy_army", ":best_attack_army"),
        (try_begin),
          (eq, ":old_target_attacking_enemy_army", ":target_attacking_enemy_army"),
          (val_mul, ":chance_attacking_enemy_army", 100),
        (try_end),
        
        (val_mul, ":chance_attacking_enemy_army", ":offensive_rating"),
        (val_div, ":chance_attacking_enemy_army", 100),
      (try_end),
      (try_begin),#Attacking enemies around center
        (neq, ":old_faction_ai_state", sfai_default),
        (gt, ":faction_marshall_party", 0),
        (assign, ":old_target_attacking_enemies_around_center", -1),
        (try_begin),
          (eq, ":old_faction_ai_state", sfai_attacking_enemies_around_center),
          (assign, ":old_target_attacking_enemies_around_center", ":old_faction_ai_object"),
        (try_end),
        
        (assign, ":best_attack_army_center", -1),
        (assign, ":best_attack_army_score", 0),
        (try_for_range, ":center_no", centers_begin, centers_end),
          (store_faction_of_party, ":center_faction", ":center_no"),
          (eq, ":center_faction", ":faction_no"),
          (party_get_slot, ":nearby_enemy_strength", ":center_no", slot_party_nearby_enemy_strength),
          (store_mul, ":attack_army_score", ":nearby_enemy_strength", 1000),
          (val_div, ":attack_army_score", ":faction_marshall_army_strength"),
          (try_begin),
            (gt, ":attack_army_score", 850),
            (store_sub, ":attack_army_score", 1700, ":attack_army_score"),
          (try_end),
          (gt, ":attack_army_score", 0),
          (val_mul, ":attack_army_score", 4),
          (try_begin),
            (party_slot_eq, ":center_no", slot_party_type, spt_minorplanet),
            (try_begin),
              (party_slot_eq, ":center_no", slot_minorplanet_state, svs_being_raided),
              (val_mul, ":attack_army_score", 3),
            (try_end),
          (else_try),
            (try_begin),
              (party_slot_ge, ":center_no", slot_center_is_besieged_by, 0),
              (val_mul, ":attack_army_score", 10),
            (try_end),
          (try_end),
          (try_begin),
            (eq, ":old_target_attacking_enemies_around_center", ":center_no"),
            (val_mul, ":attack_army_score", 100),
          (try_end),
          (store_distance_to_party_from_party, ":dist", ":center_no", ":faction_marshall_party"),
          (val_add, ":dist", 20),
          (val_div, ":attack_army_score", ":dist"),
          (gt, ":attack_army_score", ":best_attack_army_score"),
          (assign, ":best_attack_army_center", ":center_no"),
          (assign, ":best_attack_army_score", ":attack_army_score"),
        (try_end),
        (ge, ":best_attack_army_center", 0),
        #Center having enemies at equal strength and 30 kms away will have a best_attack_army_score of 56
        (store_mul, ":chance_attacking_enemies_around_center", ":best_attack_army_score", 2),
        (val_min, ":chance_attacking_enemies_around_center", 2000),
        (assign, ":target_attacking_enemies_around_center", ":best_attack_army_center"),
        (try_begin),
          (eq, ":old_target_attacking_enemies_around_center", ":target_attacking_enemies_around_center"),
          (val_mul, ":chance_attacking_enemies_around_center", 1000),
        (try_end),
        
        (val_mul, ":chance_attacking_enemies_around_center", ":offensive_rating"),
        (val_div, ":chance_attacking_enemies_around_center", 100),
        
        (try_begin),
          (gt, ":chance_attacking_enemies_around_center", ":chance_attacking_enemy_army"),
          (assign, ":end_cond", factions_end),
          (try_for_range, ":cur_faction", factions_begin, ":end_cond"),
            (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
            (faction_get_slot, ":cur_faction_marshall", ":cur_faction", slot_faction_marshall),
            (ge, ":cur_faction_marshall", 0),
            (troop_slot_eq, ":cur_faction_marshall", slot_troop_occupation, slto_faction_hero),
            (troop_get_slot, ":cur_faction_marshall_party", ":cur_faction_marshall", slot_troop_leaded_party),
            (ge, ":cur_faction_marshall_party", 0),
            (party_is_active, ":cur_faction_marshall_party"),
            (store_troop_faction, ":cur_faction_marshall_faction", ":cur_faction_marshall"),
            (store_relation, ":rel", ":cur_faction_marshall_faction", ":faction_no"),
            (lt, ":rel", 0),
            (store_distance_to_party_from_party, ":distance", ":cur_faction_marshall_party", ":target_attacking_enemies_around_center"),
            (lt, ":distance", 10),
            (assign, ":chance_attacking_enemy_army", ":chance_attacking_enemies_around_center"),
            (assign, ":target_attacking_enemy_army", ":cur_faction_marshall_party"),
            (assign, ":chance_attacking_enemies_around_center", 0),
            (assign, ":target_attacking_enemies_around_center", -1),
            (assign, ":end_cond", 0),#break
          (try_end),
        (try_end),
      (try_end),
      
      (assign, ":sum_weights", 0),
      (val_add, ":sum_weights", ":chance_defend"),
      (val_add, ":sum_weights", ":chance_gathering_army"),
      (val_add, ":sum_weights", ":chance_attacking_center"),
      (val_add, ":sum_weights", ":chance_raiding_village"),
      (val_add, ":sum_weights", ":chance_attacking_enemy_army"),
      (val_add, ":sum_weights", ":chance_attacking_enemies_around_center"),
      (store_random_in_range, ":random_no", 0, ":sum_weights"),
      (val_sub, ":random_no", ":chance_defend"),
      (try_begin),
        (lt, ":random_no", 0),
        (faction_set_slot, ":faction_no", slot_faction_ai_state, sfai_default),
        (faction_set_slot, ":faction_no", slot_faction_ai_object, -1),
        (try_begin),
          (neq, ":old_faction_ai_state", sfai_default),
          (call_script, "script_check_and_finish_active_army_quests_for_faction", ":faction_no"),
          (faction_set_slot, ":faction_no", slot_faction_ai_last_offensive_time, ":cur_hours"),
        (try_end),
        (try_begin),
          (eq, "$cheat_mode", 1),
          (str_store_faction_name, s1, ":faction_no"),
          (display_message, "@{s1} decided to do nothing."),
        (try_end),
      (else_try),
        (val_sub, ":random_no", ":chance_gathering_army"),
        (lt, ":random_no", 0),
        (faction_set_slot, ":faction_no", slot_faction_ai_state, sfai_gathering_army),
        (faction_set_slot, ":faction_no", slot_faction_ai_object, -1),
        (try_begin),
          (neq, ":old_faction_ai_state", sfai_gathering_army),
          (faction_set_slot, ":faction_no", slot_faction_ai_last_offensive_time, ":cur_hours"),
          (faction_set_slot, ":faction_no", slot_faction_ai_offensive_max_followers, 1),
        (try_end),
        (try_begin),
          (eq, "$cheat_mode", 1),
          (str_store_faction_name, s1, ":faction_no"),
          (display_message, "@{s1} decided to gather army."),
        (try_end),
      (else_try),
        (val_sub, ":random_no", ":chance_attacking_center"),
        (lt, ":random_no", 0),
        (faction_set_slot, ":faction_no", slot_faction_ai_state, sfai_attacking_center),
        (faction_set_slot, ":faction_no", slot_faction_ai_object, ":target_attacking_center"),
        (try_begin),
          (gt, ":faction_marshall_num_followers", ":marshall_num_old_followers"),
          (faction_set_slot, ":faction_no", slot_faction_ai_offensive_max_followers, ":faction_marshall_num_followers"),
        (try_end),
        (try_begin),
          (eq, "$cheat_mode", 1),
          (str_store_faction_name, s1, ":faction_no"),
          (str_store_party_name, s2, ":target_attacking_center"),
          (display_message, "@{s1} decided to besiege {s2}."),
        (try_end),
      (else_try),
        (val_sub, ":random_no", ":chance_raiding_village"),
        (lt, ":random_no", 0),
        (faction_set_slot, ":faction_no", slot_faction_ai_state, sfai_raiding_village),
        (faction_set_slot, ":faction_no", slot_faction_ai_object, ":target_raiding_village"),
        (try_begin),
          (gt, ":faction_marshall_num_followers", ":marshall_num_old_followers"),
          (faction_set_slot, ":faction_no", slot_faction_ai_offensive_max_followers, ":faction_marshall_num_followers"),
        (try_end),
        (try_begin),
          (eq, "$cheat_mode", 1),
          (str_store_faction_name, s1, ":faction_no"),
          (str_store_party_name, s2, ":target_raiding_village"),
          (display_message, "@{s1} decided to raid {s2}."),
        (try_end),
      (else_try),
        (val_sub, ":random_no", ":chance_attacking_enemy_army"),
        (lt, ":random_no", 0),
        (faction_set_slot, ":faction_no", slot_faction_ai_state, sfai_attacking_enemy_army),
        (faction_set_slot, ":faction_no", slot_faction_ai_object, ":target_attacking_enemy_army"),
        (try_begin),
          (gt, ":faction_marshall_num_followers", ":marshall_num_old_followers"),
          (faction_set_slot, ":faction_no", slot_faction_ai_offensive_max_followers, ":faction_marshall_num_followers"),
        (try_end),
        (try_begin),
          (eq, "$cheat_mode", 1),
          (str_store_faction_name, s1, ":faction_no"),
          (str_store_party_name, s2, ":target_attacking_enemy_army"),
          (display_message, "@{s1} decided to attack {s2}."),
        (try_end),
      (else_try),
        (val_sub, ":random_no", ":chance_attacking_enemies_around_center"),
        (lt, ":random_no", 0),
        (faction_set_slot, ":faction_no", slot_faction_ai_state, sfai_attacking_enemies_around_center),
        (faction_set_slot, ":faction_no", slot_faction_ai_object, ":target_attacking_enemies_around_center"),
        (try_begin),
          (gt, ":faction_marshall_num_followers", ":marshall_num_old_followers"),
          (faction_set_slot, ":faction_no", slot_faction_ai_offensive_max_followers, ":faction_marshall_num_followers"),
        (try_end),
        (try_begin),
          (eq, "$cheat_mode", 1),
          (str_store_faction_name, s1, ":faction_no"),
          (str_store_party_name, s2, ":target_attacking_enemies_around_center"),
          (display_message, "@{s1} decided to attack enemies around {s2}."),
        (try_end),
      (try_end),
      (try_begin),
        (eq, "$players_faction", ":faction_no"),
        (neg|faction_slot_eq, ":faction_no", slot_faction_ai_state, sfai_attacking_center),
        (check_quest_active, "qst_join_siege_with_army"),
        (call_script, "script_abort_quest", "qst_join_siege_with_army", 0),
      (try_end),
  ]),
  
  # script_check_and_finish_active_army_quests_for_faction
  # Input: faction_no
  # Output: none
  ("check_and_finish_active_army_quests_for_faction",
    [
      (store_script_param_1, ":faction_no"),
      (try_begin),
        (eq, "$players_faction", ":faction_no"),
        (try_begin),
          (check_quest_active, "qst_report_to_army"),
          (call_script, "script_cancel_quest", "qst_report_to_army"),
        (try_end),
        (assign, ":one_active", 0),
        (try_for_range, ":quest_no", army_quests_begin, army_quests_end),
          (check_quest_active, ":quest_no"),
          (call_script, "script_cancel_quest", ":quest_no"),
          (assign, ":one_active", 1),
        (try_end),
        (try_begin),
          (check_quest_active, "qst_follow_army"),
          (assign, ":one_active", 1),
          (call_script, "script_end_quest", "qst_follow_army"),
        (try_end),
        (eq, ":one_active", 1),
        (faction_get_slot, ":last_offensive_time", ":faction_no", slot_faction_ai_last_offensive_time),
        (store_current_hours, ":cur_hours"),
        (store_sub, ":total_time_served", ":cur_hours", ":last_offensive_time"),
        (store_mul, ":xp_reward", ":total_time_served", 5),
        (val_div, ":xp_reward", 50),
        (val_mul, ":xp_reward", 50),
        (val_add, ":xp_reward", 50),
        (add_xp_as_reward, ":xp_reward"),
      (try_end),
  ]),
  
  # script_troop_get_player_relation
  # Input: arg1 = troop_no
  # Output: reg0 = effective relation (modified by troop reputation, honor, etc.)
  ("troop_get_player_relation",
    [
      (store_script_param_1, ":troop_no"),
      (troop_get_slot, ":reputation", ":troop_no", slot_lord_reputation_type),
      (troop_get_slot, ":effective_relation", ":troop_no", slot_troop_player_relation),
      (assign, ":honor_bonus", 0),
      (try_begin),
        (eq,  ":reputation", lrep_quarrelsome),
        (val_add, ":effective_relation", -3),
      (try_end),
      (try_begin),
        (ge, "$player_honor", 0),
        (try_begin),
          (this_or_next|eq,  ":reputation", lrep_upstanding),
          (             eq,  ":reputation", lrep_goodnatured),
          (store_div, ":honor_bonus", "$player_honor", 3),
        (try_end),
      (try_end),
      (try_begin),
        (lt, "$player_honor", 0),
        (try_begin),
          (this_or_next|eq,  ":reputation", lrep_upstanding),
          (             eq,  ":reputation", lrep_goodnatured),
          (store_div, ":honor_bonus", "$player_honor", 3),
        (else_try),
          (eq,  ":reputation", lrep_martial),
          (store_div, ":honor_bonus", "$player_honor", 5),
        (try_end),
      (try_end),
      (val_add, ":effective_relation", ":honor_bonus"),
      (assign, reg0, ":effective_relation"),
  ]),
  
  # script_change_troop_renown
  # Input: arg1 = troop_no, arg2 = relation difference
  # Output: none
  ("change_troop_renown",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, ":renown_change"),
      
      (troop_get_slot, ":old_renown", ":troop_no", slot_troop_renown),
      (store_add, ":new_renown", ":old_renown", ":renown_change"),
      (val_max, ":new_renown", 0),
      (troop_set_slot, ":troop_no", slot_troop_renown, ":new_renown"),
      
      (try_begin),
        (eq, ":troop_no", "trp_player"),
        (str_store_troop_name, s1, ":troop_no"),
        (assign, reg12, ":renown_change"),
        (val_abs, reg12),
        (try_begin),
          (gt, ":renown_change", 0),
          (display_message, "@You gained {reg12} renown.", color_good_news),
        (else_try),
          (lt, ":renown_change", 0),
          (display_message, "@You lose {reg12} renown.", color_bad_news),
        (try_end),
      (try_end),
      (call_script, "script_update_troop_notes", ":troop_no"),
  ]),
  
  
  # script_change_player_relation_with_troop
  # Input: arg1 = troop_no, arg2 = relation difference
  # Output: none
  ("change_player_relation_with_troop",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, ":difference"),
      
      (try_begin),
        (neq, ":troop_no", "trp_player"),
        (neg|is_between, ":troop_no", soldiers_begin, soldiers_end),
        (neq, ":difference", 0),
        (call_script, "script_troop_get_player_relation", ":troop_no"),
        (assign, ":old_effective_relation", reg0),
        (troop_get_slot, ":player_relation", ":troop_no", slot_troop_player_relation),
        (val_add, ":player_relation", ":difference"),
        (val_clamp, ":player_relation", -100, 101),
        (try_begin),
          (troop_set_slot, ":troop_no", slot_troop_player_relation, ":player_relation"),
          
          (str_store_troop_name_link, s1, ":troop_no"),
          (call_script, "script_troop_get_player_relation", ":troop_no"),
          (assign, ":new_effective_relation", reg0),
          (neq, ":old_effective_relation", ":new_effective_relation"),
          (assign, reg1, ":old_effective_relation"),
          (assign, reg2, ":new_effective_relation"),
          (try_begin),
            (gt, ":difference", 0),
            (display_message, "str_troop_relation_increased", color_good_news),
          (else_try),
            (lt, ":difference", 0),
            (display_message, "str_troop_relation_detoriated", color_bad_news),
          (try_end),
          (try_begin),
            (eq, ":troop_no", "$g_talk_troop"),
            (assign, "$g_talk_troop_relation", ":new_effective_relation"),
            (call_script, "script_setup_talk_info"),
          (try_end),
          (call_script, "script_update_troop_notes", ":troop_no"),
        (try_end),
      (try_end),
  ]),
  
  # script_change_player_relation_with_center
  # Input: arg1 = party_no, arg2 = relation difference
  # Output: none
  ("change_player_relation_with_center",
    [
      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":difference"),
      
      (party_get_slot, ":player_relation", ":center_no", slot_center_player_relation),
      (assign, reg1, ":player_relation"),
      (val_add, ":player_relation", ":difference"),
      (val_clamp, ":player_relation", -100, 100),
      (assign, reg2, ":player_relation"),
      (party_set_slot, ":center_no", slot_center_player_relation, ":player_relation"),
      
      (str_store_party_name_link, s1, ":center_no"),
      (try_begin),
        (gt, ":difference", 0),
        (display_message, "@Your relation with {s1} has improved.", color_good_news),
      (else_try),
        (lt, ":difference", 0),
        (display_message, "@Your relation with {s1} has deteriorated.", color_bad_news),
      (try_end),
      (try_begin),
        (party_slot_eq, ":center_no", slot_party_type, spt_minorplanet),
        (call_script, "script_update_volunteer_troops_in_village", ":center_no"),
      (try_end),
      
      (try_begin),
        (this_or_next|is_between, "$g_talk_troop", planet_admins_begin, planet_admins_end),
        (is_between, "$g_talk_troop", mayors_begin, mayors_end),
        (assign, "$g_talk_troop_relation", ":player_relation"),
        (call_script, "script_setup_talk_info"),
      (try_end),
  ]),
  
  
  # script_change_player_relation_with_faction
  # Input: arg1 = faction_no, arg2 = relation difference
  # Output: none
  ("change_player_relation_with_faction",
    [
      (store_script_param_1, ":faction_no"),
      (store_script_param_2, ":difference"),
      
      (store_relation, ":player_relation", ":faction_no", "fac_player_supporters_faction"),
      (assign, reg1, ":player_relation"),
      (val_add, ":player_relation", ":difference"),
      (assign, reg2, ":player_relation"),
      (set_relation, ":faction_no", "fac_player_faction", ":player_relation"),
      (set_relation, ":faction_no", "fac_player_supporters_faction", ":player_relation"),
      
      (str_store_faction_name_link, s1, ":faction_no"),
      (try_begin),
        (gt, ":difference", 0),
        (display_message, "str_faction_relation_increased", color_good_news),
      (else_try),
        (lt, ":difference", 0),
        (display_message, "str_faction_relation_detoriated", color_bad_news),
      (try_end),
      (call_script, "script_update_all_notes"),
  ]),
  
  # script_set_player_relation_with_faction
  # Input: arg1 = faction_no, arg2 = relation
  # Output: none
  ("set_player_relation_with_faction",
    [
      (store_script_param_1, ":faction_no"),
      (store_script_param_2, ":relation"),
      
      (store_relation, ":player_relation", ":faction_no", "fac_player_supporters_faction"),
      (store_sub, ":reln_dif", ":relation", ":player_relation"),
      (call_script, "script_change_player_relation_with_faction", ":faction_no", ":reln_dif"),
  ]),
  
  
  
  # script_change_player_relation_with_faction_ex
  # changes relations with other factions also (according to their relations between each other)
  # Input: arg1 = faction_no, arg2 = relation difference
  # Output: none
  ("change_player_relation_with_faction_ex",
    [
      (store_script_param_1, ":faction_no"),
      (store_script_param_2, ":difference"),
      
      (store_relation, ":player_relation", ":faction_no", "fac_player_supporters_faction"),
      (assign, reg1, ":player_relation"),
      (val_add, ":player_relation", ":difference"),
      (assign, reg2, ":player_relation"),
      (set_relation, ":faction_no", "fac_player_faction", ":player_relation"),
      (set_relation, ":faction_no", "fac_player_supporters_faction", ":player_relation"),
      
      (str_store_faction_name_link, s1, ":faction_no"),
      (try_begin),
        (gt, ":difference", 0),
        (display_message, "str_faction_relation_increased", color_good_news),
      (else_try),
        (lt, ":difference", 0),
        (display_message, "str_faction_relation_detoriated", color_bad_news),
      (try_end),
      
      (try_for_range, ":other_faction", factions_begin, factions_end),
        (faction_slot_eq, ":other_faction", slot_faction_state, sfs_active),
        (neq, ":faction_no", ":other_faction"),
        (store_relation, ":other_faction_relation", ":faction_no", ":other_faction"),
        (store_relation, ":player_relation", ":other_faction", "fac_player_supporters_faction"),
        (store_mul, ":relation_change", ":difference", ":other_faction_relation"),
        (val_div, ":relation_change", 100),
        (val_add, ":player_relation", ":relation_change"),
        (set_relation, ":other_faction", "fac_player_faction", ":player_relation"),
        (set_relation, ":other_faction", "fac_player_supporters_faction", ":player_relation"),
      (try_end),
      (try_begin),
        (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
        (try_for_range, ":faction_no", factions_begin, factions_end),
          (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
          (call_script, "script_update_faction_notes", ":faction_no"),
        (try_end),
      (try_end),
  ]),
  
  # script_cf_get_random_active_faction_except_player_faction_and_faction
  # Input: arg1 = except_faction_no
  # Output: reg0 = random_faction
  ("cf_get_random_active_faction_except_player_faction_and_faction",
    [
      (store_script_param_1, ":except_faction_no"),
      (assign, ":num_factions", 0),
      (try_for_range, ":faction_no", factions_begin, factions_end),
        (neq, ":faction_no", "fac_player_supporters_faction"),
        (neq, ":faction_no", ":except_faction_no"),
        (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
        (val_add, ":num_factions", 1),
      (try_end),
      (gt, ":num_factions", 0),
      (assign, ":selected_faction", -1),
      (store_random_in_range, ":random_faction", 0, ":num_factions"),
      (try_for_range, ":faction_no", factions_begin, factions_end),
        (ge, ":random_faction", 0),
        (neq, ":faction_no", "fac_player_supporters_faction"),
        (neq, ":faction_no", ":except_faction_no"),
        (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
        (val_sub, ":random_faction", 1),
        (lt, ":random_faction", 0),
        (assign, ":selected_faction", ":faction_no"),
      (try_end),
      (assign, reg0, ":selected_faction"),
  ]),
  
  # script_make_faction_hostile_to_player
  # Input: arg1 = faction_no, arg2 = relation difference
  # Output: none
  ("make_faction_hostile_to_player",
    [
      (store_script_param_1, ":faction_no"),
      (store_script_param_2, ":difference"),
      
      (try_begin),
        (lt, ":difference", 0),
        (store_relation, ":player_relation", ":faction_no", "fac_player_supporters_faction"),
        (val_min, ":player_relation", 0),
        (val_add, ":player_relation", ":difference"),
        (call_script, "script_set_player_relation_with_faction", ":faction_no", ":player_relation"),
      (try_end),
  ]),
  
  # script_change_player_honor
  # Input: arg1 = honor difference
  # Output: none
  ("change_player_honor",
    [
      (store_script_param_1, ":honor_dif"),
      (val_add, "$player_honor", ":honor_dif"),
      (try_begin),
        (gt, ":honor_dif", 0),
        (display_message, "@You gain honour.", color_good_news),
      (else_try),
        (lt, ":honor_dif", 0),
        (display_message, "@You lose honour.", color_bad_news),
      (try_end),
      
      ##      (val_mul, ":honor_dif", 1000),
      ##      (assign, ":temp_honor", 0),
      ##      (assign, ":num_nonlinear_steps", 10),
      ##      (try_begin),
      ##        (gt, "$player_honor", 0),
      ##        (lt, ":honor_dif", 0),
      ##        (assign, ":num_nonlinear_steps", 0),
      ##      (else_try),
      ##        (lt, "$player_honor", 0),
      ##        (gt, ":honor_dif", 0),
      ##        (assign, ":num_nonlinear_steps", 3),
      ##      (try_end),
      ##
      ##      (try_begin),
      ##        (ge, "$player_honor", 0),
      ##        (assign, ":temp_honor", "$player_honor"),
      ##      (else_try),
      ##        (val_sub, ":temp_honor", "$player_honor"),
      ##      (try_end),
      ##      (try_for_range, ":unused",0,":num_nonlinear_steps"),
      ##        (ge, ":temp_honor", 10000),
      ##        (val_div, ":temp_honor", 2),
      ##        (val_div, ":honor_dif", 2),
      ##      (try_end),
      ##      (val_add, "$player_honor", ":honor_dif"),
  ]),
  
  # script_change_player_party_morale
  # Input: arg1 = morale difference
  # Output: none
  ("change_player_party_morale",
    [
      (store_script_param_1, ":morale_dif"),
      (party_get_morale, ":cur_morale", "p_main_party"),
      (store_add, ":new_morale", ":cur_morale", ":morale_dif"),
      (val_clamp, ":new_morale", 0, 100),
      (party_set_morale, "p_main_party", ":new_morale"),
      (try_begin),
        (lt, ":new_morale", ":cur_morale"),
        (store_sub, reg1, ":cur_morale", ":new_morale"),
        (display_message, "str_party_lost_morale", color_bad_news),
      (else_try),
        (gt, ":new_morale", ":cur_morale"),
        (store_sub, reg1, ":new_morale", ":cur_morale"),
        (display_message, "str_party_gained_morale", color_good_news),
      (try_end),
  ]),
  
  # script_cf_player_has_item_without_modifier
  # Input: arg1 = item_id, arg2 = modifier
  # Output: none (can_fail)
  ("cf_player_has_item_without_modifier",
    [
      (store_script_param, ":item_id", 1),
      (store_script_param, ":modifier", 2),
      (player_has_item, ":item_id"),
      #checking if any of the meat is not rotten
      (assign, ":has_without_modifier", 0),
      (troop_get_inventory_capacity, ":inv_size", "trp_player"),
      (try_for_range, ":i_slot", 0, ":inv_size"),
        (troop_get_inventory_slot, ":cur_item", "trp_player", ":i_slot"),
        (eq, ":cur_item", ":item_id"),
        (troop_get_inventory_slot_modifier, ":cur_modifier", "trp_player", ":i_slot"),
        (neq, ":cur_modifier", ":modifier"),
        (assign, ":has_without_modifier", 1),
        (assign, ":inv_size", 0), #break
      (try_end),
      (eq, ":has_without_modifier", 1),
  ]),
  
  # script_get_player_party_morale_values
  # Output: reg0 = player_party_morale_target
  ("get_player_party_morale_values",
    [
      (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
      (assign, ":num_men", 0),
      (try_for_range, ":i_stack", 1, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
        (try_begin),
          (troop_is_hero, ":stack_troop"),
          # HC - Changed Heroes from acting as 3 men (-3 morale) to zero.
          (val_add, ":num_men", 0),
        (else_try),
          (party_stack_get_size, ":stack_size","p_main_party",":i_stack"),
          (val_add, ":num_men", ":stack_size"),
        (try_end),
      (try_end),
      (assign, "$g_player_party_morale_modifier_party_size", ":num_men"),
      
      (store_skill_level, ":player_leadership", "skl_leadership", "trp_player"),
      (store_mul, "$g_player_party_morale_modifier_leadership", ":player_leadership", 7),
      (assign, ":new_morale", "$g_player_party_morale_modifier_leadership"),
      (val_sub, ":new_morale", "$g_player_party_morale_modifier_party_size"),
      (val_add, ":new_morale", 50),
      
      (assign, "$g_player_party_morale_modifier_food", 0),
      (try_for_range, ":cur_edible", food_begin, food_end),
        (call_script, "script_cf_player_has_item_without_modifier", ":cur_edible", imod_rotten),
        (item_get_slot, ":food_bonus", ":cur_edible", slot_item_food_bonus),
        (val_add, "$g_player_party_morale_modifier_food", ":food_bonus"),
      (try_end),
      (val_add, ":new_morale", "$g_player_party_morale_modifier_food"),
      
      (try_begin),
        (eq, "$g_player_party_morale_modifier_food", 0),
        (assign, "$g_player_party_morale_modifier_no_food", 30),
        (val_sub, ":new_morale", "$g_player_party_morale_modifier_no_food"),
      (else_try),
        (assign, "$g_player_party_morale_modifier_no_food", 0),
      (try_end),
      
      (assign, "$g_player_party_morale_modifier_debt", 0),
      (try_begin),
        (gt, "$g_player_debt_to_party_members", 0),
        (call_script, "script_calculate_player_faction_wage"),
        (assign, ":total_wages", reg0),
        (store_mul, "$g_player_party_morale_modifier_debt", "$g_player_debt_to_party_members", 10),
        (val_div, "$g_player_party_morale_modifier_debt", ":total_wages"),
        (val_clamp, "$g_player_party_morale_modifier_debt", 1, 31),
        (val_sub, ":new_morale", "$g_player_party_morale_modifier_debt"),
      (try_end),
      
      (val_clamp, ":new_morale", 0, 100),
      (assign, reg0, ":new_morale"),
  ]),
  
  # script_diplomacy_start_war_between_factions
  # Input: arg1 = galacticempire, arg2 = rebelalliance, arg3 = initializing_war_peace_cond
  # Output: none
  ("diplomacy_start_war_between_factions", #sets relations between two factions and their vassals.
    [
      (store_script_param, ":faction_a", 1),
      (store_script_param, ":faction_b", 2),
      (store_script_param, ":initializing_war_peace_cond", 3),
      
      (store_relation, ":relation", ":faction_a", ":faction_b"),
      (val_min, ":relation", -10),
      (val_add, ":relation", -30),
      (set_relation, ":faction_a", ":faction_b", ":relation"),
      
      (try_begin),
        (eq, "$players_faction", ":faction_a"),
        (store_relation, ":relation", "fac_player_supporters_faction", ":faction_b"),
        (val_min, ":relation", -30),
        (call_script, "script_set_player_relation_with_faction", ":faction_b", ":relation"),
      (else_try),
        (eq, "$players_faction", ":faction_b"),
        (store_relation, ":relation", "fac_player_supporters_faction", ":faction_a"),
        (val_min, ":relation", -30),
        (call_script, "script_set_player_relation_with_faction", ":faction_a", ":relation"),
      (try_end),
      
      (try_begin),
        (eq, ":initializing_war_peace_cond", 1),
        (try_begin),
          (store_random_in_range, ":random_no", 0, 2),
          (this_or_next|eq, ":faction_a", "fac_player_supporters_faction"),
          (eq, ":random_no", 0),
          (assign, ":local_temp", ":faction_a"),
          (assign, ":faction_a", ":faction_b"),
          (assign, ":faction_b", ":local_temp"),
        (try_end),
        (str_store_faction_name_link, s1, ":faction_a"),
        (str_store_faction_name_link, s2, ":faction_b"),
        (display_log_message, "@{s1} has declared war against {s2}.", color_quest_and_faction_news),
        
        (call_script, "script_add_notification_menu", "mnu_notification_war_declared", ":faction_a", ":faction_b"),
        
        (call_script, "script_update_faction_notes", ":faction_a"),
        (call_script, "script_update_faction_notes", ":faction_b"),
        (assign, "$g_recalculate_ais", 1),
      (try_end),
  ]),
  
  # script_diplomacy_start_war_between_factions
  # Input: arg1 = galacticempire, arg2 = rebelalliance, arg3 = initializing_war_peace_cond
  # Output: none
  ("swc_init_rebels_vs_empire", #sets relations between two factions and their vassals.
    [
      (store_script_param, ":faction_a", 1),
      (store_script_param, ":faction_b", 2),
      (store_script_param, ":initializing_war_peace_cond", 3),
      
      (store_relation, ":relation", ":faction_a", ":faction_b"),
      (val_min, ":relation", -10),
      (val_add, ":relation", -30),
      (set_relation, ":faction_a", ":faction_b", ":relation"),
      
      (try_begin),
        (eq, "$players_faction", ":faction_a"),
        (store_relation, ":relation", "fac_player_supporters_faction", ":faction_b"),
        (val_min, ":relation", -30),
        (call_script, "script_set_player_relation_with_faction", ":faction_b", ":relation"),
      (else_try),
        (eq, "$players_faction", ":faction_b"),
        (store_relation, ":relation", "fac_player_supporters_faction", ":faction_a"),
        (val_min, ":relation", -30),
        (call_script, "script_set_player_relation_with_faction", ":faction_a", ":relation"),
      (try_end),
      
      (try_begin),
        (eq, ":initializing_war_peace_cond", 1),
        (try_begin),
          (store_random_in_range, ":random_no", 0, 2),
          (this_or_next|eq, ":faction_a", "fac_player_supporters_faction"),
          (eq, ":random_no", 0),
          (assign, ":local_temp", ":faction_a"),
          (assign, ":faction_a", ":faction_b"),
          (assign, ":faction_b", ":local_temp"),
        (try_end),
        (str_store_faction_name_link, s1, ":faction_a"),
        (str_store_faction_name_link, s2, ":faction_b"),
        (display_log_message, "@{s1} and {s2} are engaged in war for the galactic supremacy.", color_quest_and_faction_news),
        
        #(call_script, "script_add_notification_menu", "mnu_notification_war_declared", ":faction_a", ":faction_b"),
        
        (call_script, "script_update_faction_notes", ":faction_a"),
        (call_script, "script_update_faction_notes", ":faction_b"),
        (assign, "$g_recalculate_ais", 1),
      (try_end),
  ]),
  
  # script_party_calculate_and_set_nearby_friend_strength
  # Input: party_no
  # Output: none
  ("party_calculate_and_set_nearby_friend_strength",
    [
      (store_script_param, ":party_no", 1),
      (assign, ":follower_strength", 0),
      (assign, ":friend_strength", 0),
      (assign, ":enemy_strength", 0),
      (store_faction_of_party, ":party_faction", ":party_no"),
      
      (store_add, ":end_cond", faction_heroes_end, 1),
      (try_for_range, ":iteration", faction_heroes_begin, ":end_cond"),
        (try_begin),
          (eq, ":iteration", faction_heroes_end),
          (assign, ":cur_troop", "trp_player"),
        (else_try),
          (assign, ":cur_troop", ":iteration"),
        (try_end),
        (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_faction_hero),
        (troop_get_slot, ":cur_troop_party", ":cur_troop", slot_troop_leaded_party),
        (ge, ":cur_troop_party", 0),
        (party_is_active, ":cur_troop_party"),
        (neq, ":party_no", ":cur_troop_party"),
        (party_get_slot, ":str", ":cur_troop_party", slot_party_cached_strength),
        (try_begin),
          (party_get_slot, ":commander_party", ":cur_troop_party", slot_party_commander_party),
          (eq, ":commander_party", ":party_no"),
          (val_add, ":follower_strength", ":str"),
        (try_end),
        (store_distance_to_party_from_party, ":distance", ":cur_troop_party", ":party_no"),
        (lt, ":distance", 10),
        (store_troop_faction, ":army_faction", ":cur_troop"),
        (store_relation, ":rel", ":army_faction", ":party_faction"),
        (try_begin),
          (this_or_next|eq, ":army_faction", ":party_faction"),
          (gt, ":rel", 0),
          (val_add, ":friend_strength", ":str"),
        (else_try),
          (lt, ":rel", 0),
          (val_add, ":enemy_strength", ":str"),
        (try_end),
      (try_end),
      (party_set_slot, ":party_no", slot_party_follower_strength, ":follower_strength"),
      (party_set_slot, ":party_no", slot_party_nearby_friend_strength, ":friend_strength"),
      (party_set_slot, ":party_no", slot_party_nearby_enemy_strength, ":enemy_strength"),
  ]),
  
  # script_init_ai_calculation
  # Input: none
  # Output: none
  ("init_ai_calculation",
    [
      (try_for_range, ":cur_troop", heroes_begin, heroes_end),
        (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_faction_hero),
        (troop_get_slot, ":cur_party", ":cur_troop", slot_troop_leaded_party),
        (ge, ":cur_party", 0),
        (call_script, "script_party_calculate_strength", ":cur_party", 0), #will update slot_party_cached_strength
      (try_end),
      (call_script, "script_party_calculate_strength", "p_main_party", 0), #will update slot_party_cached_strength
      (try_for_range, ":cur_center", walled_centers_begin, walled_centers_end),
        (call_script, "script_party_calculate_strength", ":cur_center", 0), #will update slot_party_cached_strength
      (try_end),
      
      (try_for_range, ":cur_center", walled_centers_begin, walled_centers_end),
        (call_script, "script_party_calculate_and_set_nearby_friend_strength", ":cur_center"),
      (try_end),
      
      (try_for_range, ":cur_troop", heroes_begin, heroes_end),
        (troop_get_slot, ":cur_troop_party", ":cur_troop", slot_troop_leaded_party),
        (gt, ":cur_troop_party", 0),
        (call_script, "script_party_calculate_and_set_nearby_friend_strength", ":cur_troop_party"),
      (try_end),
      (call_script, "script_party_calculate_and_set_nearby_friend_strength", "p_main_party"),
  ]),
  
  
  # script_recalculate_ais
  # Input: none
  # Output: none
  ("recalculate_ais",
    [
      (call_script, "script_init_ai_calculation"),
      
      (try_for_range, ":faction_no", factions_begin, factions_end),
        (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
        (neg|faction_slot_eq, ":faction_no",  slot_faction_marshall, "trp_player"),
        (call_script, "script_decide_faction_ai", ":faction_no"),
      (try_end),
      (call_script, "script_decide_faction_party_ais"),
  ]),
  
  # script_recalculate_ai_for_troop
  # Input: none
  # Output: none
  ("recalculate_ai_for_troop",
    [
      (store_script_param, ":troop_no", 1),
      (call_script, "script_init_ai_calculation"),
      (call_script, "script_calculate_troop_ai", ":troop_no"),
      (call_script, "script_calculate_troop_ai_under_command", ":troop_no"),
  ]),
  
  # script_calculate_troop_ai
  # Input: troop_no
  # Output: none
  ("calculate_troop_ai",
    [
      (store_script_param, ":troop_no", 1),
      (try_begin),
        (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_faction_hero),
        #(troop_slot_eq, ":troop_no", slot_troop_is_prisoner, 0),
        (neg|troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
        (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
        (gt, ":party_no", 0),
        (party_slot_eq, ":party_no", slot_party_following_player, 0),
        (store_faction_of_party, ":faction_no", ":party_no"),
        (assign, ":continue", 1),
        (try_begin),
          (faction_slot_eq, ":faction_no", slot_faction_marshall, ":troop_no"), # do not calculate AI if troop is marshall.
          (neg|faction_slot_eq, ":faction_no", slot_faction_ai_state, sfai_default),
          (assign, ":continue", 0),
        (try_end),
        (eq, ":continue", 1),
        (call_script, "script_party_count_fit_for_battle", ":party_no"),
        (assign, ":party_fit_for_battle", reg0),
        (call_script, "script_party_get_ideal_size", ":party_no"),
        (assign, ":ideal_size", reg0),
        (store_mul, "$party_relative_strength", ":party_fit_for_battle", 100),
        (val_div, "$party_relative_strength", ":ideal_size"),
        (try_begin),
          (faction_slot_eq, ":faction_no", slot_faction_num_towns, 0),
          (faction_slot_eq, ":faction_no", slot_faction_num_castles, 0),
          (assign, "$ratio_of_prisoners", 0), #do not let prisoners have an effect on ai calculation
        (else_try),
          (party_get_num_prisoners, ":num_prisoners", ":party_no"),
          (try_begin),
            #swy-- FIXME hack! avoid divisions by zero (?!)
            (this_or_next|eq,       ":num_prisoners",           0),
            (             eq,       ":party_fit_for_battle",    0),
            # ----
            (assign,                "$ratio_of_prisoners",      0),
          (else_try),
            (store_div,             "$ratio_of_prisoners",     ":num_prisoners",
                                                               ":party_fit_for_battle"),
          (try_end),
        (try_end),
        (call_script, "script_faction_hero_decide_next_ai_state_follow_or_not", ":troop_no"),
        (party_slot_eq, ":party_no", slot_party_commander_party, -1),
        (call_script, "script_faction_hero_decide_next_ai_state", ":troop_no"),
      (try_end),
  ]),
  
  # script_calculate_troop_ai_under_command
  # Input: troop_no
  # Output: none
  ("calculate_troop_ai_under_command",
    [
      (store_script_param, ":troop_no", 1),
      (try_begin),
        (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_faction_hero),
        #(troop_slot_eq, ":troop_no", slot_troop_is_prisoner, 0),
        (neg|troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
        (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
        (gt, ":party_no", 0),
        (party_slot_ge, ":party_no", slot_party_commander_party, 0),
        (party_set_ai_initiative, ":party_no", 50),
        (call_script, "script_party_decide_next_ai_state_under_command", ":party_no"),
      (try_end),
  ]),
  
  #==================================================================================================================
  #SW - modified script so galacticempire and rebelalliance cannot make peace
  # script_diplomacy_start_peace_between_factions
  # Input: arg1 = galacticempire, arg2 = rebelalliance, arg3 = initializing_war_peace_cond
  # Output: none
  ("diplomacy_start_peace_between_factions", #sets relations between two factions
    [
      (store_script_param, ":faction_a", 1),
      (store_script_param, ":faction_b", 2),
      (store_script_param, ":initializing_war_peace_cond", 3),
      
      #-------------------------------------------------------------
      #SW - modified so galacticempire and rebelalliance cannot make peace (nevermind, I modified randomly_start_war_peace instead)
      # (try_begin),
      # (eq, ":faction_a","fac_galacticempire"),
      # (eq, ":faction_b","fac_rebelalliance"),
      # #(display_log_message, "@{s1} and {s2} have rejected the peace offer."),
      # (assign, ":initializing_war_peace_cond", 0),
      # (else_try),
      # (eq, ":faction_a","fac_rebelalliance"),
      # (eq, ":faction_b","fac_galacticempire"),
      # #(display_log_message, "@{s1} and {s2} have rejected the peace offer."),
      # (assign, ":initializing_war_peace_cond", 0),
      # (try_end),
      #-------------------------------------------------------------
      
      (store_relation, ":relation", ":faction_a", ":faction_b"),
      (val_max, ":relation", 0),
      (set_relation, ":faction_a", ":faction_b", ":relation"),
      (call_script, "script_exchange_prisoners_between_factions", ":faction_a", ":faction_b"),
      
      (try_begin),
        (eq, "$players_faction", ":faction_a"),
        (store_relation, ":relation", "fac_player_supporters_faction", ":faction_b"),
        (val_max, ":relation", 0),
        (call_script, "script_set_player_relation_with_faction", ":faction_b", ":relation"),
        (call_script, "script_event_faction_make_peace_with_faction", ":faction_b", "fac_player_supporters_faction"),
      (else_try),
        (eq, "$players_faction", ":faction_b"),
        (store_relation, ":relation", "fac_player_supporters_faction", ":faction_a"),
        (val_max, ":relation", 0),
        (call_script, "script_set_player_relation_with_faction", ":faction_a", ":relation"),
        (call_script, "script_event_faction_make_peace_with_faction", ":faction_a", "fac_player_supporters_faction"),
      (try_end),
      
      (try_begin),
        (eq, ":initializing_war_peace_cond", 1),
        (str_store_faction_name_link, s1, ":faction_a"),
        (str_store_faction_name_link, s2, ":faction_b"),
        (display_log_message, "@{s1} and {s2} have made peace with each other.", color_quest_and_faction_news),
        (call_script, "script_update_faction_notes", ":faction_a"),
        (call_script, "script_update_faction_notes", ":faction_b"),
        
        (call_script, "script_add_notification_menu", "mnu_notification_peace_declared", ":faction_a", ":faction_b"),
        
        (call_script, "script_event_faction_make_peace_with_faction", ":faction_a", ":faction_b"),
        (call_script, "script_event_faction_make_peace_with_faction", ":faction_b", ":faction_a"),
        (assign, "$g_recalculate_ais", 1),
      (try_end),
  ]),
  #===================================================================================================================
  
  # script_event_faction_make_peace_with_faction
  # Input: arg1 = source_faction, arg2 = target_faction
  # Output: none
  ("event_faction_make_peace_with_faction",
    [
      (store_script_param_1, ":source_faction"),
      (store_script_param_2, ":target_faction"),
      (try_begin),
        (check_quest_active, "qst_capture_prisoners"),
        (try_begin),
          (eq, "$players_faction", ":source_faction"),
          (quest_slot_eq, "qst_capture_prisoners", slot_quest_target_faction, ":target_faction"),
          (call_script, "script_cancel_quest", "qst_capture_prisoners"),
        (else_try),
          (eq, "$players_faction", ":target_faction"),
          (quest_slot_eq, "qst_capture_prisoners", slot_quest_target_faction, ":source_faction"),
          (call_script, "script_cancel_quest", "qst_capture_prisoners"),
        (try_end),
      (try_end),
  ]),
  
  # script_randomly_start_war_peace
  # Input: arg1 = initializing_war_peace_cond (1 = true, 0 = false)
  # Output: none
  ("randomly_start_war_peace",
    [
      
      #SW new (more basic) randomly_start_war_peace script (galacticempire = empire, rebelalliance = rebel, huttcartel = hutt)
      
      #workaround to prevent script errors?
      (store_script_param_1, ":initializing_war_peace_cond"),
      (assign, ":initializing_war_peace_cond", 1),
      
      #get current faction relations
      (store_relation,":empire_rebel_relation","fac_galacticempire","fac_rebelalliance"),
      (store_relation,":hutt_empire_relation","fac_huttcartel","fac_galacticempire"),
      (store_relation,":hutt_rebel_relation","fac_huttcartel","fac_rebelalliance"),
      #(assign, reg1, ":empire_rebel_relation"), #debug only
      #(assign, reg2, ":hutt_empire_relation"), #debug only
      #(assign, reg3, ":hutt_rebel_relation"), #debug only
      #(display_message, "@Empire/Rebel = {reg1}, Hutt/Empire = {reg2}, Hutt/Rebel = {reg3}"),  #debug only
      
      #rebel/empire code
      (try_begin),
        (ge, ":empire_rebel_relation", 0),      #make sure empire and rebel are always at war
        (call_script, "script_diplomacy_start_war_between_factions", "fac_galacticempire", "fac_rebelalliance",":initializing_war_peace_cond"),
      (try_end),
      
      #hutt faction code
      #get total wars
      (assign, ":num_hutt_ongoing_wars", 0),
      (try_begin),
        (lt, ":hutt_empire_relation", 0),
        (val_add, ":num_hutt_ongoing_wars", 1),
      (try_end),
      (try_begin),
        (lt, ":hutt_rebel_relation", 0),
        (val_add, ":num_hutt_ongoing_wars", 1),
      (try_end),
      #(assign, reg1, ":num_hutt_ongoing_wars"), #debug only
      #(display_message, "@Hutt Wars = {reg1}"),   #debug only
      
      #hutt war/peace logic
      (try_begin),
        (ge, ":num_hutt_ongoing_wars", 2),   #hutt is small and can't handle two wars at once, force peace
        (store_random_in_range, ":random_no", 0, 100),
        (try_begin),
          (le, ":random_no", 50),   #50% chance of forced peace with empire
          (call_script, "script_diplomacy_start_peace_between_factions", "fac_huttcartel", "fac_galacticempire",":initializing_war_peace_cond"),
        (else_try),
          #50% chance of forced peace with rebel
          (call_script, "script_diplomacy_start_peace_between_factions", "fac_huttcartel", "fac_rebelalliance",":initializing_war_peace_cond"),
        (try_end),
      (else_try),
        (eq, ":num_hutt_ongoing_wars", 1),   #hutt is small and may want to make peace with the faction they are at war with
        (store_random_in_range, ":random_no", 0, 100),
        (try_begin),
          (le, ":random_no", 5),    #5% chance of peace
          (try_begin),
            (lt, ":hutt_empire_relation", 0),   #negative relation means they are at war
            (call_script, "script_diplomacy_start_peace_between_factions", "fac_huttcartel", "fac_galacticempire",":initializing_war_peace_cond"),
          (try_end),
          (try_begin),
            (lt, ":hutt_rebel_relation", 0), #negative relation means they are at war
            (call_script, "script_diplomacy_start_peace_between_factions", "fac_huttcartel", "fac_rebelalliance",":initializing_war_peace_cond"),
          (try_end),
        (try_end),
      (else_try),
        # hutt is small but has a chance of declaring war on a faction
        (store_random_in_range, ":random_no", 0, 100),
        (try_begin),
          (le, ":random_no", 10),   #10% chance of war
          (store_random_in_range, ":random_no", 0, 100),
          (try_begin),
            (le, ":random_no", 50),    #50% chance of war with empire
            (call_script, "script_diplomacy_start_war_between_factions", "fac_huttcartel", "fac_galacticempire",":initializing_war_peace_cond"),
          (else_try),
            (call_script, "script_diplomacy_start_war_between_factions", "fac_huttcartel", "fac_rebelalliance",":initializing_war_peace_cond"),
          (try_end),
        (try_end),
      (try_end),
      
  ]),
  
  #-----------------------------------------------------------------------------------------------------------------------------
  
  # # script_randomly_start_war_peace
  # # Input: arg1 = initializing_war_peace_cond (1 = true, 0 = false)
  # # Output: none
  # ("randomly_start_war_peace",
  # [
  #SW - commented out original randomly_start_war_peace
  #(store_script_param_1, ":initializing_war_peace_cond"),
  # (assign, ":total_resources", 0),
  # (assign, ":total_active_factions", 0),
  # (try_for_range, ":cur_faction", factions_begin, factions_end),
  # (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
  # (val_add, ":total_active_factions", 1),
  # (faction_get_slot, ":num_towns", ":cur_faction", slot_faction_num_towns),
  # (store_mul, ":faction_resources_value", ":num_towns", 2),
  # (faction_get_slot, ":num_castles", ":cur_faction", slot_faction_num_castles),
  # (val_add, ":faction_resources_value", ":num_castles"),
  # (val_mul, ":faction_resources_value", 10),
  # (val_max, ":faction_resources_value", 1),
  # (val_mul, ":faction_resources_value", 1000),
  # (faction_get_slot, ":num_armies", ":cur_faction", slot_faction_num_armies),
  # (val_max, ":num_armies", 1),
  # (val_div, ":faction_resources_value", ":num_armies"),
  # (val_add, ":total_resources", ":faction_resources_value"),
  # (try_end),
  # (val_max, ":total_active_factions", 1),
  # (store_div, ":average_resources", ":total_resources", ":total_active_factions"),
  
  # (try_for_range, ":cur_faction", factions_begin, factions_end),
  # ##       (neq, ":cur_faction", "fac_player_supporters_faction"),
  # (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
  # (assign, ":num_ongoing_wars", 0),
  # (try_for_range, ":other_faction", factions_begin, factions_end),
  # (faction_slot_eq, ":other_faction", slot_faction_state, sfs_active),
  # (store_relation, ":other_relation", ":cur_faction", ":other_faction"),
  # (lt, ":other_relation", 0),
  # (val_add, ":num_ongoing_wars", 1),
  # (try_end),
  
  # (faction_get_slot, ":num_towns", ":cur_faction", slot_faction_num_towns),
  # (store_mul, ":galacticempire_resources_value", ":num_towns", 2),
  # (faction_get_slot, ":num_castles", ":cur_faction", slot_faction_num_castles),
  # (val_add, ":galacticempire_resources_value", ":num_castles"),
  # (val_mul, ":galacticempire_resources_value", 10),
  # (val_max, ":galacticempire_resources_value", 1),
  # (val_mul, ":galacticempire_resources_value", 1000),
  # (faction_get_slot, ":num_armies", ":cur_faction", slot_faction_num_armies),
  # (val_max, ":num_armies", 1),
  # (val_div, ":galacticempire_resources_value", ":num_armies"),
  
  # (store_add, ":start_cond", ":cur_faction", 1),
  # (try_for_range, ":cur_rebelalliance", ":start_cond", factions_end),
  # ##         (neq, ":cur_faction", "fac_player_supporters_faction"),
  # (faction_slot_eq, ":cur_rebelalliance", slot_faction_state, sfs_active),
  
  # (assign, ":num_ongoing_wars_2", 0),
  # (try_for_range, ":other_faction", factions_begin, factions_end),
  # (faction_slot_eq, ":other_faction", slot_faction_state, sfs_active),
  # (store_relation, ":other_relation", ":cur_rebelalliance", ":other_faction"),
  # (lt, ":other_relation", 0),
  # (val_add, ":num_ongoing_wars_2", 1),
  # (try_end),
  
  # (store_add, ":total_ongoing_wars", ":num_ongoing_wars", ":num_ongoing_wars_2"),
  
  # (faction_get_slot, ":num_towns", ":cur_rebelalliance", slot_faction_num_towns),
  # (store_mul, ":rebelalliance_resources_value", ":num_towns", 2),
  # (faction_get_slot, ":num_castles", ":cur_rebelalliance", slot_faction_num_castles),
  # (val_add, ":rebelalliance_resources_value", ":num_castles"),
  # (val_mul, ":rebelalliance_resources_value", 10),
  # (val_max, ":rebelalliance_resources_value", 1),
  # (val_mul, ":rebelalliance_resources_value", 1000),
  # (faction_get_slot, ":num_armies", ":cur_rebelalliance", slot_faction_num_armies),
  # (val_max, ":num_armies", 1),
  # (val_div, ":rebelalliance_resources_value", ":num_armies"),
  
  # (assign, ":max_resources_value", ":galacticempire_resources_value"),
  # (val_max, ":max_resources_value", ":rebelalliance_resources_value"),
  # (val_mul, ":max_resources_value", 100),
  # (val_div, ":max_resources_value", ":average_resources"),
  
  # (assign, ":cur_king", -1),
  # (try_begin),
  # (eq, ":cur_faction", "fac_player_supporters_faction"),
  # (faction_get_slot, ":cur_king", ":cur_rebelalliance", slot_faction_leader),
  # (assign, ":cur_relation", reg0),
  # (store_sub, ":relation_effect", 200, ":cur_relation"),
  # (val_mul, ":galacticempire_resources_value", ":relation_effect"),
  # (val_div, ":galacticempire_resources_value", 200),
  # (else_try),
  # (eq, ":cur_rebelalliance", "fac_player_supporters_faction"),
  # (faction_get_slot, ":cur_king", ":cur_faction", slot_faction_leader),
  # (try_end),
  
  # (try_begin),
  # (ge, ":cur_king", 0),
  # (call_script, "script_troop_get_player_relation", ":cur_king"),
  # (assign, ":cur_relation", reg0),
  # (store_sub, ":relation_effect", 200, ":cur_relation"),
  # (val_mul, ":max_resources_value", ":relation_effect"),
  # (val_div, ":max_resources_value", 200),
  # (try_end),
  
  # #max_resources_value is the obtained value that gives us how tempting the faction's values are
  # #average is 100
  # (val_clamp, ":max_resources_value", 20, 500),
  # #not letting more than 5 times higher chance of declaring war or peace
  
  # (store_random_in_range, ":random_no", 0, 10000),
  # (store_relation, ":cur_relation", ":cur_faction", ":cur_rebelalliance"),
  # (try_begin),
  # (lt, ":cur_relation", 0), #AT WAR
  # #SW - possibly modify something here so they don't make peace?
  # (store_mul, ":chance_to_make_peace", ":total_ongoing_wars", 50),
  # (val_mul, ":chance_to_make_peace", 100),
  # (val_div, ":chance_to_make_peace", ":max_resources_value"),
  # (try_begin),
  # #disable random peace for special conditions
  # (this_or_next|eq, ":cur_faction", "fac_player_supporters_faction"),
  # (eq, ":cur_rebelalliance", "fac_player_supporters_faction"),
  # (assign, ":continue", 0),
  # (try_begin),
  # (gt, "$supported_pretender", 0),
  # (this_or_next|eq, ":cur_faction", "$supported_pretender_old_faction"),
  # (eq, ":cur_rebelalliance", "$supported_pretender_old_faction"),
  # (assign, ":continue", 1),
  # (else_try),
  # (is_between, "$players_oath_renounced_against_faction", factions_begin, factions_end),
  # (this_or_next|eq, ":cur_faction", "$players_oath_renounced_against_faction"),
  # (eq, ":cur_rebelalliance", "$players_oath_renounced_against_faction"),
  # (assign, ":continue", 1),
  # (try_end),
  # (eq, ":continue", 1),
  # (assign, ":chance_to_make_peace", 0),
  # (try_end),
  # (try_begin),
  # (lt, ":random_no", ":chance_to_make_peace"),
  # (assign, ":continue", 1),
  # (try_begin),
  # (check_quest_active, "qst_persuade_lords_to_make_peace"),
  # (quest_get_slot, ":quest_target_faction", "qst_persuade_lords_to_make_peace", slot_quest_target_faction),
  # (quest_get_slot, ":quest_object_faction", "qst_persuade_lords_to_make_peace", slot_quest_object_faction),
  # (this_or_next|eq, ":cur_faction", ":quest_target_faction"),
  # (eq, ":cur_faction", ":quest_object_faction"),
  # (this_or_next|eq, ":cur_rebelalliance", ":quest_target_faction"),
  # (eq, ":cur_rebelalliance", ":quest_object_faction"),
  # (assign, ":continue", 0), #Do not declare war if the quest is active for the specific factions
  # (try_end),
  # (eq, ":continue", 1),
  # (try_begin),
  # (eq, ":cur_faction", "fac_player_supporters_faction"),
  # (call_script, "script_add_notification_menu", "mnu_question_peace_offer", ":cur_rebelalliance", 0),
  # (else_try),
  # (eq, ":cur_rebelalliance", "fac_player_supporters_faction"),
  # (call_script, "script_add_notification_menu", "mnu_question_peace_offer", ":cur_faction", 0),
  # (else_try),
  # (call_script, "script_diplomacy_start_peace_between_factions", ":cur_faction", ":cur_rebelalliance", ":initializing_war_peace_cond"),
  # (try_end),
  # (try_end),
  # (else_try), # AT PEACE
  # #SW - possibly modify something here so factions are always at war?
  # (assign, ":chance_to_declare_war", 6),
  # (val_sub, ":chance_to_declare_war", ":total_ongoing_wars"),
  # (val_mul, ":chance_to_declare_war", 50),
  # (val_mul, ":chance_to_declare_war", ":max_resources_value"),
  # (val_div, ":chance_to_declare_war", 100),
  # (try_begin),
  # (lt, ":random_no", ":chance_to_declare_war"),
  # (assign, ":continue", 1),
  # (try_begin),
  # (check_quest_active, "qst_raid_caravan_to_start_war"),
  # (quest_get_slot, ":quest_target_faction", "qst_raid_caravan_to_start_war", slot_quest_target_faction),
  # (quest_get_slot, ":quest_object_faction", "qst_raid_caravan_to_start_war", slot_quest_object_faction),
  # (this_or_next|eq, ":cur_faction", ":quest_target_faction"),
  # (eq, ":cur_faction", ":quest_object_faction"),
  # (this_or_next|eq, ":cur_rebelalliance", ":quest_target_faction"),
  # (eq, ":cur_rebelalliance", ":quest_object_faction"),
  # (assign, ":continue", 0), #Do not declare war if the quest is active for the specific factions
  
  # # HC - Try to stop peace between Rebels and the Empire:
  # # (try_begin),
  # # (try_begin),
  # # (this_or_next|eq, ":cur_faction", fac_galacticempire),
  # # (          eq, ":cur_rebelalliance", fac_rebelalliance),
  # # (assign, ":continue", 0),
  # # (try_end),
  
  # # (try_begin),
  # # (this_or_next|eq, ":cur_faction", fac_rebelalliance),
  # # (          eq, ":cur_rebelalliance", fac_galacticempire),
  # # (assign, ":continue", 0),
  # # (try_end),
  # # (try_end),
  # # HC - End
  
  # #------------------------------------------------------------------------------------------------------
  # #SW - commented out the above logic since it doesn't seem to be correct, trying different approach.... (nope, this didn't work great either)
  # (try_begin),
  # (eq, ":cur_faction", fac_galacticempire),
  # (eq, ":cur_rebelalliance", fac_rebelalliance),
  # (assign, ":continue", 0),
  # (try_end),
  # (try_begin),
  # (eq, ":cur_faction", fac_rebelalliance),
  # (eq, ":cur_rebelalliance", fac_galacticempire),
  # (assign, ":continue", 0),
  # (try_end),
  # #------------------------------------------------------------------------------------------------------
  
  # (try_end),
  # (eq, ":continue", 1),
  # (call_script, "script_diplomacy_start_war_between_factions", ":cur_faction", ":cur_rebelalliance", ":initializing_war_peace_cond"),
  # (try_end),
  # (try_end),
  # (try_end),
  # (try_end),
  # ]),
  
  # script_exchange_prisoners_between_factions
  # Input: arg1 = faction_no_1, arg2 = faction_no_2
  ("exchange_prisoners_between_factions",
    [
      (store_script_param_1, ":faction_no_1"),
      (store_script_param_2, ":faction_no_2"),
      (assign, ":faction_no_3", -1),
      (assign, ":faction_no_4", -1),
      (try_begin),
        (this_or_next|eq, "$players_faction", ":faction_no_1"),
        (eq, "$players_faction", ":faction_no_2"),
        (assign, ":faction_no_3", "fac_player_faction"),
        (assign, ":faction_no_4", "fac_player_supporters_faction"),
      (try_end),
      
      (try_for_parties, ":party_no"),
        (store_faction_of_party, ":party_faction", ":party_no"),
        (this_or_next|eq, ":party_faction", ":faction_no_1"),
        (this_or_next|eq, ":party_faction", ":faction_no_2"),
        (this_or_next|eq, ":party_faction", ":faction_no_3"),
        (eq, ":party_faction", ":faction_no_4"),
        (party_get_num_prisoner_stacks, ":num_stacks", ":party_no"),
        (try_for_range_backwards, ":troop_iterator", 0, ":num_stacks"),
          (party_prisoner_stack_get_troop_id, ":cur_troop_id", ":party_no", ":troop_iterator"),
          (store_troop_faction, ":cur_faction", ":cur_troop_id"),
          (this_or_next|eq, ":cur_faction", ":faction_no_1"),
          (this_or_next|eq, ":cur_faction", ":faction_no_2"),
          (this_or_next|eq, ":cur_faction", ":faction_no_3"),
          (eq, ":cur_faction", ":faction_no_4"),
          (try_begin),
            (troop_is_hero, ":cur_troop_id"),
            (call_script, "script_remove_troop_from_prison", ":cur_troop_id"),
          (try_end),
          (party_prisoner_stack_get_size, ":stack_size", ":party_no", ":troop_iterator"),
          (party_remove_prisoners, ":party_no", ":cur_troop_id", ":stack_size"),
        (try_end),
      (try_end),
  ]),
  
  # script_add_notification_menu
  # Input: arg1 = menu_no, arg2 = menu_var_1, arg3 = menu_var_2
  # Output: none
  ("add_notification_menu",
    [
      (store_script_param, ":menu_no", 1),
      (store_script_param, ":menu_var_1", 2),
      (store_script_param, ":menu_var_2", 3),
      (assign, ":end_cond", 1),
      (try_for_range, ":cur_slot", 0, ":end_cond"),
        (try_begin),
          (troop_slot_ge, "trp_notification_menu_types", ":cur_slot", 1),
          (val_add, ":end_cond", 1),
        (else_try),
          (troop_set_slot, "trp_notification_menu_types", ":cur_slot", ":menu_no"),
          (troop_set_slot, "trp_notification_menu_var1", ":cur_slot", ":menu_var_1"),
          (troop_set_slot, "trp_notification_menu_var2", ":cur_slot", ":menu_var_2"),
        (try_end),
      (try_end),
  ]),
  
  # script_finish_quest
  # Input: arg1 = quest_no, arg2 = finish_percentage
  # Output: none
  ("finish_quest",
    [
      (store_script_param_1, ":quest_no"),
      (store_script_param_2, ":finish_percentage"),
      
      (quest_get_slot, ":quest_giver", ":quest_no", slot_quest_giver_troop),
      (quest_get_slot, ":quest_importance", ":quest_no", slot_quest_importance),
      (quest_get_slot, ":quest_xp_reward", ":quest_no", slot_quest_xp_reward),
      (quest_get_slot, ":quest_gold_reward", ":quest_no", slot_quest_gold_reward),
      
      (try_begin),
        (lt, ":finish_percentage", 100),
        (val_mul, ":quest_xp_reward", ":finish_percentage"),
        (val_div, ":quest_xp_reward", 100),
        (val_mul, ":quest_gold_reward", ":finish_percentage"),
        (val_div, ":quest_gold_reward", 100),
        #Changing the relation factor. Negative relation if less than 75% of the quest is finished.
        #Positive relation if more than 75% of the quest is finished.
        (assign, ":importance_multiplier", ":finish_percentage"),
        (val_sub, ":importance_multiplier", 75),
        (val_mul, ":quest_importance", ":importance_multiplier"),
        (val_div, ":quest_importance", 100),
      (else_try),
        (val_div, ":quest_importance", 4),
        (val_add, ":quest_importance", 1),
        (call_script, "script_change_player_relation_with_troop", ":quest_giver", ":quest_importance"),
      (try_end),
      
      (add_xp_as_reward, ":quest_xp_reward"),
      (call_script, "script_troop_add_gold", "trp_player", ":quest_gold_reward"),
      (call_script, "script_end_quest", ":quest_no"),
  ]),
  
  
  # script_get_information_about_troops_position
  # Input: arg1 = troop_no, arg2 = time (0 if present tense, 1 if past tense)
  # Output: s1 = String, reg0 = knows-or-not
  ("get_information_about_troops_position",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, reg3),
      ]+gender_fix(reg4, ":troop_no")+[
      (str_store_troop_name, s2, ":troop_no"),
      
      (assign, ":found", 0),
      (troop_get_slot, ":center_no", ":troop_no", slot_troop_cur_center),
      (try_begin),
        (gt, ":center_no", 0),
        (is_between, ":center_no", centers_begin, centers_end),
        (str_store_party_name_link, s3, ":center_no"),
        (str_store_string, s1, "@{s2} {reg3?was:is currently} at {s3}."),
        (assign, ":found", 1),
      (else_try),
        (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
        (gt, ":party_no", 0),
        (call_script, "script_get_troop_attached_party", ":troop_no"),
        (assign, ":center_no", reg0),
        (try_begin),
          (is_between, ":center_no", centers_begin, centers_end),
          (str_store_party_name_link, s3, ":center_no"),
          (str_store_string, s1, "@{s2} {reg3?was:is currently} at {s3}."),
          (assign, ":found", 1),
        (else_try),
          (get_party_ai_behavior, ":ai_behavior", ":party_no"),
          (eq, ":ai_behavior", ai_bhvr_travel_to_party),
          (get_party_ai_object, ":ai_object", ":party_no"),
          (is_between, ":ai_object", centers_begin, centers_end),
          (call_script, "script_get_closest_center", ":party_no"),
          (str_store_party_name_link, s4, reg0),
          (str_store_party_name_link, s3, ":ai_object"),
          (str_store_string, s1, "@{s2} {reg3?was:is} travelling to {s3} and {reg4?she:he} {reg3?was:should be} close to {s4}{reg3?: at the moment}."),
          (assign, ":found", 1),
        (else_try),
          (call_script, "script_get_closest_center", ":party_no"),
          (str_store_party_name_link, s3, reg0),
          (str_store_string, s1, "@{s2} {reg3?was:is} in wilderness and {reg4?she:he} {reg3?was:should be} close to {s3}{reg3?: at the moment}."),
          (assign, ":found", 1),
        (try_end),
      (else_try),
        #(troop_slot_ge, ":troop_no", slot_troop_is_prisoner, 1),
        (troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
        (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
          (party_count_prisoners_of_type, ":num_prisoners", ":center_no", ":troop_no"),
          (gt, ":num_prisoners", 0),
          (assign, ":found", 1),
          (str_store_party_name_link, s3, ":center_no"),
          (str_store_string, s1, "@{s2} {reg3?was:is} being held captive at {s3}."),
        (try_end),
        (try_begin),
          (eq, ":found", 0),
          (str_store_string, s1, "@{s2} {reg3?was:has been} taken captive by {reg4?her:his} enemies."),
          (assign, ":found", 1),
        (try_end),
      (try_end),
      (try_begin),
        (eq, ":found", 0),
        (str_store_string, s1, "@{reg3?{s2}'s location was unknown:I don't know where {s2} is}."),
      (try_end),
      (assign, reg0, ":found"),
  ]),
  
  # script_recruit_troop_as_companion
  # Input: arg1 = troop_no,
  # Output: none
  ("recruit_troop_as_companion",
    [
      (store_script_param_1, ":troop_no"),
      (troop_set_slot, ":troop_no", slot_troop_occupation, slto_player_companion),
      (troop_set_slot, ":troop_no", slot_troop_cur_center, -1),
      (troop_set_auto_equip, ":troop_no",0),
      (party_add_members, "p_main_party", ":troop_no", 1),
      (str_store_troop_name, s6, ":troop_no"),
      (display_message, "@{s6} has joined your party", color_hero_news),
  ]),
  
  
  # script_setup_random_scene
  # Input: arg1 = center_no, arg2 = mission_template_no
  # Output: none
  ("setup_random_scene",
    [
      #SW - modified so random terrain is based on the closest town
      (assign, ":closest_dist",100000),
      (assign, ":closest_town", -1),
      (try_for_range, ":cur_town", mainplanets_begin, mainplanets_end),
        (store_distance_to_party_from_party, ":dist", ":cur_town","p_main_party"),
        (lt, ":dist", ":closest_dist"),
        (assign, ":closest_dist", ":dist"),
        (assign, ":closest_town", ":cur_town"),
      (try_end),
      
      ###@> New selection, autocorrelation code
      
      (assign, ":scene_to_use", "scn_mainplanet_mandalore_land_battle"),
      
      (try_for_range, ":town_no", mainplanets_begin, mainplanets_end),
        (store_sub, ":offset", ":town_no", mainplanets_begin),
        
        (store_add, ":cur_object_no", "scn_mainplanet_mandalore_land_battle", ":offset"),
        (eq, ":closest_town", ":town_no"),
        (assign, ":scene_to_use", ":cur_object_no"),
        
      (try_end),
      
      
      
      
      
      #(assign, reg7, ":closest_town"), #diagnostic only
      #(display_message, "@setup_random_scene debug: closest_town = {reg7}", 0xFFFFFF),#diagnostic only
      
      ##@> SWY: commented out the Hokie's code, now optimized and automatically finds the correct scene without the need of adding the correlation manually!
      # (try_begin),
      # (eq, ":closest_town", "p_mandalore"),            #Mandalore
      # (assign, ":scene_to_use", "scn_town_1_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_christophsis"),            #christophsis
      # (assign, ":scene_to_use", "scn_town_2_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_endor"),          #Endor
      # (assign, ":scene_to_use", "scn_town_3_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_corellia"),          #Corellia
      # (assign, ":scene_to_use", "scn_town_4_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_naboo"),          #Naboo
      # (assign, ":scene_to_use", "scn_town_5_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_kessel"),            #Kessel
      # (assign, ":scene_to_use", "scn_town_6_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_dantooine"),            #Dantooine
      # (assign, ":scene_to_use", "scn_town_7_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_geonosis"),          #Geonosis
      # (assign, ":scene_to_use", "scn_town_8_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_mon_cal"),           #Mon Cal
      # (assign, ":scene_to_use", "scn_town_9_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_kashyyyk"),          #Kashyyyk
      # (assign, ":scene_to_use", "scn_town_10_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_hoth"),           #Hoth
      # (assign, ":scene_to_use", "scn_town_11_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_gamorr"),            #Gamorr
      # (assign, ":scene_to_use", "scn_town_12_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_yavin_iv"),          #Yavin IV
      # (assign, ":scene_to_use", "scn_town_13_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_tatooine"),          #Tatooine
      # (assign, ":scene_to_use", "scn_town_14_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_manaan"),            #Manaan
      # (assign, ":scene_to_use", "scn_town_15_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_coruscant"),            #Coruscant
      # (assign, ":scene_to_use", "scn_town_16_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_ryloth"),            #Ryloth
      # (assign, ":scene_to_use", "scn_town_17_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_nalhutta"),          #Nal Hutta
      # (assign, ":scene_to_use", "scn_town_18_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_bothawui"),          #Bothawui
      # (assign, ":scene_to_use", "scn_town_19_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_mustafar"),          #Mustafar
      # (assign, ":scene_to_use", "scn_town_20_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_kamino"),            #new plantes by Swyter [Revan Shan's suggestion]
      # (assign, ":scene_to_use", "scn_town_21_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_taris"),          #new plantes by Swyter [Revan Shan's suggestion]
      # (assign, ":scene_to_use", "scn_town_22_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_raxusprime"),           #new plantes by Swyter [Revan Shan's suggestion]
      # (assign, ":scene_to_use", "scn_town_23_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_sarapin"),           #new plantes by Swyter [Revan Shan's suggestion]
      # (assign, ":scene_to_use", "scn_town_24_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_hypori"),            #new plantes by Swyter [Revan Shan's suggestion]
      # (assign, ":scene_to_use", "scn_town_25_land_battle"),
      # (else_try),
      # (eq, ":closest_town", "p_felucia"),           #new plantes by Swyter [Revan Shan's suggestion]
      # (assign, ":scene_to_use", "scn_town_26_land_battle"),
      # (else_try),
      # (assign, ":scene_to_use", "scn_random_scene_plain"),
      # (try_end),
      
      
      
      
      
      
      # (try_begin),
      # (this_or_next|eq, ":closest_town", "p_endor"),   #Endor
      # (eq, ":closest_town", "p_kashyyyk"),          #Kashyyyk
      # (assign, ":scene_to_use", "scn_random_scene_plain_forest"),
      # (else_try),
      # (eq, ":closest_town", "p_hoth"),           #Hoth
      # (assign, ":scene_to_use", "scn_random_scene_snow"),
      # (else_try),
      # (this_or_next|eq, ":closest_town", "p_tatooine"),   #Tatooine
      # (eq, ":closest_town", "p_ryloth"),            #Ryloth
      # (assign, ":scene_to_use", "scn_random_scene_desert"),
      # (else_try),
      # (this_or_next|eq, ":closest_town", "p_gamorr"),  #Gamorr
      # (eq, ":closest_town", "p_nalhutta"),          #Nal Hutta
      # (assign, ":scene_to_use", "scn_random_scene_steppe"),
      # (else_try),
      # (eq, ":closest_town", "p_mon_cal"),           #Mon Cal
      # (assign, ":scene_to_use", "scn_random_scene_water"),
      # (else_try),
      # (assign, ":scene_to_use", "scn_random_scene_plain"),
      # (try_end),
      
      #(assign, ":scene_to_use", "scn_random_scene_plain"), #debug only
      #(assign, reg7, ":scene_to_use"), #debug only
      #(display_message, "@setup_random_scene debug: scene_to_use = {reg7}", 0xFFFFFF),#debug only
      (assign, "$g_scene_to_use", ":scene_to_use"),
      (jump_to_scene,":scene_to_use"),
      
      #(party_get_current_terrain, ":terrain_type", "p_main_party"),
      # #SW - always default to plain
      # #(assign, ":scene_to_use", "scn_random_scene"),
      # (assign, ":scene_to_use", "scn_random_scene_plain"),
      # (try_begin),
      # (eq, ":terrain_type", rt_steppe),  # SW - switched steppe to a space texture so use ship scene
      # #SW - possibly modify the random scene for steppe?
      # (assign, ":scene_to_use", "scn_random_scene_steppe"),
      # #SW - scn_random_scene_ship works well, but I added a new menu option to 'board the ship'
      # #(assign, ":scene_to_use", "scn_random_scene_ship"),
      # (else_try),
      # (eq, ":terrain_type", rt_plain),
      # (assign, ":scene_to_use", "scn_random_scene_plain"),
      # (else_try),
      # (eq, ":terrain_type", rt_snow),
      # (assign, ":scene_to_use", "scn_random_scene_snow"),
      # (else_try),
      # (eq, ":terrain_type", rt_desert),
      # (assign, ":scene_to_use", "scn_random_scene_desert"),
      # (else_try),
      # (eq, ":terrain_type", rt_steppe_forest),
      # (assign, ":scene_to_use", "scn_random_scene_steppe_forest"),
      # (else_try),
      # (eq, ":terrain_type", rt_forest),
      # (assign, ":scene_to_use", "scn_random_scene_plain_forest"),
      # (else_try),
      # (eq, ":terrain_type", rt_snow_forest),
      # (assign, ":scene_to_use", "scn_random_scene_snow_forest"),
      # (else_try),
      # (eq, ":terrain_type", rt_desert_forest),
      # (assign, ":scene_to_use", "scn_random_scene_desert_forest"),
      # (try_end),
      # (jump_to_scene,":scene_to_use"),
  ]),
  
  # script_enter_dungeon
  # Input: arg1 = center_no, arg2 = mission_template_no
  # Output: none
  ("enter_dungeon",
    [
      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":mission_template_no"),
      
      (set_jump_mission,":mission_template_no"),
      (party_get_slot, ":dungeon_scene", ":center_no", slot_mainplanet_prison),
      
      (modify_visitors_at_site,":dungeon_scene"),(reset_visitors),
      (assign, ":cur_pos", 16),
      (call_script, "script_get_heroes_attached_to_center_as_prisoner", ":center_no", "p_temp_party"),
      (party_get_num_companion_stacks, ":num_stacks","p_temp_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop","p_temp_party",":i_stack"),
        (lt, ":cur_pos", 32), # spawn up to entry point 32
        (set_visitor, ":cur_pos", ":stack_troop"),
        (val_add,":cur_pos", 1),
      (try_end),
      
      (set_jump_entry, 0),
      (jump_to_scene,":dungeon_scene"),
      (scene_set_slot, ":dungeon_scene", slot_scene_visited, 1),
      (change_screen_mission),
  ]),
  
  # script_enter_court
  # Input: arg1 = center_no
  # Output: none
  ("enter_court",
    [
      (store_script_param_1, ":center_no"),
      
      (assign, "$talk_context", tc_court_talk),
      
      (set_jump_mission,"mt_visit_town_castle"),
      (party_get_slot, ":spacestation_scene", ":center_no", slot_mainplanet_castle),
      (modify_visitors_at_site,":spacestation_scene"),
      (reset_visitors),
      #Adding guards
      (store_faction_of_party, ":center_faction", ":center_no"),
      (faction_get_slot, ":guard_troop", ":center_faction", slot_faction_guard_troop),
      (try_begin),
        (le, ":guard_troop", 0),
        #SW - modified guard_troop
        (assign, ":guard_troop", "trp_security_guard"),
      (try_end),
      
      (try_begin),
        (this_or_next|eq, "$current_town", "p_hoth"),
        (eq, "$current_town", "p_yavin_iv"),
        
        (set_visitor, 5, ":guard_troop"),
        (set_visitor, 6, ":guard_troop"),
        (set_visitor, 7, ":guard_troop"),
        (set_visitor, 8, ":guard_troop"),
        (set_visitor, 9, ":guard_troop"),
        
        (set_visitor, 40, ":guard_troop"),
        (set_visitor, 41, ":guard_troop"),
        (set_visitor, 42, ":guard_troop"),
        (set_visitor, 43, ":guard_troop"),
        (set_visitor, 44, ":guard_troop"),
        (set_visitor, 45, ":guard_troop"),
      (else_try),
        (set_visitor, 5, ":guard_troop"),
        (set_visitor, 6, ":guard_troop"),
        (set_visitor, 7, ":guard_troop"),
        #(set_visitor, 8, ":guard_troop"),
        #(set_visitor, 9, ":guard_troop"),
      (try_end),
      
      
      (assign, ":cur_pos", 16),
      (call_script, "script_get_heroes_attached_to_center", ":center_no", "p_temp_party"),
      (party_get_num_companion_stacks, ":num_stacks","p_temp_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop","p_temp_party",":i_stack"),
        (gt, ":stack_troop", 0), #Freelancer
        (lt, ":cur_pos", 32), # spawn up to entry point 32
        (set_visitor, ":cur_pos", ":stack_troop"),
        (val_add,":cur_pos", 1),
      (try_end),
      (try_for_range, ":cur_troop", heroes_begin, heroes_end),
        (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_faction_lady),
        (troop_slot_eq, ":cur_troop", slot_troop_cur_center, ":center_no"),
        (lt, ":cur_pos", 32), # spawn up to entry point 32
        (set_visitor, ":cur_pos", ":cur_troop"),
        (val_add,":cur_pos", 1),
      (try_end),
      
      #SW - new code for slave_dancers
      (store_faction_of_party, ":center_faction", "$current_town"),
      (try_begin),
        # (this_or_next|eq, "$current_town", "p_gamorr"),
        # (this_or_next|eq, "$current_town", "p_tatooine"),
        # (this_or_next|eq, "$current_town", "p_ryloth"),
        # (eq, "$current_town", "p_nalhutta"),
        (eq, ":center_faction", "fac_huttcartel"),
        (store_random_in_range, ":random", 1, 5),
        (try_begin),
          (eq,":random",1),
          (set_visitor, 38, "trp_mainplanet_walker_twilek_female_slave"),
        (else_try),
          (eq, ":random", 2),
          (set_visitor, 38, "trp_mainplanet_walker_slave_dancer"),
        (else_try),
          (eq, ":random", 3),
          (set_visitor, 38, "trp_mainplanet_walker_hutt_4"),
        (else_try),
          #do nothing
        (try_end),
        #slave dancers - entry #39
        (store_random_in_range, ":random", 1, 5),
        (try_begin),
          (eq,":random",1),
          (set_visitor, 39, "trp_mainplanet_walker_twilek_female_slave"),
        (else_try),
          (eq, ":random", 2),
          (set_visitor, 39, "trp_mainplanet_walker_slave_dancer"),
        (else_try),
          (eq, ":random", 3),
          (set_visitor, 39, "trp_mainplanet_walker_hutt_4"),
        (else_try),
          #do nothing
        (try_end),
      (try_end),
      #End of slave dancer code
      
      (jump_to_scene,":spacestation_scene"),
      (scene_set_slot, ":spacestation_scene", slot_scene_visited, 1),
      (change_screen_mission),
  ]),
  
  
  # script_find_high_ground_around_pos1
  # Input: pos1 should hold center_position_no
  #        arg1: team_no
  #        arg2: search_radius (in meters)
  # Output: pos52 contains highest ground within <search_radius> meters of team leader
  # Destroys position registers: pos10, pos11, pos15
  ("find_high_ground_around_pos1",
    [
      (store_script_param, ":team_no", 1),
      (store_script_param, ":search_radius", 2),
      (val_mul, ":search_radius", 100),
      (get_scene_boundaries, pos10,pos11),
      (team_get_leader, ":ai_leader", ":team_no"),
      (agent_get_position, pos1, ":ai_leader"),
      (set_fixed_point_multiplier, 100),
      (position_get_x, ":o_x", pos1),
      (position_get_y, ":o_y", pos1),
      (store_sub, ":min_x", ":o_x", ":search_radius"),
      (store_sub, ":min_y", ":o_y", ":search_radius"),
      (store_add, ":max_x", ":o_x", ":search_radius"),
      (store_add, ":max_y", ":o_y", ":search_radius"),
      (position_get_x, ":scene_min_x", pos10),
      (position_get_x, ":scene_max_x", pos11),
      (position_get_y, ":scene_min_y", pos10),
      (position_get_y, ":scene_max_y", pos11),
      (val_max, ":min_x", ":scene_min_x"),
      (val_max, ":min_y", ":scene_min_y"),
      (val_min, ":max_x", ":scene_max_x"),
      (val_min, ":max_y", ":scene_max_y"),
      
      (store_div, ":min_x_meters", ":min_x", 100),
      (store_div, ":min_y_meters", ":min_y", 100),
      (store_div, ":max_x_meters", ":max_x", 100),
      (store_div, ":max_y_meters", ":max_y", 100),
      
      (assign, ":highest_pos_z", -10000),
      (copy_position, pos52, pos1),
      (init_position, pos15),
      
      (try_for_range, ":i_x", ":min_x_meters", ":max_x_meters"),
        (store_mul, ":i_x_cm", ":i_x", 100),
        (try_for_range, ":i_y", ":min_y_meters", ":max_y_meters"),
          (store_mul, ":i_y_cm", ":i_y", 100),
          (position_set_x, pos15, ":i_x_cm"),
          (position_set_y, pos15, ":i_y_cm"),
          (position_set_z, pos15, 10000),
          (position_set_z_to_ground_level, pos15),
          (position_get_z, ":cur_pos_z", pos15),
          (try_begin),
            (gt, ":cur_pos_z", ":highest_pos_z"),
            (copy_position, pos52, pos15),
            (assign, ":highest_pos_z", ":cur_pos_z"),
          (try_end),
        (try_end),
      (try_end),
  ]),
  
  # script_select_battle_tactic
  # Input: none
  # Output: none
  ("select_battle_tactic",
    [
      (assign, "$ai_team_1_battle_tactic", 0),
      (get_player_agent_no, ":player_agent"),
      (agent_get_team, ":player_team", ":player_agent"),
      (try_begin),
        (num_active_teams_le, 2),
        (try_begin),
          (eq, ":player_team", 0),
          (assign, "$ai_team_1", 1),
        (else_try),
          (assign, "$ai_team_1", 0),
        (try_end),
        (assign, "$ai_team_2", -1),
      (else_try),
        (try_begin),
          (eq, ":player_team", 0),
          (assign, "$ai_team_1", 1),
        (else_try),
          (assign, "$ai_team_1", 0),
        (try_end),
        (store_add, "$ai_team_2", ":player_team", 2),
      (try_end),
      (call_script, "script_select_battle_tactic_aux", "$ai_team_1"),
      (assign, "$ai_team_1_battle_tactic", reg0),
      (try_begin),
        (ge, "$ai_team_2", 0),
        (call_script, "script_select_battle_tactic_aux", "$ai_team_2"),
        (assign, "$ai_team_2_battle_tactic", reg0),
      (try_end),
  ]),
  
  # script_select_battle_tactic_aux
  # Input: team_no
  # Output: battle_tactic
  ("select_battle_tactic_aux",
    [
      (store_script_param, ":team_no", 1),
      (assign, ":battle_tactic", 0),
      (assign, ":defense_not_an_option", 0),
      (get_player_agent_no, ":player_agent"),
      (agent_get_team, ":player_team", ":player_agent"),
      (try_begin),
        (eq, "$cant_leave_encounter", 1),
        (teams_are_enemies, ":team_no", ":player_team"),
        (assign, ":defense_not_an_option", 1),
      (try_end),
      (call_script, "script_team_get_class_percentages", ":team_no", 0),
      #      (assign, ":ai_perc_infantry", reg0),
      (assign, ":ai_perc_archers",  reg1),
      (assign, ":ai_perc_cavalry",  reg2),
      (call_script, "script_team_get_class_percentages", ":team_no", 1),#enemies of the ai_team
      #      (assign, ":enemy_perc_infantry", reg0),
      #      (assign, ":enemy_perc_archers",  reg1),
      #      (assign, ":enemy_perc_cavalry",  reg2),
      
      (store_random_in_range, ":rand", 0, 100),
      (try_begin),
        (this_or_next|lt, ":rand", 20),
        (assign, ":continue", 0),
        (try_begin),
          (teams_are_enemies, ":team_no", ":player_team"),
          (party_slot_eq, "$g_enemy_party", slot_party_type, spt_faction_hero_party),
          (assign, ":continue", 1),
        (else_try),
          (neg|teams_are_enemies, ":team_no", ":player_team"),
          (gt, "$g_ally_party", 0),
          (party_slot_eq, "$g_ally_party", slot_party_type, spt_faction_hero_party),
          (assign, ":continue", 1),
        (try_end),
        (eq, ":continue", 1),
        (try_begin),
          (eq, ":defense_not_an_option", 0),
          (gt, ":ai_perc_archers", 50),
          (lt, ":ai_perc_cavalry", 35),
          (assign, ":battle_tactic", btactic_hold),
        (else_try),
          (lt, ":rand", 80),
          (assign, ":battle_tactic", btactic_follow_leader),
        (try_end),
      (try_end),
      (assign, reg0, ":battle_tactic"),
  ]),
  
  # script_battle_tactic_init
  # Input: none
  # Output: none
  ("battle_tactic_init",
    [
      (call_script, "script_battle_tactic_init_aux", "$ai_team_1", "$ai_team_1_battle_tactic"),
      (try_begin),
        (ge, "$ai_team_2", 0),
        (call_script, "script_battle_tactic_init_aux", "$ai_team_2", "$ai_team_2_battle_tactic"),
      (try_end),
  ]),
  
  # script_battle_tactic_init_aux
  # Input: team_no, battle_tactic
  # Output: none
  ("battle_tactic_init_aux",
    [
      (store_script_param, ":team_no", 1),
      (store_script_param, ":battle_tactic", 2),
      (team_get_leader, ":ai_leader", ":team_no"),
      (try_begin),
        (eq, ":battle_tactic", btactic_hold),
        (agent_get_position, pos1, ":ai_leader"),
        (call_script, "script_find_high_ground_around_pos1", ":team_no", 30),
        (copy_position, pos1, pos52),
        (call_script, "script_find_high_ground_around_pos1", ":team_no", 30), # call again just in case we are not at peak point.
        (copy_position, pos1, pos52),
        (call_script, "script_find_high_ground_around_pos1", ":team_no", 30), # call again just in case we are not at peak point.
        (team_give_order, ":team_no", grc_everyone, mordr_hold),
        (team_set_order_position, ":team_no", grc_everyone, pos52),
        (team_give_order, ":team_no", grc_archers, mordr_advance),
        (team_give_order, ":team_no", grc_archers, mordr_advance),
      (else_try),
        (eq, ":battle_tactic", btactic_follow_leader),
        (team_get_leader, ":ai_leader", ":team_no"),
        (agent_set_speed_limit, ":ai_leader", 8),
        (agent_get_position, pos60, ":ai_leader"),
        (team_give_order, ":team_no", grc_everyone, mordr_hold),
        (team_set_order_position, ":team_no", grc_everyone, pos60),
      (try_end),
  ]),
  
  # script_battle_tactic_apply
  # Input: none
  # Output: none
  ("battle_tactic_apply",
    [
      (call_script, "script_battle_tactic_apply_aux", "$ai_team_1", "$ai_team_1_battle_tactic"),
      (assign, "$ai_team_1_battle_tactic", reg0),
      (try_begin),
        (ge, "$ai_team_2", 0),
        (call_script, "script_battle_tactic_apply_aux", "$ai_team_2", "$ai_team_2_battle_tactic"),
        (assign, "$ai_team_2_battle_tactic", reg0),
      (try_end),
  ]),
  
  # script_battle_tactic_apply_aux
  # Input: team_no, battle_tactic
  # Output: battle_tactic
  ("battle_tactic_apply_aux",
    [
      (store_script_param, ":team_no", 1),
      (store_script_param, ":battle_tactic", 2),
      (store_mission_timer_a, ":mission_time"),
      (try_begin),
        (eq, ":battle_tactic", btactic_hold),
        (copy_position, pos1, pos52),
        (call_script, "script_get_closest3_distance_of_enemies_at_pos1", ":team_no", 1),
        (assign, ":avg_dist", reg0),
        (assign, ":min_dist", reg1),
        (try_begin),
          (this_or_next|lt, ":min_dist", 1000),
          (lt, ":avg_dist", 4000),
          (assign, ":battle_tactic", 0),
          (team_give_order, ":team_no", grc_everyone, mordr_charge),
        (try_end),
      (else_try),
        (eq, ":battle_tactic", btactic_follow_leader),
        (team_get_leader, ":ai_leader", ":team_no"),
        (agent_set_speed_limit, ":ai_leader", 9),
        (call_script, "script_team_get_average_position_of_enemies", ":team_no"),
        (copy_position, pos60, pos0),
        (agent_get_position, pos61, ":ai_leader"),
        (position_transform_position_to_local, pos62, pos61, pos60), #pos62 = vector to enemy w.r.t leader
        (position_normalize_origin, ":distance_to_enemy", pos62),
        (convert_from_fixed_point, ":distance_to_enemy"),
        (assign, reg17, ":distance_to_enemy"),
        (position_get_x, ":dir_x", pos62),
        (position_get_y, ":dir_y", pos62),
        (val_mul, ":dir_x", 23),
        (val_mul, ":dir_y", 23), #move 23 meters
        (position_set_x, pos62, ":dir_x"),
        (position_set_y, pos62, ":dir_y"),
        
        (position_transform_position_to_parent, pos63, pos61, pos62), #pos63 is 23m away from leader in the direction of the enemy.
        (position_set_z_to_ground_level, pos63),
        
        (team_give_order, ":team_no", grc_everyone, mordr_hold),
        (team_set_order_position, ":team_no", grc_everyone, pos63),
        #        (team_give_order, ":team_no", grc_everyone, mordr_follow),
        (agent_get_position, pos1, ":ai_leader"),
        #        (call_script, "script_get_closest3_distance_of_enemies_at_pos1", ":team_no"),
        #        (assign, ":avg_dist", reg0),
        #        (assign, ":min_dist", reg1),
        (try_begin),
          (lt, ":distance_to_enemy", 50),
          (ge, ":mission_time", 30),
          (assign, ":battle_tactic", 0),
          (team_give_order, ":team_no", grc_everyone, mordr_charge),
          (agent_set_speed_limit, ":ai_leader", 60),
        (try_end),
      (try_end),
      
      (try_begin), # charge everyone after a while
        (neq, ":battle_tactic", 0),
        (ge, ":mission_time", 300),
        (assign, ":battle_tactic", 0),
        (team_give_order, ":team_no", grc_everyone, mordr_charge),
        (team_get_leader, ":ai_leader", ":team_no"),
        (agent_set_speed_limit, ":ai_leader", 60),
      (try_end),
      (assign, reg0, ":battle_tactic"),
  ]),
  
  
  ##  # script_siege_defender_tactic_apply
  ##  # Input: none
  ##  # Output: none
  ##  ("siege_defender_tactic_apply",
  ##    [
  ##      (try_begin),
  ##        (eq, "$defender_team", 1),
  ##        (ge, "$belfry_positioned", 2),
  ##
  ##        (assign, ":enemy_too_weak", 0),
  ##        (try_begin),
  ##          (ge, "$attacker_reinforcement_stage", 2),
  ##          (call_script, "script_calculate_team_strength", "$defender_team"),
  ##          (assign, ":defender_strength", reg0),
  ##          (call_script, "script_calculate_team_strength", "$attacker_team"),
  ##          (assign, ":attacker_strength", reg0),
  ##          (store_mul, ":attacker_strength_multiplied", ":attacker_strength", 2),
  ##          (ge, ":defender_strength", ":attacker_strength_multiplied"),
  ##          (assign, ":enemy_too_weak", 1),
  ##        (try_end),
  ##
  ##        (try_begin),
  ##          (eq, ":enemy_too_weak", 1),
  ##          (neq, "$ai_battle_tactic", btactic_charge),
  ##          (assign, "$ai_battle_tactic", btactic_charge),
  ##          (team_give_order, "$defender_team", grc_infantry, mordr_charge),
  ##        (else_try),
  ##          (neq, "$ai_battle_tactic", btactic_charge),
  ##          (neq, "$ai_battle_tactic", btactic_hold),
  ##          (assign, "$ai_battle_tactic", btactic_hold),
  ##          (team_give_order, "$defender_team", grc_infantry, mordr_hold),
  ##          (team_give_order, "$defender_team", grc_heroes, mordr_hold),
  ##          (entry_point_get_position,pos1,10),
  ##          (team_set_order_position, "$defender_team", grc_infantry, pos1),
  ##          (team_set_order_position, "$defender_team", grc_heroes, pos1),
  ##        (try_end),
  ##      (try_end),
  ##  ]),
  
  
  # script_team_get_class_percentages
  # Input: arg1: team_no, arg2: try for team's enemies
  # Output: reg0: percentage infantry, reg1: percentage archers, reg2: percentage cavalry
  ("team_get_class_percentages",
    [
      (assign, ":num_infantry", 0),
      (assign, ":num_archers", 0),
      (assign, ":num_cavalry", 0),
      (assign, ":num_total", 0),
      (store_script_param, ":team_no", 1),
      (store_script_param, ":negate", 2),
      (try_for_agents,":cur_agent"),
        (agent_is_alive, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (agent_get_team, ":agent_team", ":cur_agent"),
        (assign, ":continue", 0),
        (try_begin),
          (eq, ":negate", 1),
          (teams_are_enemies, ":agent_team", ":team_no"),
          (assign, ":continue", 1),
        (else_try),
          (eq, ":agent_team", ":team_no"),
          (assign, ":continue", 1),
        (try_end),
        (eq, ":continue", 1),
        (val_add, ":num_total", 1),
        (agent_get_class, ":agent_class", ":cur_agent"),
        (try_begin),
          (eq, ":agent_class", grc_infantry),
          (val_add,  ":num_infantry", 1),
        (else_try),
          (eq, ":agent_class", grc_archers),
          (val_add,  ":num_archers", 1),
        (else_try),
          (eq, ":agent_class", grc_cavalry),
          (val_add,  ":num_cavalry", 1),
        (try_end),
      (try_end),
      (try_begin),
        (eq,  ":num_total", 0),
        (assign,  ":num_total", 1),
      (try_end),
      (store_mul, ":perc_infantry",":num_infantry",100),
      (val_div, ":perc_infantry",":num_total"),
      (store_mul, ":perc_archers",":num_archers",100),
      (val_div, ":perc_archers",":num_total"),
      (store_mul, ":perc_cavalry",":num_cavalry",100),
      (val_div, ":perc_cavalry",":num_total"),
      (assign, reg0, ":perc_infantry"),
      (assign, reg1, ":perc_archers"),
      (assign, reg2, ":perc_cavalry"),
  ]),
  
  # script_get_closest3_distance_of_enemies_at_pos1
  # Input: arg1: team_no, pos1
  # Output: reg0: distance in cms.
  ("get_closest3_distance_of_enemies_at_pos1",
    [
      (assign, ":min_distance_1", 100000),
      (assign, ":min_distance_2", 100000),
      (assign, ":min_distance_3", 100000),
      
      (store_script_param, ":team_no", 1),
      (try_for_agents,":cur_agent"),
        (agent_is_alive, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (agent_get_team, ":agent_team", ":cur_agent"),
        (teams_are_enemies, ":agent_team", ":team_no"),
        
        (agent_get_position, pos2, ":cur_agent"),
        (get_distance_between_positions,":cur_dist",pos2,pos1),
        (try_begin),
          (lt, ":cur_dist", ":min_distance_1"),
          (assign, ":min_distance_3", ":min_distance_2"),
          (assign, ":min_distance_2", ":min_distance_1"),
          (assign, ":min_distance_1", ":cur_dist"),
        (else_try),
          (lt, ":cur_dist", ":min_distance_2"),
          (assign, ":min_distance_3", ":min_distance_2"),
          (assign, ":min_distance_2", ":cur_dist"),
        (else_try),
          (lt, ":cur_dist", ":min_distance_3"),
          (assign, ":min_distance_3", ":cur_dist"),
        (try_end),
      (try_end),
      
      (assign, ":total_distance", 0),
      (assign, ":total_count", 0),
      (try_begin),
        (lt, ":min_distance_1", 100000),
        (val_add, ":total_distance", ":min_distance_1"),
        (val_add, ":total_count", 1),
      (try_end),
      (try_begin),
        (lt, ":min_distance_2", 100000),
        (val_add, ":total_distance", ":min_distance_2"),
        (val_add, ":total_count", 1),
      (try_end),
      (try_begin),
        (lt, ":min_distance_3", 100000),
        (val_add, ":total_distance", ":min_distance_3"),
        (val_add, ":total_count", 1),
      (try_end),
      (assign, ":average_distance", 100000),
      (try_begin),
        (gt, ":total_count", 0),
        (store_div, ":average_distance", ":total_distance", ":total_count"),
      (try_end),
      (assign, reg0, ":average_distance"),
      (assign, reg1, ":min_distance_1"),
      (assign, reg2, ":min_distance_2"),
      (assign, reg3, ":min_distance_3"),
  ]),
  
  # script_team_get_average_position_of_enemies
  # Input: arg1: team_no,
  # Output: pos0: average position.
  ("team_get_average_position_of_enemies",
    [
      (store_script_param_1, ":team_no"),
      (init_position, pos0),
      (assign, ":num_enemies", 0),
      (assign, ":accum_x", 0),
      (assign, ":accum_y", 0),
      (assign, ":accum_z", 0),
      (try_for_agents,":enemy_agent"),
        (agent_is_alive, ":enemy_agent"),
        (agent_is_human, ":enemy_agent"),
        (agent_get_team, ":enemy_team", ":enemy_agent"),
        (teams_are_enemies, ":team_no", ":enemy_team"),
        
        (agent_get_position, pos62, ":enemy_agent"),
        
        (position_get_x, ":x", pos62),
        (position_get_y, ":y", pos62),
        (position_get_z, ":z", pos62),
        
        (val_add, ":accum_x", ":x"),
        (val_add, ":accum_y", ":y"),
        (val_add, ":accum_z", ":z"),
        (val_add, ":num_enemies", 1),
      (try_end),
      (store_div, ":average_x", ":accum_x", ":num_enemies"),
      (store_div, ":average_y", ":accum_y", ":num_enemies"),
      (store_div, ":average_z", ":accum_z", ":num_enemies"),
      
      (position_set_x, pos0, ":average_x"),
      (position_set_y, pos0, ":average_y"),
      (position_set_z, pos0, ":average_z"),
      
      (assign, reg0, ":num_enemies"),
  ]),
  
  
  # script_search_troop_prisoner_of_party
  # Input: arg1 = troop_no
  # Output: reg0 = party_no (-1 if troop is not a prisoner.)
  ("search_troop_prisoner_of_party",
    [
      (store_script_param_1, ":troop_no"),
      (assign, ":prisoner_of", -1),
      (try_for_parties, ":party_no"),
        (eq,  ":prisoner_of", -1),
        (this_or_next|eq, ":party_no", "p_main_party"),
        (ge, ":party_no", centers_begin),
        (party_count_prisoners_of_type, ":troop_found", ":party_no", ":troop_no"),
        (gt, ":troop_found", 0),
        (assign, ":prisoner_of", ":party_no"),
      (try_end),
      (assign, reg0, ":prisoner_of"),
  ]),
  
  
  ##  # script_clear_last_quest
  ##  # Input: arg1 = troop_no
  ##  # Output: none
  ##  ("clear_last_quest",
  ##    [
  ##      (store_script_param_1, ":troop_no"),
  ##
  ##      (troop_set_slot, ":troop_no",slot_troop_last_quest, 0),
  ##      (troop_set_slot, ":troop_no",slot_troop_last_quest_betrayed, 0)
  ##  ]),
  
  
  
  # script_change_debt_to_troop
  # Input: arg1 = troop_no, arg2 = new debt amount
  # Output: none
  ("change_debt_to_troop",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, ":new_debt"),
      
      (troop_get_slot, ":cur_debt", ":troop_no", slot_troop_player_debt),
      (assign, reg1, ":cur_debt"),
      (val_add, ":cur_debt", ":new_debt"),
      (assign, reg2, ":cur_debt"),
      (troop_set_slot, ":troop_no", slot_troop_player_debt, ":cur_debt"),
      (str_store_troop_name_link, s1, ":troop_no"),
      (display_message, "@You now owe {reg2} denars to {s1}."),
  ]),
  
  
  
  
  # script_abort_quest
  # Input: arg1 = quest_no, arg2 = apply relation penalty
  # Output: none
  ("abort_quest",
    [
      (store_script_param_1, ":quest_no"),
      (store_script_param_2, ":abort_type"), #0=aborted by event, 1=abort by talking 2=abort by expire
      
      (assign, ":quest_return_penalty", -1),
      (assign, ":quest_expire_penalty", -2),
      
      #      (quest_get_slot, ":quest_object_troop", ":quest_no", slot_quest_object_troop),
      (try_begin),
        (this_or_next|eq, ":quest_no", "qst_deliver_message"),
        (eq, ":quest_no", "qst_deliver_message_to_enemy_lord"),
        (assign, ":quest_return_penalty", -2),
        (assign, ":quest_expire_penalty", -3),
      (else_try),
        (eq, ":quest_no", "qst_escort_lady"),
        (quest_get_slot, ":quest_object_troop", "qst_escort_lady", slot_quest_object_troop),
        (party_remove_members, "p_main_party", ":quest_object_troop", 1),
        (assign, ":quest_return_penalty", -2),
        (assign, ":quest_expire_penalty", -3),
        ##      (else_try),
        ##        (eq, ":quest_no", "qst_rescue_lady_under_siege"),
        ##        (party_remove_members, "p_main_party", ":quest_object_troop", 1),
        ##      (else_try),
        ##        (eq, ":quest_no", "qst_deliver_message_to_lover"),
        ##      (else_try),
        ##        (eq, ":quest_no", "qst_bring_prisoners_to_enemy"),
        ##        (try_begin),
        ##          (check_quest_succeeded, ":quest_no"),
        ##          (quest_get_slot, ":quest_target_amount", ":quest_no", slot_quest_target_amount),
        ##          (quest_get_slot, ":quest_object_troop", ":quest_no", slot_quest_object_troop),
        ##          (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
        ##          (call_script, "script_game_get_join_cost", ":quest_object_troop"),
        ##          (assign, ":reward", reg0),
        ##          (val_mul, ":reward", ":quest_target_amount"),
        ##          (val_div, ":reward", 2),
        ##        (else_try),
        ##          (quest_get_slot, ":reward", ":quest_no", slot_quest_target_amount),
        ##        (try_end),
        ##        (call_script, "script_change_debt_to_troop", ":quest_giver_troop", ":reward"),
        ##      (else_try),
        ##        (eq, ":quest_no", "qst_bring_reinforcements_to_siege"),
        ##        (quest_get_slot, ":quest_target_amount", ":quest_no", slot_quest_target_amount),
        ##        (quest_get_slot, ":quest_object_troop", ":quest_no", slot_quest_object_troop),
        ##        (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
        ##        (call_script, "script_game_get_join_cost", ":quest_object_troop"),
        ##        (assign, ":reward", reg0),
        ##        (val_mul, ":reward", ":quest_target_amount"),
        ##        (val_mul, ":reward", 2),
        ##        (call_script, "script_change_debt_to_troop", ":quest_giver_troop", ":reward"),
        ##      (else_try),
        ##        (eq, ":quest_no", "qst_deliver_supply_to_center_under_siege"),
        ##        (quest_get_slot, ":quest_target_amount", ":quest_no", slot_quest_target_amount),
        ##        (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
        ##        (store_item_value, ":reward", "itm_siege_supply"),
        ##        (val_mul, ":reward", ":quest_target_amount"),
        ##        (call_script, "script_change_debt_to_troop", ":quest_giver_troop", ":reward"),
      (else_try),
        (eq, ":quest_no", "qst_raise_troops"),
        (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
        (call_script, "script_change_debt_to_troop", ":quest_giver_troop", 100),
        (assign, ":quest_return_penalty", -4),
        (assign, ":quest_expire_penalty", -5),
      (else_try),
        (eq, ":quest_no", "qst_deal_with_jawas"),
        (try_for_parties, ":cur_party_no"),
          (party_get_template_id, ":cur_party_template", ":cur_party_no"),
          (eq, ":cur_party_template", "pt_jawas"),
          (party_set_flags, ":cur_party_no", pf_quest_party, 0),
        (try_end),
        (assign, ":quest_return_penalty", -4),
        (assign, ":quest_expire_penalty", -5),
      (else_try),
        (eq, ":quest_no", "qst_deal_with_bandits_at_lords_village"),
        (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
        (call_script, "script_change_debt_to_troop", ":quest_giver_troop", 200),
        (assign, ":quest_return_penalty", -5),
        (assign, ":quest_expire_penalty", -6),
      (else_try),
        (eq, ":quest_no", "qst_collect_taxes"),
        (quest_get_slot, ":gold_reward", ":quest_no", slot_quest_gold_reward),
        (quest_set_slot, ":quest_no", slot_quest_gold_reward, 0),
        (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
        (call_script, "script_change_debt_to_troop", ":quest_giver_troop", ":gold_reward"),
        (assign, ":quest_return_penalty", -4),
        (assign, ":quest_expire_penalty", -6),
        ##      (else_try),
        ##        (eq, ":quest_no", "qst_capture_messenger"),
        ##      (else_try),
        ##        (eq, ":quest_no", "qst_bring_back_deserters"),
      (else_try),
        (eq, ":quest_no", "qst_hunt_down_fugitive"),
        (assign, ":quest_return_penalty", -3),
        (assign, ":quest_expire_penalty", -4),
      (else_try),
        (eq, ":quest_no", "qst_kill_local_merchant"),
      (else_try),
        (eq, ":quest_no", "qst_bring_back_runaway_serfs"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -1),
      (else_try),
        (eq, ":quest_no", "qst_lend_companion"),
      (else_try),
        (eq, ":quest_no", "qst_collect_debt"),
        (try_begin),
          (quest_slot_eq, "qst_collect_debt", slot_quest_current_state, 1), #debt collected but not delivered
          (quest_get_slot, ":debt", "qst_collect_debt", slot_quest_target_amount),
          (quest_get_slot, ":quest_giver", "qst_collect_debt", slot_quest_giver_troop),
          (call_script, "script_change_debt_to_troop", ":quest_giver", ":debt"),
          (assign, ":quest_return_penalty", -3),
          (assign, ":quest_expire_penalty", -6),
        (else_try),
          (assign, ":quest_return_penalty", -3),
          (assign, ":quest_expire_penalty", -4),
        (try_end),
      (else_try),
        (eq, ":quest_no", "qst_deal_with_bandits_at_lords_village"),
        (assign, ":quest_return_penalty", -6),
        (assign, ":quest_expire_penalty", -6),
      (else_try),
        (eq, ":quest_no", "qst_raid_caravan_to_start_war"),
        (assign, ":quest_return_penalty", -10),
        (assign, ":quest_expire_penalty", -13),
      (else_try),
        (eq, ":quest_no", "qst_persuade_lords_to_make_peace"),
        (assign, ":quest_return_penalty", -10),
        (assign, ":quest_expire_penalty", -13),
      (else_try),
        (eq, ":quest_no", "qst_deal_with_night_bandits"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -1),
        
      (else_try),
        (eq, ":quest_no", "qst_follow_spy"),
        (assign, ":quest_return_penalty", -2),
        (assign, ":quest_expire_penalty", -3),
        (try_begin),
          (party_is_active, "$qst_follow_spy_spy_party"),
          (remove_party, "$qst_follow_spy_spy_party"),
        (try_end),
        (try_begin),
          (party_is_active, "$qst_follow_spy_spy_partners_party"),
          (remove_party, "$qst_follow_spy_spy_partners_party"),
        (try_end),
      (else_try),
        (eq, ":quest_no", "qst_capture_enemy_hero"),
        (assign, ":quest_return_penalty", -3),
        (assign, ":quest_expire_penalty", -4),
        ##      (else_try),
        ##        (eq, ":quest_no", "qst_lend_companion"),
        ##        (quest_get_slot, ":quest_target_troop", "qst_lend_companion", slot_quest_target_troop),
        ##        (party_add_members, "p_main_party", ":quest_target_troop", 1),
        ##      (else_try),
        ##        (eq, ":quest_no", "qst_capture_conspirators"),
        ##      (else_try),
        ##        (eq, ":quest_no", "qst_defend_nobles_against_peasants"),
      (else_try),
        (eq, ":quest_no", "qst_incriminate_loyal_commander"),
        (assign, ":quest_return_penalty", -5),
        (assign, ":quest_expire_penalty", -6),
        ##      (else_try),
        ##        (eq, ":quest_no", "qst_hunt_down_raiders"),
        ##      (else_try),
        ##        (eq, ":quest_no", "qst_capture_prisoners"),
        ##        #Enemy lord quests
      (else_try),
        (eq, ":quest_no", "qst_lend_surgeon"),
        
        #Faction lady quests
      (else_try),
        (eq, ":quest_no", "qst_rescue_lord_by_replace"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -1),
      (else_try),
        (eq, ":quest_no", "qst_deliver_message_to_prisoner_lord"),
        (assign, ":quest_return_penalty", 0),
        (assign, ":quest_expire_penalty", -1),
      (else_try),
        (eq, ":quest_no", "qst_duel_for_lady"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -1),
        
        #Faction Army quests
      (else_try),
        (eq, ":quest_no", "qst_follow_army"),
        (assign, ":quest_return_penalty", -4),
        (assign, ":quest_expire_penalty", -5),
      (else_try),
        (eq, ":quest_no", "qst_deliver_cattle_to_army"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -2),
      (else_try),
        (eq, ":quest_no", "qst_join_siege_with_army"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -2),
      (else_try),
        (eq, ":quest_no", "qst_scout_waypoints"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -2),
        
        #Village Elder quests
      (else_try),
        (eq, ":quest_no", "qst_deliver_grain"),
        (assign, ":quest_return_penalty", -6),
        (assign, ":quest_expire_penalty", -7),
      (else_try),
        (eq, ":quest_no", "qst_deliver_cattle"),
        (assign, ":quest_return_penalty", -3),
        (assign, ":quest_expire_penalty", -4),
      (else_try),
        (eq, ":quest_no", "qst_train_peasants_against_bandits"),
        (assign, ":quest_return_penalty", -4),
        (assign, ":quest_expire_penalty", -5),
        
        #Mayor quests
      (else_try),
        (eq, ":quest_no", "qst_deliver_wine"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -3),
        (val_add, "$debt_to_merchants_guild", "$qst_deliver_wine_debt"),
      (else_try),
        (eq, ":quest_no", "qst_move_cattle_herd"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -3),
      (else_try),
        (eq, ":quest_no", "qst_escort_merchant_caravan"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -3),
      (else_try),
        (eq, ":quest_no", "qst_troublesome_bandits"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -2),
        #Other quests
      (else_try),
        (eq, ":quest_no", "qst_join_faction"),
        (assign, ":quest_return_penalty", -3),
        (assign, ":quest_expire_penalty", -3),
        (try_begin),
          (call_script, "script_get_number_of_hero_centers", "trp_player"),
          (gt, reg0, 0),
          (call_script, "script_change_player_relation_with_faction", "$g_invite_faction", -10),
        (try_end),
        (assign, "$g_invite_faction", 0),
        (assign, "$g_invite_faction_lord", 0),
        (assign, "$g_invite_offered_center", 0),
      (else_try),
        (eq, ":quest_no", "qst_eliminate_bandits_infesting_village"),
        (assign, ":quest_return_penalty", -3),
        (assign, ":quest_expire_penalty", -3),
      (try_end),
      (try_begin),
        (gt, ":abort_type", 0),
        (quest_get_slot, ":quest_giver", ":quest_no", slot_quest_giver_troop),
        (assign, ":relation_penalty", ":quest_return_penalty"),
        (try_begin),
          (eq, ":abort_type", 2),
          (assign, ":relation_penalty", ":quest_expire_penalty"),
        (try_end),
        (try_begin),
          (this_or_next|is_between, ":quest_giver", planet_admins_begin, planet_admins_end),
          (is_between, ":quest_giver", mayors_begin, mayors_end),
          (quest_get_slot, ":quest_giver_center", ":quest_no", slot_quest_giver_center),
          (call_script, "script_change_player_relation_with_center", ":quest_giver_center", ":relation_penalty"),
        (else_try),
          (call_script, "script_change_player_relation_with_troop", ":quest_giver", ":relation_penalty"),
        (try_end),
      (try_end),
      (fail_quest, ":quest_no"),
      
      #NPC companion changes begin
      (try_begin),
        (gt, ":abort_type", 0),
        (call_script, "script_objectionable_action", tmt_honest, "str_fail_quest"),
      (try_end),
      #NPC companion changes end
      (call_script, "script_end_quest", ":quest_no"),
  ]),
  
  
  ##  # script_event_center_captured
  ##  # Input: arg1 = center_no, arg2 = old_faction_no
  ##  # Output: none
  ##  ("event_center_captured",
  ##    [
  ##      #      (store_script_param_1, ":center_no"),
  ##      #       (store_script_param_2, ":old_faction_no"),
  ##      #       (store_faction_of_party, ":faction_no"),
  ##
  ##      (try_begin),
  ##        (check_quest_active, "qst_deliver_message"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_escort_lady"),
  ##        (quest_slot_eq, "qst_escort_lady", slot_quest_target_center, ":center_no"),
  ##        (call_script, "script_abort_quest", "qst_escort_lady"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_rescue_lady_under_siege"),
  ##        (quest_slot_eq, "qst_rescue_lady_under_siege", slot_quest_target_center, ":center_no"),
  ##        (quest_slot_eq, "qst_rescue_lady_under_siege", slot_quest_current_state, 0),
  ##        (call_script, "script_abort_quest", "qst_rescue_lady_under_siege", 1),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_deliver_message_to_lover"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_deliver_message_to_enemy_lord"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_bring_prisoners_to_enemy"),
  ##        (quest_slot_eq, "qst_bring_prisoners_to_enemy", slot_quest_target_center, ":center_no"),
  ##        (neg|check_quest_succeeded, "qst_bring_prisoners_to_enemy"),
  ##        (call_script, "script_abort_quest", "qst_bring_prisoners_to_enemy"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_bring_reinforcements_to_siege"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_deliver_supply_to_center_under_siege"),
  ##        (quest_slot_eq, "qst_deliver_supply_to_center_under_siege", slot_quest_target_center, ":center_no"),
  ##        (call_script, "script_abort_quest", "qst_deliver_supply_to_center_under_siege", 1),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_raise_troops"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_capture_messenger"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_bring_back_deserters"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_kill_local_merchant"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_bring_back_runaway_serfs"),
  ##        (quest_slot_eq, "qst_bring_back_runaway_serfs", slot_quest_object_center, ":center_no"),
  ##        (neg|check_quest_succeeded, "qst_bring_back_runaway_serfs"),
  ##        (neg|check_quest_failed, "qst_bring_back_runaway_serfs"),
  ##        (call_script, "script_abort_quest", "qst_bring_back_runaway_serfs"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_follow_spy"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_capture_enemy_hero"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_lend_companion"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_capture_conspirators"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_defend_nobles_against_peasants"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_incriminate_loyal_commander"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_hunt_down_raiders"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_capture_prisoners"),
  ##      (try_end),
  ##      #Enemy lord quests
  ##      (try_begin),
  ##        (check_quest_active, "qst_lend_surgeon"),
  ##      (try_end),
  ##      #Faction lady quests
  ##      (try_begin),
  ##        (check_quest_active, "qst_rescue_lord_by_replace"),
  ##        (quest_get_slot, ":quest_target_troop", "qst_rescue_lord_by_replace", slot_quest_target_troop),
  ##        (troop_slot_eq, ":quest_target_troop", slot_troop_is_prisoner, 0),
  ##        (neg|check_quest_succeeded, "qst_rescue_lord_by_replace"),
  ##        (call_script, "script_abort_quest", "qst_rescue_lord_by_replace"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_deliver_message_to_prisoner_lord"),
  ##      (try_end),
  ##      (try_begin),
  ##        (check_quest_active, "qst_duel_for_lady"),
  ##      (try_end),
  ##  ]),
  
  # script_cf_is_quest_troop
  # Input: arg1 = troop_no
  # Output: none (can fail)
  ("cf_is_quest_troop",
    [
      (store_script_param_1, ":troop_no"),
      (assign, ":is_quest_troop", 0),
      (try_for_range, ":cur_quest", all_quests_begin, all_quests_end),
        (check_quest_active, ":cur_quest"),
        (quest_get_slot, ":quest_troop_1", ":cur_quest", slot_quest_target_troop),
        (quest_get_slot, ":quest_troop_2", ":cur_quest", slot_quest_object_troop),
        (quest_get_slot, ":quest_troop_3", ":cur_quest", slot_quest_giver_troop),
        (this_or_next|eq, ":quest_troop_1", ":troop_no"),
        (this_or_next|eq, ":quest_troop_2", ":troop_no"),
        (eq, ":quest_troop_3", ":troop_no"),
        (assign, ":is_quest_troop", 1),
      (try_end),
      (eq, ":is_quest_troop", 1),
  ]),
  
  
  ##  # script_calculate_team_strength
  ##  # Input: arg1 = team_no
  ##  # Output: strength
  ##  ("calculate_team_strength",
  ##    [
  ##      (store_script_param_1, ":team_no"),
  ##      (assign, ":total_strength", 0),
  ##      (try_for_agents, ":cur_agent"),
  ##        (agent_get_team, ":agent_team", ":cur_agent"),
  ##        (eq, ":team_no", ":agent_team"),
  ##        (agent_is_human, ":cur_agent"),
  ##        (agent_is_alive, ":cur_agent"),
  ##
  ##        (agent_get_troop_id, ":cur_troop", ":cur_agent"),
  ##        (store_character_level, ":cur_level", ":cur_troop"),
  ##        (val_add, ":cur_level", 5),
  ##        (try_begin),
  ##          (troop_is_hero, ":cur_troop"),
  ##          (val_add, ":cur_level", 5),
  ##        (try_end),
  ##        (val_add, ":total_strength", ":cur_level"),
  ##      (try_end),
  ##      (assign, reg0, ":total_strength"),
  ##  ]),
  
  # script_check_friendly_kills
  # Input: none
  # Output: none (changes the morale of the player's party)
  ("check_friendly_kills",
    [(get_player_agent_own_troop_kill_count, ":count"),
      (try_begin),
        (neq, "$g_player_current_own_troop_kills", ":count"),
        (val_sub, ":count", "$g_player_current_own_troop_kills"),
        (val_add, "$g_player_current_own_troop_kills", ":count"),
        (val_mul, ":count", -1),
        (call_script, "script_change_player_party_morale", ":count"),
      (try_end),
  ]),
  
  # script_simulate_retreat
  # Input: arg1 = players_side_damage, arg2 = enemy_side_damage, s5 = title_string
  # Output: none
  ("simulate_retreat",
    [
      (call_script, "script_music_set_situation_with_culture", mtf_sit_killed),
      (set_show_messages, 0),
      (store_script_param, ":players_side_damage", 1),
      (store_script_param, ":enemy_side_damage", 2),
      
      (assign, ":players_side_strength", 0),
      (assign, ":enemy_side_strength", 0),
      
      (assign, ":do_calculate", 1),
      (try_begin),
        (try_for_agents, ":cur_agent"),
          (agent_is_human, ":cur_agent"),
          (agent_is_alive, ":cur_agent"),
          (agent_set_slot, ":cur_agent", slot_agent_is_alive_before_retreat, 1),#needed for simulation
          
          (agent_get_troop_id, ":cur_troop", ":cur_agent"),
          (store_character_level, ":cur_level", ":cur_troop"),
          (val_add, ":cur_level", 5),
          (try_begin),
            (troop_is_hero, ":cur_troop"),
            (val_add, ":cur_level", 5),
          (try_end),
          (try_begin),
            (agent_is_ally, ":cur_agent"),
            (val_add, ":players_side_strength", ":cur_level"),
          (else_try),
            (val_add, ":enemy_side_strength", ":cur_level"),
          (try_end),
        (try_end),
        (eq, "$pin_player_fallen", 0),
        (lt, ":enemy_side_strength", ":players_side_strength"),
        (assign, ":do_calculate", 0),
      (try_end),
      
      (try_begin),
        (eq, ":do_calculate", 1),
        
        (assign, "$g_last_mission_player_damage", 0),
        (party_clear, "p_temp_party"),
        (party_clear, "p_temp_party_2"),
        (call_script, "script_simulate_battle_with_agents_aux", 0, ":players_side_damage"),
        (call_script, "script_simulate_battle_with_agents_aux", 1, ":enemy_side_damage"),
        
        (assign, ":display_casualties", 0),
        
        (try_begin),
          (gt, "$g_last_mission_player_damage", 0),
          (assign, ":display_casualties", 1),
          (assign, reg1, "$g_last_mission_player_damage"),
          (str_store_string, s12, "str_casualty_display_hp"),
        (else_try),
          (str_clear, s12),
        (try_end),
        
        (call_script, "script_print_casualties_to_s0", "p_temp_party", 1),
        (try_begin),
          (party_get_num_companion_stacks, ":num_stacks", "p_temp_party"),
          (gt, ":num_stacks", 0),
          (assign, ":display_casualties", 1),
        (try_end),
        (str_store_string_reg, s10, s0),
        
        (call_script, "script_print_casualties_to_s0", "p_temp_party_2", 1),
        (try_begin),
          (party_get_num_companion_stacks, ":num_stacks", "p_temp_party_2"),
          (gt, ":num_stacks", 0),
          (assign, ":display_casualties", 1),
        (try_end),
        (str_store_string_reg, s11, s0),
        (try_begin),
          (eq, ":display_casualties", 1),
          (dialog_box,"str_casualty_display", s5),
        (try_end),
      (try_end),
      (set_show_messages, 1),
      
      #Calculating morale penalty (can be between 0-30)
      (assign, ":ally_casualties", 0),
      (assign, ":enemy_casualties", 0),
      (assign, ":total_allies", 0),
      
      (try_for_agents, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (try_begin),
          (agent_is_ally, ":cur_agent"),
          (val_add, ":total_allies", 1),
          (try_begin),
            (neg|agent_is_alive, ":cur_agent"),
            (val_add, ":ally_casualties", 1),
          (try_end),
        (else_try),
          (neg|agent_is_alive, ":cur_agent"),
          (val_add, ":enemy_casualties", 1),
        (try_end),
      (try_end),
      (store_add, ":total_casualties", ":ally_casualties", ":enemy_casualties"),
      (try_begin),
        (gt, ":total_casualties", 0),
        (store_mul, ":morale_adder", ":ally_casualties", 100),
        (val_div, ":morale_adder", ":total_casualties"),
        (val_mul, ":morale_adder", ":ally_casualties"),
        (val_div, ":morale_adder", ":total_allies"),
        (val_mul, ":morale_adder", -30),
        (val_div, ":morale_adder", 100),
        (call_script, "script_change_player_party_morale", ":morale_adder"),
      (try_end),
  ]),
  
  
  
  # script_simulate_battle_with_agents_aux
  # For internal use only
  # Input: arg1 = attacker_side (0 = ally, 1 = enemy), arg2 = damage amount
  # Output: none
  ("simulate_battle_with_agents_aux",
    [
      (store_script_param_1, ":attacker_side"),
      (store_script_param_2, ":damage"),
      
      (get_player_agent_no, ":player_agent"),
      (try_for_agents, ":cur_agent"),
        (neq, ":player_agent", ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        #do not check agent_is_alive, check slot_agent_is_alive_before_retreat instead, so that dead agents can still hit enemies
        (agent_slot_eq, ":cur_agent", slot_agent_is_alive_before_retreat, 1),
        (try_begin),
          (agent_is_ally, ":cur_agent"),
          (assign, ":cur_agents_side", 0),
        (else_try),
          (assign, ":cur_agents_side", 1),
        (try_end),
        (eq, ":cur_agents_side", ":attacker_side"),
        (agent_get_position, pos2, ":cur_agent"),
        (assign, ":closest_agent", -1),
        (assign, ":min_distance", 100000),
        (try_for_agents, ":cur_agent_2"),
          (agent_is_human, ":cur_agent_2"),
          (agent_is_alive, ":cur_agent_2"),
          (try_begin),
            (agent_is_ally, ":cur_agent_2"),
            (assign, ":cur_agents_side_2", 0),
          (else_try),
            (assign, ":cur_agents_side_2", 1),
          (try_end),
          (this_or_next|neq, ":cur_agent_2", ":player_agent"),
          (eq, "$pin_player_fallen", 0),
          (neq, ":attacker_side", ":cur_agents_side_2"),
          (agent_get_position, pos3, ":cur_agent_2"),
          (get_distance_between_positions, ":cur_distance", pos2, pos3),
          (lt, ":cur_distance", ":min_distance"),
          (assign, ":min_distance", ":cur_distance"),
          (assign, ":closest_agent", ":cur_agent_2"),
        (try_end),
        (ge, ":closest_agent", 0),
        #Fight
        (agent_get_class, ":agent_class", ":cur_agent"),
        (assign, ":agents_speed", 1),
        (assign, ":agents_additional_hit", 0),
        (try_begin),
          (eq, ":agent_class", grc_archers),
          (assign, ":agents_additional_hit", 2),
        (else_try),
          (eq, ":agent_class", grc_cavalry),
          (assign, ":agents_speed", 2),
        (try_end),
        (agent_get_class, ":agent_class", ":closest_agent"),
        (assign, ":agents_speed_2", 1),
        (try_begin),
          (eq, ":agent_class", grc_cavalry),
          (assign, ":agents_speed_2", 2),
        (try_end),
        (assign, ":agents_hit", 18000),
        (val_add, ":min_distance", 3000),
        (val_div, ":agents_hit", ":min_distance"),
        (val_mul, ":agents_hit", 2),# max 10, min 2 hits within 150 meters
        
        (val_mul, ":agents_hit", ":agents_speed"),
        (val_div, ":agents_hit", ":agents_speed_2"),
        (val_add, ":agents_hit", ":agents_additional_hit"),
        
        (assign, ":cur_damage", ":damage"),
        (agent_get_troop_id, ":closest_troop", ":closest_agent"),
        (agent_get_troop_id, ":cur_troop", ":cur_agent"),
        (store_character_level, ":closest_level", ":closest_troop"),
        (store_character_level, ":cur_level", ":cur_troop"),
        (store_sub, ":level_dif", ":cur_level", ":closest_level"),
        (val_div, ":level_dif", 5),
        (val_add, ":cur_damage", ":level_dif"),
        
        (try_begin),
          (eq, ":closest_agent", ":player_agent"),
          (val_div, ":cur_damage", 2),
          (store_agent_hit_points, ":init_player_hit_points", ":player_agent", 1),
        (try_end),
        
        (try_for_range, ":unused", 0, ":agents_hit"),
          (store_random_in_range, ":random_damage", 0, 100),
          (lt, ":random_damage", ":cur_damage"),
          (agent_deliver_damage_to_agent, ":cur_agent", ":closest_agent"),
        (try_end),
        
        (try_begin),
          (eq, ":closest_agent", ":player_agent"),
          (store_agent_hit_points, ":final_player_hit_points", ":player_agent", 1),
          (store_sub, ":hit_points_difference", ":init_player_hit_points", ":final_player_hit_points"),
          (val_add, "$g_last_mission_player_damage", ":hit_points_difference"),
        (try_end),
        
        (neg|agent_is_alive, ":closest_agent"),
        (try_begin),
          (eq, ":attacker_side", 1),
          (party_add_members, "p_temp_party", ":closest_troop", 1),
          (try_begin),
            (agent_is_wounded, ":closest_agent"),
            (party_wound_members, "p_temp_party", ":closest_troop", 1),
          (try_end),
        (else_try),
          (party_add_members, "p_temp_party_2", ":closest_troop", 1),
          (try_begin),
            (agent_is_wounded, ":closest_agent"),
            (party_wound_members, "p_temp_party_2", ":closest_troop", 1),
          (try_end),
        (try_end),
      (try_end),
  ]),
  
  
  # script_map_get_random_position_around_position_within_range
  # Input: arg1 = minimum_distance in km, arg2 = maximum_distance in km, pos1 = origin position
  # Output: pos2 = result position
  ("map_get_random_position_around_position_within_range",
    [
      (store_script_param_1, ":min_distance"),
      (store_script_param_2, ":max_distance"),
      (val_mul, ":min_distance", 100),
      (assign, ":continue", 1),
      (try_for_range, ":unused", 0, 20),
        (eq, ":continue", 1),
        (map_get_random_position_around_position, pos2, pos1, ":max_distance"),
        (get_distance_between_positions, ":distance", pos2, pos1),
        (ge, ":distance", ":min_distance"),
        (assign, ":continue", 0),
      (try_end),
  ]),
  
  
  # script_get_number_of_unclaimed_centers_by_player
  # Input: none
  # Output: reg0 = number of unclaimed centers, reg1 = last unclaimed center_no
  ("get_number_of_unclaimed_centers_by_player",
    [
      (assign, ":unclaimed_centers", 0),
      (assign, reg1, -1),
      (try_for_range, ":center_no", centers_begin, centers_end),
        (store_faction_of_party, ":faction_no", ":center_no"),
        (eq, ":faction_no", "fac_player_supporters_faction"),
        (party_slot_eq, ":center_no", slot_mainplanet_claimed_by_player, 0),
        (party_get_num_companion_stacks, ":num_stacks", ":center_no"),
        (ge, ":num_stacks", 1), #castle is garrisoned
        (assign, reg1, ":center_no"),
        (val_add, ":unclaimed_centers", 1),
      (try_end),
      (assign, reg0, ":unclaimed_centers"),
  ]),
  
  # script_troop_count_number_of_enemy_troops
  # Input: arg1 = troop_no
  # Output: reg0 = number_of_enemy_troops
  ("troop_count_number_of_enemy_troops",
    [
      (store_script_param_1, ":troop_no"),
      (assign, ":enemy_count", 0),
      (try_for_range, ":i_enemy_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
        (troop_slot_ge, ":troop_no", ":i_enemy_slot", 1),
        (val_add, ":enemy_count", 1),
      (try_end),
      (assign, reg0, ":enemy_count"),
  ]),
  
  
  # script_cf_troop_check_troop_is_enemy
  # Input: arg1 = troop_no, arg2 = checked_troop_no
  # Output: none (Can fail)
  ("cf_troop_check_troop_is_enemy",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, ":checked_troop_no"),
      (assign, ":result", 0),
      (try_for_range, ":i_enemy_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
        (troop_slot_eq, ":troop_no", ":i_enemy_slot", ":checked_troop_no"),
        (assign, ":result", 1),
      (try_end),
      (eq, ":result", 1),
  ]),
  
  
  # script_troop_get_leaded_center_with_index
  # Input: arg1 = troop_no, arg2 = center index within range between zero and the number of centers that troop owns
  # Output: reg0 = center_no
  ("troop_get_leaded_center_with_index",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, ":random_center"),
      (assign, ":result", -1),
      (assign, ":center_count", 0),
      (try_for_range, ":center_no", centers_begin, centers_end),
        (eq, ":result", -1),
        (party_slot_eq, ":center_no", slot_mainplanet_lord, ":troop_no"),
        (val_add, ":center_count", 1),
        (gt, ":center_count", ":random_center"),
        (assign, ":result", ":center_no"),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  # script_cf_troop_get_random_leaded_walled_center_with_less_strength_priority
  # Input: arg1 = troop_no, arg2 = preferred_center_no
  # Output: reg0 = center_no (Can fail)
  ("cf_troop_get_random_leaded_walled_center_with_less_strength_priority",
    [
      (store_script_param, ":troop_no", 1),
      (store_script_param, ":preferred_center_no", 2),
      
      (assign, ":num_centers", 0),
      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
        (party_slot_eq, ":center_no", slot_mainplanet_lord, ":troop_no"),
        (party_slot_eq, ":center_no", slot_center_is_besieged_by, -1),
        (val_add, ":num_centers", 1),
        (try_begin),
          (eq, ":center_no", ":preferred_center_no"),
          (val_add, ":num_centers", 99),
        (try_end),
        ##        (call_script, "script_party_calculate_regular_strength", ":center_no"),
        ##        (assign, ":strength", reg0),
        ##        (lt, ":strength", 80),
        ##        (store_sub, ":strength", 100, ":strength"),
        ##        (val_div, ":strength", 20),
        ##        (val_add, ":num_centers", ":strength"),
      (try_end),
      (gt, ":num_centers", 0),
      (store_random_in_range, ":random_center", 0, ":num_centers"),
      (assign, ":result", -1),
      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
        (eq, ":result", -1),
        (party_slot_eq, ":center_no", slot_mainplanet_lord, ":troop_no"),
        (party_slot_eq, ":center_no", slot_center_is_besieged_by, -1),
        (val_sub, ":random_center", 1),
        (try_begin),
          (eq, ":center_no", ":preferred_center_no"),
          (val_sub, ":random_center", 99),
        (try_end),
        ##        (try_begin),
        ##          (call_script, "script_party_calculate_regular_strength", ":center_no"),
        ##          (assign, ":strength", reg0),
        ##          (lt, ":strength", 80),
        ##          (store_sub, ":strength", 100, ":strength"),
        ##          (val_div, ":strength", 20),
        ##          (val_sub, ":random_center", ":strength"),
        ##        (try_end),
        (lt, ":random_center", 0),
        (assign, ":result", ":center_no"),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  # script_cf_troop_get_random_leaded_town_or_minorplanet_except_center
  # Input: arg1 = troop_no, arg2 = except_center_no
  # Output: reg0 = center_no (Can fail)
  ("cf_troop_get_random_leaded_town_or_minorplanet_except_center",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, ":except_center_no"),
      
      (assign, ":num_centers", 0),
      (try_for_range, ":center_no", centers_begin, centers_end),
        (neg|party_slot_eq, ":center_no", slot_party_type, spt_castle),
        (party_slot_eq, ":center_no", slot_mainplanet_lord, ":troop_no"),
        (neq, ":center_no", ":except_center_no"),
        (val_add, ":num_centers", 1),
      (try_end),
      
      (gt, ":num_centers", 0),
      (store_random_in_range, ":random_center", 0, ":num_centers"),
      (assign, ":end_cond", centers_end),
      (try_for_range, ":center_no", centers_begin, ":end_cond"),
        (neg|party_slot_eq, ":center_no", slot_party_type, spt_castle),
        (party_slot_eq, ":center_no", slot_mainplanet_lord, ":troop_no"),
        (neq, ":center_no", ":except_center_no"),
        (val_sub, ":random_center", 1),
        (lt, ":random_center", 0),
        (assign, ":target_center", ":center_no"),
        (assign, ":end_cond", 0),
      (try_end),
      (assign, reg0, ":target_center"),
  ]),
  
  # script_troop_write_owned_centers_to_s2
  # Input: arg1 = troop_no
  # Output: none
  ("troop_write_owned_centers_to_s2",
    [
      (store_script_param_1, ":troop_no"),
      
      (call_script, "script_get_number_of_hero_centers", ":troop_no"),
      (assign, ":no_centers", reg0),
      
      (str_store_troop_name, s5, ":troop_no"),
      
      (try_begin),
        (gt, ":no_centers", 1),
        (try_for_range, ":i_center", 1, ":no_centers"),
          (call_script, "script_troop_get_leaded_center_with_index", ":troop_no", ":i_center"),
          (str_store_party_name_link, s50, reg0),
          (try_begin),
            (eq, ":i_center", 1),
            (call_script, "script_troop_get_leaded_center_with_index", ":troop_no", 0),
            (str_store_party_name_link, s51, reg0),
            (str_store_string, s51, "str_s50_and_s51"),
          (else_try),
            (str_store_string, s51, "str_s50_comma_s51"),
          (try_end),
        (try_end),
        (str_store_string, s2, "str_s5_is_the_ruler_of_s51"),
      (else_try),
        (eq, ":no_centers", 1),
        (call_script, "script_troop_get_leaded_center_with_index", ":troop_no", 0),
        (str_store_party_name_link, s51, reg0),
        (str_store_string, s2, "str_s5_is_the_ruler_of_s51"),
      (else_try),
        (store_troop_faction, ":faction_no", ":troop_no"),
        (str_store_faction_name_link, s6, ":faction_no"),
        (str_store_string, s2, "str_s5_is_a_nobleman_of_s6"),
      (try_end),
  ]),
  
  # script_troop_write_family_relations_to_s1
  # Input: arg1 = troop_no
  # Output: none
  ("troop_write_family_relations_to_s1",
    [
      (store_script_param_1, ":troop_no"),
      (assign, ":num_family", 0),
      (try_for_range, ":slot_no", slot_troop_family_begin, slot_troop_family_end),
        (troop_slot_ge, ":troop_no", ":slot_no", 1),
        (val_add, ":num_family", 1),
      (try_end),
      
      ]+gender_fix(":gender", ":troop_no")+[
      (try_begin),
        (eq, ":gender", 0),
        (str_store_string, s5, "str_he"),
      (else_try),
        (str_store_string, s5, "str_she"),
      (try_end),
      
      (try_begin),
        (gt, ":num_family", 1),
        (try_for_range, ":i_family", 1, ":num_family"),
          (call_script, "script_write_family_relation_as_s3s_s2_to_s4", ":troop_no", ":i_family"),
          (str_store_string_reg, s50, s4),
          (try_begin),
            (eq, ":i_family", 1),
            (call_script, "script_write_family_relation_as_s3s_s2_to_s4", ":troop_no", 0),
            (str_store_string_reg, s51, s4),
            (str_store_string, s51, "str_s50_and_s51"),
          (else_try),
            (str_store_string, s51, "str_s50_comma_s51"),
          (try_end),
        (try_end),
        (str_store_string, s1, "str_s5_is_s51"),
      (else_try),
        (eq, ":num_family", 1),
        (call_script, "script_write_family_relation_as_s3s_s2_to_s4", ":troop_no", 0),
        (str_store_string_reg, s51, s4),
        (str_store_string, s1, "str_s5_is_s51"),
      (else_try),
        (str_store_string, s1, "str_blank_string"),
      (try_end),
  ]),
  
  # script_write_family_relation_as_s3s_s2_to_s4
  # Inputs: arg1 = troop_no, arg2 = family_no (valid slot no after slot_troop_family_begin)
  # Outputs: s50 = s3s_s2 text
  
  ("write_family_relation_as_s3s_s2_to_s4",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, ":family_no"),
      ]+gender_fix(":gender", ":troop_no")+[
      (assign, ":slot_no", slot_troop_family_begin),
      (try_for_range, ":unused", slot_troop_family_begin, slot_troop_family_end),
        (this_or_next|gt, ":family_no", 0),
        (troop_slot_eq, ":troop_no", ":slot_no", 0),
        (try_begin),
          (troop_slot_ge, ":troop_no", ":slot_no", 1),
          (val_sub, ":family_no", 1),
        (try_end),
        (val_add, ":slot_no", 1),
      (try_end),
      (try_begin),
        (eq, ":slot_no", slot_troop_spouse),
        (try_begin),
          (eq, ":gender", 0),
          (str_store_string, s2, "str_husband"),
        (else_try),
          (str_store_string, s2, "str_wife"),
        (try_end),
      (else_try),
        (this_or_next|eq, ":slot_no", slot_troop_son),
        (eq, ":slot_no", slot_troop_daughter),
        (try_begin),
          (eq, ":gender", 0),
          (str_store_string, s2, "str_father"),
        (else_try),
          (str_store_string, s2, "str_mother"),
        (try_end),
      (else_try),
        (this_or_next|eq, ":slot_no", slot_troop_father),
        (eq, ":slot_no", slot_troop_mother),
        (try_begin),
          (eq, ":gender", 0),
          (str_store_string, s2, "str_son"),
        (else_try),
          (str_store_string, s2, "str_daughter"),
        (try_end),
      (else_try),
        (eq, ":slot_no", slot_troop_sibling),
        (try_begin),
          (eq, ":gender", 0),
          (str_store_string, s2, "str_brother"),
        (else_try),
          (str_store_string, s2, "str_sister"),
        (try_end),
      (try_end),
      (troop_get_slot, ":cur_family", ":troop_no", ":slot_no"),
      (str_store_troop_name_link, s3, ":cur_family"),
      (str_store_string, s4, "str_s3s_s2"),
  ]),
  
  
  # script_complete_family_relations
  # Inputs: none
  # Outputs: none
  
  ("complete_family_relations",
    [
      #Completing family relations
      (try_for_range, ":troop_id", heroes_begin, heroes_end),
        ]+gender_fix(":troop_gender", ":troop_id")+[
        (try_begin),
          (troop_get_slot, ":cur_spouse", ":troop_id", slot_troop_spouse),
          (gt, ":cur_spouse", 0),
          (troop_set_slot, ":cur_spouse", slot_troop_spouse, ":troop_id"),
          #Adding children from troop to new spouse
          (troop_get_slot, ":cur_daughter", ":troop_id", slot_troop_daughter),
          (troop_get_slot, ":cur_son", ":troop_id", slot_troop_son),
          (try_begin),
            (gt, ":cur_daughter", 0),
            (troop_set_slot, ":cur_spouse", slot_troop_daughter, ":cur_daughter"),
          (try_end),
          (try_begin),
            (gt, ":cur_son", 0),
            (troop_set_slot, ":cur_spouse", slot_troop_son, ":cur_son"),
          (try_end),
          #Adding children from new spouse to troop
          (troop_get_slot, ":cur_daughter", ":cur_spouse", slot_troop_daughter),
          (troop_get_slot, ":cur_son", ":cur_spouse", slot_troop_son),
          (try_begin),
            (gt, ":cur_daughter", 0),
            (troop_set_slot, ":troop_id", slot_troop_daughter, ":cur_daughter"),
          (try_end),
          (try_begin),
            (gt, ":cur_son", 0),
            (troop_set_slot, ":troop_id", slot_troop_son, ":cur_son"),
          (try_end),
        (try_end),
        (try_begin),
          (troop_get_slot, ":cur_sibling", ":troop_id", slot_troop_sibling),
          (gt, ":cur_sibling", 0),
          (troop_set_slot, ":cur_sibling", slot_troop_sibling, ":troop_id"),
          #Adding parents from troop to new sibling
          (troop_get_slot, ":cur_mother", ":troop_id", slot_troop_mother),
          (troop_get_slot, ":cur_father", ":troop_id", slot_troop_father),
          (try_begin),
            (gt, ":cur_mother", 0),
            (troop_set_slot, ":cur_sibling", slot_troop_mother, ":cur_mother"),
          (try_end),
          (try_begin),
            (gt, ":cur_father", 0),
            (troop_set_slot, ":cur_sibling", slot_troop_father, ":cur_father"),
          (try_end),
          #Adding parents from new sibling to troop
          (troop_get_slot, ":cur_mother", ":cur_sibling", slot_troop_mother),
          (troop_get_slot, ":cur_father", ":cur_sibling", slot_troop_father),
          (try_begin),
            (gt, ":cur_mother", 0),
            (troop_set_slot, ":troop_id", slot_troop_mother, ":cur_mother"),
          (try_end),
          (try_begin),
            (gt, ":cur_father", 0),
            (troop_set_slot, ":troop_id", slot_troop_father, ":cur_father"),
          (try_end),
        (try_end),
        (try_begin),
          (troop_get_slot, ":cur_child", ":troop_id", slot_troop_son),
          (gt, ":cur_child", 0),
          (try_begin),
            (eq, ":troop_gender", 0),
            (troop_set_slot, ":cur_child", slot_troop_father, ":troop_id"),
          (else_try),
            (troop_set_slot, ":cur_child", slot_troop_mother, ":troop_id"),
          (try_end),
          #Adding mother/father and sibling from troop to new son
          (troop_get_slot, ":cur_mother_father", ":troop_id", slot_troop_spouse),
          (troop_get_slot, ":cur_sibling", ":troop_id", slot_troop_daughter),
          (try_begin),
            (gt, ":cur_mother_father", 0),
            (try_begin),
              (eq, ":troop_gender", 1),
              (troop_set_slot, ":cur_child", slot_troop_father, ":cur_mother_father"),
            (else_try),
              (troop_set_slot, ":cur_child", slot_troop_mother, ":cur_mother_father"),
            (try_end),
          (try_end),
          (try_begin),
            (gt, ":cur_sibling", 0),
            (troop_set_slot, ":cur_child", slot_troop_sibling, ":cur_sibling"),
          (try_end),
          #Adding son/daughter and spouse from new son to troop
          (try_begin),
            (eq, ":troop_gender", 0),
            (troop_get_slot, ":cur_spouse", ":cur_child", slot_troop_mother),
          (else_try),
            (troop_get_slot, ":cur_spouse", ":cur_child", slot_troop_father),
          (try_end),
          (troop_get_slot, ":cur_daughter", ":cur_child", slot_troop_sibling),
          (try_begin),
            (gt, ":cur_spouse", 0),
            (troop_set_slot, ":troop_id", slot_troop_spouse, ":cur_spouse"),
          (try_end),
          (try_begin),
            (gt, ":cur_daughter", 0),
            (troop_set_slot, ":troop_id", slot_troop_daughter, ":cur_daughter"),
          (try_end),
        (try_end),
        (try_begin),
          (troop_get_slot, ":cur_child", ":troop_id", slot_troop_daughter),
          (gt, ":cur_child", 0),
          (try_begin),
            (eq, ":troop_gender", 0),
            (troop_set_slot, ":cur_child", slot_troop_father, ":troop_id"),
          (else_try),
            (troop_set_slot, ":cur_child", slot_troop_mother, ":troop_id"),
          (try_end),
          #Adding mother/father and sibling from troop to new daughter
          (troop_get_slot, ":cur_mother_father", ":troop_id", slot_troop_spouse),
          (troop_get_slot, ":cur_sibling", ":troop_id", slot_troop_son),
          (try_begin),
            (gt, ":cur_mother_father", 0),
            (try_begin),
              (eq, ":troop_gender", 1),
              (troop_set_slot, ":cur_child", slot_troop_father, ":cur_mother_father"),
            (else_try),
              (troop_set_slot, ":cur_child", slot_troop_mother, ":cur_mother_father"),
            (try_end),
          (try_end),
          (try_begin),
            (gt, ":cur_sibling", 0),
            (troop_set_slot, ":cur_child", slot_troop_sibling, ":cur_sibling"),
          (try_end),
          #Adding son/daughter and spouse from new daughter to troop
          (try_begin),
            (eq, ":troop_gender", 0),
            (troop_get_slot, ":cur_spouse", ":cur_child", slot_troop_mother),
          (else_try),
            (troop_get_slot, ":cur_spouse", ":cur_child", slot_troop_father),
          (try_end),
          (troop_get_slot, ":cur_son", ":cur_child", slot_troop_sibling),
          (try_begin),
            (gt, ":cur_spouse", 0),
            (troop_set_slot, ":troop_id", slot_troop_spouse, ":cur_spouse"),
          (try_end),
          (try_begin),
            (gt, ":cur_son", 0),
            (troop_set_slot, ":troop_id", slot_troop_son, ":cur_son"),
          (try_end),
        (try_end),
        (try_begin),
          (troop_get_slot, ":cur_father", ":troop_id", slot_troop_father),
          (gt, ":cur_father", 0),
          (try_begin),
            (eq, ":troop_gender", 0),
            (troop_set_slot, ":cur_father", slot_troop_son, ":troop_id"),
          (else_try),
            (troop_set_slot, ":cur_father", slot_troop_daughter, ":troop_id"),
          (try_end),
          #Adding son/daughter and spouse from troop to new father
          (troop_get_slot, ":cur_spouse", ":troop_id", slot_troop_mother),
          (troop_get_slot, ":cur_son_daughter", ":troop_id", slot_troop_sibling),
          (try_begin),
            (gt, ":cur_spouse", 0),
            (troop_set_slot, ":cur_father", slot_troop_spouse, ":cur_spouse"),
          (try_end),
          (try_begin),
            (gt, ":cur_son_daughter", 0),
            (try_begin),
              (eq, ":troop_gender", 0),
              (troop_set_slot, ":cur_father", slot_troop_daughter, ":cur_son_daughter"),
            (else_try),
              (troop_set_slot, ":cur_father", slot_troop_son, ":cur_son_daughter"),
            (try_end),
          (try_end),
          #Adding mother/father and sibling from new father to troop
          (try_begin),
            (eq, ":troop_gender", 0),
            (troop_get_slot, ":cur_sibling", ":cur_father", slot_troop_daughter),
          (else_try),
            (troop_get_slot, ":cur_sibling", ":cur_father", slot_troop_son),
          (try_end),
          (troop_get_slot, ":cur_mother", ":cur_father", slot_troop_spouse),
          (try_begin),
            (gt, ":cur_sibling", 0),
            (troop_set_slot, ":troop_id", slot_troop_sibling, ":cur_sibling"),
          (try_end),
          (try_begin),
            (gt, ":cur_mother", 0),
            (troop_set_slot, ":troop_id", slot_troop_mother, ":cur_mother"),
          (try_end),
        (try_end),
        (try_begin),
          (troop_get_slot, ":cur_mother", ":troop_id", slot_troop_mother),
          (gt, ":cur_mother", 0),
          (try_begin),
            (eq, ":troop_gender", 0),
            (troop_set_slot, ":cur_mother", slot_troop_son, ":troop_id"),
          (else_try),
            (troop_set_slot, ":cur_mother", slot_troop_daughter, ":troop_id"),
          (try_end),
          #Adding son/daughter and spouse from troop to new mother
          (troop_get_slot, ":cur_spouse", ":troop_id", slot_troop_father),
          (troop_get_slot, ":cur_son_daughter", ":troop_id", slot_troop_sibling),
          (try_begin),
            (gt, ":cur_spouse", 0),
            (troop_set_slot, ":cur_mother", slot_troop_spouse, ":cur_spouse"),
          (try_end),
          (try_begin),
            (gt, ":cur_son_daughter", 0),
            (try_begin),
              (eq, ":troop_gender", 0),
              (troop_set_slot, ":cur_mother", slot_troop_daughter, ":cur_son_daughter"),
            (else_try),
              (troop_set_slot, ":cur_mother", slot_troop_son, ":cur_son_daughter"),
            (try_end),
          (try_end),
          #Adding mother/father and sibling from new mother to troop
          (try_begin),
            (eq, ":troop_gender", 0),
            (troop_get_slot, ":cur_sibling", ":cur_mother", slot_troop_daughter),
          (else_try),
            (troop_get_slot, ":cur_sibling", ":cur_mother", slot_troop_son),
          (try_end),
          (troop_get_slot, ":cur_father", ":cur_mother", slot_troop_spouse),
          (try_begin),
            (gt, ":cur_sibling", 0),
            (troop_set_slot, ":troop_id", slot_troop_sibling, ":cur_sibling"),
          (try_end),
          (try_begin),
            (gt, ":cur_father", 0),
            (troop_set_slot, ":troop_id", slot_troop_father, ":cur_father"),
          (try_end),
        (try_end),
      (try_end),
  ]),
  
  # script_collect_friendly_parties
  # Fills the party p_collective_friends with the members of parties attached to main_party and ally_party_no
  ("collect_friendly_parties",
    [
      (party_collect_attachments_to_party, "p_main_party", "p_collective_friends"),
      (try_begin),
        (gt, "$g_ally_party", 0),
        (party_collect_attachments_to_party, "$g_ally_party", "p_temp_party"),
        (assign, "$g_move_heroes", 1),
        (call_script, "script_party_add_party", "p_collective_friends", "p_temp_party"),
      (try_end),
  ]),
  
  # script_encounter_calculate_fit
  # Input: arg1 = troop_no
  # Output: none
  ("encounter_calculate_fit",
    [
      #      (assign, "$g_enemy_fit_for_battle_old",  "$g_enemy_fit_for_battle"),
      #      (assign, "$g_friend_fit_for_battle_old", "$g_friend_fit_for_battle"),
      #      (assign, "$g_main_party_fit_for_battle_old", "$g_main_party_fit_for_battle"),
      (call_script, "script_party_count_fit_for_battle", "p_main_party"),
      #     (assign, "$g_main_party_fit_for_battle", reg(0)),
      (call_script, "script_collect_friendly_parties"),
      (call_script, "script_party_count_fit_for_battle", "p_collective_friends"),
      (assign, "$g_friend_fit_for_battle", reg(0)),
      
      (party_clear, "p_collective_ally"),
      (try_begin),
        (gt, "$g_ally_party", 0),
        (party_is_active, "$g_ally_party"),
        (party_collect_attachments_to_party, "$g_ally_party", "p_collective_ally"),
        #        (call_script, "script_party_count_fit_for_battle", "p_collective_ally"),
        #        (val_add, "$g_friend_fit_for_battle", reg(0)),
      (try_end),
      
      (party_clear, "p_collective_enemy"),
      (try_begin),
        (party_is_active, "$g_enemy_party"),
        (party_collect_attachments_to_party, "$g_enemy_party", "p_collective_enemy"),
      (try_end),
      (call_script, "script_party_count_fit_for_battle", "p_collective_enemy"),
      (assign, "$g_enemy_fit_for_battle", reg(0)),
      (assign, reg11, "$g_enemy_fit_for_battle"),
      (assign, reg10, "$g_friend_fit_for_battle"),
  ]),
  
  # script_encounter_init_variables
  # Input: arg1 = troop_no
  # Output: none
  ("encounter_init_variables",
    [
      (assign, "$capture_screen_shown", 0),
      (assign, "$loot_screen_shown", 0),
      (assign, "$thanked_by_ally_leader", 0),
      (assign, "$g_battle_result", 0),
      (assign, "$cant_leave_encounter", 0),
      (assign, "$cant_talk_to_enemy", 0),
      (assign, "$last_defeated_hero", 0),
      (assign, "$last_freed_hero", 0),
      
      (call_script, "script_encounter_calculate_fit"),
      (call_script, "script_party_copy", "p_main_party_backup", "p_main_party"),
      (call_script, "script_party_calculate_strength", "p_main_party", 0),
      (assign, "$g_starting_strength_main_party", reg0),
      (call_script, "script_party_copy", "p_encountered_party_backup", "p_collective_enemy"),
      (call_script, "script_party_calculate_strength", "p_collective_enemy", 0),
      (assign, "$g_starting_strength_enemy_party", reg0),
      #      (assign, "$g_starting_strength_ally_party", 0),
      (assign, "$g_strength_contribution_of_player", 100),
      
      (call_script, "script_party_copy", "p_collective_friends_backup", "p_collective_friends"),
      (call_script, "script_party_calculate_strength", "p_collective_friends", 0),
      (assign, "$g_starting_strength_friends", reg0),
      
      (store_mul, "$g_strength_contribution_of_player","$g_starting_strength_main_party", 100), # reduce contribution if we are helping someone.
      
      (try_begin),
        (eq, "$freelancer_state", 1),
        (store_character_level, "$g_strength_contribution_of_player", "$player_cur_troop"),
        (val_div, "$g_strength_contribution_of_player", 2),
        (val_max, "$g_strength_contribution_of_player", 5), #contribution(scale 0-100) = level/2, min 5 (so about 5-25)
        #(store_character_level, ":freelancer_player_contribution", "$player_cur_troop"),
        #(val_mul, ":freelancer_player_contribution", 6),
        #(val_div, ":freelancer_player_contribution", 5), #level * 1.2 (for a bit of a scaling bump)
        #(val_max, ":freelancer_player_contribution", 10), #and to give a base line
        #(assign, "$g_strength_contribution_of_player", ":freelancer_player_contribution"),
      (else_try),
        (gt, "$g_starting_strength_friends", 0), #this new to prevent occasional div by zero error
        (val_div, "$g_strength_contribution_of_player","$g_starting_strength_friends"),
      (else_try),
        (assign, "$g_strength_contribution_of_player", 100), #Or zero, maybe
      (try_end),

      
      #      (try_begin),
      #        (gt, "$g_ally_party", 0),
      #        (call_script, "script_party_copy", "p_ally_party_backup", "p_collective_ally"),
      #        (call_script, "script_party_calculate_strength", "p_collective_ally"),
      #        (assign, "$g_starting_strength_ally_party", reg0),
      #        (store_add, ":starting_strength_factor_combined","$g_starting_strength_ally_party","$g_starting_strength_main_party"),
      #         (store_mul, "$g_strength_contribution_of_player","$g_starting_strength_main_party", 80), #reduce contribution if we are helping someone.
      #        (val_div, "$g_strength_contribution_of_player",":starting_strength_factor_combined"),
      #      (try_end),
  ]),
  
  # script_calculate_renown_value
  # Input: arg1 = troop_no
  # Output: fills $battle_renown_value
  ("calculate_renown_value",
    [
      (call_script, "script_party_calculate_strength", "p_main_party", 0),
      (assign, ":main_party_strength", reg0),
      (call_script, "script_party_calculate_strength", "p_collective_enemy", 0),
      (assign, ":enemy_strength", reg0),
      (call_script, "script_party_calculate_strength", "p_collective_friends", 0),
      (assign, ":friends_strength", reg0),
      
      (val_add, ":friends_strength", 1),
      (store_mul, ":enemy_strength_ratio", ":enemy_strength", 100),
      (val_div, ":enemy_strength_ratio", ":friends_strength"),
      
      (assign, ":renown_val", ":enemy_strength"),
      (val_mul, ":renown_val", ":enemy_strength_ratio"),
      (val_div, ":renown_val", 100),
      
      (val_mul, ":renown_val", ":main_party_strength"),
      (val_div, ":renown_val",":friends_strength"),
      
      (store_div, "$battle_renown_value", ":renown_val", 5),
      (val_min, "$battle_renown_value", 2500),
      (convert_to_fixed_point, "$battle_renown_value"),
      (store_sqrt, "$battle_renown_value", "$battle_renown_value"),
      (convert_from_fixed_point, "$battle_renown_value"),
      (assign, reg8, "$battle_renown_value"),
      # HC - was 0xFFFFFFFF
      (display_message, "@Renown value for this battle is {reg8}.", color_neutral_news),
  ]),
  
  
  ##  # script_calculate_weekly_wage_for_player
  ##  # Input: none
  ##  # Output: none
  ##  ("calculate_weekly_wage_for_player",
  ##    [
  ##        (call_script, "script_calculate_weekly_party_wage", "p_main_party"),
  ##        (assign, ":result", reg0),
  ##        (try_for_parties, ":party_no"),
  ##          (store_faction_of_party, ":party_faction", ":party_no"),
  ##          (eq, ":party_faction", "fac_player_supporters_faction"),
  ##          (call_script, "script_calculate_weekly_party_wage", ":party_no"),
  ##          (val_add, ":result", reg0),
  ##        (try_end),
  ##        (assign, reg0, ":result"),
  ##  ]),
  
  
  # script_get_first_agent_with_troop_id
  # Input: arg1 = troop_no
  # Output: agent_id
  ("cf_get_first_agent_with_troop_id",
    [
      (store_script_param_1, ":troop_no"),
      #      (store_script_param_2, ":agent_no_to_begin_searching_after"),
      (assign, ":result", -1),
      (try_for_agents, ":cur_agent"),
        (eq, ":result", -1),
        ##        (try_begin),
        ##          (eq, ":cur_agent", ":agent_no_to_begin_searching_after"),
        ##          (assign, ":agent_no_to_begin_searching_after", -1),
        ##        (try_end),
        ##        (eq, ":agent_no_to_begin_searching_after", -1),
        (agent_get_troop_id, ":cur_troop_no", ":cur_agent"),
        (eq, ":cur_troop_no", ":troop_no"),
        (assign, ":result", ":cur_agent"),
      (try_end),
      (assign, reg0, ":result"),
      (neq, reg0, -1),
  ]),
  
  
  # script_cf_team_get_average_position_of_agents_with_type_to_pos1
  # Input: arg1 = team_no, arg2 = class_no (grc_everyone, grc_infantry, grc_cavalry, grc_archers, grc_heroes)
  # Output: none, pos1 = average_position (0,0,0 if there are no matching agents)
  ("cf_team_get_average_position_of_agents_with_type_to_pos1",
    [
      (store_script_param_1, ":team_no"),
      (store_script_param_2, ":class_no"),
      (assign, ":total_pos_x", 0),
      (assign, ":total_pos_y", 0),
      (assign, ":total_pos_z", 0),
      (assign, ":num_agents", 0),
      (set_fixed_point_multiplier, 100),
      (try_for_agents, ":cur_agent"),
        (agent_is_alive, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (agent_get_team, ":cur_team_no", ":cur_agent"),
        (eq, ":cur_team_no", ":team_no"),
        (agent_get_class, ":cur_class_no", ":cur_agent"),
        (this_or_next|eq, ":class_no", grc_everyone),
        (eq, ":class_no", ":cur_class_no"),
        (agent_get_position, pos1, ":cur_agent"),
        (position_get_x, ":cur_pos_x", pos1),
        (val_add, ":total_pos_x", ":cur_pos_x"),
        (position_get_y, ":cur_pos_y", pos1),
        (val_add, ":total_pos_y", ":cur_pos_y"),
        (position_get_z, ":cur_pos_z", pos1),
        (val_add, ":total_pos_z", ":cur_pos_z"),
        (val_add, ":num_agents", 1),
      (try_end),
      (gt, ":num_agents", 1),
      (val_div, ":total_pos_x", ":num_agents"),
      (val_div, ":total_pos_y", ":num_agents"),
      (val_div, ":total_pos_z", ":num_agents"),
      (init_position, pos1),
      (position_move_x, pos1, ":total_pos_x"),
      (position_move_y, pos1, ":total_pos_y"),
      (position_move_z, pos1, ":total_pos_z"),
  ]),
  
  # script_cf_turn_windmill_fans
  # Input: arg1 = instance_no (none = 0)
  # Output: none
  ("cf_turn_windmill_fans",
    [(store_script_param_1, ":instance_no"),
      (scene_prop_get_instance, ":windmill_fan_object", "spr_windmill_fan_turning", ":instance_no"),
      (ge, ":windmill_fan_object", 0),
      (prop_instance_get_position, pos1, ":windmill_fan_object"),
      (position_rotate_y, pos1, 10),
      (prop_instance_animate_to_position, ":windmill_fan_object", pos1, 100),
      (val_add, ":instance_no", 1),
      (call_script, "script_cf_turn_windmill_fans", ":instance_no"),
  ]),
  
  # script_cf_turn_windmill_fans
  # Input: arg1 = instance_no (none = 0)
  # Output: none
  ("cf_move_traffic",
    [(store_script_param_1, ":instance_no"),
      (scene_prop_get_instance, ":windmill_fan_object", "spr_swc_traffic", ":instance_no"),
      (ge, ":windmill_fan_object", 0),
      (prop_instance_get_position, pos1, ":windmill_fan_object"),
      (position_move_y, pos1, 10),
      (prop_instance_animate_to_position, ":windmill_fan_object", pos1, 100),
      (val_add, ":instance_no", 1),
      (call_script, "script_cf_move_traffic", ":instance_no"),
  ]),
  
  # script_print_party_members
  # Input: arg1 = party_no
  # Output: s51 = output string. "noone" if the party is empty
  ("print_party_members",
    [(store_script_param_1, ":party_no"),
      (party_get_num_companion_stacks, ":num_stacks",":party_no"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop",":party_no",":i_stack"),
        (troop_is_hero, ":stack_troop"),
        (try_begin),
          (eq, ":i_stack", 0),
          (str_store_troop_name, s51, ":stack_troop"),
        (try_end),
        (str_store_troop_name, s50, ":stack_troop"),
        (try_begin),
          (eq, ":i_stack", 1),
          (str_store_string, s51, "str_s50_and_s51"),
        (else_try),
          (gt, ":i_stack", 1),
          (str_store_string, s51, "str_s50_comma_s51"),
        (try_end),
      (try_end),
      (try_begin),
        (eq, ":num_stacks", 0),
        (str_store_string, s51, "str_noone"),
      (try_end),
  ]),
  
  # script_round_value
  # Input: arg1 = value
  # Output: reg0 = rounded_value
  ("round_value",
    [
      (store_script_param_1, ":value"),
      (try_begin),
        (lt, ":value", 100),
        (neq, ":value", 0),
        (val_add, ":value", 5),
        (val_div, ":value", 10),
        (val_mul, ":value", 10),
        (try_begin),
          (eq, ":value", 0),
          (assign, ":value", 5),
        (try_end),
      (else_try),
        (lt, ":value", 300),
        (val_add, ":value", 25),
        (val_div, ":value", 50),
        (val_mul, ":value", 50),
      (else_try),
        (val_add, ":value", 50),
        (val_div, ":value", 100),
        (val_mul, ":value", 100),
      (try_end),
      (assign, reg0, ":value"),
  ]),
  
  
  ##  # script_print_productions_above_or_below_50
  ##  # Input: arg1 = center_no, arg2 = sign of the production, 1 if produced goods, -1 if consumed goods
  ##  # Output: s51 = output string. "nothing" if there are no productions above or below 50
  ##  ("print_productions_above_or_below_50",
  ##    [(store_script_param_1, ":center_no"),
  ##      (store_script_param_2, ":sign"),
  ##      (store_sub, ":item_to_slot", slot_mainplanet_trade_good_productions_begin, trade_goods_begin),
  ##      (assign, ":cur_print_index", 0),
  ##      (try_for_range, ":cur_goods", trade_goods_begin, trade_goods_end),
  ##        (store_add, ":cur_good_slot", ":cur_goods", ":item_to_slot"),
  ##        (party_get_slot, ":cur_production", ":center_no", ":cur_good_slot"),
  ##        (val_mul, ":cur_production", ":sign"),
  ##        (ge, ":cur_production", 50),
  ##        (try_begin),
  ##          (eq, ":cur_print_index", 0),
  ##          (str_store_item_name, s51, ":cur_goods"),
  ##        (try_end),
  ##        (str_store_item_name, s50, ":cur_goods"),
  ##        (try_begin),
  ##          (eq, ":cur_print_index", 1),
  ##          (str_store_string, s51, "str_s50_and_s51"),
  ##        (else_try),
  ##          (gt, ":cur_print_index", 1),
  ##          (str_store_string, s51, "str_s50_comma_s51"),
  ##        (try_end),
  ##        (val_add, ":cur_print_index", 1),
  ##      (try_end),
  ##      (try_begin),
  ##        (eq, ":cur_print_index", 0),
  ##        (str_store_string, s51, "str_nothing"),
  ##      (try_end),
  ##  ]),
  
  # script_change_banners_and_chest
  # Input: none
  # Output: none
  ("change_banners_and_chest",
    [(party_get_slot, ":cur_leader", "$g_encountered_party", slot_mainplanet_lord),
      (try_begin),
        (ge, ":cur_leader", 0),
        #normal_banner_begin
        (troop_get_slot, ":troop_banner_object", ":cur_leader", slot_troop_banner_scene_prop),
        (gt, ":troop_banner_object", 0),
        (replace_scene_props, banner_scene_props_begin, ":troop_banner_object"),
      (else_try),
        (replace_scene_props, banner_scene_props_begin, "spr_empty"),
        #custom_banner_begin
        #       (troop_get_slot, ":flag_spr", ":cur_leader", slot_troop_custom_banner_flag_type),
        #       (ge, ":flag_spr", 0),
        #       (val_add, ":flag_spr", custom_banner_flag_scene_props_begin),
        #       (replace_scene_props, banner_scene_props_begin, ":flag_spr"),
        #     (else_try),
        #       (replace_scene_props, banner_scene_props_begin, "spr_empty"),
      (try_end),
      (try_begin),
        (neq, ":cur_leader", "trp_player"),
        (replace_scene_props, "spr_player_chest", "spr_locked_player_chest"),
      (try_end),
  ]),
  
  
  # script_remove_siege_objects
  # Input: none
  # Output: none
  ("remove_siege_objects",
    [
      (replace_scene_props, "spr_battlement_a_destroyed", "spr_battlement_a"),
      #@> SWY // Not needed anymore // (replace_scene_props, "spr_snowy_castle_battlement_a_destroyed", "spr_snowy_castle_battlement_a"),
      # (replace_scene_props, "spr_castle_e_battlement_a_destroyed", "spr_castle_e_battlement_a"),
      # (replace_scene_props, "spr_castle_battlement_a_destroyed", "spr_castle_battlement_a"),
      # (replace_scene_props, "spr_castle_battlement_b_destroyed", "spr_castle_battlement_b"),
      (replace_scene_props, "spr_earth_wall_a2", "spr_earth_wall_a"),
      (replace_scene_props, "spr_earth_wall_b2", "spr_earth_wall_b"),
      (replace_scene_props, "spr_belfry_platform_b", "spr_empty"),
      (replace_scene_props, "spr_belfry_platform_a", "spr_empty"),
      (replace_scene_props, "spr_belfry_a", "spr_empty"),
      (replace_scene_props, "spr_belfry_wheel", "spr_empty"),
      (replace_scene_props, "spr_siege_ladder_12m", "spr_empty"),
      (replace_scene_props, "spr_siege_ladder_14m", "spr_empty"),
      (replace_scene_props, "spr_mangonel", "spr_empty"),
      (replace_scene_props, "spr_trebuchet_old", "spr_empty"),
      (replace_scene_props, "spr_trebuchet_new", "spr_empty"),
      (replace_scene_props, "spr_stone_ball", "spr_empty"),
      (replace_scene_props, "spr_village_fire_big", "spr_empty"),
  ]),
  
  # script_describe_relation_to_s63
  # Input: arg1 = relation (-100 .. 100)
  # Output: none
  ("describe_relation_to_s63",
    [(store_script_param_1, ":relation"),
      (store_add, ":normalized_relation", ":relation", 100),
      (val_add, ":normalized_relation", 5),
      (store_div, ":str_offset", ":normalized_relation", 10),
      (val_clamp, ":str_offset", 0, 20),
      (store_add, ":str_id", "str_relation_mnus_100",  ":str_offset"),
      (str_store_string, s63, ":str_id"),
  ]),
  
  # script_describe_center_relation_to_s3
  # Input: arg1 = relation (-100 .. 100)
  # Output: none
  ("describe_center_relation_to_s3",
    [(store_script_param_1, ":relation"),
      (store_add, ":normalized_relation", ":relation", 100),
      (val_add, ":normalized_relation", 5),
      (store_div, ":str_offset", ":normalized_relation", 10),
      (val_clamp, ":str_offset", 0, 20),
      (store_add, ":str_id", "str_center_relation_mnus_100",  ":str_offset"),
      (str_store_string, s3, ":str_id"),
  ]),
  
  
  # script_center_ambiance_sounds
  # Input: none
  # Output: none
  # to be called every two seconds
  ("center_ambiance_sounds",
    [
      (assign, ":sound_1", -1),
      (assign, ":sound_2", -1),
      (assign, ":sound_3", -1),
      (assign, ":sound_4", -1),
      (assign, ":sound_5", -1),
      (try_begin),
        (party_slot_eq, "$g_encountered_party", slot_party_type, spt_minorplanet),
        (try_begin),
          (neg|is_currently_night),
          (assign, ":sound_3", "snd_distant_dog_bark"),
          (assign, ":sound_3", "snd_distant_chicken"),
        (else_try),
          (assign, ":sound_1", "snd_distant_dog_bark"),
          (assign, ":sound_2", "snd_distant_owl"),
        (try_end),
      (else_try),
        (party_slot_eq, "$g_encountered_party", slot_party_type, spt_mainplanet),
        (try_begin),
          (neg|is_currently_night),
          (assign, ":sound_1", "snd_distant_carpenter"),
          (assign, ":sound_2", "snd_distant_blacksmith"),
          (assign, ":sound_3", "snd_distant_dog_bark"),
        (else_try),
          (assign, ":sound_1", "snd_distant_dog_bark"),
        (try_end),
      (try_end),
      (try_begin),
        (store_random_in_range, ":r", 0, 7),
        (try_begin),
          (eq, ":r", 1),
          (ge, ":sound_1", 0),
          (play_sound, ":sound_1"),
        (else_try),
          (eq, ":r", 2),
          (ge, ":sound_2", 0),
          (play_sound, ":sound_2"),
        (else_try),
          (eq, ":r", 3),
          (ge, ":sound_3", 0),
          (play_sound, ":sound_3"),
        (else_try),
          (eq, ":r", 4),
          (ge, ":sound_4", 0),
          (play_sound, ":sound_4"),
        (else_try),
          (eq, ":r", 5),
          (ge, ":sound_5", 0),
          (play_sound, ":sound_5"),
        (try_end),
      (try_end),
  ]),
  
  # script_center_set_walker_to_type
  # Input: arg1 = center_no, arg2 = walker_no, arg3 = walker_type,
  # Output: none
  ("center_set_walker_to_type",
    [
      (store_script_param, ":center_no", 1),
      (store_script_param, ":walker_no", 2),
      (store_script_param, ":walker_type", 3),
      (store_add, ":type_slot", slot_center_walker_0_type, ":walker_no"),
      (party_set_slot, ":center_no", ":type_slot", ":walker_type"),
      
      #modified town_walkers so certain planets only have certain walkers - example code originally posted by Keedo420
      # NOTE - any changes to this script must be updated in both the center_set_walker_to_type and fix_town_walker scripts

        #condition to set town specific walkers instead of regular walkers in town
        (try_begin),
          (eq, ":center_no", "p_geonosis"), 
          (assign, ":town_walkers_modified_begin",town8_walkers_begin),
          (assign, ":town_walkers_modified_end",  town8_walkers_end),
        (else_try),
          (eq, ":center_no", "p_mon_cal"),
          (assign, ":town_walkers_modified_begin",town9_walkers_begin),
          (assign, ":town_walkers_modified_end",  town9_walkers_end),
        (else_try),
          (eq, ":center_no", "p_kashyyyk"),
          (assign, ":town_walkers_modified_begin",town10_walkers_begin),
          (assign, ":town_walkers_modified_end",  town10_walkers_end),
        (else_try),
          (eq, ":center_no", "p_gamorr"),
          (assign, ":town_walkers_modified_begin",town12_walkers_begin),
          (assign, ":town_walkers_modified_end",  town12_walkers_end),
        (else_try),
          (eq, ":center_no", "p_tatooine"),
          (assign, ":town_walkers_modified_begin",town14_walkers_begin),
          (assign, ":town_walkers_modified_end",  town14_walkers_end),
        (else_try),
          (eq, ":center_no", "p_ryloth"),
          (assign, ":town_walkers_modified_begin",town17_walkers_begin),
          (assign, ":town_walkers_modified_end",  town17_walkers_end),
        (else_try),
          (eq, ":center_no", "p_kamino"),         #Kamino - Kaminoan walkers
          (assign, ":town_walkers_modified_begin","trp_kaminoan"),
          (assign, ":town_walkers_modified_end",  "trp_kaminoan"),
        (else_try),
          (eq, ":center_no", "p_minorplanet_35"), #Iridonia - Zabrak walkers
          (assign, ":town_walkers_modified_begin",iridonia_walkers_begin),
          (assign, ":town_walkers_modified_end",  iridonia_walkers_end),
        (else_try),
          (eq, ":center_no", "p_minorplanet_53"), #Pzob - Gamorreans
          (assign, ":town_walkers_modified_begin",pzob_walkers_begin),
          (assign, ":town_walkers_modified_end",  pzob_walkers_end),
        (else_try),
          (eq, ":center_no", "p_minorplanet_58"), #Rodia - Added Rodians
          (assign, ":town_walkers_modified_begin",rodia_walkers_begin),
          (assign, ":town_walkers_modified_end",  rodia_walkers_end),
        (else_try),
          (eq, ":center_no", "p_minorplanet_42"), #Bothawui Moon - Added Bothans
          (assign, ":town_walkers_modified_begin",bothaw_moon_walkers_begin),
          (assign, ":town_walkers_modified_end",  bothaw_moon_walkers_end),
        (else_try),
          (assign, ":town_walkers_modified_begin",town_walkers_neutral_begin),
          (assign, ":town_walkers_modified_end",  town_walkers_neutral_end),
          
          (assign, ":default_town_walkers",1),
          (try_begin),
            #minor planets have their own sub-type of farming people. so, replace the city ones.-
            (party_slot_eq, ":center_no", slot_party_type, spt_minorplanet),
            (assign, ":town_walkers_modified_begin",minorplanet_walkers_begin),
            (assign, ":town_walkers_modified_end",  minorplanet_walkers_end),
          (try_end),
          
        (try_end),
        
        (store_faction_of_party, ":faction_no", ":center_no"),
        (try_begin),
            #if this planet doesn't have any custom race to show walking over there
            (eq, ":default_town_walkers",1),
            
            #get the default faction walker range for that main planet
            (try_begin),
              (eq, ":faction_no", "fac_galacticempire"),#empire
              (assign, ":faction_walker_bgin",town_walkers_empire_begin),
              (assign, ":faction_walker_fnal",town_walkers_empire_end),
            (else_try),
              (eq, ":faction_no", "fac_rebelalliance"),  #rebel
              (assign, ":faction_walker_bgin",town_walkers_rebel_begin),
              (assign, ":faction_walker_fnal",town_walkers_rebel_end),
            (else_try),
              (eq, ":faction_no", "fac_huttcartel"),    #hutt
              (assign, ":faction_walker_bgin",town_walkers_hutt_begin),
              (assign, ":faction_walker_fnal",town_walkers_hutt_end),
            (else_try),
              #default faction, neutrals. no specific martial units, 100% of probability down there.
              (assign, ":faction_walker_bgin",":town_walkers_modified_begin"),
              (assign, ":faction_walker_fnal",":town_walkers_modified_end"),
            (try_end),
            
            #once we have our faction, then drop the dice and we have a 30% of probability of faction walkers.
            (store_random_in_range, ":rand", 0, 100),
            (try_begin),
              (le, ":rand", 30),
              (store_random_in_range, ":walker_troop_id", ":faction_walker_bgin", ":faction_walker_fnal"),
            (else_try),
              #if the odds are against us this walker will be neutral, generic
              (store_random_in_range, ":walker_troop_id", ":town_walkers_modified_begin", ":town_walkers_modified_end"),
            (try_end),
        (try_end),


      (try_begin),
        (eq,":walker_type",walkert_spy),
        (assign,":original_walker",":walker_troop_id"),
        (val_add,":walker_troop_id",4), # select spy troop id
        
        # restore spy inventory
        (try_for_range,":item_no","itm_horse_meat","itm_wooden_stick"),
          (store_item_kind_count,":num_items",":item_no",":original_walker"),
          (ge,":num_items",1),
          (store_item_kind_count,":num_items",":item_no",":walker_troop_id"),
          (lt,":num_items",1),
          (troop_add_items,":walker_troop_id",":item_no",1),
        (try_end),
        # determine spy recognition item
        (store_random_in_range,":spy_item_type",itp_type_head_armor,itp_type_hand_armor),
        (assign,":num",0),
        (try_for_range,":item_no","itm_horse_meat","itm_wooden_stick"),
          (store_item_kind_count,":num_items",":item_no",":walker_troop_id"),
          (ge,":num_items",1),
          (item_get_type, ":itp", ":item_no"),
          (eq,":itp",":spy_item_type"),
          (val_add,":num",1),
          (troop_remove_items,":walker_troop_id",":item_no",":num_items"),
        (try_end),
        (store_random_in_range,":random_item",0,":num"),
        (assign,":num",-1),
        (try_for_range,":item_no","itm_horse_meat","itm_wooden_stick"),
          (store_item_kind_count,":num_items",":item_no",":original_walker"),
          (ge,":num_items",1),
          (item_get_type, ":itp", ":item_no"),
          (eq,":itp",":spy_item_type"),
          (val_add,":num",1),
          (eq,":num",":random_item"),
          (troop_add_items,":walker_troop_id",":item_no",1),
          (assign,":spy_item",":item_no"),
        (try_end),
        (assign,"$spy_item_worn",":spy_item"),
        (assign,"$spy_quest_troop",":walker_troop_id"),
        (troop_equip_items,":walker_troop_id"),
      (try_end),
      (store_add, ":troop_slot", slot_center_walker_0_troop, ":walker_no"),
      (party_set_slot, ":center_no", ":troop_slot", ":walker_troop_id"),
      (store_random_in_range, ":walker_dna", 0, 1000000),
      (store_add, ":dna_slot", slot_center_walker_0_dna, ":walker_no"),
      (party_set_slot, ":center_no", ":dna_slot", ":walker_dna"),
  ]),
  
  
  # script_cf_center_get_free_walker
  # Input: arg1 = center_no
  # Output: reg0 = walker no (can fail)
  ("cf_center_get_free_walker",
    [
      (store_script_param, ":center_no", 1),
      (assign, ":num_free_walkers", 0),
      (try_for_range, ":walker_no", 0, num_town_walkers),
        (store_add, ":type_slot", slot_center_walker_0_type, ":walker_no"),
        (party_slot_eq, ":center_no", ":type_slot", walkert_default),
        (val_add, ":num_free_walkers", 1),
      (try_end),
      (gt, ":num_free_walkers", 0),
      (assign, reg0, -1),
      (store_random_in_range, ":random_rank", 0, ":num_free_walkers"),
      (try_for_range, ":walker_no", 0, num_town_walkers),
        (store_add, ":type_slot", slot_center_walker_0_type, ":walker_no"),
        (party_slot_eq, ":center_no", ":type_slot", walkert_default),
        (val_sub, ":num_free_walkers", 1),
        (eq, ":num_free_walkers", ":random_rank"),
        (assign, reg0, ":walker_no"),
      (try_end),
  ]),
  
  # script_center_remove_walker_type_from_walkers
  # Input: arg1 = center_no, arg2 = walker_type,
  # Output: reg0 = 1 if comment found, 0 otherwise; s61 will contain comment string if found
  ("center_remove_walker_type_from_walkers",
    [
      (store_script_param, ":center_no", 1),
      (store_script_param, ":walker_type", 2),
      (try_for_range, ":walker_no", 0, num_town_walkers),
        (store_add, ":type_slot", slot_center_walker_0_type, ":walker_no"),
        (party_slot_eq, ":center_no", ":type_slot", ":walker_type"),
        (call_script, "script_center_set_walker_to_type", ":center_no", ":walker_no", walkert_default),
      (try_end),
  ]),
  
  
  # script_init_town_walkers
  # Input: none
  # Output: none
  ("init_town_walkers",
    [(try_begin),
        (eq, "$town_nighttime", 0),
        (try_for_range, ":walker_no", 0, num_town_walkers),
          (store_add, ":troop_slot", slot_center_walker_0_troop, ":walker_no"),
          (party_get_slot, ":walker_troop_id", "$current_town", ":troop_slot"),
          (gt, ":walker_troop_id", 0),
          (store_add, ":entry_no", town_walker_entries_start, ":walker_no"),
          (set_visitor, ":entry_no", ":walker_troop_id"),
        (try_end),
      (try_end),
      ##       (try_for_range, ":cur_walker", 0, 8),
      ##         (try_begin),
      ##           (lt, ":cur_walker", ":num_walkers"),
      ##           (store_random_in_range, ":walker_troop", town_walkers_begin, town_walkers_end),
      ##         (else_try),
      ##           (assign, ":walker_troop", -1),
      ##         (try_end),
      ##         (try_begin),
      ##           (eq, ":cur_walker", 0),
      ##           (assign, reg0, ":walker_troop"),
      ##         (else_try),
      ##           (eq, ":cur_walker", 1),
      ##           (assign, reg1, ":walker_troop"),
      ##         (else_try),
      ##           (eq, ":cur_walker", 2),
      ##           (assign, reg2, ":walker_troop"),
      ##         (else_try),
      ##           (eq, ":cur_walker", 3),
      ##           (assign, reg3, ":walker_troop"),
      ##         (else_try),
      ##           (eq, ":cur_walker", 4),
      ##           (assign, reg4, ":walker_troop"),
      ##         (else_try),
      ##           (eq, ":cur_walker", 5),
      ##           (assign, reg5, ":walker_troop"),
      ##         (else_try),
      ##           (eq, ":cur_walker", 6),
      ##           (assign, reg6, ":walker_troop"),
      ##         (else_try),
      ##           (eq, ":cur_walker", 7),
      ##           (assign, reg7, ":walker_troop"),
      ##         (try_end),
      ##       (try_end),
      ##       (shuffle_range, 0, 8),
      ##       (set_visitor, 32, reg0),
      ##       (set_visitor, 33, reg1),
      ##       (set_visitor, 34, reg2),
      ##       (set_visitor, 35, reg3),
      ##       (set_visitor, 36, reg4),
      ##       (set_visitor, 37, reg5),
      ##       (set_visitor, 38, reg6),
      ##       (set_visitor, 39, reg7),
      ##     (try_end),
  ]),
  
  
  # script_cf_enter_center_location_bandit_check
  # Input: none
  # Output: none
  ("cf_enter_center_location_bandit_check",
    [
      (neq, "$town_nighttime", 0),
      (party_slot_ge, "$current_town", slot_center_has_bandits, 1),
      (eq, "$g_defending_against_siege", 0),#Skip if the center is under siege (because of resting)
      (eq, "$sneaked_into_town", 0),#Skip if sneaked
      (set_jump_mission, "mt_bandits_at_night"),
      (try_begin),
        (party_slot_eq, "$current_town", slot_party_type, spt_minorplanet),
        (party_get_slot, ":cur_scene", "$current_town", slot_spacestation_exterior),
      (else_try),
        (party_get_slot, ":cur_scene", "$current_town", slot_mainplanet_center),
      (try_end),
      (modify_visitors_at_site, ":cur_scene"),
      (reset_visitors),
      (party_get_slot, ":bandit_troop", "$current_town", slot_center_has_bandits),
      (store_character_level, ":level", "trp_player"),

      (try_begin),
        (party_slot_eq, "$current_town", slot_party_type, spt_minorplanet),
        (assign, ":spawn_amount", 2),
        (store_div, ":level_fac",  ":level", 10),
        (val_add, ":spawn_amount", ":level_fac"),
        (try_for_range, ":unused", 0, 3),
          (gt, ":level", 10),
          (store_random_in_range, ":random_no", 0, 100),
          (lt, ":random_no", ":level"),
          (val_add, ":spawn_amount", 1),
        (try_end),
        (set_visitors, 4, ":bandit_troop", ":spawn_amount"),
        (assign, "$num_center_bandits", ":spawn_amount"),
        (set_jump_entry, 2),
      (else_try),
        (assign, ":spawn_amount", 1),
        (assign, "$num_center_bandits", 0),
        (try_begin),
          (gt, ":level", 15),
          (store_random_in_range, ":random_no", 0, 100),
          (lt, ":random_no", ":level"),
          (assign, ":spawn_amount", 2),
        (try_end),
        (val_add, "$num_center_bandits",  ":spawn_amount"),
        (set_visitors, 11, ":bandit_troop", ":spawn_amount"),
        (assign, ":spawn_amount", 1),
        (try_begin),
          (gt, ":level", 20),
          (store_random_in_range, ":random_no", 0, 100),
          (lt, ":random_no", ":level"),
          (assign, ":spawn_amount", 2),
        (try_end),
        (set_visitors, 27, ":bandit_troop", ":spawn_amount"),
        (val_add, "$num_center_bandits",  ":spawn_amount"),
        (try_begin),
          (gt, ":level", 9),
          (assign, ":spawn_amount", 1),
          (try_begin),
            (gt, ":level", 25),
            (store_random_in_range, ":random_no", 0, 100),
            (lt, ":random_no", ":level"),
            (assign, ":spawn_amount", 2),
          (try_end),
          (set_visitors, 28, ":bandit_troop", ":spawn_amount"),
          (val_add, "$num_center_bandits",  ":spawn_amount"),
        (try_end),
        (assign, "$town_entered", 1),
        (assign, "$all_doors_locked", 1),
      (try_end),
      
      (display_message, "@You have run into a trap!", color_terrible_news),
      (display_message, "@You are attacked by a group of bandits!", color_terrible_news),
      
      (jump_to_scene, ":cur_scene"),
      (change_screen_mission),
  ]),
  
  # script_init_town_agent
  # Input: none
  # Output: none
  ("init_town_agent",
    [
      (store_script_param, ":agent_no", 1),
      (agent_get_troop_id, ":troop_no", ":agent_no"),
      (set_fixed_point_multiplier, 100),
      (assign, ":stand_animation", -1),
      (try_begin),
        (this_or_next|is_between, ":troop_no", armor_merchants_begin, armor_merchants_end),
        (is_between, ":troop_no", weapon_merchants_begin, weapon_merchants_end),
        (try_begin),
          ]+gender_fix(":cur_troop_gender", ":troop_no")+[
          (eq, ":cur_troop_gender", 0),
          (agent_set_animation, ":agent_no", "anim_stand_townguard"),
        (else_try),
          (agent_set_animation, ":agent_no", "anim_stand_townguard"),
        (end_try),
      (else_try),
        (is_between, ":troop_no", faction_ladies_begin, faction_ladies_end),
        (assign, ":stand_animation", "anim_stand_lady"),
      (else_try),
        (is_between, ":troop_no", faction_heroes_begin, faction_heroes_end),
        (assign, ":stand_animation", "anim_stand_lord"),
      (else_try),
        (is_between, ":troop_no", soldiers_begin, soldiers_end),
        (assign, ":stand_animation", "anim_stand_townguard"),
      (try_end),
      (try_begin),
        (ge, ":stand_animation", 0),
        (agent_set_stand_animation, ":agent_no", ":stand_animation"),
        (agent_set_animation, ":agent_no", ":stand_animation"),
        (store_random_in_range, ":random_no", 0, 100),
        (agent_set_animation_progress, ":agent_no", ":random_no"),
      (try_end),
  ]),
  
  # script_init_town_walker_agents
  # Input: none
  # Output: none
  ("init_town_walker_agents",
    [(assign, ":num_walkers", 0),
      (try_for_agents, ":cur_agent"),
        (agent_get_troop_id, ":cur_troop", ":cur_agent"),
        (is_between, ":cur_troop", walkers_begin, walkers_end),
        (val_add, ":num_walkers", 1),
        (agent_get_position, pos1, ":cur_agent"),
        (try_for_range, ":i_e_p", 9, 40),#Entry points
          (entry_point_get_position, pos2, ":i_e_p"),
          (get_distance_between_positions, ":distance", pos1, pos2),
          (lt, ":distance", 200),
          (agent_set_slot, ":cur_agent", 0, ":i_e_p"),
        (try_end),
        (call_script, "script_set_town_walker_destination", ":cur_agent"),
      (try_end),
  ]),
  
  # script_agent_get_town_walker_details
  # This script assumes this is one of town walkers.
  # Input: agent_id
  # Output: reg0: town_walker_type, reg1: town_walker_dna
  ("agent_get_town_walker_details",
    [(store_script_param, ":agent_no", 1),
      (agent_get_entry_no, ":entry_no", ":agent_no"),
      (store_sub, ":walker_no", ":entry_no", town_walker_entries_start),
      
      (store_add, ":type_slot", slot_center_walker_0_type, ":walker_no"),
      (party_get_slot, ":walker_type", "$current_town", ":type_slot"),
      (store_add, ":dna_slot", slot_center_walker_0_dna,  ":walker_no"),
      (party_get_slot, ":walker_dna", "$current_town", ":dna_slot"),
      (assign, reg0, ":walker_type"),
      (assign, reg1, ":walker_dna"),
      (assign, reg2, ":walker_no"),
  ]),
  
  
  # script_tick_town_walkers
  # Input: none
  # Output: none
  ("tick_town_walkers",
    [(try_for_agents, ":cur_agent"),
        (agent_get_troop_id, ":cur_troop", ":cur_agent"),
        (is_between, ":cur_troop", walkers_begin, walkers_end),
        (agent_get_slot, ":target_entry_point", ":cur_agent", 0),
        (entry_point_get_position, pos1, ":target_entry_point"),
        (try_begin),
          (lt, ":target_entry_point", 32),
          (init_position, pos2),
          (position_set_y, pos2, 250),
          (position_transform_position_to_parent, pos1, pos1, pos2),
        (try_end),
        (agent_get_position, pos2, ":cur_agent"),
        (get_distance_between_positions, ":distance", pos1, pos2),
        (lt, ":distance", 400),
        (assign, ":random_no", 0),
        (try_begin),
          (lt, ":target_entry_point", 32),
          (store_random_in_range, ":random_no", 0, 100),
        (try_end),
        (lt, ":random_no", 20),
        (call_script, "script_set_town_walker_destination", ":cur_agent"),
      (try_end),
  ]),
  
  
  # script_set_town_walker_destination
  # Input: arg1 = agent_no
  # Output: none
  ("set_town_walker_destination",
    [(store_script_param_1, ":agent_no"),
      (assign, reg0, 9),
      (assign, reg1, 10),
      (assign, reg2, 12),
      (assign, reg3, 32),
      (assign, reg4, 33),
      (assign, reg5, 34),
      (assign, reg6, 35),
      (assign, reg7, 36),
      (assign, reg8, 37),
      (assign, reg9, 38),
      (assign, reg10, 39),
      (try_for_agents, ":cur_agent"),
        (agent_get_troop_id, ":cur_troop", ":cur_agent"),
        (is_between, ":cur_troop", walkers_begin, walkers_end),
        (agent_get_slot, ":target_entry_point", ":cur_agent", 0),
        (try_begin),
          (eq, ":target_entry_point", 9),
          (assign, reg0, 0),
        (else_try),
          (eq, ":target_entry_point", 10),
          (assign, reg1, 0),
        (else_try),
          (eq, ":target_entry_point", 12),
          (assign, reg2, 0),
        (else_try),
          (eq, ":target_entry_point", 32),
          (assign, reg3, 0),
        (else_try),
          (eq, ":target_entry_point", 33),
          (assign, reg4, 0),
        (else_try),
          (eq, ":target_entry_point", 34),
          (assign, reg5, 0),
        (else_try),
          (eq, ":target_entry_point", 35),
          (assign, reg6, 0),
        (else_try),
          (eq, ":target_entry_point", 36),
          (assign, reg7, 0),
        (else_try),
          (eq, ":target_entry_point", 37),
          (assign, reg8, 0),
        (else_try),
          (eq, ":target_entry_point", 38),
          (assign, reg9, 0),
        (else_try),
          (eq, ":target_entry_point", 39),
          (assign, reg10, 0),
        (try_end),
      (try_end),
      (assign, ":try_limit", 100),
      (assign, ":target_entry_point", 0),
      (try_for_range, ":unused", 0, ":try_limit"),
        (shuffle_range, 0, 11),
        (gt, reg0, 0),
        (assign, ":target_entry_point", reg0),
        (assign, ":try_limit", 0),
      (try_end),
      (try_begin),
        (gt, ":target_entry_point", 0),
        (agent_set_slot, ":agent_no", 0, ":target_entry_point"),
        (entry_point_get_position, pos1, ":target_entry_point"),
        (try_begin),
          (lt, ":target_entry_point", 32),
          (init_position, pos2),
          (position_set_y, pos2, 250),
          (position_transform_position_to_parent, pos1, pos1, pos2),
        (try_end),
        (agent_set_scripted_destination, ":agent_no", pos1, 0),
        (agent_set_speed_limit, ":agent_no", 5),
      (try_end),
  ]),
  
  # script_town_init_doors
  # Input: door_state (-1 = closed, 1 = open, 0 = use $town_nighttime)
  # Output: none (required for siege mission templates)
  ("town_init_doors",
    [(store_script_param, ":door_state", 1),
      (try_begin),
        (assign, ":continue", 0),
        (try_begin),
          (eq, ":door_state", 1),
          (assign, ":continue", 1),
        (else_try),
          (eq, ":door_state", 0),
          (eq, "$town_nighttime", 0),
          (assign, ":continue", 1),
        (try_end),
        (eq, ":continue", 1),# open doors
        (assign, ":end_cond", 1),
        (try_for_range, ":i_instance", 0, ":end_cond"),
          (scene_prop_get_instance, ":object", "spr_towngate_door_left", ":i_instance"),
          (ge, ":object", 0),
          (val_add, ":end_cond", 1),
          (prop_instance_get_position, pos1, ":object"),
          (position_rotate_z, pos1, -100),
          (prop_instance_animate_to_position, ":object", pos1, 1),
        (try_end),
        (assign, ":end_cond", 1),
        (try_for_range, ":i_instance", 0, ":end_cond"),
          (scene_prop_get_instance, ":object", "spr_towngate_rectangle_door_left", ":i_instance"),
          (ge, ":object", 0),
          (val_add, ":end_cond", 1),
          (prop_instance_get_position, pos1, ":object"),
          (position_rotate_z, pos1, -80),
          (prop_instance_animate_to_position, ":object", pos1, 1),
        (try_end),
        (assign, ":end_cond", 1),
        (try_for_range, ":i_instance", 0, ":end_cond"),
          (scene_prop_get_instance, ":object", "spr_towngate_door_right", ":i_instance"),
          (ge, ":object", 0),
          (val_add, ":end_cond", 1),
          (prop_instance_get_position, pos1, ":object"),
          (position_rotate_z, pos1, 100),
          (prop_instance_animate_to_position, ":object", pos1, 1),
        (try_end),
        (assign, ":end_cond", 1),
        (try_for_range, ":i_instance", 0, ":end_cond"),
          (scene_prop_get_instance, ":object", "spr_towngate_rectangle_door_right", ":i_instance"),
          (ge, ":object", 0),
          (val_add, ":end_cond", 1),
          (prop_instance_get_position, pos1, ":object"),
          (position_rotate_z, pos1, 80),
          (prop_instance_animate_to_position, ":object", pos1, 1),
        (try_end),
      (try_end),
  ]),
  
  # script_siege_init_ai_and_belfry
  # Input: none
  # Output: none (required for siege mission templates)
  ("cf_siege_init_ai_and_belfry",
    [(assign, "$cur_belfry_pos", 50),
      (assign, ":cur_belfry_object_pos", slot_scene_belfry_props_begin),
      (store_current_scene, ":cur_scene"),
      #Collecting belfry objects
      (try_for_range, ":i_belfry_instance", 0, 3),
        (scene_prop_get_instance, ":belfry_object", "spr_belfry_a", ":i_belfry_instance"),
        (ge, ":belfry_object", 0),
        (scene_set_slot, ":cur_scene", ":cur_belfry_object_pos", ":belfry_object"),
        (val_add, ":cur_belfry_object_pos", 1),
      (try_end),
      (try_for_range, ":i_belfry_instance", 0, 3),
        (scene_prop_get_instance, ":belfry_object", "spr_belfry_platform_a", ":i_belfry_instance"),
        (ge, ":belfry_object", 0),
        (scene_set_slot, ":cur_scene", ":cur_belfry_object_pos", ":belfry_object"),
        (val_add, ":cur_belfry_object_pos", 1),
      (try_end),
      (try_for_range, ":i_belfry_instance", 0, 3),
        (scene_prop_get_instance, ":belfry_object", "spr_belfry_platform_b", ":i_belfry_instance"),
        (ge, ":belfry_object", 0),
        (scene_set_slot, ":cur_scene", ":cur_belfry_object_pos", ":belfry_object"),
        (val_add, ":cur_belfry_object_pos", 1),
      (try_end),
      (assign, "$belfry_rotating_objects_begin", ":cur_belfry_object_pos"),
      (try_for_range, ":i_belfry_instance", 0, 5),
        (scene_prop_get_instance, ":belfry_object", "spr_belfry_wheel", ":i_belfry_instance"),
        (ge, ":belfry_object", 0),
        (scene_set_slot, ":cur_scene", ":cur_belfry_object_pos", ":belfry_object"),
        (val_add, ":cur_belfry_object_pos", 1),
      (try_end),
      (assign, "$last_belfry_object_pos", ":cur_belfry_object_pos"),
      
      #Lifting up the platform  at the beginning
      (scene_prop_get_instance, ":belfry_object_to_rotate", "spr_belfry_platform_a", 0),
      
      #Moving the belfry objects to their starting position
      (entry_point_get_position,pos1,55),
      (entry_point_get_position,pos3,50),
      (try_for_range, ":i_belfry_object_pos", slot_scene_belfry_props_begin, "$last_belfry_object_pos"),
        (assign, ":pos_no", pos_belfry_begin),
        (val_add, ":pos_no", ":i_belfry_object_pos"),
        (val_sub, ":pos_no", slot_scene_belfry_props_begin),
        (scene_get_slot, ":cur_belfry_object", ":cur_scene", ":i_belfry_object_pos"),
        (prop_instance_get_position, pos2, ":cur_belfry_object"),
        (try_begin),
          (eq, ":cur_belfry_object", ":belfry_object_to_rotate"),
          (position_rotate_x, pos2, 90),
        (try_end),
        (position_transform_position_to_local, ":pos_no", pos1, pos2),
        (position_transform_position_to_parent, pos4, pos3, ":pos_no"),
        (prop_instance_animate_to_position, ":cur_belfry_object", pos4, 1),
      (try_end),
      (assign, "$belfry_positioned", 0),
      (assign, "$belfry_num_slots_positioned", 0),
      (assign, "$belfry_num_men_pushing", 0),
  ]),
  
  # script_cf_siege_move_belfry
  # Input: none
  # Output: none (required for siege mission templates)
  ("cf_siege_move_belfry",
    [(neq, "$last_belfry_object_pos", slot_scene_belfry_props_begin),
      (entry_point_get_position,pos1,50),
      (entry_point_get_position,pos4,55),
      (get_distance_between_positions, ":total_distance", pos4, pos1),
      (store_current_scene, ":cur_scene"),
      (scene_get_slot, ":first_belfry_object", ":cur_scene", slot_scene_belfry_props_begin),
      (prop_instance_get_position, pos2, ":first_belfry_object"),
      (entry_point_get_position,pos1,"$cur_belfry_pos"),
      (position_transform_position_to_parent, pos3, pos1, pos_belfry_begin),
      (position_transform_position_to_parent, pos5, pos4, pos_belfry_begin),
      (get_distance_between_positions, ":cur_distance", pos2, pos3),
      (get_distance_between_positions, ":distance_left", pos2, pos5),
      (try_begin),
        (le, ":cur_distance", 10),
        (val_add, "$cur_belfry_pos", 1),
        (entry_point_get_position,pos1,"$cur_belfry_pos"),
        (position_transform_position_to_parent, pos3, pos1, pos_belfry_begin),
        (get_distance_between_positions, ":cur_distance", pos2, pos3),
      (try_end),
      (neq, "$cur_belfry_pos", 50),
      
      (assign, ":base_speed", 20),
      (store_div, ":slow_range", ":total_distance", 60),
      (store_sub, ":distance_moved", ":total_distance", ":distance_left"),
      
      (try_begin),
        (lt, ":distance_moved", ":slow_range"),
        (store_mul, ":base_speed", ":distance_moved", -60),
        (val_div, ":base_speed", ":slow_range"),
        (val_add, ":base_speed", 80),
      (else_try),
        (lt, ":distance_left", ":slow_range"),
        (store_mul, ":base_speed", ":distance_left", -60),
        (val_div, ":base_speed", ":slow_range"),
        (val_add, ":base_speed", 80),
      (try_end),
      (store_mul, ":belfry_speed", ":cur_distance", ":base_speed"),
      (try_begin),
        (eq, "$belfry_num_men_pushing", 0),
        (assign, ":belfry_speed", 1000000),
      (else_try),
        (val_div, ":belfry_speed", "$belfry_num_men_pushing"),
      (try_end),
      
      (try_begin),
        (le, "$cur_belfry_pos", 55),
        (init_position, pos3),
        (position_rotate_x, pos3, ":distance_moved"),
        (scene_get_slot, ":base_belfry_object", ":cur_scene", slot_scene_belfry_props_begin),
        (prop_instance_get_position, pos4, ":base_belfry_object"),
        (entry_point_get_position,pos1,"$cur_belfry_pos"),
        (try_for_range, ":i_belfry_object_pos", slot_scene_belfry_props_begin, "$last_belfry_object_pos"),
          (scene_get_slot, ":cur_belfry_object", ":cur_scene", ":i_belfry_object_pos"),
          (try_begin),
            (ge, ":i_belfry_object_pos", "$belfry_rotating_objects_begin"),
            (prop_instance_get_starting_position, pos5, ":base_belfry_object"),
            (prop_instance_get_starting_position, pos6, ":cur_belfry_object"),
            (position_transform_position_to_local, pos7, pos5, pos6),
            (position_transform_position_to_parent, pos5, pos4, pos7),
            (position_transform_position_to_parent, pos6, pos5, pos3),
            (prop_instance_set_position, ":cur_belfry_object", pos6),
          (else_try),
            (assign, ":pos_no", pos_belfry_begin),
            (val_add, ":pos_no", ":i_belfry_object_pos"),
            (val_sub, ":pos_no", slot_scene_belfry_props_begin),
            (position_transform_position_to_parent, pos2, pos1, ":pos_no"),
            (prop_instance_animate_to_position, ":cur_belfry_object", pos2, ":belfry_speed"),
          (try_end),
        (try_end),
      (try_end),
      (gt, "$cur_belfry_pos", 55),
      (assign, "$belfry_positioned", 1),
  ]),
  
  # script_cf_siege_rotate_belfry_platform
  # Input: none
  # Output: none (required for siege mission templates)
  ("cf_siege_rotate_belfry_platform",
    [(eq, "$belfry_positioned", 1),
      (scene_prop_get_instance, ":belfry_object", "spr_belfry_platform_a", 0),
      (prop_instance_get_position, pos1, ":belfry_object"),
      (position_rotate_x, pos1, -90),
      (prop_instance_animate_to_position, ":belfry_object", pos1, 400),
      (assign, "$belfry_positioned", 2),
  ]),
  
  # script_cf_siege_assign_men_to_belfry
  # Input: none
  # Output: none (required for siege mission templates)
  ("cf_siege_assign_men_to_belfry",
    [
      (store_mission_timer_a, ":cur_seconds"),
      (neq, "$last_belfry_object_pos", slot_scene_belfry_props_begin),
      (assign, ":end_trigger", 0),
      (try_begin),
        (lt, "$belfry_positioned", 3),
        (get_player_agent_no, ":player_agent"),
        (store_current_scene, ":cur_scene"),
        (scene_get_slot, ":first_belfry_object", ":cur_scene", slot_scene_belfry_props_begin),
        (prop_instance_get_position, pos2, ":first_belfry_object"),
        (assign, ":slot_1_positioned", 0),
        (assign, ":slot_2_positioned", 0),
        (assign, ":slot_3_positioned", 0),
        (assign, ":slot_4_positioned", 0),
        (assign, ":slot_5_positioned", 0),
        (assign, ":slot_6_positioned", 0),
        (assign, "$belfry_num_slots_positioned", 0),
        (assign, "$belfry_num_men_pushing", 0),
        (try_for_agents, ":cur_agent"),
          (agent_is_alive, ":cur_agent"),
          (agent_is_human, ":cur_agent"),
          (try_begin),
            (agent_get_slot, ":x_pos", ":cur_agent", slot_agent_target_x_pos),
            (neq, ":x_pos", 0),
            (agent_get_slot, ":y_pos", ":cur_agent", slot_agent_target_y_pos),
            (try_begin),
              (eq, ":x_pos", -600),
              (try_begin),
                (eq, ":y_pos", 0),
                (assign, ":slot_1_positioned", 1),
              (else_try),
                (eq, ":y_pos", -200),
                (assign, ":slot_2_positioned", 1),
              (else_try),
                (assign, ":slot_3_positioned", 1),
              (try_end),
            (else_try),
              (try_begin),
                (eq, ":y_pos", 0),
                (assign, ":slot_4_positioned", 1),
              (else_try),
                (eq, ":y_pos", -200),
                (assign, ":slot_5_positioned", 1),
              (else_try),
                (assign, ":slot_6_positioned", 1),
              (try_end),
            (try_end),
            (val_add, "$belfry_num_slots_positioned", 1),
            (init_position, pos1),
            (position_move_x, pos1, ":x_pos"),
            (position_move_y, pos1, ":y_pos"),
            (init_position, pos3),
            (position_move_x, pos3, ":x_pos"),
            (position_move_y, pos3, -1000),
            (position_transform_position_to_parent, pos4, pos2, pos1),
            (position_transform_position_to_parent, pos5, pos2, pos3),
            (agent_get_position, pos6, ":cur_agent"),
            (get_distance_between_positions, ":target_distance", pos6, pos4),
            (get_distance_between_positions, ":waypoint_distance", pos6, pos5),
            (try_begin),
              (this_or_next|lt, ":target_distance", ":waypoint_distance"),
              (lt, ":waypoint_distance", 600),
              (agent_set_scripted_destination, ":cur_agent", pos4, 1),
            (else_try),
              (agent_set_scripted_destination, ":cur_agent", pos5, 1),
            (try_end),
            (try_begin),
              (le, ":target_distance", 300),
              (val_add, "$belfry_num_men_pushing", 1),
            (try_end),
          (else_try),
            (agent_get_team, ":cur_agent_team", ":cur_agent"),
            (this_or_next|eq, "$attacker_team", ":cur_agent_team"),
            (             eq, "$attacker_team_2", ":cur_agent_team"),
            (try_begin),
              (gt, ":cur_seconds", 20),
              (agent_get_position, pos1, ":cur_agent"),
              (agent_set_scripted_destination, ":cur_agent", pos1, 0),
            (else_try),
              (try_begin),
                (team_get_movement_order, ":order1", "$attacker_team", grc_infantry),
                (team_get_movement_order, ":order2", "$attacker_team", grc_cavalry),
                (team_get_movement_order, ":order3", "$attacker_team", grc_archers),
                (this_or_next|neq, ":order1", mordr_stand_ground),
                (this_or_next|neq, ":order2", mordr_stand_ground),
                (neq, ":order3", mordr_stand_ground),
                (set_show_messages, 0),
                (team_give_order, "$attacker_team", grc_everyone, mordr_stand_ground),
                (set_show_messages, 1),
              (try_end),
            (try_end),
          (try_end),
        (try_end),
        (try_begin),
          (lt, "$belfry_num_slots_positioned", 6),
          (try_for_agents, ":cur_agent"),
            (agent_is_alive, ":cur_agent"),
            (agent_get_team, ":cur_agent_team", ":cur_agent"),
            (this_or_next|eq, "$attacker_team", ":cur_agent_team"),
            (             eq, "$attacker_team_2", ":cur_agent_team"),
            (neq, ":player_agent", ":cur_agent"),
            (agent_get_class, ":agent_class", ":cur_agent"),
            (this_or_next|eq, ":agent_class", grc_infantry),
            (eq, ":agent_class", grc_cavalry),
            (agent_get_slot, ":x_pos", ":cur_agent", 1),
            (eq, ":x_pos", 0),
            (assign, ":y_pos", 0),
            (try_begin),
              (eq, ":slot_1_positioned", 0),
              (assign, ":x_pos", -600),
              (assign, ":y_pos", 0),
              (val_add, ":slot_1_positioned", 1),
            (else_try),
              (eq, ":slot_2_positioned", 0),
              (assign, ":x_pos", -600),
              (assign, ":y_pos", -200),
              (val_add, ":slot_2_positioned", 1),
            (else_try),
              (eq, ":slot_3_positioned", 0),
              (assign, ":x_pos", -600),
              (assign, ":y_pos", -400),
              (val_add, ":slot_3_positioned", 1),
            (else_try),
              (eq, ":slot_4_positioned", 0),
              (assign, ":x_pos", 600),
              (assign, ":y_pos", 0),
              (val_add, ":slot_4_positioned", 1),
            (else_try),
              (eq, ":slot_5_positioned", 0),
              (assign, ":x_pos", 600),
              (assign, ":y_pos", -200),
              (val_add, ":slot_5_positioned", 1),
            (else_try),
              (eq, ":slot_6_positioned", 0),
              (assign, ":x_pos", 600),
              (assign, ":y_pos", -400),
              (val_add, ":slot_6_positioned", 1),
            (try_end),
            (val_add, "$belfry_num_slots_positioned", 1),
            (agent_set_slot, ":cur_agent", 1, ":x_pos"),
            (agent_set_slot, ":cur_agent", 2, ":y_pos"),
          (try_end),
        (try_end),
        (try_begin),
          (store_mission_timer_a, ":cur_timer"),
          (gt, ":cur_timer", 20),
          (lt, "$belfry_num_slots_positioned", 6),
          (try_for_agents, ":cur_agent"),
            (agent_is_alive, ":cur_agent"),
            (agent_get_team, ":cur_agent_team", ":cur_agent"),
            (this_or_next|eq, "$attacker_team", ":cur_agent_team"),
            (             eq, "$attacker_team_2", ":cur_agent_team"),
            (neq, ":player_agent", ":cur_agent"),
            (agent_get_slot, ":x_pos", ":cur_agent", 1),
            (eq, ":x_pos", 0),
            (assign, ":y_pos", 0),
            (try_begin),
              (eq, ":slot_1_positioned", 0),
              (assign, ":x_pos", -600),
              (assign, ":y_pos", 0),
              (val_add, ":slot_1_positioned", 1),
            (else_try),
              (eq, ":slot_2_positioned", 0),
              (assign, ":x_pos", -600),
              (assign, ":y_pos", -200),
              (val_add, ":slot_2_positioned", 1),
            (else_try),
              (eq, ":slot_3_positioned", 0),
              (assign, ":x_pos", -600),
              (assign, ":y_pos", -400),
              (val_add, ":slot_3_positioned", 1),
            (else_try),
              (eq, ":slot_4_positioned", 0),
              (assign, ":x_pos", 600),
              (assign, ":y_pos", 0),
              (val_add, ":slot_4_positioned", 1),
            (else_try),
              (eq, ":slot_5_positioned", 0),
              (assign, ":x_pos", 600),
              (assign, ":y_pos", -200),
              (val_add, ":slot_5_positioned", 1),
            (else_try),
              (eq, ":slot_6_positioned", 0),
              (assign, ":x_pos", 600),
              (assign, ":y_pos", -400),
              (val_add, ":slot_6_positioned", 1),
            (try_end),
            (val_add, "$belfry_num_slots_positioned", 1),
            (agent_set_slot, ":cur_agent", 1, ":x_pos"),
            (agent_set_slot, ":cur_agent", 2, ":y_pos"),
          (try_end),
        (try_end),
      (else_try),
        (assign, ":end_trigger", 1),
        (try_for_agents, ":cur_agent"),
          (agent_clear_scripted_mode, ":cur_agent"),
        (try_end),
        (set_show_messages, 0),
        (team_give_order, "$attacker_team", grc_everyone, mordr_charge),
        (set_show_messages, 1),
      (try_end),
      (eq, ":end_trigger", 1),
  ]),
  
  # script_siege_move_archers_to_archer_positions
  # Input: none
  # Output: none
  ("siege_move_archers_to_archer_positions",
    [
      (try_for_agents, ":agent_no"),
        (agent_is_alive, ":agent_no"),
        (agent_slot_eq, ":agent_no", slot_agent_is_not_reinforcement, 0),
        (agent_is_defender, ":agent_no"),
        (agent_get_class, ":agent_class", ":agent_no"),
        (agent_get_troop_id, ":agent_troop", ":agent_no"),
        (eq, ":agent_class", grc_archers),
        (try_begin),
          (agent_slot_eq, ":agent_no", slot_agent_target_entry_point, 0),
          (store_random_in_range, ":random_entry_point", 40, 44),
          (agent_set_slot, ":agent_no", slot_agent_target_entry_point, ":random_entry_point"),
        (try_end),
        (try_begin),
          (agent_get_position, pos0, ":agent_no"),
          (entry_point_get_position, pos1, ":random_entry_point"),
          (get_distance_between_positions, ":dist", pos0, pos1),
          (lt, ":dist", 300),
          (agent_clear_scripted_mode, ":agent_no"),
          (agent_set_slot, ":agent_no", slot_agent_is_in_scripted_mode, 0),
          (agent_set_slot, ":agent_no", slot_agent_is_not_reinforcement, 1),
          (str_store_troop_name, s1, ":agent_troop"),
          (assign, reg0, ":agent_no"),
          #         (display_message, "@{s1} ({reg0}) reached pos"),
        (else_try),
          (agent_get_simple_behavior, ":agent_sb", ":agent_no"),
          (agent_get_combat_state, ":agent_cs", ":agent_no"),
          (this_or_next|eq, ":agent_sb", aisb_ranged),
          (eq, ":agent_sb", aisb_go_to_pos),#scripted mode
          (eq, ":agent_cs", 7), # 7 = no visible targets (state for ranged units)
          (try_begin),
            (agent_slot_eq, ":agent_no", slot_agent_is_in_scripted_mode, 0),
            (agent_set_scripted_destination, ":agent_no", pos1, 0),
            (agent_set_slot, ":agent_no", slot_agent_is_in_scripted_mode, 1),
            (str_store_troop_name, s1, ":agent_troop"),
            (assign, reg0, ":agent_no"),
            #           (display_message, "@{s1} ({reg0}) moving to pos"),
          (try_end),
        (else_try),
          (try_begin),
            (agent_slot_eq, ":agent_no", slot_agent_is_in_scripted_mode, 1),
            (agent_clear_scripted_mode, ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_is_in_scripted_mode, 0),
            (str_store_troop_name, s1, ":agent_troop"),
            (assign, reg0, ":agent_no"),
            #           (display_message, "@{s1} ({reg0}) seeing target or changed mode"),
          (try_end),
        (try_end),
      (try_end),
  ]),
  
  
  # script_store_movement_order_name_to_s1
  # Input: arg1 = team_no, arg2 = class_no
  # Output: s1 = order_name
  ("store_movement_order_name_to_s1",
    [(store_script_param_1, ":team_no"),
      (store_script_param_2, ":class_no"),
      (team_get_movement_order, ":cur_order", ":team_no", ":class_no"),
      (try_begin),
        (eq, ":cur_order", mordr_hold),
        (str_store_string, s1, "@Holding"),
      (else_try),
        (eq, ":cur_order", mordr_follow),
        (str_store_string, s1, "@Following"),
      (else_try),
        (eq, ":cur_order", mordr_charge),
        (str_store_string, s1, "@Charging"),
      (else_try),
        (eq, ":cur_order", mordr_advance),
        (str_store_string, s1, "@Advancing"),
      (else_try),
        (eq, ":cur_order", mordr_fall_back),
        (str_store_string, s1, "@Falling Back"),
      (else_try),
        (eq, ":cur_order", mordr_stand_closer),
        (str_store_string, s1, "@Standing Closer"),
      (else_try),
        (eq, ":cur_order", mordr_spread_out),
        (str_store_string, s1, "@Spreading Out"),
      (else_try),
        (eq, ":cur_order", mordr_stand_ground),
        (str_store_string, s1, "@Standing"),
      (else_try),
        (str_store_string, s1, "@N/A"),
      (try_end),
  ]),
  
  # script_store_riding_order_name_to_s1
  # Input: arg1 = team_no, arg2 = class_no
  # Output: s1 = order_name
  ("store_riding_order_name_to_s1",
    [(store_script_param_1, ":team_no"),
      (store_script_param_2, ":class_no"),
      (team_get_riding_order, ":cur_order", ":team_no", ":class_no"),
      (try_begin),
        (eq, ":cur_order", rordr_free),
        (str_store_string, s1, "@Free"),
      (else_try),
        (eq, ":cur_order", rordr_mount),
        (str_store_string, s1, "@Mount"),
      (else_try),
        (eq, ":cur_order", rordr_dismount),
        (str_store_string, s1, "@Dismount"),
      (else_try),
        (str_store_string, s1, "@N/A"),
      (try_end),
  ]),
  
  # script_store_weapon_usage_order_name_to_s1
  # Input: arg1 = team_no, arg2 = class_no
  # Output: s1 = order_name
  ("store_weapon_usage_order_name_to_s1",
    [(store_script_param_1, ":team_no"),
      (store_script_param_2, ":class_no"),
      (team_get_weapon_usage_order, ":cur_order", ":team_no", ":class_no"),
      (team_get_hold_fire_order, ":cur_hold_fire", ":team_no", ":class_no"),
      (try_begin),
        (eq, ":cur_order", wordr_use_any_weapon),
        (eq, ":cur_hold_fire", aordr_fire_at_will),
        (str_store_string, s1, "@Any Weapon"),
      (else_try),
        (eq, ":cur_order", wordr_use_blunt_weapons),
        (eq, ":cur_hold_fire", aordr_fire_at_will),
        (str_store_string, s1, "@Blunt Weapons"),
      (else_try),
        (eq, ":cur_order", wordr_use_any_weapon),
        (eq, ":cur_hold_fire", aordr_hold_your_fire),
        (str_store_string, s1, "str_hold_fire"),
      (else_try),
        (eq, ":cur_order", wordr_use_blunt_weapons),
        (eq, ":cur_hold_fire", aordr_hold_your_fire),
        (str_store_string, s1, "str_blunt_hold_fire"),
      (else_try),
        (str_store_string, s1, "@N/A"),
      (try_end),
  ]),
  
  # script_team_give_order_from_order_panel
  # Input: arg1 = leader_agent_no, arg2 = class_no
  # Output: none
  ("team_give_order_from_order_panel",
    [(store_script_param_1, ":leader_agent_no"),
      (store_script_param_2, ":order"),
      (agent_get_team, ":team_no", ":leader_agent_no"),
      (set_show_messages, 0),
      (try_begin),
        (eq, "$g_formation_infantry_selected", 1),
        (team_give_order, ":team_no", grc_infantry, ":order"),
      (try_end),
      (try_begin),
        (eq, "$g_formation_archers_selected", 1),
        (team_give_order, ":team_no", grc_archers, ":order"),
      (try_end),
      (try_begin),
        (eq, "$g_formation_cavalry_selected", 1),
        (team_give_order, ":team_no", grc_cavalry, ":order"),
      (try_end),
      
      (try_begin),
        (eq, ":order", mordr_hold),
        (agent_get_position, pos1, ":leader_agent_no"),
        (try_begin),
          (eq, "$g_formation_infantry_selected", 1),
          (team_set_order_position, ":team_no", grc_infantry, pos1),
        (try_end),
        (try_begin),
          (eq, "$g_formation_archers_selected", 1),
          (team_set_order_position, ":team_no", grc_archers, pos1),
        (try_end),
        (try_begin),
          (eq, "$g_formation_cavalry_selected", 1),
          (team_set_order_position, ":team_no", grc_cavalry, pos1),
        (try_end),
      (try_end),
      (set_show_messages, 1),
  ]),
  
  
  # script_update_order_panel
  # Input: arg1 = team_no
  # Output: none
  ("update_order_panel",
    [(store_script_param_1, ":team_no"),
      (set_fixed_point_multiplier, 1000),
      
      (assign, ":old_is_infantry_listening", 0),
      (try_begin),
        (class_is_listening_order, ":team_no", grc_infantry),
        (assign, ":old_is_infantry_listening", 1),
      (try_end),
      (assign, ":old_is_archers_listening", 0),
      (try_begin),
        (class_is_listening_order, ":team_no", grc_archers),
        (assign, ":old_is_archers_listening", 1),
      (try_end),
      (assign, ":old_is_cavalry_listening", 0),
      (try_begin),
        (class_is_listening_order, ":team_no", grc_cavalry),
        (assign, ":old_is_cavalry_listening", 1),
      (try_end),
      
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", grc_infantry),
      (overlay_set_text, "$g_presentation_infantry_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", grc_infantry),
      (overlay_set_text, "$g_presentation_infantry_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", grc_infantry),
      (overlay_set_text, "$g_presentation_infantry_weapon_usage", s1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", grc_archers),
      (overlay_set_text, "$g_presentation_archers_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", grc_archers),
      (overlay_set_text, "$g_presentation_archers_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", grc_archers),
      (overlay_set_text, "$g_presentation_archers_weapon_usage", s1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", grc_cavalry),
      (overlay_set_text, "$g_presentation_cavalry_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", grc_cavalry),
      (overlay_set_text, "$g_presentation_cavalry_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", grc_cavalry),
      (overlay_set_text, "$g_presentation_cavalry_weapon_usage", s1),
      
      (try_begin),
        (eq, ":old_is_infantry_listening", 1),
        (eq, ":old_is_archers_listening", 1),
        (eq, ":old_is_cavalry_listening", 1),
        (team_set_order_listener, ":team_no", grc_everyone),
      (else_try),
        (eq, ":old_is_infantry_listening", 1),
        (team_set_order_listener, ":team_no", grc_infantry),
      (else_try),
        (eq, ":old_is_archers_listening", 1),
        (team_set_order_listener, ":team_no", grc_archers),
      (else_try),
        (eq, ":old_is_cavalry_listening", 1),
        (team_set_order_listener, ":team_no", grc_cavalry),
      (try_end),
      
      (position_set_y, pos1, 660),
      (position_set_x, pos1, 250),
      (overlay_set_position, "$g_presentation_infantry_movement", pos1),
      (position_set_x, pos1, 400),
      (overlay_set_position, "$g_presentation_infantry_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_infantry_weapon_usage", pos1),
      
      (position_set_y, pos1, 620),
      (position_set_x, pos1, 250),
      (overlay_set_position, "$g_presentation_archers_movement", pos1),
      (position_set_x, pos1, 400),
      (overlay_set_position, "$g_presentation_archers_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_archers_weapon_usage", pos1),
      
      (position_set_y, pos1, 580),
      (position_set_x, pos1, 250),
      (overlay_set_position, "$g_presentation_cavalry_movement", pos1),
      (position_set_x, pos1, 400),
      (overlay_set_position, "$g_presentation_cavalry_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_cavalry_weapon_usage", pos1),
  ]),
  
  
  # script_update_agent_position_on_map
  # Input: arg1 = agent_no, pos2 = map_size_pos
  # Output: none
  ("update_agent_position_on_map",
    [(store_script_param_1, ":agent_no"),
      (agent_get_slot, ":agent_overlay", ":agent_no", slot_agent_map_overlay_id),
      
      (get_player_agent_no, ":player_agent"),
      (try_begin),
        (le, ":agent_overlay", 0),
        (set_fixed_point_multiplier, 1000),
        (try_begin),
          (eq, ":agent_no", ":player_agent"),
          (create_mesh_overlay, reg1, "mesh_player_dot"),
          (position_set_x, pos1, 500),
          (position_set_y, pos1, 500),
          (overlay_set_size, reg1, pos1),
        (else_try),
          (create_mesh_overlay, reg1, "mesh_white_dot"),
          (position_set_x, pos1, 200),
          (position_set_y, pos1, 200),
          (overlay_set_size, reg1, pos1),
        (try_end),
        (overlay_set_alpha, reg1, 0x88),
        (agent_set_slot, ":agent_no", slot_agent_map_overlay_id, reg1),
        (assign, ":agent_overlay", reg1),
      (try_end),
      
      (try_begin),
        (neq, ":agent_no", ":player_agent"),
        (agent_get_party_id, ":agent_party", ":agent_no"),
        (try_begin),
          (eq, ":agent_party", "p_main_party"),
          (agent_get_class, ":agent_class", ":agent_no"),
          (try_begin),
            (eq, ":agent_class", grc_archers),
            (overlay_set_color, ":agent_overlay", 0x34c6e4),
          (else_try),
            (eq, ":agent_class", grc_cavalry),
            (overlay_set_color, ":agent_overlay", 0x569619),
          (else_try),
            #grc_infantry
            (overlay_set_color, ":agent_overlay", 0x8d5220),
          (try_end),
        (else_try),
          ############################################################################################################
          ##### Custom Commander(CC)
          ############################################################################################################
          #(agent_is_ally, ":agent_no"),
          #(overlay_set_color, ":agent_overlay", 0x5555FF),
          (agent_is_ally, ":agent_no"),
          (agent_get_troop_id, ":agent_troop_id", ":agent_no"),
          (try_begin),
            (eq, ":agent_troop_id", "trp_player"),
            (agent_get_class, ":agent_class", ":agent_no"),
            (try_begin),
              (eq, ":agent_class", grc_archers),
              (overlay_set_color, ":agent_overlay", 0x34c6e4),
            (else_try),
              (eq, ":agent_class", grc_cavalry),
              (overlay_set_color, ":agent_overlay", 0x569619),
            (else_try),
              #grc_infantry
              (overlay_set_color, ":agent_overlay", 0x8d5220),
            (try_end),
          (else_try),
            (overlay_set_color, ":agent_overlay", 0x5555FF),
          (try_end),
          ############################################################################################################
          ##### Custom Commander(CC)
          ############################################################################################################
        (else_try),
          (overlay_set_color, ":agent_overlay", 0xFF0000),
        (try_end),
      (try_end),
      
      (try_begin),
        (eq, ":agent_no", ":player_agent"),
        (agent_get_look_position, pos1, ":agent_no"),
        (position_get_rotation_around_z, ":rot", pos1),
        (init_position, pos10),
        (position_rotate_z, pos10, ":rot"),
        (overlay_set_mesh_rotation, ":agent_overlay", pos10),
        (call_script, "script_convert_3d_pos_to_map_pos"),
      (else_try),
        (agent_get_position, pos1, ":agent_no"),
        (call_script, "script_convert_3d_pos_to_map_pos"),
      (try_end),
      (overlay_set_position, ":agent_overlay", pos0),
  ]),
  
  # script_convert_3d_pos_to_map_pos
  # Input: pos1 = 3d_pos, pos2 = map_size_pos
  # Output: pos0 = map_pos
  ("convert_3d_pos_to_map_pos",
    [(set_fixed_point_multiplier, 1000),
      (position_transform_position_to_local, pos3, pos2, pos1),
      (position_get_x, ":agent_x_pos", pos3),
      (position_get_y, ":agent_y_pos", pos3),
      (val_div, ":agent_x_pos", "$g_battle_map_scale"),
      (val_div, ":agent_y_pos", "$g_battle_map_scale"),
      (set_fixed_point_multiplier, 1000),
      (store_sub, ":map_x", 980, "$g_battle_map_width"),
      (store_sub, ":map_y", 730, "$g_battle_map_height"),
      (val_add, ":agent_x_pos", ":map_x"),
      (val_add, ":agent_y_pos", ":map_y"),
      (position_set_x, pos0, ":agent_x_pos"),
      (position_set_y, pos0, ":agent_y_pos"),
  ]),
  
  # script_update_order_flags_on_map
  # Input: none
  # Output: none
  ("update_order_flags_on_map",
    [(set_fixed_point_multiplier, 1000),
      (get_player_agent_no, ":player_agent"),
      (agent_get_team, ":player_team", ":player_agent"),
      
      (assign, ":old_is_infantry_listening", 0),
      (try_begin),
        (class_is_listening_order, ":player_team", grc_infantry),
        (assign, ":old_is_infantry_listening", 1),
      (try_end),
      (assign, ":old_is_archers_listening", 0),
      (try_begin),
        (class_is_listening_order, ":player_team", grc_archers),
        (assign, ":old_is_archers_listening", 1),
      (try_end),
      (assign, ":old_is_cavalry_listening", 0),
      (try_begin),
        (class_is_listening_order, ":player_team", grc_cavalry),
        (assign, ":old_is_cavalry_listening", 1),
      (try_end),
      
      (get_scene_boundaries, pos2, pos3),
      
      (team_get_movement_order, ":cur_order", ":player_team", grc_infantry),
      (try_begin),
        (eq, ":cur_order", mordr_hold),
        (team_get_order_position, pos1, ":player_team", grc_infantry),
        (call_script, "script_convert_3d_pos_to_map_pos"),
        (overlay_set_alpha, "$g_battle_map_infantry_order_flag", 0xFF),
        (overlay_set_position, "$g_battle_map_infantry_order_flag", pos0),
      (else_try),
        (overlay_set_alpha, "$g_battle_map_infantry_order_flag", 0),
      (try_end),
      (team_get_movement_order, ":cur_order", ":player_team", grc_archers),
      (try_begin),
        (eq, ":cur_order", mordr_hold),
        (team_get_order_position, pos1, ":player_team", grc_archers),
        (call_script, "script_convert_3d_pos_to_map_pos"),
        (overlay_set_alpha, "$g_battle_map_archers_order_flag", 0xFF),
        (overlay_set_position, "$g_battle_map_archers_order_flag", pos0),
      (else_try),
        (overlay_set_alpha, "$g_battle_map_archers_order_flag", 0),
      (try_end),
      (team_get_movement_order, ":cur_order", ":player_team", grc_cavalry),
      (try_begin),
        (eq, ":cur_order", mordr_hold),
        (team_get_order_position, pos1, ":player_team", grc_cavalry),
        (call_script, "script_convert_3d_pos_to_map_pos"),
        (overlay_set_alpha, "$g_battle_map_cavalry_order_flag", 0xFF),
        (overlay_set_position, "$g_battle_map_cavalry_order_flag", pos0),
      (else_try),
        (overlay_set_alpha, "$g_battle_map_cavalry_order_flag", 0),
      (try_end),
      
      (try_begin),
        (eq, ":old_is_infantry_listening", 1),
        (eq, ":old_is_archers_listening", 1),
        (eq, ":old_is_cavalry_listening", 1),
        (team_set_order_listener, ":player_team", grc_everyone),
      (else_try),
        (eq, ":old_is_infantry_listening", 1),
        (team_set_order_listener, ":player_team", grc_infantry),
      (else_try),
        (eq, ":old_is_archers_listening", 1),
        (team_set_order_listener, ":player_team", grc_archers),
      (else_try),
        (eq, ":old_is_cavalry_listening", 1),
        (team_set_order_listener, ":player_team", grc_cavalry),
      (try_end),
  ]),
  
  # script_update_order_panel_checked_classes
  # Input: none
  # Output: none
  ("update_order_panel_checked_classes",
    [(get_player_agent_no, ":player_agent"),
      (agent_get_team, ":player_team", ":player_agent"),
      
      (try_begin),
        (class_is_listening_order, ":player_team", grc_infantry),
        (overlay_set_val, "$g_presentation_obj_4", 1),
        (assign, "$g_formation_infantry_selected", 1),
        (overlay_animate_to_alpha, "$g_presentation_obj_1", 250, 0x44),
      (else_try),
        (overlay_set_val, "$g_presentation_obj_4", 0),
        (assign, "$g_formation_infantry_selected", 0),
        (overlay_animate_to_alpha, "$g_presentation_obj_1", 250, 0),
      (try_end),
      (try_begin),
        (class_is_listening_order, ":player_team", grc_archers),
        (overlay_set_val, "$g_presentation_obj_5", 1),
        (assign, "$g_formation_archers_selected", 1),
        (overlay_animate_to_alpha, "$g_presentation_obj_2", 250, 0x44),
      (else_try),
        (overlay_set_val, "$g_presentation_obj_5", 0),
        (assign, "$g_formation_archers_selected", 0),
        (overlay_animate_to_alpha, "$g_presentation_obj_2", 250, 0),
      (try_end),
      (try_begin),
        (class_is_listening_order, ":player_team", grc_cavalry),
        (overlay_set_val, "$g_presentation_obj_6", 1),
        (assign, "$g_formation_cavalry_selected", 1),
        (overlay_animate_to_alpha, "$g_presentation_obj_3", 250, 0x44),
      (else_try),
        (overlay_set_val, "$g_presentation_obj_6", 0),
        (assign, "$g_formation_cavalry_selected", 0),
        (overlay_animate_to_alpha, "$g_presentation_obj_3", 250, 0),
      (try_end),
  ]),
  
  # script_update_order_panel_statistics_and_map
  # Input: none
  # Output: none
  ("update_order_panel_statistics_and_map", #TODO: Call this in every battle mission template, once per second
    [(set_fixed_point_multiplier, 1000),
      (assign, ":num_us_ready_infantry", 0),
      (assign, ":num_us_ready_archers", 0),
      (assign, ":num_us_ready_cavalry", 0),
      (assign, ":num_us_wounded_infantry", 0),
      (assign, ":num_us_wounded_archers", 0),
      (assign, ":num_us_wounded_cavalry", 0),
      (assign, ":num_us_dead_infantry", 0),
      (assign, ":num_us_dead_archers", 0),
      (assign, ":num_us_dead_cavalry", 0),
      (assign, ":num_allies_ready_men", 0),
      (assign, ":num_allies_wounded_men", 0),
      (assign, ":num_allies_dead_men", 0),
      (assign, ":num_enemies_ready_men", 0),
      (assign, ":num_enemies_wounded_men", 0),
      (assign, ":num_enemies_dead_men", 0),
      
      (get_player_agent_no, ":player_agent"),
      (agent_get_team, ":player_team", ":player_agent"),
      
      (assign, ":old_is_infantry_listening", 0),
      (try_begin),
        (class_is_listening_order, ":player_team", grc_infantry),
        (assign, ":old_is_infantry_listening", 1),
      (try_end),
      (assign, ":old_is_archers_listening", 0),
      (try_begin),
        (class_is_listening_order, ":player_team", grc_archers),
        (assign, ":old_is_archers_listening", 1),
      (try_end),
      (assign, ":old_is_cavalry_listening", 0),
      (try_begin),
        (class_is_listening_order, ":player_team", grc_cavalry),
        (assign, ":old_is_cavalry_listening", 1),
      (try_end),
      
      (get_scene_boundaries, pos2, pos3),
      
      (try_for_agents,":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (agent_get_class, ":agent_class", ":cur_agent"),
        (agent_get_party_id, ":agent_party", ":cur_agent"),
        (agent_get_slot, ":agent_overlay", ":cur_agent", slot_agent_map_overlay_id),
        (try_begin),
          (eq, ":agent_party", "p_main_party"),
          (try_begin),
            (agent_is_alive, ":cur_agent"),
            (call_script, "script_update_agent_position_on_map", ":cur_agent"),
            
            (try_begin),
              (eq, ":agent_class", grc_archers),
              (val_add, ":num_us_ready_archers", 1),
            (else_try),
              (eq, ":agent_class", grc_cavalry),
              (val_add, ":num_us_ready_cavalry", 1),
            (else_try),
              #infantry
              (val_add, ":num_us_ready_infantry", 1),
            (try_end),
          (else_try),
            (overlay_set_alpha, ":agent_overlay", 0),
            (agent_is_wounded, ":cur_agent"),
            (try_begin),
              (eq, ":agent_class", grc_archers),
              (val_add, ":num_us_wounded_archers", 1),
            (else_try),
              (eq, ":agent_class", grc_cavalry),
              (val_add, ":num_us_wounded_cavalry", 1),
            (else_try),
              #infantry
              (val_add, ":num_us_wounded_infantry", 1),
            (try_end),
          (else_try),
            (try_begin),
              (eq, ":agent_class", grc_archers),
              (val_add, ":num_us_dead_archers", 1),
            (else_try),
              (eq, ":agent_class", grc_cavalry),
              (val_add, ":num_us_dead_cavalry", 1),
            (else_try),
              #infantry
              (val_add, ":num_us_dead_infantry", 1),
            (try_end),
          (try_end),
        (else_try),
          ############################################################################################################
          ##### Custom Commander(CC)
          ############################################################################################################
          #(agent_is_ally, ":cur_agent"),
          #(try_begin),
          #(agent_is_alive, ":cur_agent"),
          #(call_script, "script_update_agent_position_on_map", ":cur_agent"),
          #(val_add, ":num_allies_ready_men", 1),
          #(else_try),
          #(overlay_set_alpha, ":agent_overlay", 0),
          #(agent_is_wounded, ":cur_agent"),
          #(val_add, ":num_allies_wounded_men", 1),
          #(else_try),
          #(val_add, ":num_allies_dead_men", 1),
          #(try_end),
          (agent_is_ally, ":cur_agent"),
          (agent_get_troop_id, ":agent_troop_id", ":cur_agent"),
          (try_begin),
            (agent_is_alive, ":cur_agent"),
            (call_script, "script_update_agent_position_on_map", ":cur_agent"),
            (try_begin),
              (eq, ":agent_troop_id", "trp_player"),
              (try_begin),
                (eq, ":agent_class", grc_archers),
                (val_add, ":num_us_ready_archers", 1),
              (else_try),
                (eq, ":agent_class", grc_cavalry),
                (val_add, ":num_us_ready_cavalry", 1),
              (else_try),
                #infantry
                (val_add, ":num_us_ready_infantry", 1),
              (try_end),
            (else_try),
              (val_add, ":num_allies_ready_men", 1),
            (try_end),
          (else_try),
            (overlay_set_alpha, ":agent_overlay", 0),
            (agent_is_wounded, ":cur_agent"),
            (try_begin),
              (eq, ":agent_troop_id", "trp_player"),
              (try_begin),
                (eq, ":agent_class", grc_archers),
                (val_add, ":num_us_wounded_archers", 1),
              (else_try),
                (eq, ":agent_class", grc_cavalry),
                (val_add, ":num_us_wounded_cavalry", 1),
              (else_try),
                #infantry
                (val_add, ":num_us_wounded_infantry", 1),
              (try_end),
            (else_try),
              (val_add, ":num_allies_wounded_men", 1),
            (try_end),
          (else_try),
            (val_add, ":num_allies_dead_men", 1),
          (try_end),
          ############################################################################################################
          ##### Custom Commander(CC)
          ############################################################################################################
        (else_try),
          (try_begin),
            (agent_is_alive, ":cur_agent"),
            (call_script, "script_update_agent_position_on_map", ":cur_agent"),
            (val_add, ":num_enemies_ready_men", 1),
          (else_try),
            (overlay_set_alpha, ":agent_overlay", 0),
            (agent_is_wounded, ":cur_agent"),
            (val_add, ":num_enemies_wounded_men", 1),
          (else_try),
            (val_add, ":num_enemies_dead_men", 1),
          (try_end),
        (try_end),
      (try_end),
      (assign, reg1, ":num_us_ready_infantry"),
      (assign, reg2, ":num_us_ready_archers"),
      (assign, reg3, ":num_us_ready_cavalry"),
      (store_add, ":num_us_ready_men", ":num_us_ready_infantry", ":num_us_ready_archers"),
      (val_add, ":num_us_ready_men", ":num_us_ready_cavalry"),
      (store_add, ":num_us_wounded_men", ":num_us_wounded_infantry", ":num_us_wounded_archers"),
      (val_add, ":num_us_wounded_men", ":num_us_wounded_cavalry"),
      (store_add, ":num_us_dead_men", ":num_us_dead_infantry", ":num_us_dead_archers"),
      (val_add, ":num_us_dead_men", ":num_us_dead_cavalry"),
      (assign, reg4, ":num_us_ready_men"),
      (assign, reg5, ":num_us_wounded_men"),
      (assign, reg6, ":num_us_dead_men"),
      (assign, reg7, ":num_allies_ready_men"),
      (assign, reg8, ":num_allies_wounded_men"),
      (assign, reg9, ":num_allies_dead_men"),
      (assign, reg10, ":num_enemies_ready_men"),
      (assign, reg11, ":num_enemies_wounded_men"),
      (assign, reg12, ":num_enemies_dead_men"),
      (overlay_set_text, "$g_presentation_obj_7", "@Infantry ({reg1})"),
      (overlay_set_text, "$g_presentation_obj_8", "@Archers ({reg2})"),
      (overlay_set_text, "$g_presentation_obj_9", "@Cavalry ({reg3})"),
      (overlay_set_text, "$g_battle_us_ready", "@{reg4}"),
      (overlay_set_text, "$g_battle_us_wounded", "@{reg5}"),
      (overlay_set_text, "$g_battle_us_dead", "@{reg6}"),
      (overlay_set_text, "$g_battle_allies_ready", "@{reg7}"),
      (overlay_set_text, "$g_battle_allies_wounded", "@{reg8}"),
      (overlay_set_text, "$g_battle_allies_dead", "@{reg9}"),
      (overlay_set_text, "$g_battle_enemies_ready", "@{reg10}"),
      (overlay_set_text, "$g_battle_enemies_wounded", "@{reg11}"),
      (overlay_set_text, "$g_battle_enemies_dead", "@{reg12}"),
      
      (assign, ":stat_position_x", 100),
      (assign, ":stat_position_y", 100),
      (val_add, ":stat_position_x", 150),
      (val_add, ":stat_position_y", 80),
      (position_set_x, pos1, ":stat_position_x"),
      (position_set_y, pos1, ":stat_position_y"),
      (overlay_set_position, "$g_battle_us_ready", pos1),
      (val_add, ":stat_position_x", 150),
      (position_set_x, pos1, ":stat_position_x"),
      (overlay_set_position, "$g_battle_us_wounded", pos1),
      (val_add, ":stat_position_x", 150),
      (position_set_x, pos1, ":stat_position_x"),
      (overlay_set_position, "$g_battle_us_dead", pos1),
      (val_add, ":stat_position_x", -300),
      (val_add, ":stat_position_y", -40),
      (position_set_x, pos1, ":stat_position_x"),
      (position_set_y, pos1, ":stat_position_y"),
      (overlay_set_position, "$g_battle_allies_ready", pos1),
      (val_add, ":stat_position_x", 150),
      (position_set_x, pos1, ":stat_position_x"),
      (overlay_set_position, "$g_battle_allies_wounded", pos1),
      (val_add, ":stat_position_x", 150),
      (position_set_x, pos1, ":stat_position_x"),
      (overlay_set_position, "$g_battle_allies_dead", pos1),
      (val_add, ":stat_position_x", -300),
      (val_add, ":stat_position_y", -40),
      (position_set_x, pos1, ":stat_position_x"),
      (position_set_y, pos1, ":stat_position_y"),
      (overlay_set_position, "$g_battle_enemies_ready", pos1),
      (val_add, ":stat_position_x", 150),
      (position_set_x, pos1, ":stat_position_x"),
      (overlay_set_position, "$g_battle_enemies_wounded", pos1),
      (val_add, ":stat_position_x", 150),
      (position_set_x, pos1, ":stat_position_x"),
      (overlay_set_position, "$g_battle_enemies_dead", pos1),
      
      (call_script, "script_update_order_flags_on_map"),
      
      (try_begin),
        (eq, ":old_is_infantry_listening", 1),
        (eq, ":old_is_archers_listening", 1),
        (eq, ":old_is_cavalry_listening", 1),
        (team_set_order_listener, ":player_team", grc_everyone),
      (else_try),
        (eq, ":old_is_infantry_listening", 1),
        (team_set_order_listener, ":player_team", grc_infantry),
      (else_try),
        (eq, ":old_is_archers_listening", 1),
        (team_set_order_listener, ":player_team", grc_archers),
      (else_try),
        (eq, ":old_is_cavalry_listening", 1),
        (team_set_order_listener, ":player_team", grc_cavalry),
      (try_end),
  ]),
  
  
  # script_consume_food
  # Input: arg1: order of the food to be consumed
  # Output: none
  ("consume_food",
    [(store_script_param, ":selected_food", 1),
      (troop_get_inventory_capacity, ":capacity", "trp_player"),
      (try_for_range, ":cur_slot", 0, ":capacity"),
        (troop_get_inventory_slot, ":cur_item", "trp_player", ":cur_slot"),
        (try_begin),#MANDO: Special food item for droids
            (eq,"$droid_food",1),
            (is_between, ":cur_item", "itm_droid_energy", "itm_items_end"),
            (item_slot_eq, ":cur_item", slot_item_is_checked, 0),
            (item_set_slot, ":cur_item", slot_item_is_checked, 1),
            (val_sub, ":selected_food", 1),
            (lt, ":selected_food", 0),
            (assign, ":capacity", 0),
            (troop_inventory_slot_get_item_amount, ":cur_amount", "trp_player", ":cur_slot"),
            (val_sub, ":cur_amount", 1),
            (troop_inventory_slot_set_item_amount, "trp_player", ":cur_slot", ":cur_amount"),
            (assign, "$droid_food",0),
        (else_try),
            (is_between, ":cur_item", food_begin, food_end),
            (troop_get_inventory_slot_modifier, ":item_modifier", "trp_player", ":cur_slot"),
            (neq, ":item_modifier", imod_rotten),
            (item_slot_eq, ":cur_item", slot_item_is_checked, 0),
            (item_set_slot, ":cur_item", slot_item_is_checked, 1),
            (val_sub, ":selected_food", 1),
            (lt, ":selected_food", 0),
            (assign, ":capacity", 0),
            (troop_inventory_slot_get_item_amount, ":cur_amount", "trp_player", ":cur_slot"),
            (val_sub, ":cur_amount", 1),
            (troop_inventory_slot_set_item_amount, "trp_player", ":cur_slot", ":cur_amount"),
        (try_end),    
      (try_end),
  ]),
  
  # script_calculate_troop_score_for_center
  # Input: arg1 = troop_no, arg2 = center_no
  # Output: reg0 = score
  ("calculate_troop_score_for_center",
    [(store_script_param, ":troop_no", 1),
      (store_script_param, ":center_no", 2),
      (assign, ":num_center_points", 1),
      (try_for_range, ":cur_center", centers_begin, centers_end),
        (assign, ":center_owned", 0),
        (try_begin),
          (eq, ":troop_no", "trp_player"),
          (party_slot_eq, ":cur_center", slot_mainplanet_lord, stl_reserved_for_player),
          (assign, ":center_owned", 1),
        (try_end),
        (this_or_next|party_slot_eq, ":cur_center", slot_mainplanet_lord, ":troop_no"),
        (eq, ":center_owned", 1),
        (try_begin),
          (party_slot_eq, ":cur_center", slot_party_type, spt_mainplanet),
          (val_add, ":num_center_points", 4),
        (else_try),
          (party_slot_eq, ":cur_center", slot_party_type, spt_castle),
          (val_add, ":num_center_points", 2),
        (else_try),
          (val_add, ":num_center_points", 1),
        (try_end),
      (try_end),
      (troop_get_slot, ":troop_renown", ":troop_no", slot_troop_renown),
      (store_add, ":score", 500, ":troop_renown"),
      (val_div, ":score", ":num_center_points"),
      (store_random_in_range, ":random", 50, 100),
      (val_mul, ":score", ":random"),
      (try_begin),
        (party_slot_eq, ":center_no", slot_center_last_taken_by_troop, ":troop_no"),
        (val_mul, ":score", 3),
        (val_div, ":score", 2),
      (try_end),
      (try_begin),
        (eq, ":troop_no", "trp_player"),
        (faction_get_slot, ":faction_leader", "$players_faction"),
        (call_script, "script_troop_get_player_relation", ":faction_leader"),
        (assign, ":leader_relation", reg0),
        #(troop_get_slot, ":leader_relation", ":faction_leader", slot_troop_player_relation),
        (val_mul, ":leader_relation", 2),
        (val_add, ":score", ":leader_relation"),
      (try_end),
      (assign, reg0, ":score"),
  ]),
  
  
  # script_assign_lords_to_empty_centers
  # Input: none
  # Output: none
  ("assign_lords_to_empty_centers",
    [(try_for_range, ":cur_center", centers_begin, centers_end),
        (party_get_slot, ":center_lord", ":cur_center", slot_mainplanet_lord),
        (this_or_next|eq, ":center_lord", stl_unassigned),
        (eq, ":center_lord", stl_rejected_by_player),
        
        (store_faction_of_party, ":center_faction", ":cur_center"),
        (is_between, ":center_faction", factions_begin, factions_end),
        (neg|faction_slot_eq, ":center_faction", slot_faction_leader, "trp_player"),
        
        (assign, ":best_lord", -1),
        (assign, ":best_lord_score", -1),
        (try_begin),
          (eq, ":center_lord", stl_unassigned),
          (try_begin),
            (eq, "$players_faction", ":center_faction"),
            (eq, "$player_has_homage", 1),
            (assign, ":best_lord", stl_reserved_for_player),
            (call_script, "script_calculate_troop_score_for_center", "trp_player", ":cur_center"),
            (assign, ":best_lord_score", reg0),
          (try_end),
        (try_end),
        
        (try_for_range, ":cur_troop", faction_heroes_begin, faction_heroes_end),
          (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_faction_hero),
          (store_troop_faction, ":troop_faction", ":cur_troop"),
          (eq, ":troop_faction", ":center_faction"),
          
          (call_script, "script_calculate_troop_score_for_center", ":cur_troop", ":cur_center"),
          (assign, ":score", reg0),
          
          (gt, ":score", ":best_lord_score"),
          (assign, ":best_lord_score", ":score"),
          (assign, ":best_lord", ":cur_troop"),
        (try_end),
        (try_begin),
          (ge, ":best_lord", 0),
          (call_script, "script_give_center_to_lord", ":cur_center", ":best_lord", 1),
        (else_try),
          (eq, ":best_lord", stl_reserved_for_player),
          (party_set_slot, ":cur_center", slot_mainplanet_lord, stl_reserved_for_player),
          (try_begin),
            (party_slot_eq, ":cur_center", slot_party_type, spt_castle),
            (try_for_range, ":cur_village", minorplanet_begin, minorplanet_end),
              (party_slot_eq, ":cur_village", slot_minorplanet_bound_center, ":cur_center"),
              (party_set_slot, ":cur_village", slot_mainplanet_lord, stl_reserved_for_player),
            (try_end),
          (try_end),
        (try_end),
      (try_end),
  ]),
  
  
  # script_create_minorplanet_farmer_party
  # Input: arg1 = minorplanet_no
  # Output: reg0 = party_no
  ("create_minorplanet_farmer_party",
    [(store_script_param, ":minorplanet_no", 1),
      (party_get_slot, ":town_no", ":minorplanet_no", slot_minorplanet_market_town),
      
      (store_faction_of_party, ":party_faction", ":town_no"),
      (set_spawn_radius, 0),
      (spawn_around_party, ":minorplanet_no", "pt_minorplanet_farmers"),
      (assign, ":new_party", reg0),
      
      (party_set_faction, ":new_party", ":party_faction"),
      (party_set_slot, ":new_party", slot_party_home_center, ":minorplanet_no"),
      (party_set_slot, ":new_party", slot_party_type, spt_minorplanet_farmer),
      (party_set_slot, ":new_party", slot_party_ai_state, spai_trading_with_town),
      (party_set_slot, ":new_party", slot_party_ai_object, ":town_no"),
      (party_set_ai_behavior, ":new_party", ai_bhvr_travel_to_party),
      (party_set_ai_object, ":new_party", ":town_no"),
      (party_set_flags, ":new_party", pf_default_behavior, 0),
      (store_sub, ":item_to_price_slot", slot_mainplanet_trade_good_prices_begin, trade_goods_begin),
      (try_for_range, ":cur_goods", trade_goods_begin, trade_goods_end),
        (store_add, ":cur_good_price_slot", ":cur_goods", ":item_to_price_slot"),
        (party_get_slot, ":cur_minorplanet_price", ":minorplanet_no", ":cur_good_price_slot"),
        (party_set_slot, ":new_party", ":cur_good_price_slot", ":cur_minorplanet_price"),
      (try_end),
      (assign, reg0, ":new_party"),
  ]),
  
  #script_do_party_center_trade
  # INPUT: arg1 = party_no, arg2 = center_no, arg3 = percentage_change_in_center
  # OUTPUT: reg0 = total_change
  ("do_party_center_trade",
    [
      (store_script_param, ":party_no", 1),
      (store_script_param, ":center_no", 2),
      (store_script_param, ":percentage_change", 3),
      (assign, ":total_change", 0),
      (store_sub, ":item_to_price_slot", slot_mainplanet_trade_good_prices_begin, trade_goods_begin),
      (try_for_range, ":cur_good", trade_goods_begin, trade_goods_end),
        (store_add, ":cur_good_price_slot", ":cur_good", ":item_to_price_slot"),
        (party_get_slot, ":cur_merchant_price", ":party_no", ":cur_good_price_slot"),
        (party_get_slot, ":cur_center_price", ":center_no", ":cur_good_price_slot"),
        (store_sub, ":price_dif", ":cur_merchant_price", ":cur_center_price"),
        (assign, ":cur_change", ":price_dif"),
        (val_abs, ":cur_change"),
        (val_add, ":total_change", ":cur_change"),
        (val_mul, ":cur_change", ":percentage_change"),
        (val_div, ":cur_change", 100),
        (try_begin),
          (lt, ":price_dif", 0),
          (val_mul, ":cur_change", -1),
        (try_end),
        (val_add, ":cur_center_price", ":cur_change"),
        (party_set_slot, ":center_no", ":cur_good_price_slot", ":cur_center_price"),
        (party_set_slot, ":party_no", ":cur_good_price_slot", ":cur_center_price"),
      (try_end),
      (assign, reg0, ":total_change"),
  ]),
  
  #script_player_join_faction
  # INPUT: arg1 = faction_no
  # OUTPUT: none
  ("player_join_faction",
    [
      (store_script_param, ":faction_no", 1),
      (assign,"$players_faction",":faction_no"),
      (faction_set_slot, "fac_player_supporters_faction", slot_faction_ai_state, sfai_default),
      ##      (try_for_range, ":faction_hero", faction_heroes_begin, faction_heroes_end),
      ##        (store_troop_faction, ":faction_hero_faction", ":faction_hero"),
      ##        (eq, ":faction_hero_faction", "fac_player_supporters_faction"),
      ##        (call_script, "script_change_troop_faction", ":faction_hero", ":faction_no"),
      ##      (try_end),
      (assign, "$players_oath_renounced_against_faction", 0),
      (assign, "$players_oath_renounced_given_center", 0),
      (assign, "$players_oath_renounced_begin_time", 0),
      (try_for_range,":other_faction",factions_begin,factions_end),
        (faction_slot_eq, ":other_faction", slot_faction_state, sfs_active),
        (neq, ":other_faction", "fac_player_supporters_faction"),
        (try_begin),
          (neq, ":other_faction", ":faction_no"),
          (store_relation, ":other_faction_reln", ":other_faction", ":faction_no"),
        (else_try),
          (store_relation, ":other_faction_reln", "fac_player_supporters_faction", ":other_faction"),
          (val_max, ":other_faction_reln", 12),
        (try_end),
        (call_script, "script_set_player_relation_with_faction", ":other_faction", ":other_faction_reln"),
      (try_end),
      (try_for_range, ":cur_center", centers_begin, centers_end),
        #Give center to faction if player is the owner
        (party_slot_eq, ":cur_center", slot_mainplanet_lord, "trp_player"),
        (party_set_faction, ":cur_center", ":faction_no"),
      (try_end),
      (try_for_range, ":quest_no", lord_quests_begin, lord_quests_end),
        (check_quest_active, ":quest_no"),
        (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
        (store_troop_faction, ":quest_giver_faction", ":quest_giver_troop"),
        (store_relation, ":quest_giver_faction_relation", "fac_player_supporters_faction", ":quest_giver_faction"),
        (lt, ":quest_giver_faction_relation", 0),
        (call_script, "script_abort_quest", ":quest_no", 0),
      (try_end),
      (try_begin),
        (neq, ":faction_no", "fac_player_supporters_faction"),
        (faction_set_slot, "fac_player_supporters_faction", slot_faction_state, sfs_inactive),
        (faction_set_slot, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
      (try_end),
      (call_script, "script_store_average_center_value_per_faction"),
      (call_script, "script_update_all_notes"),
      (assign, "$g_recalculate_ais", 1),
  ]),
  
  #script_player_leave_faction
  # INPUT: arg1 = give_back_fiefs
  # OUTPUT: none
  ("player_leave_faction",
    [
      (store_script_param, ":give_back_fiefs", 1),
      (call_script, "script_check_and_finish_active_army_quests_for_faction", "$players_faction"),
      (assign, ":old_faction", "$players_faction"),
      (assign, ":old_has_homage", "$player_has_homage"),
      (assign, "$players_faction", 0),
      (assign, "$player_has_homage", 0),
      (try_begin),
        (neq, ":give_back_fiefs", 0),
        (try_for_range, ":cur_center", centers_begin, centers_end),
          (party_slot_eq, ":cur_center", slot_mainplanet_lord, "trp_player"),
          (call_script, "script_give_center_to_faction", ":cur_center", ":old_faction"),
        (try_end),
      (else_try),
        (try_for_range, ":cur_center", centers_begin, centers_end),
          (party_slot_eq, ":cur_center", slot_mainplanet_lord, "trp_player"),
          (call_script, "script_give_center_to_faction", ":cur_center", "fac_player_supporters_faction"),
        (try_end),
        (try_for_range, ":cur_center", minorplanet_begin, minorplanet_end),
          (party_get_slot, ":cur_bound_center", ":cur_center", slot_minorplanet_bound_center),
          (party_slot_eq, ":cur_center", slot_mainplanet_lord, "trp_player"),
          (neg|party_slot_eq, ":cur_bound_center", slot_mainplanet_lord, "trp_player"),
          (call_script, "script_give_center_to_faction", ":cur_center", ":old_faction"),
        (try_end),
        (store_relation, ":reln", "fac_player_supporters_faction", ":old_faction"),
        (store_sub, ":req_dif", -40, ":reln"),
        (call_script, "script_change_player_relation_with_faction", ":old_faction", ":req_dif"),
      (try_end),
      (try_begin),
        (eq, ":old_has_homage", 1),
        (faction_get_slot, ":faction_leader", ":old_faction", slot_faction_leader),
        (call_script, "script_change_player_relation_with_troop", ":faction_leader", -20),
      (try_end),
      (call_script, "script_update_all_notes"),
      (assign, "$g_recalculate_ais", 1),
  ]),
  
  #script_activate_deactivate_player_faction
  # INPUT: arg1 = last_interaction_with_faction
  # OUTPUT: none
  ("activate_deactivate_player_faction",
    [
      (store_script_param, ":last_interaction_with_faction", 1),
      (try_begin),
        (assign, ":has_center", 0),
        (try_for_range, ":cur_center", centers_begin, centers_end),
          (store_faction_of_party, ":cur_center_faction", ":cur_center"),
          (eq, ":cur_center_faction", "fac_player_supporters_faction"),
          (assign, ":has_center", 1),
        (try_end),
        (try_begin),
          (eq, ":has_center", 1),
          (neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
          (faction_set_slot, "fac_player_supporters_faction", slot_faction_state, sfs_active),
          (faction_set_slot, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
          (str_store_faction_name, s1, ":last_interaction_with_faction"),
          (faction_set_name, "fac_player_supporters_faction", "@{s1} Rebels"),
          (faction_set_color, "fac_player_supporters_faction", 0xAAAAAA),
          (assign, "$players_faction", "fac_player_supporters_faction"),
          (assign, "$g_player_banner_granted", 1),
          (call_script, "script_store_average_center_value_per_faction"),
          (call_script, "script_update_all_notes"),
          (call_script, "script_add_notification_menu", "mnu_notification_player_faction_active", 0, 0),
        (else_try),
          (eq, ":has_center", 0),
          (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
          (le, "$supported_pretender", 0),
          (faction_set_slot, "fac_player_supporters_faction", slot_faction_state, sfs_inactive),
          (faction_set_slot, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
          (assign, "$players_faction", 0),
          (assign, "$players_oath_renounced_against_faction", 0),
          (assign, "$players_oath_renounced_given_center", 0),
          (assign, "$players_oath_renounced_begin_time", 0),
          (call_script, "script_store_average_center_value_per_faction"),
          (call_script, "script_update_all_notes"),
          (call_script, "script_add_notification_menu", "mnu_notification_player_faction_deactive", 0, 0),
        (try_end),
      (try_end),
  ]),
  
  # #script_activate_deactivate_player_faction
  # # INPUT: arg1 = last_interaction_with_faction
  # # OUTPUT: none
  # ("activate_deactivate_player_faction",
  # [
  # (store_script_param, ":last_interaction_with_faction", 1),
  # (try_begin),
  # (assign, ":has_center", 0),
  # (try_for_range, ":cur_center", centers_begin, centers_end),
  # (store_faction_of_party, ":cur_center_faction", ":cur_center"),
  # (eq, ":cur_center_faction", "fac_player_supporters_faction"),
  # (assign, ":has_center", 1),
  # (try_end),
  # #own faction start-----------------------------------
  # (assign,":player_center",-1),                     #only existed in 0.960 code
  # (try_for_range, ":cur_center", walled_centers_begin, walled_centers_end), #only existed in 0.960 code
  # (store_faction_of_party, ":cur_center_faction", ":cur_center"),     #only existed in 0.960 code
  # (eq, ":cur_center_faction", "fac_player_supporters_faction"),       #only existed in 0.960 code
  # (assign,":player_center",":cur_center"),
  # (try_end),                         #only existed in 0.960 code
  # #own faction end-----------------------------------
  # (try_begin),
  # (eq, ":has_center", 1),
  # (neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
  # (faction_set_slot, "fac_player_supporters_faction", slot_faction_state, sfs_active),
  # (faction_set_slot, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
  
  # #own faction start-----------------------------------
  # (try_begin),
  # (gt,":player_center",0),
  # (val_sub,":player_center","p_mandalore"),
  # (val_add,":player_center","str_center_1_faction"),
  # (str_store_string,s1, ":player_center"),
  # (faction_set_name, "fac_player_supporters_faction", "@{s1}"),
  # (faction_set_slot, "fac_player_supporters_faction", slot_faction_culture, ":last_interaction_with_faction"),
  # (else_try),
  # #own faction end-----------------------------------
  # (str_store_faction_name, s1, ":last_interaction_with_faction"),
  # (faction_set_name, "fac_player_supporters_faction", "@{s1} Rebels"),
  # #own faction start-----------------------------------
  # (faction_set_slot, "fac_player_supporters_faction", slot_faction_culture, "fac_rebelalliance"),
  # (try_end),
  # #own faction end-----------------------------------
  # (faction_set_color, "fac_player_supporters_faction", 0xAAAAAA),
  # (assign, "$players_faction", "fac_player_supporters_faction"),
  # (assign, "$g_player_banner_granted", 1),
  # (call_script, "script_store_average_center_value_per_faction"),
  # (call_script, "script_update_all_notes"),
  # (call_script, "script_add_notification_menu", "mnu_notification_player_faction_active", 0, 0),
  # (else_try),
  # (eq, ":has_center", 0),
  # (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
  # (le, "$supported_pretender", 0),
  # (faction_set_slot, "fac_player_supporters_faction", slot_faction_state, sfs_inactive),
  # (faction_set_slot, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
  # (assign, "$players_faction", 0),
  # (assign, "$players_oath_renounced_against_faction", 0),
  # (assign, "$players_oath_renounced_given_center", 0),
  # (assign, "$players_oath_renounced_begin_time", 0),
  # (call_script, "script_store_average_center_value_per_faction"),
  # (call_script, "script_update_all_notes"),
  # (call_script, "script_add_notification_menu", "mnu_notification_player_faction_deactive", 0, 0),
  # (try_end),
  # (try_end),
  # ]),
  
  
  
  #script_agent_reassign_team
  # INPUT: arg1 = agent_no
  # OUTPUT: none
  ("agent_reassign_team",
    [
      (store_script_param, ":agent_no", 1),
      (get_player_agent_no, ":player_agent"),
      (try_begin),
        (ge, ":player_agent", 0),
        (agent_is_human, ":agent_no"),
        (agent_is_ally, ":agent_no"),
        (agent_get_party_id, ":party_no", ":agent_no"),
        ############################################################################################################
        ##### Custom Commander(CC)
        ############################################################################################################
        (ge, ":party_no", 0),
        ############################################################################################################
        ##### Custom Commander(CC)
        ############################################################################################################
        (neq, ":party_no", "p_main_party"),
        (assign, ":continue", 1),
        (store_faction_of_party, ":party_faction", ":party_no"),
        (try_begin),
          (eq, ":party_faction", "$players_faction"),
          (is_between, "$players_faction", factions_begin, factions_end),
          (faction_slot_eq, "$players_faction", slot_faction_marshall, "trp_player"),
          (assign, ":continue", 0),
        (else_try),
          (neq, "$freelancer_state", 1),  
          (party_stack_get_troop_id, ":leader_troop_id", ":party_no", 0),
          (neg|is_between, ":leader_troop_id", faction_heroes_begin, faction_heroes_end),
          (assign, ":continue", 0),
        (try_end),
        (eq, ":continue", 1),
        (agent_get_team, ":player_team", ":player_agent"),
        (val_add, ":player_team", 2),
        (agent_set_team, ":agent_no", ":player_team"),
      (try_end),
  ]),
  
  #script_start_quest
  # INPUT: arg1 = quest_no, arg2 = giver_troop_no, s2 = description_text
  # OUTPUT: none
  ("start_quest",
    [(store_script_param, ":quest_no", 1),
      (store_script_param, ":giver_troop_no", 2),
      (try_begin),
        (is_between, ":giver_troop_no", faction_heroes_begin, faction_heroes_end),
        (str_store_troop_name_link, s62, ":giver_troop_no"),
      (else_try),
        (str_store_troop_name, s62, ":giver_troop_no"),
      (try_end),
      (str_store_string, s63, "@Given by: {s62}"),
      (store_current_hours, ":cur_hours"),
      (str_store_date, s60, ":cur_hours"),
      (str_store_string, s60, "@Given on: {s60}"),
      (add_quest_note_from_sreg, ":quest_no", 0, s60, 0),
      (add_quest_note_from_sreg, ":quest_no", 1, s63, 0),
      (add_quest_note_from_sreg, ":quest_no", 2, s2, 0),
      
      (try_begin),
        (quest_slot_ge, ":quest_no", slot_quest_expiration_days, 1),
        (quest_get_slot, reg0, ":quest_no", slot_quest_expiration_days),
        (add_quest_note_from_sreg, ":quest_no", 7, "@You have {reg0} days to finish this quest.", 0),
      (try_end),
      
      #Adding dont_give_again_for_days value
      (try_begin),
        (quest_slot_ge, ":quest_no", slot_quest_dont_give_again_period, 1),
        (quest_get_slot, ":dont_give_again_period", ":quest_no", slot_quest_dont_give_again_period),
        (quest_set_slot, ":quest_no", slot_quest_dont_give_again_remaining_days, ":dont_give_again_period"),
      (try_end),
      (start_quest, ":quest_no", ":giver_troop_no"),
      (display_message, "str_quest_log_updated", color_quest_and_faction_news),
  ]),
  
  #script_conclude_quest
  # INPUT: arg1 = quest_no
  # OUTPUT: none
  ("conclude_quest",
    [(store_script_param, ":quest_no", 1),
      (conclude_quest, ":quest_no"),
      (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
      (str_store_troop_name, s59, ":quest_giver_troop"),
      (add_quest_note_from_sreg, ":quest_no", 7, "@This quest has been concluded. Talk to {s59} to finish it.", 0),
  ]),
  
  #script_succeed_quest
  # INPUT: arg1 = quest_no
  # OUTPUT: none
  ("succeed_quest",
    [(store_script_param, ":quest_no", 1),
      (succeed_quest, ":quest_no"),
      (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
      (str_store_troop_name, s59, ":quest_giver_troop"),
      (add_quest_note_from_sreg, ":quest_no", 7, "@This quest has been successfully completed. Talk to {s59} to claim your reward.", 0),
  ]),
  
  #script_fail_quest
  # INPUT: arg1 = quest_no
  # OUTPUT: none
  ("fail_quest",
    [(store_script_param, ":quest_no", 1),
      (fail_quest, ":quest_no"),
      (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
      (str_store_troop_name, s59, ":quest_giver_troop"),
      (add_quest_note_from_sreg, ":quest_no", 7, "@This quest has failed. Talk to {s59} to explain the situation.", 0),
  ]),
  
  #script_report_quest_troop_positions
  # INPUT: arg1 = quest_no, arg2 = troop_no, arg3 = note_index
  # OUTPUT: none
  ("report_quest_troop_positions",
    [(store_script_param, ":quest_no", 1),
      (store_script_param, ":troop_no", 2),
      (store_script_param, ":note_index", 3),
      (call_script, "script_get_information_about_troops_position", ":troop_no", 1),
      (str_store_string, s5, "@At the time quest was given:^{s1}"),
      (add_quest_note_from_sreg, ":quest_no", ":note_index", s5, 1),
      (call_script, "script_update_troop_location_notes", ":troop_no", 1),
  ]),
  
  #script_end_quest
  # INPUT: arg1 = quest_no
  # OUTPUT: none
  ("end_quest",
    [(store_script_param, ":quest_no", 1),
      (str_clear, s1),
      (add_quest_note_from_sreg, ":quest_no", 0, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 1, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 2, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 3, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 4, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 5, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 6, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 7, s1, 0),
      (try_begin),
        (neg|check_quest_failed, ":quest_no"),
        (val_add, "$g_total_quests_completed", 1),
      (try_end),
      (complete_quest, ":quest_no"),
      (try_begin),
        (is_between, ":quest_no", mayor_quests_begin, mayor_quests_end),
        (assign, "$merchant_quest_last_offerer", -1),
        (assign, "$merchant_offered_quest", -1),
      (try_end),
  ]),
  
  #script_cancel_quest
  # INPUT: arg1 = quest_no
  # OUTPUT: none
  ("cancel_quest",
    [(store_script_param, ":quest_no", 1),
      (str_clear, s1),
      (add_quest_note_from_sreg, ":quest_no", 0, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 1, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 2, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 3, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 4, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 5, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 6, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 7, s1, 0),
      (cancel_quest, ":quest_no"),
      (try_begin),
        (is_between, ":quest_no", mayor_quests_begin, mayor_quests_end),
        (assign, "$merchant_quest_last_offerer", -1),
        (assign, "$merchant_offered_quest", -1),
      (try_end),
  ]),
  
  ##  #script_get_available_mercenary_troop_and_amount_of_center
  ##  # INPUT: arg1 = center_no
  ##  # OUTPUT: reg0 = mercenary_troop_type, reg1 = amount
  ##  ("get_available_mercenary_troop_and_amount_of_center",
  ##    [(store_script_param, ":center_no", 1),
  ##     (party_get_slot, ":mercenary_troop", ":center_no", slot_center_mercenary_troop_type),
  ##     (party_get_slot, ":mercenary_amount", ":center_no", slot_center_mercenary_troop_amount),
  ##     (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
  ##     (val_min, ":mercenary_amount", ":free_capacity"),
  ##     (store_troop_gold, ":cur_gold", "trp_player"),
  ##     (call_script, "script_game_get_join_cost", ":mercenary_troop"),
  ##     (assign, ":join_cost", reg0),
  ##     (try_begin),
  ##       (gt, ":join_cost", 0),
  ##       (val_div, ":cur_gold", ":join_cost"),
  ##       (val_min, ":mercenary_amount", ":cur_gold"),
  ##     (try_end),
  ##     (assign, reg0, ":mercenary_troop"),
  ##     (assign, reg1, ":mercenary_amount"),
  ##     ]),
  ##
  
  #script_update_minorplanet_market_towns
  # INPUT: none
  # OUTPUT: none
  ("update_minorplanet_market_towns",
    [(try_for_range, ":cur_village", minorplanet_begin, minorplanet_end),
        (store_faction_of_party, ":minorplanet_faction", ":cur_village"),
        (assign, ":min_dist", 999999),
        (assign, ":min_dist_town", -1),
        (try_for_range, ":cur_town", mainplanets_begin, mainplanets_end),
          (store_faction_of_party, ":town_faction", ":cur_town"),
          (eq, ":town_faction", ":minorplanet_faction"),
          (store_distance_to_party_from_party, ":cur_dist", ":cur_village", ":cur_town"),
          (lt, ":cur_dist", ":min_dist"),
          (assign, ":min_dist", ":cur_dist"),
          (assign, ":min_dist_town", ":cur_town"),
        (try_end),
        (gt, ":min_dist_town", -1),
        (party_set_slot, ":cur_village", slot_minorplanet_market_town, ":min_dist_town"),
      (try_end),
  ]),
  
  
  
  #script_update_mercenary_units_of_towns
  # INPUT: none
  # OUTPUT: none
  ("update_mercenary_units_of_towns",
    [(try_for_range, ":town_no", mainplanets_begin, mainplanets_end),
        (store_random_in_range, ":troop_no", mercenary_troops_begin, mercenary_troops_end),
        (party_set_slot, ":town_no", slot_center_mercenary_troop_type, ":troop_no"),
        #SW - mercenaries should now appear 3x more frequently in towns (nevermind, this is the size of the mercenary party)
        (store_random_in_range, ":amount", 3, 8),
        #(store_random_in_range, ":amount", 14, 18),
        (party_set_slot, ":town_no", slot_center_mercenary_troop_amount, ":amount"),
      (try_end),
  ]),
  
  #script_update_volunteer_troops_in_village
  # INPUT: arg1 = center_no
  # OUTPUT: none
  ("update_volunteer_troops_in_village",
    [
      (store_script_param, ":center_no", 1),
      (party_get_slot, ":player_relation", ":center_no", slot_center_player_relation),
      
      #SW - Change the village so that it offers troops of the current faction. (courtesy of HardCode and TheMageLord)
      #(party_get_slot, ":center_culture", ":center_no", slot_center_culture),
      (store_faction_of_party,":center_culture",":center_no"),
      
      (faction_get_slot, ":volunteer_troop", ":center_culture", slot_faction_tier_1_troop),
      (assign, ":volunteer_troop_tier", 1),
      (store_div, ":tier_upgrades", ":player_relation", 10),
      (try_for_range, ":unused", 0, ":tier_upgrades"),
        (store_random_in_range, ":random_no", 0, 100),
        (lt, ":random_no", 10),
        (store_random_in_range, ":random_no", 0, 2),
        (troop_get_upgrade_troop, ":upgrade_troop_no", ":volunteer_troop", ":random_no"),
        (try_begin),
          (le, ":upgrade_troop_no", 0),
          (troop_get_upgrade_troop, ":upgrade_troop_no", ":volunteer_troop", 0),
        (try_end),
        (gt, ":upgrade_troop_no", 0),
        (val_add, ":volunteer_troop_tier", 1),
        (assign, ":volunteer_troop", ":upgrade_troop_no"),
      (try_end),
      
      (assign, ":upper_limit", 7),
      (try_begin),
        (ge, ":player_relation", 5),
        (assign, ":upper_limit", ":player_relation"),
        (val_div, ":upper_limit", 2),
        (val_add, ":upper_limit", 10),
      (else_try),
        (lt, ":player_relation", 0),
        (assign, ":upper_limit", 0),
      (try_end),
      
      (val_mul, ":upper_limit", 3),
      (store_add, ":amount_random_divider", 2, ":volunteer_troop_tier"),
      (val_div, ":upper_limit", ":amount_random_divider"),
      
      (store_random_in_range, ":amount", 0, ":upper_limit"),
      (party_set_slot, ":center_no", slot_center_volunteer_troop_type, ":volunteer_troop"),
      (party_set_slot, ":center_no", slot_center_volunteer_troop_amount, ":amount"),
  ]),
  
  #script_update_npc_volunteer_troops_in_village
  # INPUT: arg1 = center_no
  # OUTPUT: none
  ("update_npc_volunteer_troops_in_village",
    [
      (store_script_param, ":center_no", 1),
      (party_get_slot, ":center_culture", ":center_no", slot_center_culture),
      (faction_get_slot, ":volunteer_troop", ":center_culture", slot_faction_tier_1_troop),
      (assign, ":volunteer_troop_tier", 1),
      (try_for_range, ":unused", 0, 5),
        (store_random_in_range, ":random_no", 0, 100),
        (lt, ":random_no", 10),
        (store_random_in_range, ":random_no", 0, 2),
        (troop_get_upgrade_troop, ":upgrade_troop_no", ":volunteer_troop", ":random_no"),
        (try_begin),
          (le, ":upgrade_troop_no", 0),
          (troop_get_upgrade_troop, ":upgrade_troop_no", ":volunteer_troop", 0),
        (try_end),
        (gt, ":upgrade_troop_no", 0),
        (val_add, ":volunteer_troop_tier", 1),
        (assign, ":volunteer_troop", ":upgrade_troop_no"),
      (try_end),
      
      (assign, ":upper_limit", 12),
      
      (store_add, ":amount_random_divider", 2, ":volunteer_troop_tier"),
      (val_div, ":upper_limit", ":amount_random_divider"),
      
      (store_random_in_range, ":amount", 0, ":upper_limit"),
      (party_set_slot, ":center_no", slot_center_npc_volunteer_troop_type, ":volunteer_troop"),
      (party_set_slot, ":center_no", slot_center_npc_volunteer_troop_amount, ":amount"),
  ]),
  
  #script_update_companion_candidates_in_taverns
  # INPUT: none
  # OUTPUT: none
  ("update_companion_candidates_in_taverns",
    [  (try_for_range, ":troop_no", companions_begin, companions_end),
        (troop_set_slot, ":troop_no", slot_troop_cur_center, -1),
        (troop_slot_eq, ":troop_no", slot_troop_occupation, 0),
        (store_random_in_range, ":town_no", mainplanets_begin, mainplanets_end),
        (try_begin),
          (neg|troop_slot_eq, ":troop_no", slot_troop_home, ":town_no"),
          (neg|troop_slot_eq, ":troop_no", slot_troop_first_encountered, ":town_no"),
          (troop_set_slot, ":troop_no", slot_troop_cur_center, ":town_no"),
          (try_begin),
            (eq, "$cheat_mode", 1),
            (str_store_troop_name, 4, ":troop_no"),
            (str_store_party_name, 5, ":town_no"),
            (display_message, "@{s4} is in {s5}"),
          (try_end),
        (try_end),
      (try_end),
  ]),
  
  #script_update_ransom_brokers
  # INPUT: none
  # OUTPUT: none
  ("update_ransom_brokers",
    [(try_for_range, ":town_no", mainplanets_begin, mainplanets_end),
        # Blank out all the ransom brokers everywhere
        (party_set_slot, ":town_no", slot_center_ransom_broker, 0),
     (try_end),
  
    (try_for_range, ":troop_no", ransom_brokers_begin, ransom_brokers_end),
        (assign,":chosen_planet",mainplanets_end), #cheap conditional loop break!
        
        # Hutt cartel planets always have ramson brokers!
        # <http://www.moddb.com/mods/swconquest/forum/thread/some-bugs-glitches-suggestions>
        
        (try_for_range, ":curr_center", mainplanets_begin, ":chosen_planet"), #mainplanets_end),
          (store_faction_of_party, ":curr_planet_faction", ":curr_center"),
          
          (           eq, ":curr_planet_faction", fac_huttcartel),
          (party_slot_eq, ":curr_center",         slot_center_ransom_broker, 0),
          
          #if hutt and is blank then choose it
          (assign,":chosen_planet", ":curr_center"),
        (try_end),
          
        # If not blank hutt planets left, then add ransom brokers to random planets
        (try_begin),
          (eq,":chosen_planet", mainplanets_end),
          (store_random_in_range, ":chosen_planet", mainplanets_begin, mainplanets_end),
        (try_end),
        
        (party_set_slot, ":chosen_planet", slot_center_ransom_broker, ":troop_no"),
    (try_end),

    #SW - commented out trp_ramun_the_slave_trader and moved them to the trade federation base
    #(party_set_slot,"p_christophsis",slot_center_ransom_broker,"trp_ramun_the_slave_trader"),
  ]),
  
  #script_update_tavern_travelers
  # INPUT: none
  # OUTPUT: none
  ("update_tavern_travelers",
    [(try_for_range, ":town_no", mainplanets_begin, mainplanets_end),
        (party_set_slot, ":town_no", slot_center_tavern_traveler, 0),
      (try_end),
      
      (try_for_range, ":troop_no", tavern_travelers_begin, tavern_travelers_end),
        (store_random_in_range, ":town_no", mainplanets_begin, mainplanets_end),
        (party_set_slot, ":town_no", slot_center_tavern_traveler, ":troop_no"),
        (assign, ":end_cond", 15),
        (try_for_range, ":unused", 0, ":end_cond"),
          (store_random_in_range, ":info_faction", factions_begin, factions_end),
          (faction_slot_eq, ":info_faction", slot_faction_state, sfs_active),
          (neq, ":info_faction", "$players_faction"),
          (neq, ":info_faction", "fac_player_supporters_faction"),
          (party_set_slot, ":town_no", slot_center_traveler_info_faction, ":info_faction"),
          (assign, ":end_cond", 0),
        (try_end),
      (try_end),
  ]),
  
  #script_update_villages_infested_by_bandits
  # INPUT: none
  # OUTPUT: none
  ("update_villages_infested_by_bandits",
    [(try_for_range, ":minorplanet_no", minorplanet_begin, minorplanet_end),
        (try_begin),
          (check_quest_active, "qst_eliminate_bandits_infesting_village"),
          (quest_slot_eq, "qst_eliminate_bandits_infesting_village", slot_quest_target_center, ":minorplanet_no"),
          (quest_get_slot, ":cur_state", "qst_eliminate_bandits_infesting_village", slot_quest_current_state),
          (val_add, ":cur_state", 1),
          (try_begin),
            (lt, ":cur_state", 3),
            (quest_set_slot, "qst_eliminate_bandits_infesting_village", slot_quest_current_state, ":cur_state"),
          (else_try),
            (party_set_slot, ":minorplanet_no", slot_minorplanet_infested_by_bandits, 0),
            (call_script, "script_abort_quest", "qst_eliminate_bandits_infesting_village", 2),
          (try_end),
        (else_try),
          (check_quest_active, "qst_deal_with_bandits_at_lords_village"),
          (quest_slot_eq, "qst_deal_with_bandits_at_lords_village", slot_quest_target_center, ":minorplanet_no"),
          (quest_get_slot, ":cur_state", "qst_deal_with_bandits_at_lords_village", slot_quest_current_state),
          (val_add, ":cur_state", 1),
          (try_begin),
            (lt, ":cur_state", 3),
            (quest_set_slot, "qst_deal_with_bandits_at_lords_village", slot_quest_current_state, ":cur_state"),
          (else_try),
            (party_set_slot, ":minorplanet_no", slot_minorplanet_infested_by_bandits, 0),
            (call_script, "script_abort_quest", "qst_deal_with_bandits_at_lords_village", 2),
          (try_end),
        (else_try),
          (party_set_slot, ":minorplanet_no", slot_minorplanet_infested_by_bandits, 0),
          (store_random_in_range, ":random_no", 0, 100),
          (lt, ":random_no", 3),
          (store_random_in_range, ":random_no", 0, 3),
          (try_begin),
            (eq, ":random_no", 0),
            (assign, ":bandit_troop", "trp_bandit"),
          (else_try),
            (eq, ":random_no", 1),
            (assign, ":bandit_troop", "trp_black_sun_pirate_3"),
          (else_try),
            (assign, ":bandit_troop", "trp_blazing_claw_pirate"),
          (try_end),
          (party_set_slot, ":minorplanet_no", slot_minorplanet_infested_by_bandits, ":bandit_troop"),
          #Reduce prosperity of the village by 3
          (call_script, "script_change_center_prosperity", ":minorplanet_no", -3),
          (try_begin),
            (eq, "$cheat_mode", 1),
            (str_store_party_name, s1, ":minorplanet_no"),
            (display_message, "@{s1} is infested by bandits."),
          (try_end),
        (try_end),
      (try_end),
  ]),
  
  #script_update_booksellers
  # INPUT: none
  # OUTPUT: none
  ("update_booksellers",
    [
      
      (try_for_range, ":town_no", mainplanets_begin, mainplanets_end),
        (party_set_slot, ":town_no", slot_center_tavern_bookseller, 0),
      (try_end),
      
      #SW - commented out old code where each tavern_bookseller was randomly assigned to a town
      #(try_for_range, ":troop_no", tavern_booksellers_begin, tavern_booksellers_end),
      #  (store_random_in_range, ":town_no", mainplanets_begin, mainplanets_end),
      #  (party_set_slot, ":town_no", slot_center_tavern_bookseller, ":troop_no"),
      #(try_end),
      
      #TEST
      #SW - added new code where 75% of towns get a tavern_bookseller
      (try_for_range, ":town_no", mainplanets_begin, mainplanets_end),
        (store_random_in_range, ":random_num", 0, 100),
        (le, ":random_num", 75),
        (store_random_in_range, ":troop_no", tavern_booksellers_begin, tavern_booksellers_end),
        (party_set_slot, ":town_no", slot_center_tavern_bookseller, ":troop_no"),
      (try_end),
      
  ]),
  
  #script_update_tavern_minstels
  # INPUT: none
  # OUTPUT: none
  ("update_tavern_minstels",
    [(try_for_range, ":town_no", mainplanets_begin, mainplanets_end),
        (party_set_slot, ":town_no", slot_center_tavern_minstrel, 0),
      (try_end),
      
      (try_for_range, ":troop_no", tavern_minstrels_begin, tavern_minstrels_end),
        (store_random_in_range, ":town_no", mainplanets_begin, mainplanets_end),
        (party_set_slot, ":town_no", slot_center_tavern_minstrel, ":troop_no"),
      (try_end),
  ]),
  
  #script_update_faction_notes
  # INPUT: faction_no
  # OUTPUT: none
  ("update_faction_notes",
    [(store_script_param, ":faction_no", 1),
      (try_begin),
        (is_between, ":faction_no", factions_begin, factions_end),
        (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
        (faction_get_slot, ":faction_leader", ":faction_no", slot_faction_leader),
        (str_store_faction_name, s5, ":faction_no"),
        (str_store_troop_name_link, s6, ":faction_leader"),
        (assign, ":num_centers", 0),
        (str_store_string, s8, "@nowhere"),
        (try_for_range_backwards, ":cur_center", centers_begin, centers_end),
          (store_faction_of_party, ":center_faction", ":cur_center"),
          (eq, ":center_faction", ":faction_no"),
          (try_begin),
            (eq, ":num_centers", 0),
            (str_store_party_name_link, s8, ":cur_center"),
          (else_try),
            (eq, ":num_centers", 1),
            (str_store_party_name_link, s7, ":cur_center"),
            (str_store_string, s8, "@{s7} and {s8}"),
          (else_try),
            (str_store_party_name_link, s7, ":cur_center"),
            (str_store_string, s8, "@{s7}, {s8}"),
          (try_end),
          (val_add, ":num_centers", 1),
        (try_end),
        (assign, ":num_members", 0),
        (str_store_string, s10, "@noone"),
        (try_for_range_backwards, ":loop_var", "trp_faction_heroes_including_player_begin", faction_heroes_end),
          (assign, ":cur_troop", ":loop_var"),
          (try_begin),
            (eq, ":loop_var", "trp_faction_heroes_including_player_begin"),
            (assign, ":cur_troop", "trp_player"),
            (assign, ":troop_faction", "$players_faction"),
          (else_try),
            (store_troop_faction, ":troop_faction", ":cur_troop"),
          (try_end),
          (eq, ":troop_faction", ":faction_no"),
          (neq, ":cur_troop", ":faction_leader"),
          (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_faction_hero),
          (try_begin),
            (eq, ":num_members", 0),
            (str_store_troop_name_link, s10, ":cur_troop"),
          (else_try),
            (eq, ":num_members", 1),
            (str_store_troop_name_link, s9, ":cur_troop"),
            (str_store_string, s10, "@{s9} and {s10}"),
          (else_try),
            (str_store_troop_name_link, s9, ":cur_troop"),
            (str_store_string, s10, "@{s9}, {s10}"),
          (try_end),
          (val_add, ":num_members", 1),
        (try_end),
        (str_store_string, s12, "@noone"),
        (assign, ":num_enemies", 0),
        (try_for_range_backwards, ":cur_faction", factions_begin, factions_end),
          (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
          (store_relation, ":cur_relation", ":cur_faction", ":faction_no"),
          (lt, ":cur_relation", 0),
          (try_begin),
            (eq, ":num_enemies", 0),
            (str_store_faction_name_link, s12, ":cur_faction"),
          (else_try),
            (eq, ":num_enemies", 1),
            (str_store_faction_name_link, s11, ":cur_faction"),
            (str_store_string, s12, "@{s11} and {s12}"),
          (else_try),
            (str_store_faction_name_link, s11, ":cur_faction"),
            (str_store_string, s12, "@{s11}, {s12}"),
          (try_end),
          (val_add, ":num_enemies", 1),
        (try_end),
        (add_faction_note_from_sreg, ":faction_no", 0, "@{s5} is ruled by {s6}.^It occupies {s8}.^Its commanders are {s10}.^{s5} is at war with {s12}.", 0),

        ] + (is_a_wb_script==1 and [
          
        #swy-- this is needed to show by default the note entries on Warband...
        (faction_set_note_available, ":faction_no", 1),
           
        ] or []) + [

      (else_try),
        (is_between, ":faction_no", factions_begin, factions_end),
        (faction_slot_eq, ":faction_no", slot_faction_state, sfs_defeated),
        (str_store_faction_name, s5, ":faction_no"),
        (add_faction_note_from_sreg, ":faction_no", 0, "@{s5} has been defeated!", 0),
        (str_clear, s1),
        (add_faction_note_from_sreg, ":faction_no", 1, s1, 0),
        
        ] + (is_a_wb_script==1 and [
          
        #swy-- this is needed to show by default the note entries on Warband...
        (faction_set_note_available, ":faction_no", 1),
           
        ] or []) + [
        
      (else_try),
        (str_clear, s1),
        (add_faction_note_from_sreg, ":faction_no", 0, s1, 0),
        (add_faction_note_from_sreg, ":faction_no", 1, s1, 0),
        
        ] + (is_a_wb_script==1 and [
          
        #swy-- this is needed to show by default the note entries on Warband...
        (faction_set_note_available, ":faction_no", 0),
           
        ] or []) + [
      
      (try_end),
      (try_begin),
        (is_between, ":faction_no", "fac_galacticempire", factions_end), #Excluding player faction
        (add_faction_note_tableau_mesh, ":faction_no", "tableau_faction_note_mesh"),
      (else_try),
        (add_faction_note_tableau_mesh, ":faction_no", "tableau_faction_note_mesh_banner"),
      (try_end),

  ]),
  
  #script_update_faction_traveler_notes
  # INPUT: faction_no
  # OUTPUT: none
  ("update_faction_traveler_notes",
    [(store_script_param, ":faction_no", 1),
      (assign, ":total_men", 0),
      (try_for_parties, ":cur_party"),
        (store_faction_of_party, ":center_faction", ":cur_party"),
        (eq, ":center_faction", ":faction_no"),
        (party_get_num_companions, ":num_men", ":cur_party"),
        (val_add, ":total_men", ":num_men"),
      (try_end),
      (str_store_faction_name, s5, ":faction_no"),
      (assign, reg1, ":total_men"),
      (add_faction_note_from_sreg, ":faction_no", 1, "@{s5} has a strength of {reg1} men in total.", 1),
  ]),
  
  
  #script_update_troop_notes
  # INPUT: troop_no
  # OUTPUT: none
  ("update_troop_notes",
    [(store_script_param, ":troop_no", 1),
      (str_store_troop_name, s54, ":troop_no"),
      (try_begin),
        (eq, ":troop_no", "trp_player"),
        (this_or_next|eq, "$player_has_homage", 1),
        (             eq, "$players_faction", "fac_player_supporters_faction"),
        (assign, ":troop_faction", "$players_faction"),
      (else_try),
        (store_troop_faction, ":troop_faction", ":troop_no"),
      (try_end),
      (try_begin),
        (neq, ":troop_no", "trp_player"),
        (neg|is_between, ":troop_faction", factions_begin, factions_end),
        (str_clear, s54),
        (add_troop_note_from_sreg, ":troop_no", 0, s54, 0),
        (add_troop_note_from_sreg, ":troop_no", 1, s54, 0),
        (add_troop_note_from_sreg, ":troop_no", 2, s54, 0),
      (else_try),
        (is_between, ":troop_no", faction_ladies_begin, faction_ladies_end),
        (str_clear, s54),
        (add_troop_note_from_sreg, ":troop_no", 0, s54, 0),
        (add_troop_note_from_sreg, ":troop_no", 1, s54, 0),
        (add_troop_note_from_sreg, ":troop_no", 2, s54, 0),
      (else_try),
        (is_between, ":troop_no", pretenders_begin, pretenders_end),
        (neg|troop_slot_eq, ":troop_no", slot_troop_occupation, slto_faction_hero),
        (neq, ":troop_no", "$supported_pretender"),
        (troop_get_slot, ":orig_faction", ":troop_no", slot_troop_original_faction),
        (try_begin),
          (faction_slot_eq, ":orig_faction", slot_faction_state, sfs_active),
          (faction_slot_eq, ":orig_faction", slot_faction_has_rebellion_chance, 1),
          (str_store_faction_name_link, s56, ":orig_faction"),
          (add_troop_note_from_sreg, ":troop_no", 0, "@{s54} is a claimant to the throne of {s56}.", 0),
          (add_troop_note_tableau_mesh, ":troop_no", "tableau_troop_note_mesh"),
        (else_try),
          (str_clear, s54),
          (add_troop_note_from_sreg, ":troop_no", 0, s54, 0),
          (add_troop_note_from_sreg, ":troop_no", 1, s54, 0),
          (add_troop_note_from_sreg, ":troop_no", 2, s54, 0),
        (try_end),
      (else_try),
        (faction_get_slot, ":faction_leader", ":troop_faction", slot_faction_leader),
        (str_store_troop_name_link, s55, ":faction_leader"),
        (str_store_faction_name_link, s56, ":troop_faction"),
        (assign, reg4, 0),
        (assign, reg6, 0),
        (try_begin),
          (eq, ":troop_faction", "fac_player_faction"),
          (assign, reg6, 1),
        (else_try),
          (eq, ":faction_leader", ":troop_no"),
          (assign, reg4, 1),
        (try_end),
        (assign, ":num_centers", 0),
        (str_store_string, s58, "@nowhere"),
        (try_for_range_backwards, ":cur_center", centers_begin, centers_end),
          (party_slot_eq, ":cur_center", slot_mainplanet_lord, ":troop_no"),
          (try_begin),
            (eq, ":num_centers", 0),
            (str_store_party_name_link, s58, ":cur_center"),
          (else_try),
            (eq, ":num_centers", 1),
            (str_store_party_name_link, s57, ":cur_center"),
            (str_store_string, s58, "@{s57} and {s58}"),
          (else_try),
            (str_store_party_name_link, s57, ":cur_center"),
            (str_store_string, s58, "@{s57}, {s58}"),
          (try_end),
          (val_add, ":num_centers", 1),
        (try_end),
        ]+gender_fix(reg3, ":troop_no")+[
        (troop_get_slot, reg5, ":troop_no", slot_troop_renown),
        (str_clear, s59),
        (try_begin),
          #         (troop_get_slot, ":relation", ":troop_no", slot_troop_player_relation),
          (call_script, "script_troop_get_player_relation", ":troop_no"),
          (assign, ":relation", reg0),
          (store_add, ":normalized_relation", ":relation", 100),
          (val_add, ":normalized_relation", 5),
          (store_div, ":str_offset", ":normalized_relation", 10),
          (val_clamp, ":str_offset", 0, 20),
          (store_add, ":str_id", "str_relation_mnus_100_ns",  ":str_offset"),
          (neq, ":str_id", "str_relation_plus_0_ns"),
          (str_store_string, s60, "@{reg3?She:He}"),
          (str_store_string, s59, ":str_id"),
          (str_store_string, s59, "@^{s59}"),
        (try_end),
        (assign, reg9, ":num_centers"),
        #SW - modified fiefs to territories
        (add_troop_note_from_sreg, ":troop_no", 0, "@{reg6?:{reg4?{s54} is the ruler of {s56}.^:{s54} is a commander of {s55} of {s56}.^}}Renown: {reg5}.^{reg9?{reg3?She:He} is the {reg3?lady:lord} of {s58}.:{reg3?She:He} has no territories.}{s59}", 0),
        (add_troop_note_tableau_mesh, ":troop_no", "tableau_troop_note_mesh"),
        
       ] + (is_a_wb_script==1 and [
       
       #swy-- this is needed to show by default the note entries on Warband...
       (troop_set_note_available, ":troop_no", 1),

       ] or []) + [
        
      (try_end),
  ]),
  
  #script_update_troop_location_notes
  # INPUT: troop_no
  # OUTPUT: none
  ("update_troop_location_notes",
    [(store_script_param, ":troop_no", 1),
      (store_script_param, ":see_or_hear", 2),
      (call_script, "script_get_information_about_troops_position", ":troop_no", 1),
      (try_begin),
        (neq, reg0, 0),
        ]+gender_fix(reg1, ":troop_no")+[
        #(call_script, "script_gender_fix", ":troop_no"),      #SW - added to fix male/female for aliens
        (try_begin),
          (eq, ":see_or_hear", 0),
          (add_troop_note_from_sreg, ":troop_no", 2, "@The last time you saw {reg1?her:him}, {s1}", 1),
        (else_try),
          (add_troop_note_from_sreg, ":troop_no", 2, "@The last time you heard about {reg1?her:him}, {s1}", 1),
        (try_end),
      (try_end),
      
     ] + (is_a_wb_script==1 and [
     
     #swy-- this is needed to show by default the note entries on Warband...
     (troop_set_note_available, ":troop_no", 1),

     ] or [])
  ),
  
  #script_update_center_notes
  # INPUT: center_no
  # OUTPUT: none
  ("update_center_notes",
    [(store_script_param, ":center_no", 1),
      
      (party_get_slot, ":lord_troop", ":center_no", slot_mainplanet_lord),
      (try_begin),
        (ge, ":lord_troop", 0),
        (store_troop_faction, ":lord_faction", ":lord_troop"),
        (str_store_troop_name_link, s1, ":lord_troop"),
        (try_begin),
          (eq, ":lord_troop", "trp_player"),
          (gt, "$players_faction", 0),
          (str_store_faction_name_link, s2, "$players_faction"),
        (else_try),
          (str_store_faction_name_link, s2, ":lord_faction"),
        (try_end),
        (str_store_party_name, s50, ":center_no"),
        (try_begin),
          (party_slot_eq, ":center_no", slot_party_type, spt_mainplanet),
          (str_store_string, s51, "@The planet of {s50}"),
        (else_try),
          (party_slot_eq, ":center_no", slot_party_type, spt_minorplanet),
          (party_get_slot, ":bound_center", ":center_no", slot_minorplanet_bound_center),
          (str_store_party_name_link, s52, ":bound_center"),
          (str_store_string, s51, "@The planet of {s50} near {s52}"),
        (else_try),
          (str_store_string, s51, "@{s50}"),
        (try_end),
        (str_store_string, s2, "@{s51} belongs to {s1} of {s2}.^"),
      (else_try),
        (str_clear, s2),
      (try_end),
      (try_begin),
        (is_between, ":center_no", minorplanet_begin, minorplanet_end),
      (else_try),
        (assign, ":num_villages", 0),
        (try_for_range_backwards, ":minorplanet_no", minorplanet_begin, minorplanet_end),
          (party_slot_eq, ":minorplanet_no", slot_minorplanet_bound_center, ":center_no"),
          (try_begin),
            (eq, ":num_villages", 0),
            (str_store_party_name_link, s8, ":minorplanet_no"),
          (else_try),
            (eq, ":num_villages", 1),
            (str_store_party_name_link, s7, ":minorplanet_no"),
            (str_store_string, s8, "@{s7} and {s8}"),
          (else_try),
            (str_store_party_name_link, s7, ":minorplanet_no"),
            (str_store_string, s8, "@{s7}, {s8}"),
          (try_end),
          (val_add, ":num_villages", 1),
        (try_end),
        (try_begin),
          (eq, ":num_villages", 0),
          (str_store_string, s2, "@{s2}It has no villages.^"),
        (else_try),
          (store_sub, reg0, ":num_villages", 1),
          (str_store_string, s2, "@{s2}{reg0?Its planets are:Its planet is} {s8}.^"),
        (try_end),
      (try_end),
      (call_script, "script_get_prosperity_text_to_s50", ":center_no"),
      (add_party_note_from_sreg, ":center_no", 0, "@{s2}Its prosperity is: {s50}", 0),
      (add_party_note_tableau_mesh, ":center_no", "tableau_center_note_mesh"),

       ] + (is_a_wb_script==1 and [
             
       #swy-- this is needed to show by default the note entries on Warband,
       #   -- this one goes in the loop because we don't want to show everything...
       (party_set_note_available, ":center_no", 1),

       ] or []) + [
  ]),
  
  
  #script_update_center_recon_notes
  # INPUT: center_no
  # OUTPUT: none
  ("update_center_recon_notes",
    [(store_script_param, ":center_no", 1),
      (try_begin),
        (this_or_next|is_between, ":center_no", mainplanets_begin, mainplanets_end),
        (is_between, ":center_no", castles_begin, castles_end),
        (party_get_slot, ":center_food_store", ":center_no", slot_party_food_store),
        (call_script, "script_center_get_food_consumption", ":center_no"),
        (assign, ":food_consumption", reg0),
        (store_div, reg6, ":center_food_store", ":food_consumption"),
        (party_collect_attachments_to_party, ":center_no", "p_collective_ally"),
        (party_get_num_companions, reg5, "p_collective_ally"),
        (add_party_note_from_sreg, ":center_no", 1, "@Current garrison consists of {reg5} men.^Has food stock for {reg6} days.", 1),
      (try_end),
  ]),
  
  #script_update_all_notes
  # INPUT: none
  # OUTPUT: none
  ("update_all_notes",
    [
      (call_script, "script_update_troop_notes", "trp_player"),
      (try_for_range, ":troop_no", faction_heroes_begin, faction_heroes_end),
        (call_script, "script_update_troop_notes", ":troop_no"),
      (try_end),
      (try_for_range, ":center_no", centers_begin, centers_end),
        (call_script, "script_update_center_notes", ":center_no"),
      (try_end),
      (try_for_range, ":faction_no", factions_begin, factions_end),
        (call_script, "script_update_faction_notes", ":faction_no"),
      (try_end),
  ]),
  
  
  #script_shield_item_set_banner
  # INPUT: agent_no
  # OUTPUT: none
  ("shield_item_set_banner",
    [
      (store_script_param, ":tableau_no",1),
      (store_script_param, ":agent_no", 2),
      (store_script_param, ":troop_no", 3),
      (assign, ":banner_troop", -1),
      (assign, ":banner_mesh", "mesh_banners_default_b"),
      (try_begin),
        (lt, ":agent_no", 0),
        (try_begin),
          (ge, ":troop_no", 0),
          (this_or_next|troop_slot_ge, ":troop_no", slot_troop_banner_scene_prop, 1),
          (             eq, ":troop_no", "trp_player"),
          (assign, ":banner_troop", ":troop_no"),
        (else_try),
          (is_between, ":troop_no", companions_begin, companions_end),
          (assign, ":banner_troop", "trp_player"),
        (else_try),
          (assign, ":banner_mesh", "mesh_banners_default_a"),
        (try_end),
      (else_try),
        (agent_get_troop_id, ":troop_id", ":agent_no"),
        (this_or_next|troop_slot_ge,  ":troop_id", slot_troop_banner_scene_prop, 1),
        (             eq, ":troop_no", "trp_player"),
        (assign, ":banner_troop", ":troop_id"),
      (else_try),
        (agent_get_party_id, ":agent_party", ":agent_no"),
        (try_begin),
          (lt, ":agent_party", 0),
          (is_between, ":troop_id", companions_begin, companions_end),
          (main_party_has_troop, ":troop_id"),
          (assign, ":agent_party", "p_main_party"),
        (try_end),
        (ge, ":agent_party", 0),
        (party_get_template_id, ":party_template", ":agent_party"),
        (try_begin),
          (eq, ":party_template", "pt_deserters"),
          (assign, ":banner_mesh", "mesh_banners_default_c"),
        (else_try),
          (is_between, ":agent_party", centers_begin, centers_end),
          (party_get_slot, ":town_lord", "$g_encountered_party", slot_mainplanet_lord),
          (ge, ":town_lord", 0),
          (assign, ":banner_troop", ":town_lord"),
        (else_try),
          (this_or_next|party_slot_eq, ":agent_party", slot_party_type, spt_faction_hero_party),
          (             eq, ":agent_party", "p_main_party"),
          (party_get_num_companion_stacks, ":num_stacks", ":agent_party"),
          (gt, ":num_stacks", 0),
          (party_stack_get_troop_id, ":leader_troop_id", ":agent_party", 0),
          (this_or_next|troop_slot_ge,  ":leader_troop_id", slot_troop_banner_scene_prop, 1),
          (             eq, ":leader_troop_id", "trp_player"),
          (assign, ":banner_troop", ":leader_troop_id"),
        (try_end),
      (else_try), #Check if we are in a tavern
        (eq, "$talk_context", tc_tavern_talk),
        (neq, ":troop_no", "trp_player"),
        (assign, ":banner_mesh", "mesh_banners_default_d"),
      (else_try), #can't find party, this can be a town guard
        (neq, ":troop_no", "trp_player"),
        (is_between, "$g_encountered_party", walled_centers_begin, walled_centers_end),
        (party_get_slot, ":town_lord", "$g_encountered_party", slot_mainplanet_lord),
        (ge, ":town_lord", 0),
        (assign, ":banner_troop", ":town_lord"),
      (try_end),
      (try_begin),
        (ge, ":banner_troop", 0),
        (try_begin),
          (neg|troop_slot_ge, ":banner_troop", slot_troop_banner_scene_prop, 1),
          (assign, ":banner_mesh", "mesh_banners_default_b"),
        (else_try),
          (troop_get_slot, ":banner_spr", ":banner_troop", slot_troop_banner_scene_prop),
          (store_add, ":banner_scene_props_end", banner_scene_props_end_minus_one, 1),
          (is_between, ":banner_spr", banner_scene_props_begin, ":banner_scene_props_end"),
          (val_sub, ":banner_spr", banner_scene_props_begin),
          (store_add, ":banner_mesh", ":banner_spr", arms_meshes_begin),
        (try_end),
      (try_end),
      (cur_item_set_tableau_material, ":tableau_no", ":banner_mesh"),
  ]),
  
  ##  #script_shield_item_set_banner
  ##  # INPUT: agent_no
  ##  # OUTPUT: none
  ##  ("shield_item_set_banner",
  ##    [
  ##       (store_script_param, ":tableau_no",1),
  ##       (store_script_param, ":agent_no", 2),
  ##       (store_script_param, ":troop_no", 3),
  ##       (assign, ":banner_troop", -1),
  ##       (try_begin),
  ##         (lt, ":agent_no", 0),
  ##         (try_begin),
  ##           (ge, ":troop_no", 0),
  ##           (troop_slot_ge, ":troop_no", slot_troop_banner_scene_prop, 0),
  ##           (assign, ":banner_troop", ":troop_no"),
  ##         (else_try),
  ##           (assign, ":banner_troop", -2),
  ##         (try_end),
  ##       (else_try),
  ##         (agent_get_troop_id, ":troop_id", ":agent_no"),
  ##         (troop_slot_ge,  ":troop_id", slot_troop_custom_banner_flag_type, 0),
  ##         (assign, ":banner_troop", ":troop_id"),
  ##       (else_try),
  ##         (agent_get_party_id, ":agent_party", ":agent_no"),
  ##         (try_begin),
  ##           (lt, ":agent_party", 0),
  ##           (is_between, ":troop_id", companions_begin, companions_end),
  ##           (main_party_has_troop, ":troop_id"),
  ##           (assign, ":agent_party", "p_main_party"),
  ##         (try_end),
  ##         (ge, ":agent_party", 0),
  ##         (party_get_template_id, ":party_template", ":agent_party"),
  ##         (try_begin),
  ##           (eq, ":party_template", "pt_deserters"),
  ##           (assign, ":banner_troop", -3),
  ##         (else_try),
  ##           (is_between, ":agent_party", centers_begin, centers_end),
  ##           (party_get_slot, ":town_lord", "$g_encountered_party", slot_mainplanet_lord),
  ##           (ge, ":town_lord", 0),
  ##           (assign, ":banner_troop", ":town_lord"),
  ##         (else_try),
  ##           (this_or_next|party_slot_eq, ":agent_party", slot_party_type, spt_faction_hero_party),
  ##           (             eq, ":agent_party", "p_main_party"),
  ##           (party_get_num_companion_stacks, ":num_stacks", ":agent_party"),
  ##           (gt, ":num_stacks", 0),
  ##           (party_stack_get_troop_id, ":leader_troop_id", ":agent_party", 0),
  ##           (troop_slot_ge,  ":leader_troop_id", slot_troop_banner_scene_prop, 1),
  ##           (assign, ":banner_troop", ":leader_troop_id"),
  ##         (try_end),
  ##       (else_try), #Check if we are in a tavern
  ##         (eq, "$talk_context", tc_tavern_talk),
  ##         (neq, ":troop_no", "trp_player"),
  ##         (assign, ":banner_troop", -4),
  ##       (else_try), #can't find party, this can be a town guard
  ##         (neq, ":troop_no", "trp_player"),
  ##         (is_between, "$g_encountered_party", walled_centers_begin, walled_centers_end),
  ##         (party_get_slot, ":town_lord", "$g_encountered_party", slot_mainplanet_lord),
  ##         (ge, ":town_lord", 0),
  ##         (assign, ":banner_troop", ":town_lord"),
  ##       (try_end),
  ##       (cur_item_set_tableau_material, ":tableau_no", ":banner_troop"),
  ##     ]),
  
  #script_add_troop_to_cur_tableau
  # INPUT: troop_no
  # OUTPUT: none
  ("add_troop_to_cur_tableau",
    [
      (store_script_param, ":troop_no",1),
      
      (set_fixed_point_multiplier, 100),
      (assign, ":banner_mesh", -1),
      (troop_get_slot, ":banner_spr", ":troop_no", slot_troop_banner_scene_prop),
      (store_add, ":banner_scene_props_end", banner_scene_props_end_minus_one, 1),
      (try_begin),
        (is_between, ":banner_spr", banner_scene_props_begin, ":banner_scene_props_end"),
        (val_sub, ":banner_spr", banner_scene_props_begin),
        (store_add, ":banner_mesh", ":banner_spr", banner_meshes_begin),
      (try_end),
      
      (cur_tableau_clear_override_items),
      
      #       (cur_tableau_set_override_flags, af_override_fullhelm),
      #SW - modified so you do not remove your helmet (removed af_override_head flag)
      #(cur_tableau_set_override_flags, af_override_head|af_override_weapons),
      (cur_tableau_set_override_flags, af_override_weapons),
      
      (init_position, pos2),
      (cur_tableau_set_camera_parameters, 1, 6, 6, 10, 10000),
      
      (init_position, pos5),
      (assign, ":eye_height", 162),
      (store_mul, ":camera_distance", ":troop_no", 87323),
      #       (val_mod, ":camera_distance", 5),
      (assign, ":camera_distance", 139),
      (store_mul, ":camera_yaw", ":troop_no", 124337),
      (val_mod, ":camera_yaw", 50),
      (val_add, ":camera_yaw", -25),
      (store_mul, ":camera_pitch", ":troop_no", 98123),
      (val_mod, ":camera_pitch", 20),
      (val_add, ":camera_pitch", -14),
      (assign, ":animation", anim_stand_man),
      
      ##       (troop_get_inventory_slot, ":horse_item", ":troop_no", ek_horse),
      ##       (try_begin),
      ##         (gt, ":horse_item", 0),
      ##         (assign, ":eye_height", 210),
      ##         (cur_tableau_add_horse, ":horse_item", pos2, anim_horse_stand, 0),
      ##         (assign, ":animation", anim_ride_0),
      ##         (position_set_z, pos5, 125),
      ##         (try_begin),
      ##           (is_between, ":camera_yaw", -10, 10), #make sure horse head doesn't obstruct face.
      ##           (val_min, ":camera_pitch", -5),
      ##         (try_end),
      ##       (try_end),
      (position_set_z, pos5, ":eye_height"),
      
      # camera looks towards -z axis
      (position_rotate_x, pos5, -90),
      (position_rotate_z, pos5, 180),
      
      # now apply yaw and pitch
      (position_rotate_y, pos5, ":camera_yaw"),
      (position_rotate_x, pos5, ":camera_pitch"),
      (position_move_z, pos5, ":camera_distance", 0),
      (position_move_x, pos5, 5, 0),
      
      (try_begin),
        (ge, ":banner_mesh", 0),
        #SW - from blackjack mod
        (eq, "$black_jack",0),#plus blackjack 21
        
        (init_position, pos1),
        (position_set_z, pos1, -1500),
        (position_set_x, pos1, 265),
        (position_set_y, pos1, 400),
        (position_transform_position_to_parent, pos3, pos5, pos1),
        (cur_tableau_add_mesh, ":banner_mesh", pos3, 400, 0),
      (try_end),
      (cur_tableau_add_troop, ":troop_no", pos2, ":animation" , 0),
      
      (cur_tableau_set_camera_position, pos5),
      
      (copy_position, pos8, pos5),
      (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
      (position_rotate_z, pos8, 30),
      (position_rotate_x, pos8, -60),
      (cur_tableau_add_sun_light, pos8, 175,150,125),
  ]),
  
  #script_add_troop_to_cur_tableau_for_character
  # INPUT: troop_no
  # OUTPUT: none
  ("add_troop_to_cur_tableau_for_character",
    [
      (store_script_param, ":troop_no",1),
      
      (set_fixed_point_multiplier, 100),
      
      (cur_tableau_clear_override_items),
      #SW - commented out usage of af_override_fullhelm flag
      #(cur_tableau_set_override_flags, af_override_fullhelm),
      ##       (cur_tableau_set_override_flags, af_override_head|af_override_weapons),
      
      (init_position, pos2),
      (cur_tableau_set_camera_parameters, 1, 4, 8, 10, 10000),
      
      (init_position, pos5),
      (assign, ":cam_height", 150),
      #       (val_mod, ":camera_distance", 5),
      (assign, ":camera_distance", 360),
      (assign, ":camera_yaw", -15),
      (assign, ":camera_pitch", -18),
      (assign, ":animation", anim_stand_man),
      
      (position_set_z, pos5, ":cam_height"),
      
      # camera looks towards -z axis
      (position_rotate_x, pos5, -90),
      (position_rotate_z, pos5, 180),
      
      # now apply yaw and pitch
      (position_rotate_y, pos5, ":camera_yaw"),
      (position_rotate_x, pos5, ":camera_pitch"),
      (position_move_z, pos5, ":camera_distance", 0),
      (position_move_x, pos5, 5, 0),
      
      (try_begin),
        (troop_is_hero, ":troop_no"),
        (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
      (else_try),
        (store_mul, ":random_seed", ":troop_no", 126233),
        (val_mod, ":random_seed", 1000),
        (val_add, ":random_seed", 1),
        (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
      (try_end),
      (cur_tableau_set_camera_position, pos5),
      
      (copy_position, pos8, pos5),
      (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
      (position_rotate_z, pos8, 30),
      (position_rotate_x, pos8, -60),
      (cur_tableau_add_sun_light, pos8, 175,150,125),
  ]),
  
  #script_add_troop_to_cur_tableau_for_inventory
  # INPUT: troop_no
  # OUTPUT: none
  ("add_troop_to_cur_tableau_for_inventory",
    [
      (store_script_param, ":troop_no",1),
      (store_mod, ":side", ":troop_no", 4), #side flag is inside troop_no value
      (val_div, ":troop_no", 4), #removing the flag bit
      (val_mul, ":side", 90), #to degrees
      
      (set_fixed_point_multiplier, 100),
      
      (cur_tableau_clear_override_items),
      
      (init_position, pos2),
      (position_rotate_z, pos2, ":side"),
      (cur_tableau_set_camera_parameters, 1, 4, 6, 10, 10000),
      
      (init_position, pos5),
      (assign, ":cam_height", 105),
      #       (val_mod, ":camera_distance", 5),
      (assign, ":camera_distance", 380),
      (assign, ":camera_yaw", -15),
      (assign, ":camera_pitch", -18),
      (assign, ":animation", anim_stand_man),
      
      (position_set_z, pos5, ":cam_height"),
      
      # camera looks towards -z axis
      (position_rotate_x, pos5, -90),
      (position_rotate_z, pos5, 180),
      
      # now apply yaw and pitch
      (position_rotate_y, pos5, ":camera_yaw"),
      (position_rotate_x, pos5, ":camera_pitch"),
      (position_move_z, pos5, ":camera_distance", 0),
      (position_move_x, pos5, 5, 0),
      
      (try_begin),
        (troop_is_hero, ":troop_no"),
        (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
      (else_try),
        (store_mul, ":random_seed", ":troop_no", 126233),
        (val_mod, ":random_seed", 1000),
        (val_add, ":random_seed", 1),
        (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
      (try_end),
      (cur_tableau_set_camera_position, pos5),
      
      (copy_position, pos8, pos5),
      (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
      (position_rotate_z, pos8, 30),
      (position_rotate_x, pos8, -60),
      (cur_tableau_add_sun_light, pos8, 175,150,125),
  ]),
  
  #script_add_troop_to_cur_tableau_for_party
  # INPUT: troop_no
  # OUTPUT: none
  ("add_troop_to_cur_tableau_for_party",
    [
      (store_script_param, ":troop_no",1),
      (store_mod, ":hide_weapons", ":troop_no", 2), #hide_weapons flag is inside troop_no value
      (val_div, ":troop_no", 2), #removing the flag bit
      
      (set_fixed_point_multiplier, 100),
      
      (cur_tableau_clear_override_items),
      (try_begin),
        (eq, ":hide_weapons", 1),
        #SW - modified so you do not remove your helmet (removed af_override_head and af_override_fullhelm flags)
        #(cur_tableau_set_override_flags, af_override_fullhelm|af_override_head|af_override_weapons),
        (cur_tableau_set_override_flags, af_override_weapons),
      (try_end),
      
      (init_position, pos2),
      (cur_tableau_set_camera_parameters, 1, 6, 6, 10, 10000),
      
      (init_position, pos5),
      (assign, ":cam_height", 105),
      #       (val_mod, ":camera_distance", 5),
      (assign, ":camera_distance", 450),
      (assign, ":camera_yaw", 15),
      (assign, ":camera_pitch", -18),
      (assign, ":animation", anim_stand_man),
      
      (troop_get_inventory_slot, ":horse_item", ":troop_no", ek_horse),
      (try_begin),
        (gt, ":horse_item", 0),
        (eq, ":hide_weapons", 0),
        (cur_tableau_add_horse, ":horse_item", pos2, "anim_horse_stand", 0),
        (assign, ":animation", "anim_ride_0"),
        (assign, ":camera_yaw", 23),
        (assign, ":cam_height", 150),
        (assign, ":camera_distance", 550),
      (try_end),
      (position_set_z, pos5, ":cam_height"),
      
      # camera looks towards -z axis
      (position_rotate_x, pos5, -90),
      (position_rotate_z, pos5, 180),
      
      # now apply yaw and pitch
      (position_rotate_y, pos5, ":camera_yaw"),
      (position_rotate_x, pos5, ":camera_pitch"),
      (position_move_z, pos5, ":camera_distance", 0),
      (position_move_x, pos5, 5, 0),
      
      (try_begin),
        (troop_is_hero, ":troop_no"),
        (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
      (else_try),
        (store_mul, ":random_seed", ":troop_no", 126233),
        (val_mod, ":random_seed", 1000),
        (val_add, ":random_seed", 1),
        (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
      (try_end),
      (cur_tableau_set_camera_position, pos5),
      
      (copy_position, pos8, pos5),
      (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
      (position_rotate_z, pos8, 30),
      (position_rotate_x, pos8, -60),
      (cur_tableau_add_sun_light, pos8, 175,150,125),
  ]),
  
  #script_get_prosperity_text_to_s50
  # INPUT: center_no
  # OUTPUT: none
  ("get_prosperity_text_to_s50",
    [(store_script_param, ":center_no", 1),
      (party_get_slot, ":prosperity", ":center_no", slot_mainplanet_prosperity),
      (val_div, ":prosperity", 20),
      (try_begin),
        (eq, ":prosperity", 0),
        (str_store_string, s50, "@Very Poor"),
      (else_try),
        (eq, ":prosperity", 1),
        (str_store_string, s50, "@Poor"),
      (else_try),
        (eq, ":prosperity", 2),
        (str_store_string, s50, "@Average"),
      (else_try),
        (eq, ":prosperity", 3),
        (str_store_string, s50, "@Rich"),
      (else_try),
        (str_store_string, s50, "@Very Rich"),
      (try_end),
  ]),
  
  #script_spawn_bandits
  # INPUT: none
  # OUTPUT: none
  ("spawn_bandits",
    [(set_spawn_radius,1),
      (try_begin),
        (store_num_parties_of_template, ":num_parties", "pt_black_sun_pirates"),
        #SW - increased num_parties for spawn_bandits from 14 to 16
        (lt,":num_parties",16),
        #SW - modified so spawn point is somewhat random
        (store_random_in_range, ":rand", 0, 100),
        (try_begin),
          (lt, ":rand", 75),  #75% chance to spawn in one of the bandits primary locations
          (store_random,":spawn_point",num_black_sun_pirate_spawn_points),
          (val_add,":spawn_point","p_black_sun_pirate_spawn_point"),
        (else_try),        #25% chance for bandit to spawn around a random village
          (store_random_in_range,":spawn_point",minorplanet_begin,minorplanet_end),
        (try_end),
        (spawn_around_party,":spawn_point","pt_black_sun_pirates"),
      (try_end),
      (try_begin),
        (store_num_parties_of_template, ":num_parties", "pt_blazing_claw_pirates"),
        #SW - increased num_parties for spawn_bandits from 14 to 16
        (lt,":num_parties",16),
        #SW - modified so spawn point is somewhat random
        (store_random_in_range, ":rand", 0, 100),
        (try_begin),
          (le, ":rand", 75),  #75% chance to spawn in one of the bandits primary locations
          (store_random,":spawn_point",num_blazing_claw_pirate_spawn_points),
          (val_add,":spawn_point","p_blazing_claw_pirate_spawn_point"),
        (else_try),        #25% chance for bandit to spawn around a random village
          (store_random_in_range,":spawn_point",minorplanet_begin,minorplanet_end),
        (try_end),
        (spawn_around_party,":spawn_point","pt_blazing_claw_pirates"),
      (try_end),
      (try_begin),
        (store_num_parties_of_template, ":num_parties", "pt_tusken_raiders"),
        #SW - increased num_parties for spawn_bandits from 14 to 16
        (lt,":num_parties",16),
        #SW - modified so spawn point is somewhat random
        (store_random_in_range, ":rand", 0, 100),
        (try_begin),
          (lt, ":rand", 75),  #75% chance to spawn in one of the bandits primary locations
          (store_random,":spawn_point",num_tusken_raider_spawn_points),
          (val_add,":spawn_point","p_tusken_raider_spawn_point_1"),
        (else_try),        #25% chance for bandit to spawn around a random village
          (store_random_in_range,":spawn_point",minorplanet_begin,minorplanet_end),
        (try_end),
        (spawn_around_party,":spawn_point","pt_tusken_raiders"),
      (try_end),
      (try_begin),
        (store_num_parties_of_template, ":num_parties", "pt_night_fang_pirates"),
        #SW - increased num_parties for spawn_bandits from 14 to 16
        (lt,":num_parties",16),
        #SW - modified so spawn point is somewhat random
        (store_random_in_range, ":rand", 0, 100),
        (try_begin),
          (lt, ":rand", 75),  #75% chance to spawn in one of the bandits primary locations
          (store_random,":spawn_point",num_night_fang_pirate_spawn_points),
          (val_add,":spawn_point","p_night_fang_pirate_spawn_point"),
        (else_try),        #25% chance for bandit to spawn around a random village
          (store_random_in_range,":spawn_point",minorplanet_begin,minorplanet_end),
        (try_end),
        (spawn_around_party,":spawn_point","pt_night_fang_pirates"),
      (try_end),
      (try_begin),
        (store_num_parties_of_template, ":num_parties", "pt_jawas"),
        #SW - lowered num_parties for jawas from 23 to 20
        (lt,":num_parties",20),
        (store_random_in_range,":spawn_point",minorplanet_begin,minorplanet_end), #spawn jawas twice to have lots of them at the beginning
        (spawn_around_party,":spawn_point","pt_jawas"),
        (assign, ":spawned_party_id", reg0),
        (try_begin),
          (check_quest_active, "qst_deal_with_jawas"),
          (party_set_flags, ":spawned_party_id", pf_quest_party, 1),
        (else_try),
          (party_set_flags, ":spawned_party_id", pf_quest_party, 0),
        (try_end),
      (try_end),
      (try_begin),
        (store_num_parties_of_template, ":num_parties", "pt_deserters"),
        #SW - increased pt_deserters from 15 to 20
        #(lt,":num_parties",15),
        (lt,":num_parties",20),
        (set_spawn_radius, 4),
        (try_for_range, ":troop_no", faction_heroes_begin, faction_heroes_end),
          (store_random_in_range, ":random_no", 0, 100),
          (lt, ":random_no", 5),
          (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
          (store_troop_faction, ":troop_faction", ":troop_no"),
          (neq, ":troop_faction", "fac_player_supporters_faction"),
          (gt, ":party_no", 0),
          (neg|party_is_in_any_town, ":party_no"),
          ##         (party_get_attached_to, ":attached_party_no", ":party_no"),
          ##         (lt, ":attached_party_no", 0),#in wilderness
          (spawn_around_party, ":party_no", "pt_deserters"),
          (assign, ":new_party", reg0),
          (store_troop_faction, ":faction_no", ":troop_no"),
          (faction_get_slot, ":tier_1_troop", ":faction_no", slot_faction_tier_1_troop),
          (try_begin), #@> SWY - Add Incinerator Trooper and Novatrooper to the Deserters parties
            (eq,":troop_faction","fac_galacticempire"),
            (store_random_in_range, ":elite_random", 0, 3),
            (try_begin),
              (eq,":elite_random",0),
              (assign,":tier_1_troop","trp_novatrooper"),
            (else_try),
              (eq,":elite_random",1),
              (assign,":tier_1_troop","trp_incinerator_trooper"),
            (else_try),
              (ge,":elite_random",2), # double possibility to be a standard stormie
              (assign,":tier_1_troop","trp_imperial_stormtrooper"),
            (try_end),
          (try_end),
          (store_character_level, ":level", "trp_player"),
          (store_mul, ":max_number_to_add", ":level", 2),
          (val_add, ":max_number_to_add", 11),
          (store_random_in_range, ":number_to_add", 10, ":max_number_to_add"),
          (party_add_members, ":new_party", ":tier_1_troop", ":number_to_add"),
          (store_random_in_range, ":random_no", 1, 4),
          #SW - possibly need to comment out this line if the player ever gets a ton of extra XP when starting the game?
          (try_for_range, ":unused", 0, ":random_no"),
            (party_upgrade_with_xp, ":new_party", 1000000, 0),
          (try_end),
          #SW - new code to fix the icon for pt_deserters
          (try_begin),
            (eq, ":faction_no", "fac_galacticempire"),   #empire
            (party_set_icon, ":new_party", "icon_imperial_shuttle"),
          (else_try),
            (eq, ":faction_no", "fac_rebelalliance"), #rebel
            (party_set_icon, ":new_party", "icon_y_wing"),
          (else_try),
            (eq, ":faction_no", "fac_huttcartel"), #hutt
            (party_set_icon, ":new_party", "icon_scyk_fighter"),
          (try_end),
          
          ##         (str_store_party_name, s1, ":party_no"),
          ##         (call_script, "script_get_closest_center", ":party_no"),
          ##         (try_begin),
          ##           (gt, reg0, 0),
          ##           (str_store_party_name, s2, reg0),
          ##         (else_try),
          ##           (str_store_string, s2, "@unknown place"),
          ##         (try_end),
          ##         (assign, reg1, ":number_to_add"),
          ##         (display_message, "@{reg1} Deserters spawned from {s1}, near {s2}."),
        (try_end),
      (try_end),
  ]),
  
  #script_count_mission_casualties_from_agents
  # INPUT: none
  # OUTPUT: none
  ("count_mission_casualties_from_agents",
    [(party_clear, "p_player_casualties"),
      (party_clear, "p_enemy_casualties"),
      (party_clear, "p_ally_casualties"),
      (assign, "$any_allies_at_the_last_battle", 0),
      (try_for_agents, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (agent_get_party_id, ":agent_party", ":cur_agent"),
        (try_begin),
          (neq, ":agent_party", "p_main_party"),
          ############################################################################################################
          ##### Custom Commander(CC)
          ############################################################################################################
          (agent_get_troop_id, ":agent_troop_id", ":cur_agent"),
          (neq, ":agent_troop_id", "trp_player"),
          ############################################################################################################
          ##### Custom Commander(CC)
          ############################################################################################################
          (agent_is_ally, ":cur_agent"),
          (assign, "$any_allies_at_the_last_battle", 1),
        (try_end),
        (neg|agent_is_alive, ":cur_agent"),
        (agent_get_troop_id, ":agent_troop_id", ":cur_agent"),
        (try_begin),
          ############################################################################################################
          ##### Custom Commander(CC)
          ############################################################################################################
          (this_or_next|eq, ":agent_troop_id", "trp_player"),
          ############################################################################################################
          ##### Custom Commander(CC)
          ############################################################################################################
          (eq, ":agent_party", "p_main_party"),
          (party_add_members, "p_player_casualties", ":agent_troop_id", 1),
          (try_begin),
            (agent_is_wounded, ":cur_agent"),
            (party_wound_members, "p_player_casualties", ":agent_troop_id", 1),
          (try_end),
        (else_try),
          (agent_is_ally, ":cur_agent"),
          (party_add_members, "p_ally_casualties", ":agent_troop_id", 1),
          (try_begin),
            (agent_is_wounded, ":cur_agent"),
            (party_wound_members, "p_ally_casualties", ":agent_troop_id", 1),
          (try_end),
        (else_try),
          (party_add_members, "p_enemy_casualties", ":agent_troop_id", 1),
          (try_begin),
            (agent_is_wounded, ":cur_agent"),
            (party_wound_members, "p_enemy_casualties", ":agent_troop_id", 1),
          (try_end),
        (try_end),
      (try_end),
  ]),
  
  #script_get_max_skill_of_player_party
  # INPUT: arg1 = skill_no
  # OUTPUT: reg0 = max_skill, reg1 = skill_owner_troop_no
  ("get_max_skill_of_player_party",
    [(store_script_param, ":skill_no", 1),
      (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
      (store_skill_level, ":max_skill", ":skill_no", "trp_player"),
      (assign, ":skill_owner", "trp_player"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
        (troop_is_hero, ":stack_troop"),
        (neg|troop_is_wounded, ":stack_troop"),
        (store_skill_level, ":cur_skill", ":skill_no", ":stack_troop"),
        (gt, ":cur_skill", ":max_skill"),
        (assign, ":max_skill", ":cur_skill"),
        (assign, ":skill_owner", ":stack_troop"),
      (try_end),
      (assign, reg0, ":max_skill"),
      (assign, reg1, ":skill_owner"),
  ]),
  
  #script_upgrade_hero_party
  # INPUT: arg1 = party_id, arg2 = xp_amount
  ("upgrade_hero_party",
    [(store_script_param, ":party_no", 1),
      (store_script_param, ":xp_amount", 2),
      (party_upgrade_with_xp, ":party_no", ":xp_amount", 0),
  ]),
  
  #script_get_improvement_details
  # INPUT: arg1 = improvement
  # OUTPUT: reg0 = base_cost
  ("get_improvement_details",
    [(store_script_param, ":improvement_no", 1),
      (try_begin),
        (eq, ":improvement_no", slot_center_has_manor),
        (str_store_string, s0, "@Palace"),
        (str_store_string, s1, "@A palace lets you rest on the planet and pay your troops half wages while you rest."),
        (assign, reg0, 8000),#6000
      (else_try),
        (eq, ":improvement_no", slot_center_has_fish_pond),
        (str_store_string, s0, "@Industrial Factory"),
        (str_store_string, s1, "@A industrial factory increases planet prosperity by 5%."),
        (assign, reg0, 6000),#4000
      (else_try),
        (eq, ":improvement_no", slot_center_has_watch_tower),
        (str_store_string, s0, "@Radar Station"),
        (str_store_string, s1, "@A radar station lets the citizens raise alarm earlier. The time it takes for enemies to loot the planet increases by 25%."),
        (assign, reg0, 5000),#3000
      (else_try),
        (eq, ":improvement_no", slot_center_has_school),
        (str_store_string, s0, "@Educational Facility"),
        (str_store_string, s1, "@A educational facility increases the loyality of the citizens to you by +1 every month."),
        (assign, reg0, 7000),#5000
      (else_try),
        (eq, ":improvement_no", slot_center_has_messenger_post),
        (str_store_string, s0, "@Communications Center"),
        (str_store_string, s1, "@A communications center lets the inhabitants send you a message whenever enemies are nearby, even if you are far away from here."),
        (assign, reg0, 4000),#2000
      (else_try),
        (eq, ":improvement_no", slot_center_has_prisoner_tower),
        (str_store_string, s0, "@Prison Tower"),
        (str_store_string, s1, "@A prison tower reduces the chance of captives held here running away successfully."),
        (assign, reg0, 4000),#4000
        # inserted by obi 2009-04-28 recruit clones, droids and force sensitves
      (else_try),
        (eq, ":improvement_no", slot_center_has_clone_chambers),
        (str_store_string, s0, "@Cloning Chambers"),
        (str_store_string, s1, "@A cloning chamber gives you the chance to recruit clone troopers."),
        (assign, reg0, 10000),#6000
      (else_try),
        (eq, ":improvement_no", slot_center_has_droid_foundry),
        (str_store_string, s0, "@Droid Foundry"),
        (str_store_string, s1, "@A droid foundry gives you the chance to build battle droids."),
        (assign, reg0, 8000),#5000
      (else_try),
        (eq, ":improvement_no", slot_center_has_temple),
        (str_store_string, s0, "@Force-Sensitive Temple"),
        (str_store_string, s1, "@A force-sensitive temple gives you the chance to recruit force sensitives."),
        (assign, reg0, 10000),#7000
      (else_try),
        (eq, ":improvement_no", slot_center_has_rancor_pit),
        (str_store_string, s0, "@Rancor Pit"),
        (str_store_string, s1, "@A rancor pit gives you the chance to breed baby rancors."),
        (assign, reg0, 6000),#4000
        # end of insert
      (try_end),
  ]),
  
  #script_cf_troop_agent_is_alive
  # INPUT: arg1 = troop_id
  ("cf_troop_agent_is_alive",
    [(store_script_param, ":troop_no", 1),
      (assign, ":alive_count", 0),
      (try_for_agents, ":cur_agent"),
        (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
        (eq, ":troop_no", ":cur_agent_troop"),
        (agent_is_alive, ":cur_agent"),
        (val_add, ":alive_count", 1),
      (try_end),
      (gt, ":alive_count", 0),
  ]),
  
  # inserted by obi 2009-04-28 --> recruit clones, droid and force sensitves
  ("cf_minorplanet_recruit_clones_cond",
    [(neg|party_slot_eq, "$current_town", slot_minorplanet_state, svs_looted),
      (neg|party_slot_eq, "$current_town", slot_minorplanet_state, svs_being_raided),
      (neg|party_slot_ge, "$current_town", slot_minorplanet_infested_by_bandits, 1),
      (party_slot_eq, "$current_town", slot_center_has_clone_chambers, 1),
      #SW - modified to take restrictions out of displaying recruit game menu
      # (store_faction_of_party, ":minorplanet_faction", "$current_town"),
      # (party_get_slot, ":center_relation", "$current_town", slot_center_player_relation),
      # (store_relation, ":minorplanet_faction_relation", ":minorplanet_faction", "fac_player_faction"),
      # (ge, ":center_relation", 0),
      # (this_or_next|ge, ":center_relation", 5),
      # (this_or_next|eq, ":minorplanet_faction", "$players_faction"),
      # (this_or_next|ge, ":minorplanet_faction_relation", 0),
      # (this_or_next|eq, ":minorplanet_faction", "$supported_pretender_old_faction"),
      # (             eq, "$players_faction", 0),
      # (party_slot_ge, "$current_town", slot_center_volunteer_troop_amount, 0),
      # (party_slot_ge, "$current_town", slot_center_volunteer_troop_type, 1),
      # (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
      # (ge, ":free_capacity", 1),
  ]),
  
  ("cf_minorplanet_recruit_force_sensitives_cond",
    [(neg|party_slot_eq, "$current_town", slot_minorplanet_state, svs_looted),
      (neg|party_slot_eq, "$current_town", slot_minorplanet_state, svs_being_raided),
      (neg|party_slot_ge, "$current_town", slot_minorplanet_infested_by_bandits, 1),
      (party_slot_eq, "$current_town", slot_center_has_temple, 1),
      #SW - modified to take restrictions out of displaying recruit game menu
      # (store_faction_of_party, ":minorplanet_faction", "$current_town"),
      # (party_get_slot, ":center_relation", "$current_town", slot_center_player_relation),
      # (store_relation, ":minorplanet_faction_relation", ":minorplanet_faction", "fac_player_faction"),
      # (ge, ":center_relation", 0),
      # (this_or_next|ge, ":center_relation", 5),
      # (this_or_next|eq, ":minorplanet_faction", "$players_faction"),
      # (this_or_next|ge, ":minorplanet_faction_relation", 0),
      # (this_or_next|eq, ":minorplanet_faction", "$supported_pretender_old_faction"),
      # (             eq, "$players_faction", 0),
      # (party_slot_ge, "$current_town", slot_center_volunteer_troop_amount, 0),
      # (party_slot_ge, "$current_town", slot_center_volunteer_troop_type, 1),
      # (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
      # (ge, ":free_capacity", 1),
  ]),
  
  ("cf_minorplanet_recruit_droids_cond",
    [(neg|party_slot_eq, "$current_town", slot_minorplanet_state, svs_looted),
      (neg|party_slot_eq, "$current_town", slot_minorplanet_state, svs_being_raided),
      (neg|party_slot_ge, "$current_town", slot_minorplanet_infested_by_bandits, 1),
      (party_slot_eq, "$current_town", slot_center_has_droid_foundry, 1),
      #SW - modified to take restrictions out of displaying recruit game menu
      # (store_faction_of_party, ":minorplanet_faction", "$current_town"),
      # (party_get_slot, ":center_relation", "$current_town", slot_center_player_relation),
      # (store_relation, ":minorplanet_faction_relation", ":minorplanet_faction", "fac_player_faction"),
      # (ge, ":center_relation", 0),
      # (this_or_next|ge, ":center_relation", 5),
      # (this_or_next|eq, ":minorplanet_faction", "$players_faction"),
      # (this_or_next|ge, ":minorplanet_faction_relation", 0),
      # (this_or_next|eq, ":minorplanet_faction", "$supported_pretender_old_faction"),
      # (             eq, "$players_faction", 0),
      # (party_slot_ge, "$current_town", slot_center_volunteer_troop_amount, 0),
      # (party_slot_ge, "$current_town", slot_center_volunteer_troop_type, 1),
      # (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
      # (ge, ":free_capacity", 1),
  ]),
  ("cf_minorplanet_recruit_rancors_cond",
    [(neg|party_slot_eq, "$current_town", slot_minorplanet_state, svs_looted),
      (neg|party_slot_eq, "$current_town", slot_minorplanet_state, svs_being_raided),
      (neg|party_slot_ge, "$current_town", slot_minorplanet_infested_by_bandits, 1),
      (party_slot_eq, "$current_town", slot_center_has_rancor_pit, 1),
      #SW - modified to take restrictions out of displaying recruit game menu
      # (store_faction_of_party, ":minorplanet_faction", "$current_town"),
      # (party_get_slot, ":center_relation", "$current_town", slot_center_player_relation),
      # (store_relation, ":minorplanet_faction_relation", ":minorplanet_faction", "fac_player_faction"),
      # (ge, ":center_relation", 0),
      # (this_or_next|ge, ":center_relation", 5),
      # (this_or_next|eq, ":minorplanet_faction", "$players_faction"),
      # (this_or_next|ge, ":minorplanet_faction_relation", 0),
      # (this_or_next|eq, ":minorplanet_faction", "$supported_pretender_old_faction"),
      # (             eq, "$players_faction", 0),
      # (party_slot_ge, "$current_town", slot_center_volunteer_troop_amount, 0),
      # (party_slot_ge, "$current_town", slot_center_volunteer_troop_type, 1),
      # (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
      # (ge, ":free_capacity", 1),
  ]),
  # end of insert
  
  #script_cf_minorplanet_recruit_volunteers_cond
  # INPUT: none
  # OUTPUT: none
  ("cf_minorplanet_recruit_volunteers_cond",
    [(neg|party_slot_eq, "$current_town", slot_minorplanet_state, svs_looted),
      (neg|party_slot_eq, "$current_town", slot_minorplanet_state, svs_being_raided),
      (neg|party_slot_ge, "$current_town", slot_minorplanet_infested_by_bandits, 1),
      #SW - modified to take most restrictions out of displaying recruit game menu
      #(store_faction_of_party, ":minorplanet_faction", "$current_town"),
      # (party_get_slot, ":center_relation", "$current_town", slot_center_player_relation),
      # (store_relation, ":minorplanet_faction_relation", ":minorplanet_faction", "fac_player_faction"),
      # (ge, ":center_relation", 0),
      # (this_or_next|ge, ":center_relation", 5),
      #SW - so you can only get recruits from your faction villages (moved it to recruit_volunteers in module_game_menus.py)
      #(this_or_next|eq, ":minorplanet_faction", "$players_faction"),
      #(eq, ":minorplanet_faction", "$players_faction"),
      # (this_or_next|ge, ":minorplanet_faction_relation", 0),
      # (this_or_next|eq, ":minorplanet_faction", "$supported_pretender_old_faction"),
      #(             eq, "$players_faction", 0),
      # (party_slot_ge, "$current_town", slot_center_volunteer_troop_amount, 0),
      # (party_slot_ge, "$current_town", slot_center_volunteer_troop_type, 1),
      # (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
      # (ge, ":free_capacity", 1),
  ]),
  
  #  inserted by obi 2009-04-28 --> recruit clones, droids and force sensitves
  ("minorplanet_recruit_volunteers_clones",
    [(party_get_slot, ":volunteer_amount", "$current_town", slot_center_volunteer_troop_amount),
      (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
      (val_min, ":volunteer_amount", ":free_capacity"),
      (store_troop_gold, ":gold", "trp_player"),
      (store_div, ":gold_capacity", ":gold", 100),#100 denars per man, change to whatever you want
      (val_min, ":volunteer_amount", ":gold_capacity"),
      (party_add_members, "p_main_party", "trp_clone_trooper_1", ":volunteer_amount"), # change troop to clone
      (party_set_slot, "$current_town", slot_center_volunteer_troop_amount, -1),
      (store_mul, ":cost", ":volunteer_amount", 100),#100 denars per man
      (troop_remove_gold, "trp_player", ":cost"),
  ]),
  
  ("minorplanet_recruit_volunteers_force_sensitives",
    [(party_get_slot, ":volunteer_amount", "$current_town", slot_center_volunteer_troop_amount),
      (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
      (val_min, ":volunteer_amount", ":free_capacity"),
      (store_troop_gold, ":gold", "trp_player"),
      (store_div, ":gold_capacity", ":gold", 170),#250 denars per man, change to whatever you want
      (val_min, ":volunteer_amount", ":gold_capacity"),
      
      #SW - added faction specific recruits
      #TAS switched lightside/darkside recruitement
      (store_faction_of_party, ":cur_center_faction", "$current_town"),
      (try_begin),
        (eq, ":cur_center_faction", "fac_galacticempire"),  #Galactic Empire
        (party_add_members, "p_main_party", "trp_jedi_hopeful", ":volunteer_amount"),
      (else_try),
        (eq, ":cur_center_faction", "fac_rebelalliance"),   #Rebel Alliance
        (party_add_members, "p_main_party", "trp_sith_hopeful", ":volunteer_amount"),
      (else_try), #Hutt Cartel, player faction, etc.
        (party_add_members, "p_main_party", "trp_force_sensitive_recruit", ":volunteer_amount"),
      (try_end),
      
      (party_set_slot, "$current_town", slot_center_volunteer_troop_amount, -1),
      (store_mul, ":cost", ":volunteer_amount", 150),#250 denars per man
      (troop_remove_gold, "trp_player", ":cost"),
      
  ]),
  
  ("minorplanet_recruit_volunteers_droids",
    [(party_get_slot, ":volunteer_amount", "$current_town", slot_center_volunteer_troop_amount),
      (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
      (val_min, ":volunteer_amount", ":free_capacity"),
      (store_troop_gold, ":gold", "trp_player"),
      (store_div, ":gold_capacity", ":gold", 160),#100 denars per man, change to whatever you want
      (val_min, ":volunteer_amount", ":gold_capacity"),
      (party_add_members, "p_main_party", "$g_droid_foundry_type", ":volunteer_amount"),
      (party_set_slot, "$current_town", slot_center_volunteer_troop_amount, -1),
      (store_mul, ":cost", ":volunteer_amount", 50),#100 denars per man
      (troop_remove_gold, "trp_player", ":cost"),
  ]),
  
  ("minorplanet_recruit_volunteers_rancors",
    [(party_get_slot, ":volunteer_amount", "$current_town", slot_center_volunteer_troop_amount),
      (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
      (val_min, ":volunteer_amount", ":free_capacity"),
      (store_troop_gold, ":gold", "trp_player"),
      (store_div, ":gold_capacity", ":gold", 760),#100 denars per man, change to whatever you want
      (val_min, ":volunteer_amount", ":gold_capacity"),
      (party_add_members, "p_main_party", "trp_rancor", ":volunteer_amount"),
      (party_set_slot, "$current_town", slot_center_volunteer_troop_amount, -1),
      (store_mul, ":cost", ":volunteer_amount", 500),#100 denars per man
      (troop_remove_gold, "trp_player", ":cost"),
  ]),
  # end of insert
  
  #script_minorplanet_recruit_volunteers_recruit
  # INPUT: none
  # OUTPUT: none
  ("minorplanet_recruit_volunteers_recruit",
    [
      #SW - modified minorplanet_recruit_volunteers_recruit script (increased prices, default to farmers, etc)
      #(party_get_slot, ":volunteer_troop", "$current_town", slot_center_volunteer_troop_type),
      (store_faction_of_party, ":town_faction", "$current_town"),
      (faction_get_slot, ":volunteer_troop", ":town_faction", slot_faction_tier_1_troop),
      (try_begin),
        (le, ":volunteer_troop", 0),
        (assign, ":volunteer_troop", "trp_civilian"),
      (try_end),
      (party_get_slot, ":volunteer_amount", "$current_town", slot_center_volunteer_troop_amount),
      (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
      (val_min, ":volunteer_amount", ":free_capacity"),
      (store_troop_gold, ":gold", "trp_player"),
      (store_div, ":gold_capacity", ":gold", 25),#10 denars per man
      (val_min, ":volunteer_amount", ":gold_capacity"),
      (party_add_members, "p_main_party", ":volunteer_troop", ":volunteer_amount"),
      (party_set_slot, "$current_town", slot_center_volunteer_troop_amount, -1),
      (store_mul, ":cost", ":volunteer_amount", 25),#10 denars per man
      (troop_remove_gold, "trp_player", ":cost"),
  ]),
  
  #script_get_troop_item_amount
  # INPUT: arg1 = troop_no, arg2 = item_no
  # OUTPUT: reg0 = item_amount
  ("get_troop_item_amount",
    [(store_script_param, ":troop_no", 1),
      (store_script_param, ":item_no", 2),
      (troop_get_inventory_capacity, ":inv_cap", ":troop_no"),
      (assign, ":count", 0),
      (try_for_range, ":i_slot", 0, ":inv_cap"),
        (troop_get_inventory_slot, ":cur_item", ":troop_no", ":i_slot"),
        (eq, ":cur_item", ":item_no"),
        (val_add, ":count", 1),
      (try_end),
      (assign, reg0, ":count"),
  ]),
  
  #script_get_name_from_dna_to_s50
  # INPUT: arg1 = dna
  # OUTPUT: s50 = name
  ("get_name_from_dna_to_s50",
    [(store_script_param, ":dna", 1),
      (store_sub, ":num_names", names_end, names_begin),
      (store_sub, ":num_surnames", surnames_end, surnames_begin),
      (assign, ":selected_name", ":dna"),
      (val_mod, ":selected_name", ":num_names"),
      (assign, ":selected_surname", ":dna"),
      (val_div, ":selected_surname", ":num_names"),
      (val_mod, ":selected_surname", ":num_surnames"),
      (val_add, ":selected_name", names_begin),
      (val_add, ":selected_surname", surnames_begin),
      (str_store_string, s50, ":selected_name"),
      (str_store_string, s50, ":selected_surname"),
  ]),
  
  #script_change_center_prosperity
  # INPUT: arg1 = center_no, arg2 = difference
  # OUTPUT: none
  ("change_center_prosperity",
    [(store_script_param, ":center_no", 1),
      (store_script_param, ":difference", 2),
      (party_get_slot, ":prosperity", ":center_no", slot_mainplanet_prosperity),
      (store_add, ":new_prosperity", ":prosperity", ":difference"),
      (val_clamp, ":new_prosperity", 0, 100),
      (store_div, ":old_state", ":prosperity", 20),
      (store_div, ":new_state", ":new_prosperity", 20),
      (try_begin),
        (neq, ":old_state", ":new_state"),
        (str_store_party_name_link, s2, ":center_no"),
        (call_script, "script_get_prosperity_text_to_s50", ":center_no"),
        (str_store_string, s3, s50),
        (party_set_slot, ":center_no", slot_mainplanet_prosperity, ":new_prosperity"),
        (call_script, "script_get_prosperity_text_to_s50", ":center_no"),
        (str_store_string, s4, s50),
        # HC - TODO: Determine if the player owns ":center_no".
        # HC - Select the message color based on the circumstances. reg20 holds the color.
        (call_script, "script_get_message_color", news_center_prosperity_changed, ":center_no"),
        (display_message, "@Prosperity of {s2} has changed from {s3} to {s4}.", reg20),
        #(display_message, "@Prosperity of {s2} has changed from {s3} to {s4}."),
        (call_script, "script_update_center_notes", ":center_no"),
      (else_try),
        (party_set_slot, ":center_no", slot_mainplanet_prosperity, ":new_prosperity"),
      (try_end),
  ]),
  
  #script_get_center_ideal_prosperity
  # INPUT: arg1 = center_no
  # OUTPUT: reg0 = ideal_prosperity
  ("get_center_ideal_prosperity",
    [(store_script_param, ":center_no", 1),
      (assign, ":ideal", 40),
      (try_begin),
        (is_between, ":center_no", minorplanet_begin, minorplanet_end),
        (try_begin),
          (party_slot_eq, ":center_no", slot_center_has_fish_pond, 1),
          (val_add, ":ideal", 5),
        (try_end),
        (party_get_slot, ":land_quality", ":center_no", slot_minorplanet_land_quality),
        (val_mul, ":land_quality", 3),
        (val_add, ":ideal", ":land_quality"),
        (party_get_slot, ":num_cattle", ":center_no", slot_minorplanet_number_of_cattle),
        (val_div, ":num_cattle", 20),
        (val_add, ":ideal", ":num_cattle"),
      (else_try),
        (try_for_range, ":minorplanet_no", minorplanet_begin, minorplanet_end),
          (party_slot_eq, ":minorplanet_no", slot_minorplanet_bound_center, ":center_no"),
          (party_get_slot, ":prosperity", ":minorplanet_no", slot_mainplanet_prosperity),
          (val_div, ":prosperity", 20),
          (val_add, ":ideal", ":prosperity"),
        (try_end),
      (try_end),
      (assign, reg0, ":ideal"),
  ]),
  
  #script_get_poorest_minorplanet_of_faction
  # INPUT: arg1 = center_no
  # OUTPUT: reg0 = ideal_prosperity
  ("get_poorest_minorplanet_of_faction",
    [(store_script_param, ":faction_no", 1),
      (assign, ":min_prosperity_village", -1),
      (assign, ":min_prosperity", 101),
      (try_for_range, ":minorplanet_no", minorplanet_begin, minorplanet_end),
        (store_faction_of_party, ":minorplanet_faction", ":minorplanet_no"),
        (eq, ":minorplanet_faction", ":faction_no"),
        (party_get_slot, ":prosperity", ":minorplanet_no", slot_mainplanet_prosperity),
        (lt, ":prosperity", ":min_prosperity"),
        (assign, ":min_prosperity", ":prosperity"),
        (assign, ":min_prosperity_village", ":minorplanet_no"),
      (try_end),
      (assign, reg0, ":min_prosperity_village"),
  ]),
  
  #script_troop_add_gold
  # INPUT: arg1 = troop_no, arg2 = amount
  # OUTPUT: none
  ("troop_add_gold",
    [(store_script_param, ":troop_no", 1),
      (store_script_param, ":amount", 2),
      (troop_add_gold, ":troop_no", ":amount"),
      (try_begin),
        (eq, ":troop_no", "trp_player"),
        (play_sound, "snd_money_received"),
      (try_end),
  ]),
  
  #NPC companion changes begin
  ("initialize_npcs",
    [
      
      # set strings
      
      (troop_set_slot, "trp_npc1", slot_troop_morality_type, tmt_egalitarian),  #borcha
      (troop_set_slot, "trp_npc1", slot_troop_morality_value, 4),  #borcha
      (troop_set_slot, "trp_npc1", slot_troop_2ary_morality_type, tmt_aristocratic),  #borcha
      (troop_set_slot, "trp_npc1", slot_troop_2ary_morality_value, -1),
      (troop_set_slot, "trp_npc1", slot_troop_personalityclash_object, "trp_npc7"),  #borcha - deshavi
      (troop_set_slot, "trp_npc1", slot_troop_personalityclash2_object, "trp_npc16"),  #borcha - klethi
      (troop_set_slot, "trp_npc1", slot_troop_personalitymatch_object, "trp_npc2"),  #borcha - marnid
      (troop_set_slot, "trp_npc1", slot_troop_home, "p_minorplanet_71"), #Tshibtin
      (troop_set_slot, "trp_npc1", slot_troop_payment_request, 300),
      
      (troop_set_slot, "trp_npc2", slot_troop_morality_type, tmt_humanitarian), #marnid
      (troop_set_slot, "trp_npc2", slot_troop_morality_value, 2),
      (troop_set_slot, "trp_npc2", slot_troop_2ary_morality_type, tmt_honest),
      (troop_set_slot, "trp_npc2", slot_troop_2ary_morality_value, 1),
      (troop_set_slot, "trp_npc2", slot_troop_personalityclash_object, "trp_npc5"), #marnid - beheshtur
      (troop_set_slot, "trp_npc2", slot_troop_personalityclash2_object, "trp_npc9"), #marnid - alayen
      (troop_set_slot, "trp_npc2", slot_troop_personalitymatch_object, "trp_npc1"),  #marnid - borcha
      (troop_set_slot, "trp_npc2", slot_troop_home, "p_mandalore"), #Sargoth
      (troop_set_slot, "trp_npc2", slot_troop_payment_request, 0),
      
      #
      (troop_set_slot, "trp_npc3", slot_troop_morality_type, tmt_humanitarian), #Ymira
      (troop_set_slot, "trp_npc3", slot_troop_morality_value, 4),
      (troop_set_slot, "trp_npc3", slot_troop_2ary_morality_type, tmt_aristocratic),
      (troop_set_slot, "trp_npc3", slot_troop_2ary_morality_value, -1),
      (troop_set_slot, "trp_npc3", slot_troop_personalityclash_object, "trp_npc14"), #Ymira - artimenner
      (troop_set_slot, "trp_npc3", slot_troop_personalityclash2_object, "trp_npc8"), #Ymira - matheld
      (troop_set_slot, "trp_npc3", slot_troop_personalitymatch_object, "trp_npc9"), #Ymira - alayen
      (troop_set_slot, "trp_npc3", slot_troop_home, "p_endor"), #Veluca
      (troop_set_slot, "trp_npc3", slot_troop_payment_request, 0),
      
      (troop_set_slot, "trp_npc4", slot_troop_morality_type, tmt_aristocratic), #Rolf
      (troop_set_slot, "trp_npc4", slot_troop_morality_value, 4),
      (troop_set_slot, "trp_npc4", slot_troop_2ary_morality_type, tmt_honest),
      (troop_set_slot, "trp_npc4", slot_troop_2ary_morality_value, -1),
      (troop_set_slot, "trp_npc4", slot_troop_personalityclash_object, "trp_npc10"), #Rolf - bunduk
      (troop_set_slot, "trp_npc4", slot_troop_personalityclash2_object, "trp_npc7"), #Rolf - deshavi
      (troop_set_slot, "trp_npc4", slot_troop_personalitymatch_object, "trp_npc5"), #Rolf - beheshtur
      (troop_set_slot, "trp_npc4", slot_troop_home, "p_minorplanet_34"), #Ehlerdah
      (troop_set_slot, "trp_npc4", slot_troop_payment_request, 300),
      
      (troop_set_slot, "trp_npc5", slot_troop_morality_type, tmt_egalitarian),  #beheshtur
      (troop_set_slot, "trp_npc5", slot_troop_morality_value, 3),  #beheshtur
      (troop_set_slot, "trp_npc5", slot_troop_2ary_morality_type, -1),
      (troop_set_slot, "trp_npc5", slot_troop_2ary_morality_value, 0),
      (troop_set_slot, "trp_npc5", slot_troop_personalityclash_object, "trp_npc2"),  #beheshtur - marnid
      (troop_set_slot, "trp_npc5", slot_troop_personalityclash2_object, "trp_npc11"),  #beheshtur- katrin
      (troop_set_slot, "trp_npc5", slot_troop_personalitymatch_object, "trp_npc4"),  #beheshtur - rolf
      (troop_set_slot, "trp_npc5", slot_troop_home, "p_tatooine"), #Halmar
      (troop_set_slot, "trp_npc5", slot_troop_payment_request, 400),
      
      (troop_set_slot, "trp_npc6", slot_troop_morality_type, tmt_humanitarian), #firenz
      (troop_set_slot, "trp_npc6", slot_troop_morality_value, 2),  #beheshtur
      (troop_set_slot, "trp_npc6", slot_troop_2ary_morality_type, tmt_honest),
      (troop_set_slot, "trp_npc6", slot_troop_2ary_morality_value, 1),
      (troop_set_slot, "trp_npc6", slot_troop_personalityclash_object, "trp_npc11"), #firenz
      (troop_set_slot, "trp_npc6", slot_troop_personalityclash2_object, "trp_npc13"), #firenz - nizar
      (troop_set_slot, "trp_npc6", slot_troop_personalitymatch_object, "trp_npc12"),  #firenz - jeremus
      (troop_set_slot, "trp_npc6", slot_troop_home, "p_corellia"), #Suno
      (troop_set_slot, "trp_npc6", slot_troop_payment_request, 0),
      
      (troop_set_slot, "trp_npc7", slot_troop_morality_type, tmt_egalitarian),  #deshavi
      (troop_set_slot, "trp_npc7", slot_troop_morality_value, 3),  #beheshtur
      (troop_set_slot, "trp_npc7", slot_troop_2ary_morality_type, -1),
      (troop_set_slot, "trp_npc7", slot_troop_2ary_morality_value, 0),
      (troop_set_slot, "trp_npc7", slot_troop_personalityclash_object, "trp_npc1"),  #deshavi
      (troop_set_slot, "trp_npc7", slot_troop_personalityclash2_object, "trp_npc4"),  #deshavi - rolf
      (troop_set_slot, "trp_npc7", slot_troop_personalitymatch_object, "trp_npc16"),  #deshavi - klethi
      (troop_set_slot, "trp_npc7", slot_troop_home, "p_minorplanet_5"), #Kulum
      #        (troop_set_slot, "trp_npc7", slot_troop_payment_request, 300),
      
      (troop_set_slot, "trp_npc8", slot_troop_morality_type, tmt_aristocratic), #matheld
      (troop_set_slot, "trp_npc8", slot_troop_morality_value, 3),  #beheshtur
      (troop_set_slot, "trp_npc8", slot_troop_2ary_morality_type, -1),
      (troop_set_slot, "trp_npc8", slot_troop_2ary_morality_value, 0),
      (troop_set_slot, "trp_npc8", slot_troop_personalityclash_object, "trp_npc12"), #matheld
      (troop_set_slot, "trp_npc8", slot_troop_personalityclash2_object, "trp_npc3"), #matheld - ymira
      (troop_set_slot, "trp_npc8", slot_troop_personalitymatch_object, "trp_npc13"),  #matheld - nizar
      (troop_set_slot, "trp_npc8", slot_troop_home, "p_tusken_raider_spawn_point_2"), #Gundig's Point
      (troop_set_slot, "trp_npc8", slot_troop_payment_request, 500),
      
      (troop_set_slot, "trp_npc9", slot_troop_morality_type, tmt_aristocratic), #alayen
      (troop_set_slot, "trp_npc9", slot_troop_morality_value, 2),  #beheshtur
      (troop_set_slot, "trp_npc9", slot_troop_2ary_morality_type, tmt_honest),
      (troop_set_slot, "trp_npc9", slot_troop_2ary_morality_value, 1),
      (troop_set_slot, "trp_npc9", slot_troop_personalityclash_object, "trp_npc13"), #alayen
      (troop_set_slot, "trp_npc9", slot_troop_personalityclash2_object, "trp_npc2"), #alayen - marnid
      (troop_set_slot, "trp_npc9", slot_troop_personalitymatch_object, "trp_npc3"),  #alayen - ymira
      (troop_set_slot, "trp_npc9", slot_troop_home, "p_yavin_iv"), #Rivacheg
      (troop_set_slot, "trp_npc9", slot_troop_payment_request, 300),
      
      (troop_set_slot, "trp_npc10", slot_troop_morality_type, tmt_humanitarian), #bunduk
      (troop_set_slot, "trp_npc10", slot_troop_morality_value, 2),
      (troop_set_slot, "trp_npc10", slot_troop_2ary_morality_type, tmt_egalitarian),
      (troop_set_slot, "trp_npc10", slot_troop_2ary_morality_value, 1),
      (troop_set_slot, "trp_npc10", slot_troop_personalityclash_object, "trp_npc4"), #bunduk
      (troop_set_slot, "trp_npc10", slot_troop_personalityclash2_object, "trp_npc14"), #bunduk - lazalet
      (troop_set_slot, "trp_npc10", slot_troop_personalitymatch_object, "trp_npc11"),  #bunduk - katrin
      (troop_set_slot, "trp_npc10", slot_troop_home, "p_spacestation_28"), #Grunwalder Castle
      (troop_set_slot, "trp_npc10", slot_troop_payment_request, 200),
      
      (troop_set_slot, "trp_npc11", slot_troop_morality_type, tmt_egalitarian),  #katrin
      (troop_set_slot, "trp_npc11", slot_troop_morality_value, 3),
      (troop_set_slot, "trp_npc11", slot_troop_2ary_morality_type, -1),
      (troop_set_slot, "trp_npc11", slot_troop_2ary_morality_value, 0),
      (troop_set_slot, "trp_npc11", slot_troop_personalityclash_object, "trp_npc6"),  #katrin
      (troop_set_slot, "trp_npc11", slot_troop_personalityclash2_object, "trp_npc5"),  #katrin - beheshtur
      (troop_set_slot, "trp_npc11", slot_troop_personalitymatch_object, "trp_npc10"),  #bunduk - katrin
      (troop_set_slot, "trp_npc11", slot_troop_home, "p_kessel"), #Praven
      (troop_set_slot, "trp_npc11", slot_troop_payment_request, 100),
      
      (troop_set_slot, "trp_npc12", slot_troop_morality_type, tmt_humanitarian), #jerem
      (troop_set_slot, "trp_npc12", slot_troop_morality_value, 3),
      (troop_set_slot, "trp_npc12", slot_troop_2ary_morality_type, -1),
      (troop_set_slot, "trp_npc12", slot_troop_2ary_morality_value, 0),
      (troop_set_slot, "trp_npc12", slot_troop_personalityclash_object, "trp_npc8"), #jerem
      (troop_set_slot, "trp_npc12", slot_troop_personalityclash2_object, "trp_npc15"), #jeremus - artimenner
      (troop_set_slot, "trp_npc12", slot_troop_personalitymatch_object, "trp_npc6"),  #jeremus - firenz
      (troop_set_slot, "trp_npc12", slot_troop_home, "p_spacestation_16"), #undetermined #University
      (troop_set_slot, "trp_npc12", slot_troop_payment_request, 0),
      
      (troop_set_slot, "trp_npc13", slot_troop_morality_type, tmt_aristocratic), #nizar
      (troop_set_slot, "trp_npc13", slot_troop_morality_value, 3),
      (troop_set_slot, "trp_npc13", slot_troop_2ary_morality_type, -1),
      (troop_set_slot, "trp_npc13", slot_troop_2ary_morality_value, 0),
      (troop_set_slot, "trp_npc13", slot_troop_personalityclash_object, "trp_npc9"), #nizar
      (troop_set_slot, "trp_npc13", slot_troop_personalityclash2_object, "trp_npc6"), #nizar - firenz
      (troop_set_slot, "trp_npc13", slot_troop_personalitymatch_object, "trp_npc8"), #nizar - matheld
      (troop_set_slot, "trp_npc13", slot_troop_home, "p_spacestation_15"), #Ergellon Castle
      (troop_set_slot, "trp_npc13", slot_troop_payment_request, 300),
      
      (troop_set_slot, "trp_npc14", slot_troop_morality_type, tmt_aristocratic), #lazalit
      (troop_set_slot, "trp_npc14", slot_troop_morality_value, 4),
      (troop_set_slot, "trp_npc14", slot_troop_2ary_morality_type, tmt_egalitarian),
      (troop_set_slot, "trp_npc14", slot_troop_2ary_morality_value, -1),
      (troop_set_slot, "trp_npc14", slot_troop_personalityclash_object, "trp_npc3"), #lazalit
      (troop_set_slot, "trp_npc14", slot_troop_personalityclash2_object, "trp_npc10"), #lazalit - bunduk
      (troop_set_slot, "trp_npc14", slot_troop_personalitymatch_object, "trp_npc15"), #lazalit - artimenner
      (troop_set_slot, "trp_npc14", slot_troop_home, "p_spacestation_18"), #Ismirala Castle
      (troop_set_slot, "trp_npc14", slot_troop_payment_request, 400),
      
      (troop_set_slot, "trp_npc15", slot_troop_morality_type, tmt_egalitarian),  #artimenner
      (troop_set_slot, "trp_npc15", slot_troop_morality_value, 2),
      (troop_set_slot, "trp_npc15", slot_troop_2ary_morality_type, tmt_honest),
      (troop_set_slot, "trp_npc15", slot_troop_2ary_morality_value, 1),
      (troop_set_slot, "trp_npc15", slot_troop_personalityclash_object, "trp_npc16"), #artimenner - klethi
      (troop_set_slot, "trp_npc15", slot_troop_personalityclash2_object, "trp_npc12"), #artimenner - jeremus
      (troop_set_slot, "trp_npc15", slot_troop_personalitymatch_object, "trp_npc14"), #lazalit - artimenner
      (troop_set_slot, "trp_npc15", slot_troop_home, "p_spacestation_2"), #Culmarr Castle
      (troop_set_slot, "trp_npc15", slot_troop_payment_request, 300),
      
      (troop_set_slot, "trp_npc16", slot_troop_morality_type, tmt_aristocratic), #klethi
      (troop_set_slot, "trp_npc16", slot_troop_morality_value, 4),
      (troop_set_slot, "trp_npc16", slot_troop_2ary_morality_type, tmt_humanitarian),
      (troop_set_slot, "trp_npc16", slot_troop_2ary_morality_value, -1),
      (troop_set_slot, "trp_npc16", slot_troop_personalityclash_object, "trp_npc15"), #klethi
      (troop_set_slot, "trp_npc16", slot_troop_personalityclash2_object, "trp_npc1"), #klethi - borcha
      (troop_set_slot, "trp_npc16", slot_troop_personalitymatch_object, "trp_npc7"),  #deshavi - klethi
      (troop_set_slot, "trp_npc16", slot_troop_home, "p_minorplanet_20"), #Uslum
      (troop_set_slot, "trp_npc16", slot_troop_payment_request, 200),
      
      #SW - new Droid NPC's
      (troop_set_slot, "trp_npc17", slot_troop_morality_type, tmt_humanitarian), #firenz
      (troop_set_slot, "trp_npc17", slot_troop_morality_value, 2),  #beheshtur
      (troop_set_slot, "trp_npc17", slot_troop_2ary_morality_type, tmt_honest),
      (troop_set_slot, "trp_npc17", slot_troop_2ary_morality_value, 1),
      (troop_set_slot, "trp_npc17", slot_troop_personalityclash_object, "trp_npc11"), #firenz
      (troop_set_slot, "trp_npc17", slot_troop_personalityclash2_object, "trp_npc13"), #firenz - nizar
      (troop_set_slot, "trp_npc17", slot_troop_personalitymatch_object, "trp_npc12"),  #firenz - jeremus
      (troop_set_slot, "trp_npc17", slot_troop_home, "p_corellia"), #Suno
      (troop_set_slot, "trp_npc17", slot_troop_payment_request, 0),
      
      #SW - new Droid NPC's
      (troop_set_slot, "trp_npc18", slot_troop_morality_type, tmt_humanitarian), #firenz
      (troop_set_slot, "trp_npc18", slot_troop_morality_value, 2),  #beheshtur
      (troop_set_slot, "trp_npc18", slot_troop_2ary_morality_type, tmt_honest),
      (troop_set_slot, "trp_npc18", slot_troop_2ary_morality_value, 1),
      (troop_set_slot, "trp_npc18", slot_troop_personalityclash_object, "trp_npc11"), #firenz
      (troop_set_slot, "trp_npc18", slot_troop_personalityclash2_object, "trp_npc13"), #firenz - nizar
      (troop_set_slot, "trp_npc18", slot_troop_personalitymatch_object, "trp_npc12"),  #firenz - jeremus
      (troop_set_slot, "trp_npc18", slot_troop_home, "p_corellia"), #Suno
      (troop_set_slot, "trp_npc18", slot_troop_payment_request, 0),
      
      #SW - new Droid NPC's ?  do I need to change this?
      (store_sub, "$number_of_npc_slots", slot_troop_strings_end, slot_troop_intro),
      
      (try_for_range, ":npc", companions_begin, companions_end),
        
        
        (try_for_range, ":slot_addition", 0, "$number_of_npc_slots"),
          (store_add, ":slot", ":slot_addition", slot_troop_intro),
          
          #SW - new Droid NPC's - increased from 16 to 18
          #(store_mul, ":string_addition", ":slot_addition", 16),
          (store_mul, ":string_addition", ":slot_addition", 18),
          (store_add, ":string", "str_npc1_intro", ":string_addition"),
          (val_add, ":string", ":npc"),
          (val_sub, ":string", companions_begin),
          
          (troop_set_slot, ":npc", ":slot", ":string"),
        (try_end),
      (try_end),
      #Troop commentary changes begin
      (try_for_range, ":lord", "trp_knight_1_1", "trp_heroes_end"),
      
        #faction dependent reputation for commanders -- swyter
        # {module_contants.py:line 885 onwards}
        (store_troop_faction,":lord_fac", ":lord"),
        (try_begin),
          (eq,":lord_fac","fac_galacticempire"), #evil
          (store_random_in_range, ":reputation", 3, 5+1),
        (else_try),
          (eq,":lord_fac","fac_rebelalliance"),  #cool guy
          (store_random_in_range, ":reputation", 6, 7+1),
        (else_try),                              #hutt or neutral
          (store_random_in_range, ":reputation", 0, 8),
        (try_end),
        
        (try_begin),
          (eq, ":reputation", 0),
          (assign, ":reputation", 1),
        (try_end),
        
        (troop_set_slot, ":lord", slot_lord_reputation_type, ":reputation"),
      (try_end),
      #Troop commentary changes end
      
      #Post 0907 changes begin
      (call_script, "script_add_log_entry", logent_game_start, "trp_player", -1, -1, -1),
      #Post 0907 changes end
      
      #Rebellion changes begin
      #SW - commented out faction # pretenders
      # (troop_set_slot, "trp_galacticempire_pretender",  slot_troop_original_faction, "fac_galacticempire"),
      # (troop_set_slot, "trp_rebelalliance_pretender",  slot_troop_original_faction, "fac_rebelalliance"),
      # (troop_set_slot, "trp_huttcartel_pretender",  slot_troop_original_faction, "fac_huttcartel"),
      # (troop_set_slot, "trp_faction_4_pretender",  slot_troop_original_faction, "fac_faction_4"),
      # (troop_set_slot, "trp_faction_5_pretender",  slot_troop_original_faction, "fac_faction_5"),
      
      # (troop_set_slot, "trp_galacticempire_pretender", slot_troop_support_base,     "p_corellia"), #suno
      # (troop_set_slot, "trp_rebelalliance_pretender", slot_troop_support_base,     "p_hoth"), #curaw
      # (troop_set_slot, "trp_huttcartel_pretender", slot_troop_support_base,     "p_nalhutta"), #town_18
      # (troop_set_slot, "trp_faction_4_pretender", slot_troop_support_base,     "p_gamorr"), #wercheg
      # (troop_set_slot, "trp_faction_5_pretender", slot_troop_support_base,     "p_endor"), #veluca
      (try_for_range, ":pretender", pretenders_begin, pretenders_end),
        (troop_set_slot, ":pretender", slot_lord_reputation_type, lrep_none),
      (try_end),
      #Rebellion changes end
  ]),
  
  
  
  ("objectionable_action",
    [
      (store_script_param_1, ":action_type"),
      (store_script_param_2, ":action_string"),
      
      #        (str_store_string, 12, ":action_string"),
      #        (display_message, "@Objectionable action check: {s12}"),
      
      (assign, ":grievance_minimum", -2),
      (try_for_range, ":npc", companions_begin, companions_end),
        (main_party_has_troop, ":npc"),
        
        ###Primary morality check
        (try_begin),
          (troop_slot_eq, ":npc", slot_troop_morality_type, ":action_type"),
          (troop_get_slot, ":value", ":npc", slot_troop_morality_value),
          (try_begin),
            (troop_slot_eq, ":npc", slot_troop_morality_state, tms_acknowledged),
            # npc is betrayed, major penalty to player honor and morale
            (troop_get_slot, ":grievance", ":npc", slot_troop_morality_penalties),
            (val_mul, ":value", 2),
            (val_add, ":grievance", ":value"),
            (troop_set_slot, ":npc", slot_troop_morality_penalties, ":grievance"),
          (else_try),
            (this_or_next|troop_slot_eq, ":npc", slot_troop_morality_state, tms_dismissed),
            (eq, "$disable_npc_complaints", 1),
            # npc is quietly disappointed
            (troop_get_slot, ":grievance", ":npc", slot_troop_morality_penalties),
            (val_add, ":grievance", ":value"),
            (troop_set_slot, ":npc", slot_troop_morality_penalties, ":grievance"),
          (else_try),
            # npc raises the issue for the first time
            (troop_slot_eq, ":npc", slot_troop_morality_state, tms_no_problem),
            (gt, ":value", ":grievance_minimum"),
            (assign, "$npc_with_grievance", ":npc"),
            (assign, "$npc_grievance_string", ":action_string"),
            (assign, "$npc_grievance_slot", slot_troop_morality_state),
            (assign, ":grievance_minimum", ":value"),
            (assign, "$npc_praise_not_complaint", 0),
            (try_begin),
              (lt, ":value", 0),
              (assign, "$npc_praise_not_complaint", 1),
            (try_end),
          (try_end),
          
          
          
          ###Secondary morality check
        (else_try),
          (troop_slot_eq, ":npc", slot_troop_2ary_morality_type, ":action_type"),
          (troop_get_slot, ":value", ":npc", slot_troop_2ary_morality_value),
          (try_begin),
            (troop_slot_eq, ":npc", slot_troop_2ary_morality_state, tms_acknowledged),
            # npc is betrayed, major penalty to player honor and morale
            (troop_get_slot, ":grievance", ":npc", slot_troop_morality_penalties),
            (val_mul, ":value", 2),
            (val_add, ":grievance", ":value"),
            (troop_set_slot, ":npc", slot_troop_morality_penalties, ":grievance"),
          (else_try),
            (this_or_next|troop_slot_eq, ":npc", slot_troop_2ary_morality_state, tms_dismissed),
            (eq, "$disable_npc_complaints", 1),
            # npc is quietly disappointed
            (troop_get_slot, ":grievance", ":npc", slot_troop_morality_penalties),
            (val_add, ":grievance", ":value"),
            (troop_set_slot, ":npc", slot_troop_morality_penalties, ":grievance"),
          (else_try),
            # npc raises the issue for the first time
            (troop_slot_eq, ":npc", slot_troop_2ary_morality_state, tms_no_problem),
            (gt, ":value", ":grievance_minimum"),
            (assign, "$npc_with_grievance", ":npc"),
            (assign, "$npc_grievance_string", ":action_string"),
            (assign, "$npc_grievance_slot", slot_troop_2ary_morality_state),
            (assign, ":grievance_minimum", ":value"),
            (assign, "$npc_praise_not_complaint", 0),
            (try_begin),
              (lt, ":value", 0),
              (assign, "$npc_praise_not_complaint", 1),
            (try_end),
          (try_end),
        (try_end),
        
        (try_begin),
          (gt, "$npc_with_grievance", 0),
          (eq, "$npc_praise_not_complaint", 0),
          (str_store_troop_name, 4, "$npc_with_grievance"),
          (display_message, "@{s4} looks upset.", color_hero_news),
        (try_end),
        
      (try_end),
      
      
  ]),
  
  
  ("post_battle_personality_clash_check",
    [
      
      
      
      #            (display_message, "@Post-victory personality clash check"),
      (try_for_range, ":npc", companions_begin, companions_end),
        (eq, "$disable_npc_complaints", 0),
        
        (main_party_has_troop, ":npc"),
        (neg|troop_is_wounded, ":npc"),
        
        (troop_get_slot, ":other_npc", ":npc", slot_troop_personalityclash2_object),
        (main_party_has_troop, ":other_npc"),
        (neg|troop_is_wounded, ":other_npc"),
        
        #                (store_random_in_range, ":random", 0, 3),
        (try_begin),
          (troop_slot_eq, ":npc", slot_troop_personalityclash2_state, 0),
          (try_begin),
            #                        (eq, ":random", 0),
            (assign, "$npc_with_personality_clash_2", ":npc"),
          (try_end),
        (try_end),
        
      (try_end),
      
      (try_for_range, ":npc", companions_begin, companions_end),
        (troop_slot_eq, ":npc", slot_troop_personalitymatch_state, 0),
        (eq, "$disable_npc_complaints", 0),
        
        (main_party_has_troop, ":npc"),
        (neg|troop_is_wounded, ":npc"),
        
        (troop_get_slot, ":other_npc", ":npc", slot_troop_personalitymatch_object),
        (main_party_has_troop, ":other_npc"),
        (neg|troop_is_wounded, ":other_npc"),
        (assign, "$npc_with_personality_match", ":npc"),
      (try_end),
      
      
      (try_begin),
        (gt, "$npc_with_personality_clash_2", 0),
        (assign, "$npc_map_talk_context", slot_troop_personalityclash2_state),
        (start_map_conversation, "$npc_with_personality_clash_2"),
      (else_try),
        (gt, "$npc_with_personality_match", 0),
        (assign, "$npc_map_talk_context", slot_troop_personalitymatch_state),
        (start_map_conversation, "$npc_with_personality_match"),
      (try_end),
      
      
  ]),
  
  #script_event_player_defeated_enemy_party
  # INPUT: none
  # OUTPUT: none
  ("event_player_defeated_enemy_party",
    [(try_begin),
        (check_quest_active, "qst_raid_caravan_to_start_war"),
        (neg|check_quest_concluded, "qst_raid_caravan_to_start_war"),
        (party_slot_eq, "$g_enemy_party", slot_party_type, spt_faction_caravan),
        (store_faction_of_party, ":enemy_faction", "$g_enemy_party"),
        (quest_slot_eq, "qst_raid_caravan_to_start_war", slot_quest_target_faction, ":enemy_faction"),
        (quest_get_slot, ":cur_state", "qst_raid_caravan_to_start_war", slot_quest_current_state),
        (quest_get_slot, ":quest_target_amount", "qst_raid_caravan_to_start_war", slot_quest_target_amount),
        (val_add, ":cur_state", 1),
        (quest_set_slot, "qst_raid_caravan_to_start_war", slot_quest_current_state, ":cur_state"),
        (try_begin),
          (ge, ":cur_state", ":quest_target_amount"),
          (quest_get_slot, ":quest_target_faction", "qst_raid_caravan_to_start_war", slot_quest_target_faction),
          (quest_get_slot, ":quest_giver_troop", "qst_raid_caravan_to_start_war", slot_quest_giver_troop),
          (store_troop_faction, ":quest_giver_faction", ":quest_giver_troop"),
          (call_script, "script_diplomacy_start_war_between_factions", ":quest_target_faction", ":quest_giver_faction", 1),
          (call_script, "script_succeed_quest", "qst_raid_caravan_to_start_war"),
        (try_end),
      (try_end),
      
  ]),
  
  #script_event_player_captured_as_prisoner
  # INPUT: none
  # OUTPUT: none
  ("event_player_captured_as_prisoner",
    [
      (try_begin),
        (check_quest_active, "qst_raid_caravan_to_start_war"),
        (neg|check_quest_concluded, "qst_raid_caravan_to_start_war"),
        (quest_get_slot, ":quest_target_faction", "qst_raid_caravan_to_start_war", slot_quest_target_faction),
        (store_faction_of_party, ":capturer_faction", "$capturer_party"),
        (eq, ":quest_target_faction", ":capturer_faction"),
        (call_script, "script_fail_quest", "qst_raid_caravan_to_start_war"),
      (try_end),
      #Removing followers of the player
      (try_for_range, ":troop_no", faction_heroes_begin, faction_heroes_end),
        (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
        (gt, ":party_no", 0),
        (party_slot_eq, ":party_no", slot_party_commander_party, "p_main_party"),
        (call_script, "script_party_set_ai_state", ":party_no", spai_undefined, -1),
        (party_set_slot, ":party_no", slot_party_commander_party, -1),
        (assign, "$g_recalculate_ais", 1),
      (try_end),
  ]),
  
  
  #NPC morale both returns a string and reg0 as the morale value
  ("npc_morale",
    [
      (store_script_param_1, ":npc"),
      
      (troop_get_slot, ":morality_grievances", ":npc", slot_troop_morality_penalties),
      (troop_get_slot, ":personality_grievances", ":npc", slot_troop_personalityclash_penalties),
      (party_get_morale, ":party_morale", "p_main_party"),
      
      (store_sub, ":troop_morale", ":party_morale", ":morality_grievances"),
      (val_sub, ":troop_morale", ":personality_grievances"),
      (val_add, ":troop_morale", 50),
      
      (assign, reg8, ":troop_morale"),
      
      (val_mul, ":troop_morale", 3),
      (val_div, ":troop_morale", 4),
      (val_clamp, ":troop_morale", 0, 100),
      
      (assign, reg5, ":party_morale"),
      (assign, reg6, ":morality_grievances"),
      (assign, reg7, ":personality_grievances"),
      (assign, reg9, ":troop_morale"),
      
      #        (str_store_troop_name, s11, ":npc"),
      #        (display_message, "@{s11}'s morale = PM{reg5} + 50 - MG{reg6} - PG{reg7} = {reg8} x 0.75 = {reg9}"),
      
      (try_begin),
        (lt, ":morality_grievances", 3),
        (str_store_string, 7, "str_happy"),
      (else_try),
        (lt, ":morality_grievances", 15),
        (str_store_string, 7, "str_content"),
      (else_try),
        (lt, ":morality_grievances", 30),
        (str_store_string, 7, "str_concerned"),
      (else_try),
        (lt, ":morality_grievances", 45),
        (str_store_string, 7, "str_not_happy"),
      (else_try),
        (str_store_string, 7, "str_miserable"),
      (try_end),
      
      
      (try_begin),
        (lt, ":personality_grievances", 3),
        (str_store_string, 6, "str_happy"),
      (else_try),
        (lt, ":personality_grievances", 15),
        (str_store_string, 6, "str_content"),
      (else_try),
        (lt, ":personality_grievances", 30),
        (str_store_string, 6, "str_concerned"),
      (else_try),
        (lt, ":personality_grievances", 45),
        (str_store_string, 6, "str_not_happy"),
      (else_try),
        (str_store_string, 6, "str_miserable"),
      (try_end),
      
      
      (try_begin),
        (gt, ":troop_morale", 80),
        (str_store_string, 8, "str_happy"),
        (str_store_string, 63, "str_bar_enthusiastic"),
      (else_try),
        (gt, ":troop_morale", 60),
        (str_store_string, 8, "str_content"),
        (str_store_string, 63, "str_bar_content"),
      (else_try),
        (gt, ":troop_morale", 40),
        (str_store_string, 8, "str_concerned"),
        (str_store_string, 63, "str_bar_weary"),
      (else_try),
        (gt, ":troop_morale", 20),
        (str_store_string, 8, "str_not_happy"),
        (str_store_string, 63, "str_bar_disgruntled"),
      (else_try),
        (str_store_string, 8, "str_miserable"),
        (str_store_string, 63, "str_bar_miserable"),
      (try_end),
      
      
      (str_store_string, 21, "str_npc_morale_report"),
      (assign, reg0, ":troop_morale"),
      
  ]),
  #NPC morale both returns a string and reg0 as the morale value
  
  
  #
  ("retire_companion",
    [
      (store_script_param_1, ":npc"),
      (store_script_param_2, ":length"),
      
      (remove_member_from_party, ":npc", "p_main_party"),
      (troop_set_slot, ":npc", slot_troop_personalityclash_penalties, 0),
      (troop_set_slot, ":npc", slot_troop_morality_penalties, 0),
      (troop_get_slot, ":renown", "trp_player", slot_troop_renown),
      (store_add, ":return_renown", ":renown", ":length"),
      (troop_set_slot, ":npc", slot_troop_occupation, slto_retirement),
      (troop_set_slot, ":npc", slot_troop_return_renown, ":return_renown"),
  ]),
  
  #NPC companion changes end
  
  #script_reduce_companion_morale_for_clash
  #script_calculate_ransom_amount_for_troop
  # INPUT: arg1 = troop_no for companion1 arg2 = troop_no for companion2 arg3 = slot_for_clash_state
  # slot_for_clash_state means: 1=give full penalty to companion1; 2=give full penalty to companion2; 3=give penalty equally
  ("reduce_companion_morale_for_clash",
    [
      (store_script_param, ":companion_1", 1),
      (store_script_param, ":companion_2", 2),
      (store_script_param, ":slot_for_clash_state", 3),
      
      (troop_get_slot, ":clash_state", ":companion_1", ":slot_for_clash_state"),
      (troop_get_slot, ":grievance_1", ":companion_1", slot_troop_personalityclash_penalties),
      (troop_get_slot, ":grievance_2", ":companion_2", slot_troop_personalityclash_penalties),
      (try_begin),
        (eq, ":clash_state", pclash_penalty_to_self),
        (val_add, ":grievance_1", 5),
      (else_try),
        (eq, ":clash_state", pclash_penalty_to_other),
        (val_add, ":grievance_2", 5),
      (else_try),
        (eq, ":clash_state", pclash_penalty_to_both),
        (val_add, ":grievance_1", 3),
        (val_add, ":grievance_2", 3),
      (try_end),
      (troop_set_slot, ":companion_1", slot_troop_personalityclash_penalties, ":grievance_1"),
      (troop_set_slot, ":companion_2", slot_troop_personalityclash_penalties, ":grievance_2"),
  ]),
  
  #Hunting scripts end
  
  #script_calculate_ransom_amount_for_troop
  # INPUT: arg1 = troop_no
  # OUTPUT: reg0 = ransom_amount
  ("calculate_ransom_amount_for_troop",
    [(store_script_param, ":troop_no", 1),
      (store_troop_faction, ":faction_no", ":troop_no"),
      (assign, ":ransom_amount", 400),
      (try_begin),
        (faction_slot_eq, ":faction_no", slot_faction_leader, ":troop_no"),
        (val_add, ":ransom_amount", 4000),
      (try_end),
      
      (assign, ":num_center_points", 0),
      (try_for_range, ":cur_center", centers_begin, centers_end),
        (party_slot_eq, ":cur_center", slot_mainplanet_lord, ":troop_no"),
        (try_begin),
          (party_slot_eq, ":cur_center", slot_party_type, spt_mainplanet),
          (val_add, ":num_center_points", 4),
        (else_try),
          (party_slot_eq, ":cur_center", slot_party_type, spt_castle),
          (val_add, ":num_center_points", 2),
        (else_try),
          (val_add, ":num_center_points", 1),
        (try_end),
      (try_end),
      (val_mul, ":num_center_points", 500),
      (val_add, ":ransom_amount", ":num_center_points"),
      (troop_get_slot, ":renown", ":troop_no", slot_troop_renown),
      (val_mul, ":renown", 2),
      (val_add, ":ransom_amount", ":renown"),
      (store_mul, ":ransom_max_amount", ":ransom_amount", 3),
      (val_div, ":ransom_max_amount", 2),
      (store_random_in_range, ":random_ransom_amount", ":ransom_amount", ":ransom_max_amount"),
      (val_div, ":random_ransom_amount", 100),
      (val_mul, ":random_ransom_amount", 100),
      (assign, reg0, ":random_ransom_amount"),
  ]),
  
  #script_offer_ransom_amount_to_player_for_prisoners_in_party
  # INPUT: arg1 = party_no
  # OUTPUT: reg0 = result (1 = offered, 0 = not offered)
  ("offer_ransom_amount_to_player_for_prisoners_in_party",
    [(store_script_param, ":party_no", 1),
      (assign, ":result", 0),
      (party_get_num_prisoner_stacks, ":num_stacks", ":party_no"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (eq, ":result", 0),
        (party_prisoner_stack_get_troop_id, ":stack_troop", ":party_no", ":i_stack"),
        (troop_is_hero, ":stack_troop"),
        (troop_slot_eq, ":stack_troop", slot_troop_occupation, slto_faction_hero),
        (store_troop_faction, ":stack_troop_faction", ":stack_troop"),
        (store_random_in_range, ":random_no", 0, 100),
        (try_begin),
          (faction_slot_eq, ":stack_troop_faction", slot_faction_state, sfs_active),
          (le, ":random_no", 5),
          (neq, "$g_ransom_offer_rejected", 1),
          (assign, ":num_stacks", 0), #break
          (assign, ":result", 1),
          (assign, "$g_ransom_offer_troop", ":stack_troop"),
          (assign, "$g_ransom_offer_party", ":party_no"),
          (jump_to_menu, "mnu_enemy_offer_ransom_for_prisoner"),
        (try_end),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  # script_event_hero_taken_prisoner_by_player
  # Input: arg1 = troop_no
  # Output: none
  ("event_hero_taken_prisoner_by_player",
    [
      (store_script_param_1, ":troop_no"),
      (try_begin),
        (check_quest_active, "qst_persuade_lords_to_make_peace"),
        (try_begin),
          (quest_slot_eq, "qst_persuade_lords_to_make_peace", slot_quest_target_troop, ":troop_no"),
          (val_mul, ":troop_no", -1),
          (quest_set_slot, "qst_persuade_lords_to_make_peace", slot_quest_target_troop, ":troop_no"),
          (val_mul, ":troop_no", -1),
        (else_try),
          (quest_slot_eq, "qst_persuade_lords_to_make_peace", slot_quest_object_troop, ":troop_no"),
          (val_mul, ":troop_no", -1),
          (quest_set_slot, "qst_persuade_lords_to_make_peace", slot_quest_object_troop, ":troop_no"),
          (val_mul, ":troop_no", -1),
        (try_end),
        (neg|check_quest_concluded, "qst_persuade_lords_to_make_peace"),
        (neg|quest_slot_ge, "qst_persuade_lords_to_make_peace", slot_quest_target_troop, 0),
        (neg|quest_slot_ge, "qst_persuade_lords_to_make_peace", slot_quest_object_troop, 0),
        (call_script, "script_succeed_quest", "qst_persuade_lords_to_make_peace"),
      (try_end),
      (call_script, "script_update_troop_location_notes", ":troop_no", 0),
  ]),
  
  # script_cf_check_hero_can_escape_from_player
  # Input: arg1 = troop_no
  # Output: none (can fail)
  ("cf_check_hero_can_escape_from_player",
    [
      (store_script_param_1, ":troop_no"),
      (assign, ":quest_target", 0),
      (try_begin),
        (check_quest_active, "qst_persuade_lords_to_make_peace"),
        (this_or_next|quest_slot_eq, "qst_persuade_lords_to_make_peace", slot_quest_target_troop, ":troop_no"),
        (quest_slot_eq, "qst_persuade_lords_to_make_peace", slot_quest_object_troop, ":troop_no"),
        (assign, ":quest_target", 1),
      (try_end),
      (eq, ":quest_target", 0),
      (store_random_in_range, ":rand", 0, 100),
      (lt, ":rand", hero_escape_after_defeat_chance),
  ]),
  
  # script_cf_party_remove_random_regular_troop
  # Input: arg1 = party_no
  # Output: troop_id that has been removed (can fail)
  ("cf_party_remove_random_regular_troop",
    [(store_script_param_1, ":party_no"),
      (party_get_num_companion_stacks, ":num_stacks", ":party_no"),
      (assign, ":num_troops", 0),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop", ":party_no", ":i_stack"),
        (neg|troop_is_hero, ":stack_troop"),
        (party_stack_get_size, ":stack_size", ":party_no", ":i_stack"),
        (val_add, ":num_troops", ":stack_size"),
      (try_end),
      (assign, reg0, -1),
      (gt, ":num_troops", 0),
      (store_random_in_range, ":random_troop", 0, ":num_troops"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop", ":party_no", ":i_stack"),
        (neg|troop_is_hero, ":stack_troop"),
        (party_stack_get_size, ":stack_size", ":party_no", ":i_stack"),
        (val_sub, ":random_troop", ":stack_size"),
        (lt, ":random_troop", 0),
        (assign, ":num_stacks", 0), #break
        (party_remove_members, ":party_no", ":stack_troop", 1),
        (assign, reg0, ":stack_troop"),
      (try_end),
  ]),
  
  # script_place_player_banner_near_inventory
  # Input: none
  # Output: none
  ("place_player_banner_near_inventory",
    [
      #normal_banner_begin
      (troop_get_slot, ":troop_banner_object", "trp_player", slot_troop_banner_scene_prop),
      #custom_banner_begin
      #     (troop_get_slot, ":flag_spr", "trp_player", slot_troop_custom_banner_flag_type),
      
      (try_begin),
        #normal_banner_begin
        (gt, ":troop_banner_object", 0),
        (scene_prop_get_instance, ":flag_object", ":troop_banner_object", 0),
        #custom_banner_begin
        #       (ge, ":flag_spr", 0),
        #       (val_add, ":flag_spr", custom_banner_flag_scene_props_begin),
        #       (scene_prop_get_instance, ":flag_object", ":flag_spr", 0),
        (try_begin),
          (ge, ":flag_object", 0),
          (get_player_agent_no, ":player_agent"),
          (agent_get_look_position, pos1, ":player_agent"),
          (position_move_y, pos1, -500),
          (position_rotate_z, pos1, 180),
          (position_set_z_to_ground_level, pos1),
          (position_move_z, pos1, 300),
          (prop_instance_set_position, ":flag_object", pos1),
        (try_end),
        (scene_prop_get_instance, ":pole_object", "spr_banner_pole", 0),
        (try_begin),
          (ge, ":pole_object", 0),
          (position_move_z, pos1, -320),
          (prop_instance_set_position, ":pole_object", pos1),
        (try_end),
      (else_try),
        (init_position, pos1),
        (position_move_z, pos1, -1000000),
        (scene_prop_get_instance, ":flag_object", banner_scene_props_begin, 0),
        (try_begin),
          (ge, ":flag_object", 0),
          (prop_instance_set_position, ":flag_object", pos1),
        (try_end),
        (scene_prop_get_instance, ":pole_object", "spr_banner_pole", 0),
        (try_begin),
          (ge, ":pole_object", 0),
          (prop_instance_set_position, ":pole_object", pos1),
        (try_end),
      (try_end),
  ]),
  
  # script_place_player_banner_near_inventory_bms
  # Input: none
  # Output: none
  ("place_player_banner_near_inventory_bms",
    [
      #normal_banner_begin
      (troop_get_slot, ":troop_banner_object", "trp_player", slot_troop_banner_scene_prop),
      #custom_banner_begin
      #      (troop_get_slot, ":flag_spr", "trp_player", slot_troop_custom_banner_flag_type),
      (try_begin),
        #normal_banner_begin
        (gt, ":troop_banner_object", 0),
        (replace_scene_props, banner_scene_props_begin, ":troop_banner_object"),
        #custom_banner_begin
        #       (ge, ":flag_spr", 0),
        #       (val_add, ":flag_spr", custom_banner_flag_scene_props_begin),
        #       (replace_scene_props, banner_scene_props_begin, ":flag_spr"),
      (try_end),
  ]),
  
  # script_stay_captive_for_hours
  # Input: arg1 = num_hours
  # Output: none
  ("stay_captive_for_hours",
    [(store_script_param, ":num_hours", 1),
      (store_current_hours, ":cur_hours"),
      (val_add, ":cur_hours", ":num_hours"),
      (val_max, "$g_check_autos_at_hour", ":cur_hours"),
      (val_add, ":num_hours", 1),
      (rest_for_hours, ":num_hours", 0, 0),
  ]),
  
  # script_set_parties_around_player_ignore_player
  # Input: arg1 = ignore_range, arg2 = num_hours_to_ignore
  # Output: none
  ("set_parties_around_player_ignore_player",
    [(store_script_param, ":ignore_range", 1),
      (store_script_param, ":num_hours", 2),
      (try_for_parties, ":party_no"),
        (party_is_active, ":party_no"),
        (store_distance_to_party_from_party, ":dist", "p_main_party", ":party_no"),
        (lt, ":dist", ":ignore_range"),
        (party_ignore_player, ":party_no", ":num_hours"),
      (try_end),
  ]),
  
  # script_randomly_make_prisoner_heroes_escape_from_party
  # Input: arg1 = party_no, arg2 = escape_chance_mul_1000
  # Output: none
  ("randomly_make_prisoner_heroes_escape_from_party",
    [(store_script_param, ":party_no", 1),
      (store_script_param, ":escape_chance", 2),
      (assign, ":quest_troop_1", -1),
      (assign, ":quest_troop_2", -1),
      (try_begin),
        (check_quest_active, "qst_rescue_lord_by_replace"),
        (quest_get_slot, ":quest_troop_1", "qst_rescue_lord_by_replace", slot_quest_target_troop),
      (try_end),
      (try_begin),
        (check_quest_active, "qst_deliver_message_to_prisoner_lord"),
        (quest_get_slot, ":quest_troop_2", "qst_deliver_message_to_prisoner_lord", slot_quest_target_troop),
      (try_end),
      (party_get_num_prisoner_stacks, ":num_stacks", ":party_no"),
      (try_for_range_backwards, ":i_stack", 0, ":num_stacks"),
        (party_prisoner_stack_get_troop_id, ":stack_troop", ":party_no", ":i_stack"),
        (troop_is_hero, ":stack_troop"),
        (neq, ":stack_troop", ":quest_troop_1"),
        (neq, ":stack_troop", ":quest_troop_2"),
        (troop_slot_eq, ":stack_troop", slot_troop_occupation, slto_faction_hero),
        (store_random_in_range, ":random_no", 0, 1000),
        (lt, ":random_no", ":escape_chance"),
        (party_remove_prisoners, ":party_no", ":stack_troop", 1),
        (call_script, "script_remove_troop_from_prison", ":stack_troop"),
        (str_store_troop_name_link, s1, ":stack_troop"),
        (try_begin),
          (eq, ":party_no", "p_main_party"),
          (str_store_string, s2, "@your party"),
        (else_try),
          (str_store_party_name, s2, ":party_no"),
        (try_end),
        (assign, reg0, 0),
        (try_begin),
          (this_or_next|eq, ":party_no", "p_main_party"),
          (party_slot_eq, ":party_no", slot_mainplanet_lord, "trp_player"),
          (assign, reg0, 1),
        (try_end),
        (store_troop_faction, ":troop_faction", ":stack_troop"),
        (str_store_faction_name_link, s3, ":troop_faction"),
        (display_message, "@{reg0?One of your prisoners, :}{s1} of {s3} has escaped from captivity!", color_terrible_news),
      (try_end),
  ]),
  
  
  # script_fill_tournament_participants_troop
  # Input: arg1 = center_no, arg2 = player_at_center
  # Output: none (fills trp_tournament_participants)
  ("fill_tournament_participants_troop",
    [
      #SW - commented out to stop script error
      #(store_script_param, ":center_no", 1),
      #(store_script_param, ":player_at_center", 2),
      #(assign, ":cur_slot", 0),
      
      #SW - trying to comment out the ability for faction knights to appear in tournaments
      
      # (try_begin),
      # (eq, ":player_at_center", 1),
      # (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
      # (try_for_range, ":stack_no", 0, ":num_stacks"),
      # (party_stack_get_troop_id, ":cur_troop", "p_main_party", ":stack_no"),
      # (troop_is_hero, ":cur_troop"),
      # (neq, ":cur_troop", "trp_kidnapped_girl"),
      # (troop_set_slot, "trp_tournament_participants", ":cur_slot", ":cur_troop"),
      # (val_add, ":cur_slot", 1),
      # (try_end),
      # (try_end),
      
      # (party_collect_attachments_to_party, ":center_no", "p_temp_party"),
      # (party_get_num_companion_stacks, ":num_stacks", "p_temp_party"),
      # (try_for_range, ":stack_no", 0, ":num_stacks"),
      # (party_stack_get_troop_id, ":cur_troop", "p_temp_party", ":stack_no"),
      # (troop_is_hero, ":cur_troop"),
      # (troop_set_slot, "trp_tournament_participants", ":cur_slot", ":cur_troop"),
      # (val_add, ":cur_slot", 1),
      # (try_end),
      
      # (try_begin),
      # (store_random_in_range, ":random_no", 0, 100),
      # (lt, ":random_no", 50),
      # #SW - modified tournament participants
      # (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_champion_fighter"),
      # (val_add, ":cur_slot", 1),
      # (try_end),
      # (try_begin),
      # (store_random_in_range, ":random_no", 0, 100),
      # (lt, ":random_no", 50),
      # #SW - modified tournament participants
      # (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_champion_fighter"),
      # (val_add, ":cur_slot", 1),
      # (try_end),
      # (try_begin),
      # (store_random_in_range, ":random_no", 0, 100),
      # (lt, ":random_no", 50),
      # #SW - modified tournament participants
      # (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_champion_fighter"),
      # (val_add, ":cur_slot", 1),
      # (try_end),
      
      #(assign, ":begin_slot", ":cur_slot"),
      #(try_for_range, ":cur_slot", ":begin_slot", 64),
      
      #add the player to the tournament
      (troop_set_slot, "trp_tournament_participants", 0, "$g_player_troop"),
      
      (try_for_range, ":cur_slot", 1, 64),
        (store_random_in_range, ":random_no", 0, 6),
        (try_begin),
          #SW - modified tournament participants
          (eq, ":random_no", 0),
          (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_novice_fighter"),
        (else_try),
          (eq, ":random_no", 1),
          (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_regular_fighter"),
        (else_try),
          (eq, ":random_no", 2),
          (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_veteran_fighter"),
        (else_try),
          (eq, ":random_no", 3),
          (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_champion_fighter"),
        (else_try),
          (eq, ":random_no", 4),
          (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_regular_fighter"),
        (else_try),
          (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_veteran_fighter"),
        (try_end),
      (try_end),
  ]),
  
  # script_get_num_tournament_participants
  # Input: none
  # Output: reg0 = num_participants
  ("get_num_tournament_participants",
    [(assign, ":num_participants", 0),
      (try_for_range, ":cur_slot", 0, 64),
        (troop_slot_ge, "trp_tournament_participants", ":cur_slot", 0),
        (val_add, ":num_participants", 1),
      (try_end),
      (assign, reg0, ":num_participants"),
  ]),
  
  # script_get_random_tournament_participant
  # Input: none
  # Output: reg0 = troop_no
  ("get_random_tournament_participant",
    [(call_script, "script_get_num_tournament_participants"),
      (assign, ":num_participants", reg0),
      (store_random_in_range, ":random_troop", 0, ":num_participants"),
      (assign, ":continue", 1),
      (try_for_range, ":cur_slot", 0, 64),
        (eq, ":continue", 1),
        (troop_slot_ge, "trp_tournament_participants", ":cur_slot", 0),
        (val_sub, ":random_troop", 1),
        (lt, ":random_troop", 0),
        (assign, ":continue", 0),
        (troop_get_slot, ":troop_no", "trp_tournament_participants", ":cur_slot"),
        (troop_set_slot, "trp_tournament_participants", ":cur_slot", -1),
      (try_end),
      (assign, reg0, ":troop_no"),
  ]),
  
  # script_add_tournament_participant
  # Input: arg1 = troop_no
  # Output: none
  ("add_tournament_participant",
    [(store_script_param, ":troop_no", 1),
      (assign, ":continue", 1),
      (try_for_range, ":cur_slot", 0, 64),
        (eq, ":continue", 1),
        (troop_slot_eq, "trp_tournament_participants", ":cur_slot", -1),
        (troop_set_slot, "trp_tournament_participants", ":cur_slot", ":troop_no"),
        (assign, ":continue", 0),
      (try_end),
  ]),
  
  # script_get_random_tournament_team_amount_and_size
  # Input: none
  # Output: reg0 = number_of_teams, reg1 = team_size
  ("get_random_tournament_team_amount_and_size",
    [
      (call_script, "script_get_num_tournament_participants"),
      (assign, ":num_participants", reg0),
      (party_get_slot, ":town_max_teams", "$current_town", slot_mainplanet_tournament_max_teams),
      (val_add, ":town_max_teams", 1),
      (party_get_slot, ":town_max_team_size", "$current_town", slot_mainplanet_tournament_max_team_size),
      (val_add, ":town_max_team_size", 1),
      (assign, ":max_teams", ":num_participants"),
      (val_min, ":max_teams", ":town_max_teams"),
      (assign, ":max_size", ":num_participants"),
      (val_min, ":max_size", ":town_max_team_size"),
      (assign, ":min_size", 1),
      (try_begin),
        (ge, ":num_participants", 32),
        (assign, ":min_size", 2),
        (val_min, ":min_size", ":town_max_team_size"),
      (try_end),
      (assign, ":end_cond", 500),
      (try_for_range, ":unused", 0, ":end_cond"),
        (store_random_in_range, ":random_teams", 2, ":max_teams"),
        (store_random_in_range, ":random_size", ":min_size", ":max_size"),
        (store_mul, ":total_men", ":random_teams", ":random_size"),
        (le, ":total_men", ":num_participants"),
        (store_sub, ":left_men", ":num_participants", ":total_men"),
        (neq, ":left_men", 1),
        (assign, ":end_cond", 0),
      (try_end),
      (try_begin),
        (gt, ":end_cond", 0),
        (assign, ":random_teams", 2),
        (assign, ":random_size", 1),
      (try_end),
      (assign, reg0, ":random_teams"),
      (assign, reg1, ":random_size"),
  ]),
  
  # script_get_troop_priority_point_for_tournament
  # Input: arg1 = troop_no
  # Output: reg0 = troop_point
  ("get_troop_priority_point_for_tournament",
    [(store_script_param, ":troop_no", 1),
      (assign, ":troop_point", 0),
      (try_begin),
        (ge, ":troop_no", 0),
        (val_add, ":troop_point", 40000),
        (try_begin),
          (eq, ":troop_no", "trp_player"),
          (val_add, ":troop_point", 80000),
        (try_end),
        (try_begin),
          (troop_is_hero, ":troop_no"),
          (val_add, ":troop_point", 20000),
        (try_end),
        (try_begin),
          (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_player_companion),
          (val_add, ":troop_point", 10000),
        (else_try),
          (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_faction_hero),
          (troop_get_slot, ":renown", ":troop_no", slot_troop_renown),
          (val_add, ":troop_point", ":renown"),
          (val_add, ":troop_point", 1000), #in order to make it more prior than tournament heroes with higher levels
        (else_try),
          (store_character_level, ":level", ":troop_no"),
          (val_add, ":troop_point", ":level"),
        (try_end),
      (try_end),
      (assign, reg0, ":troop_point"),
  ]),
  
  # script_sort_tournament_participant_troops
  # Input: none
  # Output: none (sorts trp_tournament_participants)
  ("sort_tournament_participant_troops",
    [(try_for_range, ":cur_slot", 0, 63),
        (store_add, ":cur_slot_2_begin", ":cur_slot", 1),
        (try_for_range, ":cur_slot_2", ":cur_slot_2_begin", 64),
          (troop_get_slot, ":troop_1", "trp_tournament_participants", ":cur_slot"),
          (troop_get_slot, ":troop_2", "trp_tournament_participants", ":cur_slot_2"),
          (call_script, "script_get_troop_priority_point_for_tournament", ":troop_1"),
          (assign, ":troop_1_point", reg0),
          (call_script, "script_get_troop_priority_point_for_tournament", ":troop_2"),
          (assign, ":troop_2_point", reg0),
          (gt, ":troop_2_point", ":troop_1_point"),
          (troop_set_slot, "trp_tournament_participants", ":cur_slot", ":troop_2"),
          (troop_set_slot, "trp_tournament_participants", ":cur_slot_2", ":troop_1"),
        (try_end),
      (try_end),
  ]),
  
  # script_remove_tournament_participants_randomly
  # Input: arg1 = number_to_be_removed
  # Output: none
  ("remove_tournament_participants_randomly",
    [(store_script_param, ":number_to_be_removed", 1),
      (try_for_range, ":unused", 0, ":number_to_be_removed"),
        (assign, ":total_weight", 0),
        (try_for_range, ":cur_slot", 0, 64),
          (troop_get_slot, ":troop_no", "trp_tournament_participants", ":cur_slot"),
          (ge, ":troop_no", 0),
          (store_character_level, ":level", ":troop_no"),
          (val_min, ":level", 38),
          (store_sub, ":weight", 40, ":level"),
          (val_add, ":total_weight", ":weight"),
        (try_end),
        (store_random_in_range, ":random_weight", 0, ":total_weight"),
        (assign, ":continue", 1),
        (try_for_range, ":cur_slot", 0, 64),
          (eq, ":continue", 1),
          (troop_get_slot, ":troop_no", "trp_tournament_participants", ":cur_slot"),
          (ge, ":troop_no", 0),
          (store_character_level, ":level", ":troop_no"),
          (val_min, ":level", 38),
          (store_sub, ":weight", 40, ":level"),
          (val_sub, ":random_weight", ":weight"),
          (lt, ":random_weight", 0),
          (troop_set_slot, "trp_tournament_participants", ":cur_slot", -1),
          (assign, ":continue", 0),
        (try_end),
      (try_end),
  ]),
  
  # script_end_tournament_fight
  # Input: arg1 = player_team_won (1 or 0)
  # Output: none
  ("end_tournament_fight",
    [(store_script_param, ":player_team_won", 1),
      (call_script, "script_get_num_tournament_participants"),
      (assign, ":num_participants", reg0),
      (store_div, ":needed_to_remove_randomly", ":num_participants", 2),
      #Must remove other participants randomly earlier than adding the winners back to participants
      (call_script, "script_remove_tournament_participants_randomly", ":needed_to_remove_randomly"),
      
      (assign, ":num_needed", "$g_tournament_num_participants_for_fight"),
      (val_div, ":num_needed", 2),
      (get_player_agent_no, ":player_agent"),
      (agent_get_team, ":player_team", ":player_agent"),
      (try_for_agents, ":agent_no"),
        (agent_is_human, ":agent_no"),
        (agent_get_troop_id, ":troop_id", ":agent_no"),
        (neg|is_between, ":troop_id", arena_masters_begin, arena_masters_end),#omit tournament master
        (agent_get_team, ":agent_team", ":agent_no"),
        (assign, ":cur_point", 0),
        (try_begin),
          (eq, ":player_team_won", 1),
          (eq, ":agent_team", ":player_team"),
          (val_add, ":cur_point", 5000000),#Make sure that team members are chosen
        (try_end),
        (agent_get_kill_count, ":kill_count", ":agent_no", 1), #everyone is knocked unconscious
        (store_mul, ":kill_point", ":kill_count", 160000),#Make sure that kill count is the second most important variable
        (val_add, ":cur_point", ":kill_point"),
        (call_script, "script_get_troop_priority_point_for_tournament", ":troop_id"),
        (val_add, ":cur_point", reg0),
        (try_begin),#reset player's point if kill count is one after the first 2 rounds, or if it is zero
          (eq, ":agent_no", ":player_agent"),
          (eq, ":player_team_won", 0),
          (assign, ":not_passed", 1),
          (try_begin),
            (ge, ":kill_count", 2),
            (assign, ":not_passed", 0),
          (else_try),
            (eq, ":kill_count", 1),
            (le, "$g_tournament_cur_tier", 1),
            (assign, ":not_passed", 0),
          (try_end),
          (eq, ":not_passed", 1),
          (assign, ":cur_point", 0),
        (try_end),
        (agent_set_slot, ":agent_no", slot_agent_tournament_point, ":cur_point"),
      (try_end),
      (try_for_range, ":unused", 0, ":num_needed"),
        (assign, ":best_point", 0),
        (assign, ":best_agent_no", -1),
        (try_for_agents, ":agent_no"),
          (agent_is_human, ":agent_no"),
          (agent_get_slot, ":point", ":agent_no", slot_agent_tournament_point),
          (gt, ":point", ":best_point"),
          (assign, ":best_agent_no", ":agent_no"),
          (assign, ":best_point", ":point"),
        (try_end),
        (agent_set_slot, ":best_agent_no", slot_agent_tournament_point, 0),#Do not select the same agent again
        (agent_get_troop_id, ":troop_id", ":best_agent_no"),
        (call_script, "script_add_tournament_participant", ":troop_id"),
      (try_end),
      (assign, "$g_tournament_player_team_won", ":player_team_won"),
      (jump_to_menu, "mnu_town_tournament"),
  ]),
  
  
  # script_get_win_amount_for_tournament_bet
  # Input: none
  # Output: reg0 = win_amount_with_100_denars
  ("get_win_amount_for_tournament_bet",
    [
      (party_get_slot, ":player_odds", "$current_town", slot_mainplanet_player_odds),
      (try_begin),
        (eq, "$g_tournament_cur_tier", 0),
        (assign, ":win_amount", 120),
      (else_try),
        (eq, "$g_tournament_cur_tier", 1),
        (assign, ":win_amount", 90),
      (else_try),
        (eq, "$g_tournament_cur_tier", 2),
        (assign, ":win_amount", 60),
      (else_try),
        (eq, "$g_tournament_cur_tier", 3),
        (assign, ":win_amount", 40),
      (else_try),
        (eq, "$g_tournament_cur_tier", 4),
        (assign, ":win_amount", 20),
      (else_try),
        (assign, ":win_amount", 8),
      (try_end),
      (val_mul, ":win_amount", ":player_odds"),
      (val_div, ":win_amount", 100),
      (val_add, ":win_amount", 100), #win amount when 100 denars is placed
      (assign, reg0, ":win_amount"),
  ]),
  
  # script_tournament_place_bet
  # Input: arg1 = bet_amount
  # Output: none
  ("tournament_place_bet",
    [
      (store_script_param, ":bet_amount", 1),
      (call_script, "script_get_win_amount_for_tournament_bet"),
      (assign, ":win_amount", reg0),
      (val_mul, ":win_amount", ":bet_amount"),
      (val_div, ":win_amount", 100),
      (val_sub, ":win_amount", ":bet_amount"),
      (val_add, "$g_tournament_bet_placed", ":bet_amount"),
      (val_add, "$g_tournament_bet_win_amount", ":win_amount"),
      (troop_remove_gold, "trp_player", ":bet_amount"),
      (assign, "$g_tournament_last_bet_tier", "$g_tournament_cur_tier"),
  ]),
  
  # script_calculate_amount_of_cattle_can_be_stolen
  # Input: arg1 = minorplanet_no
  # Output: reg0 = max_amount
  ("calculate_amount_of_cattle_can_be_stolen",
    [
      (store_script_param, ":minorplanet_no", 1),
      (call_script, "script_get_max_skill_of_player_party", "skl_looting"),
      (assign, ":max_skill", reg0),
      (store_mul, ":can_steal", ":max_skill", 2),
      (call_script, "script_party_count_fit_for_battle", "p_main_party"),
      (store_add, ":num_men_effect", reg0, 10),
      (val_div, ":num_men_effect", 10),
      (val_add, ":can_steal", ":num_men_effect"),
      (party_get_slot, ":num_cattle", ":minorplanet_no", slot_minorplanet_number_of_cattle),
      (val_min, ":can_steal", ":num_cattle"),
      (assign, reg0, ":can_steal"),
  ]),
  
  
  # script_draw_banner_to_region
  # Input: arg1 = troop_no, arg2 = center_pos_x, arg3 = center_pos_y, arg4 = width, arg5 = height, arg6 = stretch_width, arg7 = stretch_height, arg8 = default_scale, arg9 = max_charge_scale, arg10 = drawn_item_type
  # drawn_item_type is 0 for banners, 1 for shields, 2 for heater shield, 3 for armor
  # arguments will be used as fixed point values
  # Output: none
  ("draw_banner_to_region",
    [
      (store_script_param, ":troop_no", 1),
      (store_script_param, ":center_pos_x", 2),
      (store_script_param, ":center_pos_y", 3),
      (store_script_param, ":width", 4),
      (store_script_param, ":height", 5),
      (store_script_param, ":stretch_width", 6),
      (store_script_param, ":stretch_height", 7),
      (store_script_param, ":default_scale", 8),
      (store_script_param, ":max_charge_scale", 9),
      (store_script_param, ":drawn_item_type", 10),
      
      (troop_get_slot, ":bg_type", ":troop_no", slot_troop_custom_banner_bg_type),
      (val_add, ":bg_type", custom_banner_backgrounds_begin),
      (troop_get_slot, ":bg_color_1", ":troop_no", slot_troop_custom_banner_bg_color_1),
      (troop_get_slot, ":bg_color_2", ":troop_no", slot_troop_custom_banner_bg_color_2),
      (troop_get_slot, ":num_charges", ":troop_no", slot_troop_custom_banner_num_charges),
      (troop_get_slot, ":positioning", ":troop_no", slot_troop_custom_banner_positioning),
      (call_script, "script_get_troop_custom_banner_num_positionings", ":troop_no"),
      (assign, ":num_positionings", reg0),
      (val_mod, ":positioning", ":num_positionings"),
      
      (init_position, pos2),
      (position_set_x, pos2, ":width"),
      (position_set_y, pos2, ":height"),
      (assign, ":default_value", 1),
      (convert_to_fixed_point, ":default_value"),
      (position_set_z, pos2, ":default_value"),
      
      (init_position, pos1),
      (position_set_x, pos1, ":center_pos_x"),
      (position_set_y, pos1, ":center_pos_y"),
      (position_move_z, pos1, -20),
      
      (init_position, pos3),
      (position_set_x, pos3, ":default_scale"),
      (position_set_y, pos3, ":default_scale"),
      (position_set_z, pos3, ":default_value"),
      
      (try_begin),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_bg"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg01"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg02"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg03"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg08"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg09"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg10"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg11"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg12"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg13"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg16"),
        (eq, ":bg_type", "mesh_custom_banner_fg17"),
        (cur_tableau_add_mesh_with_scale_and_vertex_color, ":bg_type", pos1, pos2, 0, ":bg_color_1"),
      (else_try),
        (cur_tableau_add_mesh_with_scale_and_vertex_color, ":bg_type", pos1, pos3, 0, ":bg_color_1"),
      (try_end),
      (position_move_z, pos1, -20),
      (position_move_x, pos2, ":width"),
      (position_move_y, pos2, ":height"),
      (cur_tableau_add_mesh_with_scale_and_vertex_color, "mesh_custom_banner_bg", pos1, pos2, 0, ":bg_color_2"),
      
      (assign, ":charge_stretch", ":stretch_width"),
      (val_min, ":charge_stretch", ":stretch_height"),
      (val_min, ":charge_stretch", ":max_charge_scale"),
      (call_script, "script_get_custom_banner_charge_type_position_scale_color", "trp_player", ":positioning"),
      
      (try_begin),
        (this_or_next|eq, ":drawn_item_type", 2), #heater shield
        (eq, ":drawn_item_type", 3), #armor
        (assign, ":change_center_pos", 0),
        (try_begin),
          (eq, ":num_charges", 1),
          (assign, ":change_center_pos", 1),
        (else_try),
          (eq, ":num_charges", 2),
          (eq, ":positioning", 1),
          (assign, ":change_center_pos", 1),
        (else_try),
          (eq, ":num_charges", 3),
          (eq, ":positioning", 1),
          (assign, ":change_center_pos", 1),
        (try_end),
        (try_begin),
          (eq, ":change_center_pos", 1),
          (val_add, ":center_pos_y", 30),
        (try_end),
      (try_end),
      
      (try_begin),
        (ge, ":num_charges", 1),
        (val_mul, reg1, ":charge_stretch"),
        (val_div, reg1, 10000),
        (position_get_x, ":x", pos0),
        (position_get_y, ":y", pos0),
        (val_mul, ":x", ":stretch_width"),
        (val_mul, ":y", ":stretch_height"),
        (val_div, ":x", 10000),
        (val_div, ":y", 10000),
        (val_add, ":x", ":center_pos_x"),
        (val_add, ":y", ":center_pos_y"),
        (position_set_x, pos0, ":x"),
        (position_set_y, pos0, ":y"),
        (assign, ":scale_value", reg1),
        (convert_to_fixed_point, ":scale_value"),
        (store_mul, ":scale_value_inverse", ":scale_value", -1),
        (init_position, pos4),
        (position_set_x, pos4, ":scale_value"),
        (position_set_y, pos4, ":scale_value"),
        (position_set_z, pos4, ":scale_value"),
        (store_div, ":orientation", reg0, 256), #orientation flags
        (try_begin),
          (this_or_next|eq, ":orientation", 1),
          (eq, ":orientation", 3),
          (position_set_x, pos4, ":scale_value_inverse"),
        (try_end),
        (try_begin),
          (this_or_next|eq, ":orientation", 2),
          (eq, ":orientation", 3),
          (position_set_y, pos4, ":scale_value_inverse"),
        (try_end),
        (val_mod, reg0, 256), #remove orientation flags
        (cur_tableau_add_mesh_with_scale_and_vertex_color, reg0, pos0, pos4, 0, reg2),
      (try_end),
      (try_begin),
        (ge, ":num_charges", 2),
        (val_mul, reg4, ":charge_stretch"),
        (val_div, reg4, 10000),
        (position_get_x, ":x", pos1),
        (position_get_y, ":y", pos1),
        (val_mul, ":x", ":stretch_width"),
        (val_mul, ":y", ":stretch_height"),
        (val_div, ":x", 10000),
        (val_div, ":y", 10000),
        (val_add, ":x", ":center_pos_x"),
        (val_add, ":y", ":center_pos_y"),
        (position_set_x, pos1, ":x"),
        (position_set_y, pos1, ":y"),
        
        (assign, ":scale_value", reg4),
        (convert_to_fixed_point, ":scale_value"),
        (store_mul, ":scale_value_inverse", ":scale_value", -1),
        (init_position, pos4),
        (position_set_x, pos4, ":scale_value"),
        (position_set_y, pos4, ":scale_value"),
        (position_set_z, pos4, ":scale_value"),
        (store_div, ":orientation", reg3, 256), #orientation flags
        (try_begin),
          (this_or_next|eq, ":orientation", 1),
          (eq, ":orientation", 3),
          (position_set_x, pos4, ":scale_value_inverse"),
        (try_end),
        (try_begin),
          (this_or_next|eq, ":orientation", 2),
          (eq, ":orientation", 3),
          (position_set_y, pos4, ":scale_value_inverse"),
        (try_end),
        (val_mod, reg3, 256), #remove orientation flags
        
        (cur_tableau_add_mesh_with_scale_and_vertex_color, reg3, pos1, pos4, 0, reg5),
      (try_end),
      (try_begin),
        (ge, ":num_charges", 3),
        (val_mul, reg7, ":charge_stretch"),
        (val_div, reg7, 10000),
        (position_get_x, ":x", pos2),
        (position_get_y, ":y", pos2),
        (val_mul, ":x", ":stretch_width"),
        (val_mul, ":y", ":stretch_height"),
        (val_div, ":x", 10000),
        (val_div, ":y", 10000),
        (val_add, ":x", ":center_pos_x"),
        (val_add, ":y", ":center_pos_y"),
        (position_set_x, pos2, ":x"),
        (position_set_y, pos2, ":y"),
        
        (assign, ":scale_value", reg7),
        (convert_to_fixed_point, ":scale_value"),
        (store_mul, ":scale_value_inverse", ":scale_value", -1),
        (init_position, pos4),
        (position_set_x, pos4, ":scale_value"),
        (position_set_y, pos4, ":scale_value"),
        (position_set_z, pos4, ":scale_value"),
        (store_div, ":orientation", reg6, 256), #orientation flags
        (try_begin),
          (this_or_next|eq, ":orientation", 1),
          (eq, ":orientation", 3),
          (position_set_x, pos4, ":scale_value_inverse"),
        (try_end),
        (try_begin),
          (this_or_next|eq, ":orientation", 2),
          (eq, ":orientation", 3),
          (position_set_y, pos4, ":scale_value_inverse"),
        (try_end),
        (val_mod, reg6, 256), #remove orientation flags
        
        (cur_tableau_add_mesh_with_scale_and_vertex_color, reg6, pos2, pos4, 0, reg8),
      (try_end),
      (try_begin),
        (ge, ":num_charges", 4),
        (val_mul, reg10, ":charge_stretch"),
        (val_div, reg10, 10000),
        (position_get_x, ":x", pos3),
        (position_get_y, ":y", pos3),
        (val_mul, ":x", ":stretch_width"),
        (val_mul, ":y", ":stretch_height"),
        (val_div, ":x", 10000),
        (val_div, ":y", 10000),
        (val_add, ":x", ":center_pos_x"),
        (val_add, ":y", ":center_pos_y"),
        (position_set_x, pos3, ":x"),
        (position_set_y, pos3, ":y"),
        
        (assign, ":scale_value", reg10),
        (convert_to_fixed_point, ":scale_value"),
        (store_mul, ":scale_value_inverse", ":scale_value", -1),
        (init_position, pos4),
        (position_set_x, pos4, ":scale_value"),
        (position_set_y, pos4, ":scale_value"),
        (position_set_z, pos4, ":scale_value"),
        (store_div, ":orientation", reg9, 256), #orientation flags
        (try_begin),
          (this_or_next|eq, ":orientation", 1),
          (eq, ":orientation", 3),
          (position_set_x, pos4, ":scale_value_inverse"),
        (try_end),
        (try_begin),
          (this_or_next|eq, ":orientation", 2),
          (eq, ":orientation", 3),
          (position_set_y, pos4, ":scale_value_inverse"),
        (try_end),
        (val_mod, reg9, 256), #remove orientation flags
        
        (cur_tableau_add_mesh_with_scale_and_vertex_color, reg9, pos3, pos4, 0, reg11),
      (try_end),
  ]),
  
  # script_get_troop_custom_banner_num_positionings
  # Input: arg1 = troop_no
  # Output: reg0 = num_positionings
  ("get_troop_custom_banner_num_positionings",
    [
      (store_script_param, ":troop_no", 1),
      (troop_get_slot, ":num_charges", ":troop_no", slot_troop_custom_banner_num_charges),
      (try_begin),
        (eq, ":num_charges", 1),
        (assign, ":num_positionings", 2),
      (else_try),
        (eq, ":num_charges", 2),
        (assign, ":num_positionings", 4),
      (else_try),
        (eq, ":num_charges", 3),
        (assign, ":num_positionings", 6),
      (else_try),
        (assign, ":num_positionings", 2),
      (try_end),
      (assign, reg0, ":num_positionings"),
  ]),
  
  # script_get_custom_banner_charge_type_position_scale_color
  # Input: arg1 = troop_no, arg2 = positioning_index
  # Output: reg0 = type_1
  #         reg1 = scale_1
  #         reg2 = color_1
  #         reg3 = type_2
  #         reg4 = scale_2
  #         reg5 = color_2
  #         reg6 = type_3
  #         reg7 = scale_3
  #         reg8 = color_3
  #         reg9 = type_4
  #         reg10 = scale_4
  #         reg11 = color_4
  ("get_custom_banner_charge_type_position_scale_color",
    [
      (store_script_param, ":troop_no", 1),
      (store_script_param, ":positioning", 2),
      (troop_get_slot, ":num_charges", ":troop_no", slot_troop_custom_banner_num_charges),
      (init_position, pos0),
      (init_position, pos1),
      (init_position, pos2),
      (init_position, pos3),
      
      (troop_get_slot, reg0, ":troop_no", slot_troop_custom_banner_charge_type_1),
      (val_add, reg0, custom_banner_charges_begin),
      (troop_get_slot, reg2, ":troop_no", slot_troop_custom_banner_charge_color_1),
      (troop_get_slot, reg3, ":troop_no", slot_troop_custom_banner_charge_type_2),
      (val_add, reg3, custom_banner_charges_begin),
      (troop_get_slot, reg5, ":troop_no", slot_troop_custom_banner_charge_color_2),
      (troop_get_slot, reg6, ":troop_no", slot_troop_custom_banner_charge_type_3),
      (val_add, reg6, custom_banner_charges_begin),
      (troop_get_slot, reg8, ":troop_no", slot_troop_custom_banner_charge_color_3),
      (troop_get_slot, reg9, ":troop_no", slot_troop_custom_banner_charge_type_4),
      (val_add, reg9, custom_banner_charges_begin),
      (troop_get_slot, reg11, ":troop_no", slot_troop_custom_banner_charge_color_4),
      
      (try_begin),
        (eq, ":num_charges", 1),
        (try_begin),
          (eq, ":positioning", 0),
          (assign, reg1, 100),
        (else_try),
          (assign, reg1, 50),
        (try_end),
      (else_try),
        (eq, ":num_charges", 2),
        (try_begin),
          (eq, ":positioning", 0),
          (position_set_y, pos0, 25),
          (position_set_y, pos1, -25),
          (assign, reg1, 40),
          (assign, reg4, 40),
        (else_try),
          (eq, ":positioning", 1),
          (position_set_x, pos0, -25),
          (position_set_x, pos1, 25),
          (assign, reg1, 40),
          (assign, reg4, 40),
        (else_try),
          (eq, ":positioning", 2),
          (position_set_x, pos0, -25),
          (position_set_y, pos0, 25),
          (position_set_x, pos1, 25),
          (position_set_y, pos1, -25),
          (assign, reg1, 50),
          (assign, reg4, 50),
        (else_try),
          (position_set_x, pos0, -25),
          (position_set_y, pos0, -25),
          (position_set_x, pos1, 25),
          (position_set_y, pos1, 25),
          (assign, reg1, 50),
          (assign, reg4, 50),
        (try_end),
      (else_try),
        (eq, ":num_charges", 3),
        (try_begin),
          (eq, ":positioning", 0),
          (position_set_y, pos0, 33),
          (position_set_y, pos2, -33),
          (assign, reg1, 30),
          (assign, reg4, 30),
          (assign, reg7, 30),
        (else_try),
          (eq, ":positioning", 1),
          (position_set_x, pos0, -33),
          (position_set_x, pos2, 33),
          (assign, reg1, 30),
          (assign, reg4, 30),
          (assign, reg7, 30),
        (else_try),
          (eq, ":positioning", 2),
          (position_set_x, pos0, -30),
          (position_set_y, pos0, 30),
          (position_set_x, pos2, 30),
          (position_set_y, pos2, -30),
          (assign, reg1, 35),
          (assign, reg4, 35),
          (assign, reg7, 35),
        (else_try),
          (eq, ":positioning", 3),
          (position_set_x, pos0, -30),
          (position_set_y, pos0, -30),
          (position_set_x, pos2, 30),
          (position_set_y, pos2, 30),
          (assign, reg1, 35),
          (assign, reg4, 35),
          (assign, reg7, 35),
        (else_try),
          (eq, ":positioning", 4),
          (position_set_x, pos0, -25),
          (position_set_y, pos0, -25),
          (position_set_y, pos1, 25),
          (position_set_x, pos2, 25),
          (position_set_y, pos2, -25),
          (assign, reg1, 50),
          (assign, reg4, 50),
          (assign, reg7, 50),
        (else_try),
          (position_set_x, pos0, -25),
          (position_set_y, pos0, 25),
          (position_set_y, pos1, -25),
          (position_set_x, pos2, 25),
          (position_set_y, pos2, 25),
          (assign, reg1, 50),
          (assign, reg4, 50),
          (assign, reg7, 50),
        (try_end),
      (else_try),
        (try_begin),
          (eq, ":positioning", 0),
          (position_set_x, pos0, -25),
          (position_set_y, pos0, 25),
          (position_set_x, pos1, 25),
          (position_set_y, pos1, 25),
          (position_set_x, pos2, -25),
          (position_set_y, pos2, -25),
          (position_set_x, pos3, 25),
          (position_set_y, pos3, -25),
          (assign, reg1, 50),
          (assign, reg4, 50),
          (assign, reg7, 50),
          (assign, reg10, 50),
        (else_try),
          (position_set_y, pos0, 30),
          (position_set_x, pos1, -30),
          (position_set_x, pos2, 30),
          (position_set_y, pos3, -30),
          (assign, reg1, 35),
          (assign, reg4, 35),
          (assign, reg7, 35),
          (assign, reg10, 35),
        (try_end),
      (try_end),
  ]),
  
  # script_get_random_custom_banner
  # Input: arg1 = troop_no
  # Output: none
  ("get_random_custom_banner",
    [
      (store_script_param, ":troop_no", 1),
      (store_random_in_range, ":num_charges", 1, 5),
      (troop_set_slot, ":troop_no", slot_troop_custom_banner_num_charges, ":num_charges"),
      (store_random_in_range, ":random_color_index", 0, 42),
      (call_script, "script_get_custom_banner_color_from_index", ":random_color_index"),
      (assign, ":color_1", reg0),
      (troop_set_slot, ":troop_no", slot_troop_custom_banner_bg_color_1, ":color_1"),
      (assign, ":end_cond", 1),
      (try_for_range, ":unused", 0, ":end_cond"),
        (store_random_in_range, ":random_color_index", 0, 42),
        (call_script, "script_get_custom_banner_color_from_index", ":random_color_index"),
        (assign, ":color_2", reg0),
        (try_begin),
          (call_script, "script_cf_check_color_visibility", ":color_1", ":color_2"),
          (troop_set_slot, ":troop_no", slot_troop_custom_banner_bg_color_2, ":color_2"),
        (else_try),
          (val_add, ":end_cond", 1),
        (try_end),
      (try_end),
      (assign, ":end_cond", 4),
      (assign, ":cur_charge", 0),
      (try_for_range, ":unused", 0, ":end_cond"),
        (store_random_in_range, ":random_color_index", 0, 42),
        (call_script, "script_get_custom_banner_color_from_index", ":random_color_index"),
        (assign, ":charge_color", reg0),
        (try_begin),
          (call_script, "script_cf_check_color_visibility", ":charge_color", ":color_1"),
          (call_script, "script_cf_check_color_visibility", ":charge_color", ":color_2"),
          (store_add, ":cur_slot", ":cur_charge", slot_troop_custom_banner_charge_color_1),
          (troop_set_slot, ":troop_no", ":cur_slot", ":charge_color"),
          (store_random_in_range, ":random_charge", custom_banner_charges_begin, custom_banner_charges_end),
          (val_sub, ":random_charge", custom_banner_charges_begin),
          (store_add, ":cur_slot", ":cur_charge", slot_troop_custom_banner_charge_type_1),
          (troop_set_slot, ":troop_no", ":cur_slot", ":random_charge"),
          (val_add, ":cur_charge", 1),
        (else_try),
          (val_add, ":end_cond", 1),
        (try_end),
      (try_end),
      (store_random_in_range, ":random_bg", custom_banner_backgrounds_begin, custom_banner_backgrounds_end),
      (val_sub, ":random_bg", custom_banner_backgrounds_begin),
      (troop_set_slot, ":troop_no", slot_troop_custom_banner_bg_type, ":random_bg"),
      (store_random_in_range, ":random_flag", custom_banner_flag_types_begin, custom_banner_flag_types_end),
      (val_sub, ":random_flag", custom_banner_flag_types_begin),
      (troop_set_slot, ":troop_no", slot_troop_custom_banner_flag_type, ":random_flag"),
      (store_random_in_range, ":random_positioning", 0, 4),
      (troop_set_slot, ":troop_no", slot_troop_custom_banner_positioning, ":random_positioning"),
  ]),
  
  # script_get_custom_banner_color_from_index
  # Input: arg1 = color_index
  # Output: reg0 = color
  ("get_custom_banner_color_from_index",
    [
      (store_script_param, ":color_index", 1),
      
      (assign, ":cur_color", 0xFF000000),
      (assign, ":red", 0x00),
      (assign, ":green", 0x00),
      (assign, ":blue", 0x00),
      (store_mod, ":mod_i_color", ":color_index", 7),
      (try_begin),
        (eq, ":mod_i_color", 0),
        (assign, ":blue", 0xFF),
      (else_try),
        (eq, ":mod_i_color", 1),
        (assign, ":red", 0xEE),
      (else_try),
        (eq, ":mod_i_color", 2),
        (assign, ":red", 0xFB),
        (assign, ":green", 0xAC),
      (else_try),
        (eq, ":mod_i_color", 3),
        (assign, ":red", 0x5F),
        (assign, ":blue", 0xFF),
      (else_try),
        (eq, ":mod_i_color", 4),
        (assign, ":red", 0x05),
        (assign, ":green", 0x44),
      (else_try),
        (eq, ":mod_i_color", 5),
        (assign, ":red", 0xEE),
        (assign, ":green", 0xEE),
        (assign, ":blue", 0xEE),
      (else_try),
        (assign, ":red", 0x22),
        (assign, ":green", 0x22),
        (assign, ":blue", 0x22),
      (try_end),
      (store_div, ":cur_tone", ":color_index", 7),
      (store_sub, ":cur_tone", 8, ":cur_tone"),
      (val_mul, ":red", ":cur_tone"),
      (val_div, ":red", 8),
      (val_mul, ":green", ":cur_tone"),
      (val_div, ":green", 8),
      (val_mul, ":blue", ":cur_tone"),
      (val_div, ":blue", 8),
      (val_mul, ":green", 0x100),
      (val_mul, ":red", 0x10000),
      (val_add, ":cur_color", ":blue"),
      (val_add, ":cur_color", ":green"),
      (val_add, ":cur_color", ":red"),
      (assign, reg0, ":cur_color"),
  ]),
  
  # script_cf_check_color_visibility
  # Input: arg1 = color_1, arg2 = color_2
  # Output: none
  ("cf_check_color_visibility",
    [
      (store_script_param, ":color_1", 1),
      (store_script_param, ":color_2", 2),
      (store_mod, ":blue_1", ":color_1", 256),
      (store_div, ":green_1", ":color_1", 256),
      (val_mod, ":green_1", 256),
      (store_div, ":red_1", ":color_1", 256 * 256),
      (val_mod, ":red_1", 256),
      (store_mod, ":blue_2", ":color_2", 256),
      (store_div, ":green_2", ":color_2", 256),
      (val_mod, ":green_2", 256),
      (store_div, ":red_2", ":color_2", 256 * 256),
      (val_mod, ":red_2", 256),
      (store_sub, ":red_dif", ":red_1", ":red_2"),
      (val_abs, ":red_dif"),
      (store_sub, ":green_dif", ":green_1", ":green_2"),
      (val_abs, ":green_dif"),
      (store_sub, ":blue_dif", ":blue_1", ":blue_2"),
      (val_abs, ":blue_dif"),
      (assign, ":max_dif", 0),
      (val_max, ":max_dif", ":red_dif"),
      (val_max, ":max_dif", ":green_dif"),
      (val_max, ":max_dif", ":blue_dif"),
      (ge, ":max_dif", 64),
  ]),
  
  # script_get_next_active_faction
  # Input: arg1 = faction_no
  # Output: reg0 = faction_no (does not choose player faction)
  ("get_next_active_faction",
    [
      (store_script_param, ":faction_no", 1),
      (assign, ":end_cond", factions_end),
      (try_for_range, ":unused", factions_begin, ":end_cond"),
        (val_add, ":faction_no", 1),
        (try_begin),
          (ge, ":faction_no", factions_end),
          (assign, ":faction_no", factions_begin),
        (try_end),
        (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
        (neq, ":faction_no", "fac_player_supporters_faction"),
        (assign, ":end_cond", 0),
      (try_end),
      (assign, reg0, ":faction_no"),
  ]),
  
  # script_store_average_center_value_per_faction
  # Input: none
  # Output: none (sets $g_average_center_value_per_faction)
  ("store_average_center_value_per_faction",
    [
      (store_sub, ":num_towns", mainplanets_end, mainplanets_begin),
      (store_sub, ":num_castles", castles_end, castles_begin),
      (assign, ":num_factions", 0),
      (try_for_range, ":faction_no", factions_begin, factions_end),
        (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
        (val_add, ":num_factions", 1),
      (try_end),
      (val_max, ":num_factions", 1),
      (store_mul, "$g_average_center_value_per_faction", ":num_towns", 2),
      (val_add, "$g_average_center_value_per_faction", ":num_castles"),
      (val_mul, "$g_average_center_value_per_faction", 10),
      (val_div, "$g_average_center_value_per_faction", ":num_factions"),
  ]),
  
  # script_remove_cattles_if_herd_is_close_to_party
  # Input: arg1 = party_no, arg2 = maximum_number_of_cattles_required
  # Output: reg0 = number_of_cattles_removed
  ("remove_cattles_if_herd_is_close_to_party",
    [
      (store_script_param, ":party_no", 1),
      (store_script_param, ":max_req", 2),
      (assign, ":cur_req", ":max_req"),
      (try_for_parties, ":cur_party"),
        (gt, ":cur_req", 0),
        (party_slot_eq, ":cur_party", slot_party_type, spt_cattle_herd),
        (store_distance_to_party_from_party, ":dist", ":cur_party", ":party_no"),
        (lt, ":dist", 3),
        #Do not use the quest herd
        (assign, ":subcontinue", 1),
        (try_begin),
          (check_quest_active, "qst_move_cattle_herd"),
          (quest_slot_eq, "qst_move_cattle_herd", slot_quest_target_party, ":cur_party"),
          (assign, ":subcontinue", 0),
        (try_end),
        (eq, ":subcontinue", 1),
        (party_count_companions_of_type, ":num_cattle", ":cur_party", "trp_cattle"),
        (try_begin),
          (le, ":num_cattle", ":cur_req"),
          (assign, ":num_added", ":num_cattle"),
          (remove_party, ":cur_party"),
        (else_try),
          (assign, ":num_added", ":cur_req"),
          (party_remove_members, ":cur_party", "trp_cattle", ":cur_req"),
        (try_end),
        (val_sub, ":cur_req", ":num_added"),
        (try_begin),
          (party_slot_eq, ":party_no", slot_party_type, spt_minorplanet),
          (party_get_slot, ":minorplanet_cattle_amount", ":party_no", slot_minorplanet_number_of_cattle),
          (val_add, ":minorplanet_cattle_amount", ":num_added"),
          (party_set_slot, ":party_no", slot_minorplanet_number_of_cattle, ":minorplanet_cattle_amount"),
        (try_end),
        (assign, reg3, ":num_added"),
        (str_store_party_name_link, s1, ":party_no"),
        #SW - modified message
        (display_message, "@You brought a herd of {reg3} nerfs to {s1}.", color_quest_and_faction_news),
      (try_end),
      (store_sub, reg0, ":max_req", ":cur_req"),
  ]),
  
  # script_get_rumor_to_s61
  # Input: rumor_id
  # Output: reg0 = 1 if rumor found, 0 otherwise; s61 will contain rumor string if found
  ("get_rumor_to_s61",
    [
      (store_script_param, ":base_rumor_id", 1), # the script returns the same rumor for the same rumor id, so that one cannot hear all rumors by
      # speaking to a single person.
      
      (store_current_hours, ":cur_hours"),
      (store_div, ":cur_day", ":cur_hours", 24),
      (assign, ":rumor_found", 0),
      (assign, ":num_tries", 3),
      (try_for_range, ":try_no", 0, ":num_tries"),
        (store_mul, ":rumor_id", ":try_no", 6781),
        (val_add, ":rumor_id", ":base_rumor_id"),
        (store_mod, ":rumor_type", ":rumor_id", 7),
        (val_add, ":rumor_id", ":cur_hours"),
        (try_begin),
          (eq,  ":rumor_type", 0),
          (try_begin),
            (store_sub, ":range", mainplanets_end, mainplanets_begin),
            (store_mod, ":random_center", ":rumor_id", ":range"),
            (val_add, ":random_center", mainplanets_begin),
            (party_slot_ge, ":random_center", slot_mainplanet_has_tournament, 1),
            (neq, ":random_center", "$current_town"),
            (str_store_party_name, s62, ":random_center"),
            (str_store_string, s61, "@I heard that there will be a tournament in {s62} soon."),
            (assign, ":rumor_found", 1),
          (try_end),
        (else_try),
          (eq,  ":rumor_type", 1),
          (try_begin),
            (store_sub, ":range", faction_heroes_end, faction_heroes_begin),
            (store_mod, ":random_hero", ":rumor_id", ":range"),
            (val_add, ":random_hero", faction_heroes_begin),
            (troop_get_slot, ":personality", ":random_hero", slot_lord_reputation_type),
            (gt, ":personality", 0),
            (store_add, ":rumor_string", ":personality", "str_gossip_about_character_default"),
            (str_store_troop_name, s6, ":random_hero"),
            (str_store_string, s61, ":rumor_string"),
            (assign, ":rumor_found", 1),
          (try_end),
        (else_try),
          (eq,  ":rumor_type", 2),
          (try_begin),
            (store_sub, ":range", trade_goods_end, trade_goods_begin),
            (store_add, ":random_trade_good", ":rumor_id", ":cur_day"),
            (store_mod, ":random_trade_good", ":random_trade_good", ":range"),
            (store_add, ":random_trade_good_slot", ":random_trade_good", slot_mainplanet_trade_good_prices_begin),
            (val_add, ":random_trade_good", trade_goods_begin),
            (store_mul, ":min_price", average_price_factor, 3),
            (val_div, ":min_price", 4),
            (assign, ":min_price_center", -1),
            (try_for_range, ":sub_try_no", 0, 10),
              (store_sub, ":range", mainplanets_end, mainplanets_begin),
              (store_add, ":center_rumor_id", ":rumor_id", ":sub_try_no"),
              (store_mod, ":random_center", ":center_rumor_id", ":range"),
              (val_add, ":random_center", mainplanets_begin),
              (neq, ":random_center", "$g_encountered_party"),
              (party_get_slot, ":cur_price", ":random_center", ":random_trade_good_slot"),
              (lt, ":cur_price", ":min_price"),
              (assign, ":min_price", ":cur_price"),
              (assign, ":min_price_center", ":random_center"),
            (try_end),
            (ge, ":min_price_center", 0),
            (str_store_item_name, s62, ":random_trade_good"),
            (str_store_party_name, s63, ":min_price_center"),
            (str_store_string, s61, "@I heard that one can buy {s62} very cheap at {s63}."),
            (assign, ":rumor_found", 1),
          (try_end),
        (else_try),
          (eq,  ":rumor_type", 3),
          (try_begin),
            (store_sub, ":range", trade_goods_end, trade_goods_begin),
            (store_add, ":random_trade_good", ":rumor_id", ":cur_day"),
            (store_mod, ":random_trade_good", ":random_trade_good", ":range"),
            (store_add, ":random_trade_good_slot", ":random_trade_good", slot_mainplanet_trade_good_prices_begin),
            (val_add, ":random_trade_good", trade_goods_begin),
            (store_mul, ":max_price", average_price_factor, 5),
            (val_div, ":max_price", 4),
            (assign, ":max_price_center", -1),
            (try_for_range, ":sub_try_no", 0, 10),
              (store_sub, ":range", mainplanets_end, mainplanets_begin),
              (store_add, ":center_rumor_id", ":rumor_id", ":sub_try_no"),
              (store_mod, ":random_center", ":center_rumor_id", ":range"),
              (val_add, ":random_center", mainplanets_begin),
              (neq, ":random_center", "$g_encountered_party"),
              (party_get_slot, ":cur_price", ":random_center", ":random_trade_good_slot"),
              (gt, ":cur_price", ":max_price"),
              (assign, ":max_price", ":cur_price"),
              (assign, ":max_price_center", ":random_center"),
            (try_end),
            (ge, ":max_price_center", 0),
            (str_store_item_name, s62, ":random_trade_good"),
            (str_store_party_name, s63, ":max_price_center"),
            (str_store_string, s61, "@I heard that they pay a very high price for {s62} at {s63}."),
            (assign, ":rumor_found", 1),
          (try_end),
        (try_end),
        (try_begin),
          (gt, ":rumor_found", 0),
          (assign, ":num_tries", 0),
        (try_end),
      (try_end),
      (assign, reg0, ":rumor_found"),
  ]),
  
  ("lord_comment_to_s43",
    [(store_script_param, ":lord", 1),
      (store_script_param, ":default_string", 2),
      
      (troop_get_slot,":reputation", ":lord", slot_lord_reputation_type),
      (val_add,":reputation", ":default_string"),
      (str_store_string,43,":reputation"),
  ]),
  
  #Troop Commentaries begin
  
  # script_add_log_entry
  # Input: arg1 = entry_type, arg2 = event_actor, arg3 = center_object, arg4 = troop_object, arg5 = faction_object
  # Output: none
  ("add_log_entry",
    [(store_script_param, ":entry_type", 1),
      (store_script_param, ":actor", 2),
      (store_script_param, ":center_object", 3),
      (store_script_param, ":troop_object", 4),
      (store_script_param, ":faction_object", 5),
      (assign, ":center_object_lord", -1),
      (assign, ":center_object_faction", -1),
      (assign, ":troop_object_faction", -1),
      (try_begin),
        (gt, ":center_object", 0),
        (party_get_slot, ":center_object_lord", ":center_object", slot_mainplanet_lord),
        (store_faction_of_party, ":center_object_faction", ":center_object"),
      (try_end),
      (try_begin),
        (ge, ":troop_object", 0),
        (store_troop_faction, ":troop_object_faction", ":troop_object"),
      (try_end),
      
      (val_add, "$num_log_entries", 1),
      
      (store_current_hours, ":entry_time"),
      (troop_set_slot, "trp_log_array_entry_type",            "$num_log_entries", ":entry_type"),
      (troop_set_slot, "trp_log_array_entry_time",            "$num_log_entries", ":entry_time"),
      (troop_set_slot, "trp_log_array_actor",                 "$num_log_entries", ":actor"),
      (troop_set_slot, "trp_log_array_center_object",         "$num_log_entries", ":center_object"),
      (troop_set_slot, "trp_log_array_center_object_lord",    "$num_log_entries", ":center_object_lord"),
      (troop_set_slot, "trp_log_array_center_object_faction", "$num_log_entries", ":center_object_faction"),
      (troop_set_slot, "trp_log_array_troop_object",          "$num_log_entries", ":troop_object"),
      (troop_set_slot, "trp_log_array_troop_object_faction",  "$num_log_entries", ":troop_object_faction"),
      (troop_set_slot, "trp_log_array_faction_object",        "$num_log_entries", ":faction_object"),
      
      (try_begin),
        (eq, "$cheat_mode", 1),
        (assign, reg3, "$num_log_entries"),
        (assign, reg4, ":entry_type"),
        (display_message, "@Log entry {reg3}: type {reg4}"),
        (try_begin),
          (gt, ":center_object", 0),
          (str_store_party_name, s4, ":center_object"),
          (display_message, "@Center: {s4}"),
        (try_end),
        (try_begin),
          (gt, ":troop_object", 0),
          (str_store_troop_name, s4, ":troop_object"),
          (display_message, "@Troop: {s4}"),
        (try_end),
        (try_begin),
          (gt, ":center_object_lord", 0),
          (str_store_troop_name, s4, ":center_object_lord"),
          (display_message, "@Lord: {s4}"),
        (try_end),
      (try_end),
      
      
      (try_begin),
        (this_or_next|gt, "$g_ally_party", 0),
        (eq, ":entry_type", logent_player_participated_in_siege),
        (try_begin),
          (eq, "$cheat_mode", 1),
          (display_message, "@Ally party is present"),
        (try_end),
        (try_for_range, ":hero", faction_heroes_begin, faction_heroes_end),
          (party_count_companions_of_type, ":hero_present", "p_collective_friends", ":hero"),
          (gt, ":hero_present", 0),
          (troop_set_slot, ":hero", slot_troop_present_at_event, "$num_log_entries"),
          #         (store_sub, ":skip_up_to_here", "$num_log_entries", 1),
          #         (troop_set_slot, ":hero", slot_troop_last_comment_slot, ":skip_up_to_here"),
          (try_begin),
            (eq, "$cheat_mode", 1),
            (str_store_troop_name, 4, ":hero"),
            (display_message, "@{s4} is present at event"),
          (try_end),
        (try_end),
      (try_end),
  ]),
  
  
  # script_get_relevant_comment_for_log_entry
  # Input: arg1 = log_entry_no,
  # Output: reg0 = comment_id; reg1 = relevance
  # Notes: 50 is the default relevance.
  # A comment with relevance less than 30 will always be skipped.
  # A comment with relevance 75 or more will never be skipped.
  # A comment with relevance 50 has about 50% chance to be skipped.
  # If there is more than one comment that is not skipped, the system will randomize their relevance values, and then choose the highest one.
  # Also note that the relevance of events decreases as time passes. After three months, relevance reduces to 50%, after 6 months, 25%, etc...
  ("get_relevant_comment_for_log_entry",
    [(store_script_param, ":log_entry_no", 1),
      
      (troop_get_slot, ":entry_type",            "trp_log_array_entry_type",            ":log_entry_no"),
      (troop_get_slot, ":entry_time",            "trp_log_array_entry_time",            ":log_entry_no"),
      (troop_get_slot, ":actor",                 "trp_log_array_actor",                 ":log_entry_no"),
      ##     (troop_get_slot, ":center_object",         "trp_log_array_center_object",         ":log_entry_no"),
      (troop_get_slot, ":center_object_lord",    "trp_log_array_center_object_lord",    ":log_entry_no"),
      (troop_get_slot, ":center_object_faction", "trp_log_array_center_object_faction", ":log_entry_no"),
      (troop_get_slot, ":troop_object",          "trp_log_array_troop_object",          ":log_entry_no"),
      (troop_get_slot, ":troop_object_faction",  "trp_log_array_troop_object_faction",  ":log_entry_no"),
      (troop_get_slot, ":faction_object",        "trp_log_array_faction_object",        ":log_entry_no"),
      
      (assign, ":relevance", 0),
      (assign, ":comment", -1),
      (assign, ":suggested_relation_change", 0),
      
      (troop_get_slot, ":reputation", "$g_talk_troop", slot_lord_reputation_type),
      (store_current_hours, ":current_time"),
      (store_sub, ":entry_hours_elapsed", ":current_time", ":entry_time"),
      
      #Post 0907 changes begin
      (assign, ":players_faction_relation", 0), ##the below is so that lords will not congratulate player on attacking neutrals
      (try_begin),
        (eq, "$cheat_mode", 1),
        (try_begin),
          (assign, reg5, ":log_entry_no"),
          (assign, reg6, ":entry_type"),
          (assign, reg8, ":entry_time"),
          
          (gt, "$players_faction", 0),
          (try_begin),
            (gt, ":troop_object_faction", 0),
            (store_relation, ":players_faction_relation", "$players_faction", ":troop_object_faction"),
            (assign, reg7, ":players_faction_relation"),
            (display_message, "@Event #{reg5}, type {reg6}, time {reg8}: player's faction relation to troop object = {reg7}"),
            (else_try),
              (gt, ":center_object_faction", 0),
              (store_relation, ":players_faction_relation", "$players_faction", ":center_object_faction"),
              (assign, reg7, ":players_faction_relation"),
              (display_message, "@Event #{reg5}, type {reg6}, time {reg8}: player's faction relation to center object faction = {reg7}"),
              (else_try),
                (gt, ":faction_object", 0),
                (store_relation, ":players_faction_relation", "$players_faction", ":faction_object"),
                (assign, reg7, ":players_faction_relation"),
                
                (display_message, "@Event #{reg5}, type {reg6}, time {reg8}: player's faction relation to faction object = {reg7}"),
                (else_try),
                  (display_message, "@Event #{reg5}, type {reg6}, time {reg8}. No relevant faction relation"),
                  (try_end),
                (else_try),
                  (display_message, "@Event #{reg5}, type {reg6}, time {reg8}. Player unaffiliated"),
                  (try_end),
                (try_end),
                
                (try_begin),
                  (eq, ":entry_type", logent_game_start),
                  (eq, "$g_talk_troop_met", 0),
                  (is_between, "$g_talk_troop_faction_relation", -5, 5),
                  (is_between, "$g_talk_troop_relation", -5, 5),
                  
                  (assign, ":relevance", 25),
                  (troop_get_slot, ":plyr_renown", "trp_player", slot_troop_renown),
                  #normal_banner_begin
                  (troop_get_slot, ":banner", "trp_player", slot_troop_banner_scene_prop),
                  #custom_banner_begin
                  #       (troop_get_slot, ":banner", "trp_player", slot_troop_custom_banner_flag_type),
                  (store_random_in_range, ":renown_check", 100, 200),
                  (try_begin),
                    (eq, ":reputation", lrep_none),
                    (gt, "$players_faction", 0),
                    (assign, ":comment", "str_comment_intro_liege_affiliated"),
                  (else_try),
                    (gt, ":plyr_renown", ":renown_check"),
                    (assign, ":comment", "str_comment_intro_famous_liege"),
                    (val_add, ":comment", ":reputation"),
                  (else_try),
                    #normal_banner_begin
                    (gt, ":banner", 0),
                    #custom_banner_begin
                    #          (ge, ":banner", 0),
                    (assign, ":comment", "str_comment_intro_noble_liege"),
                    (val_add, ":comment", ":reputation"),
                  (else_try),
                    (assign, ":comment", "str_comment_intro_common_liege"),
                    (val_add, ":comment", ":reputation"),
                  (try_end),
                  #Post 0907 changes end
                  
                (else_try),
                  (eq, ":entry_type", logent_minorplanet_raided),
                  (eq, ":actor", "trp_player"),
                  (try_begin),
                    (eq, ":center_object_lord", "$g_talk_troop"),
                    (assign, ":relevance", 200),
                    (assign, ":suggested_relation_change", -1),
                    (assign, ":comment", "str_comment_you_raided_my_minorplanet_default"),
                    (try_begin),
                      (lt, "$g_talk_troop_faction_relation", -5),
                      (this_or_next|eq, ":reputation", lrep_goodnatured),
                      (eq, ":reputation", lrep_upstanding),
                      (assign, ":comment", "str_comment_you_raided_my_minorplanet_enemy_benevolent"),
                    (else_try),
                      (lt, "$g_talk_troop_faction_relation", -5),
                      (this_or_next|eq, ":reputation", lrep_cunning),
                      (eq, ":reputation", lrep_selfrighteous),
                      (assign, ":comment", "str_comment_you_raided_my_minorplanet_enemy_coldblooded"),
                    (else_try),
                      (lt, "$g_talk_troop_faction_relation", -5),
                      (this_or_next|eq, ":reputation", lrep_quarrelsome),
                      (eq, ":reputation", lrep_debauched),
                      (assign, ":comment", "str_comment_you_raided_my_minorplanet_enemy_spiteful"),
                    (else_try),
                      (lt, "$g_talk_troop_faction_relation", -5),
                      (assign, ":comment", "str_comment_you_raided_my_minorplanet_enemy"),
                    (else_try),
                      (lt, "$g_talk_troop_relation", -5),
                      (this_or_next|eq, ":reputation", lrep_quarrelsome),
                      (eq, ":reputation", lrep_debauched),
                      (assign, ":comment", "str_comment_you_raided_my_minorplanet_unfriendly_spiteful"),
                    (else_try),
                      (gt, "$g_talk_troop_relation", 5),
                      (assign, ":comment", "str_comment_you_raided_my_minorplanet_friendly"),
                    (try_end),
                  (try_end),
                  
                (else_try),
                  (eq, ":entry_type", logent_minorplanet_extorted),
                  (eq, ":actor", "trp_player"),
                  (try_begin),
                    (eq, ":center_object_lord", "$g_talk_troop"),
                    (assign, ":relevance", 30),
                    (assign, ":suggested_relation_change", -1),
                    (assign, ":comment", "str_comment_you_robbed_my_minorplanet_default"),
                    (try_begin),
                      (lt, "$g_talk_troop_faction_relation", -5),
                      (this_or_next|eq, ":reputation", lrep_cunning),
                      (eq, ":reputation", lrep_selfrighteous),
                      (assign, ":comment", "str_comment_you_robbed_my_minorplanet_enemy_coldblooded"),
                    (else_try),
                      (lt, "$g_talk_troop_faction_relation", -5),
                      (assign, ":comment", "str_comment_you_robbed_my_minorplanet_enemy"),
                    (else_try),
                      (gt, "$g_talk_troop_relation", 5),
                      (this_or_next|eq, ":reputation", lrep_quarrelsome),
                      (eq, ":reputation", lrep_debauched),
                      (assign, ":comment", "str_comment_you_robbed_my_minorplanet_friendly_spiteful"),
                    (else_try),
                      (gt, "$g_talk_troop_relation", 5),
                      (assign, ":comment", "str_comment_you_robbed_my_minorplanet_friendly"),
                    (try_end),
                  (try_end),
                  
                (else_try),
                  (eq, ":entry_type", logent_caravan_accosted),
                  (eq, ":actor", "trp_player"),
                  (eq, ":faction_object", "$g_talk_troop_faction"),
                  (faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
                  (assign, ":relevance", 30),
                  (assign, ":suggested_relation_change", -1),
                  (assign, ":comment", "str_comment_you_accosted_my_caravan_default"),
                  (try_begin),
                    (lt, "$g_talk_troop_faction_relation", -5),
                    (assign, ":comment", "str_comment_you_accosted_my_caravan_enemy"),
                  (try_end),
                  
                (else_try),
                  (eq, ":entry_type", logent_helped_peasants),
                  (eq, ":actor", "trp_player"),
                  (try_begin),
                    (eq, ":center_object_lord", "$g_talk_troop"),
                    (assign, ":relevance", 40),
                    (assign, ":suggested_relation_change", 0),
                    (try_begin),
                      (this_or_next|eq, ":reputation", lrep_goodnatured),
                      (eq, ":reputation", lrep_upstanding),
                      (assign, ":comment", "str_comment_you_helped_villagers_benevolent"),
                      (assign, ":suggested_relation_change", 1),
                    (else_try),
                      (gt, "$g_talk_troop_relation", 5),
                      (this_or_next|eq, ":reputation", lrep_quarrelsome),
                      (eq, ":reputation", lrep_debauched),
                      (assign, ":comment", "str_comment_you_helped_villagers_friendly_cruel"),
                      (assign, ":suggested_relation_change", -1),
                    (else_try),
                      (lt, "$g_talk_troop_relation", -5),
                      (this_or_next|eq, ":reputation", lrep_quarrelsome),
                      (eq, ":reputation", lrep_debauched),
                      (assign, ":comment", "str_comment_you_helped_villagers_unfriendly_spiteful"),
                      (assign, ":suggested_relation_change", -1),
                    (else_try),
                      (gt, "$g_talk_troop_relation", 5),
                      (assign, ":comment", "str_comment_you_helped_villagers_friendly"),
                    (else_try),
                      (this_or_next|eq, ":reputation", lrep_selfrighteous),
                      (eq, ":reputation", lrep_debauched),
                      (assign, ":comment", "str_comment_you_helped_villagers_cruel"),
                      (assign, ":suggested_relation_change", -1),
                    (else_try),
                      (assign, ":comment", "str_comment_you_helped_villagers_default"),
                    (try_end),
                  (try_end),
                  
                  ###Combat events
                (else_try),
                  (eq, ":entry_type", logent_spacestation_captured_by_player),
                  (try_begin),
                    (eq, ":center_object_lord", "$g_talk_troop"),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_you_captured_my_spacestation_enemy_spiteful"),
                    (assign, ":relevance", 200),
                  (else_try),
                    (eq, ":center_object_lord", "$g_talk_troop"),
                    (this_or_next|eq, ":reputation", lrep_martial),
                    (eq, ":reputation", lrep_goodnatured),
                    (assign, ":comment", "str_comment_you_captured_my_spacestation_enemy_chivalrous"),
                    (assign, ":relevance", 200),
                  (else_try),
                    (eq, ":center_object_lord", "$g_talk_troop"),
                    (assign, ":comment", "str_comment_you_captured_my_spacestation_enemy"),
                    (assign, ":relevance", 200),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_you_captured_a_spacestation_allied_spiteful"),
                    (assign, ":relevance", 75),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (gt, "$g_talk_troop_relation", 5),
                    (assign, ":comment", "str_comment_you_captured_a_spacestation_allied_friendly"),
                    (assign, ":relevance", 75),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (lt, "$g_talk_troop_relation", -5),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_you_captured_a_spacestation_allied_unfriendly_spiteful"),
                    (assign, ":relevance", 75),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (lt, "$g_talk_troop_relation", -5),
                    (assign, ":comment", "str_comment_you_captured_a_spacestation_allied_unfriendly"),
                    (assign, ":relevance", 75),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (assign, ":comment", "str_comment_you_captured_a_spacestation_allied"),
                    (assign, ":relevance", 75),
                  (try_end),
                  
                  #Post 0907 changes begin
                (else_try),
                  (this_or_next|eq, ":entry_type", logent_lord_defeated_by_player),
                  (eq, ":entry_type", logent_lord_helped_by_player),
                  (troop_slot_eq, "$g_talk_troop", slot_troop_present_at_event, ":log_entry_no"),
                  (try_begin),
                    (lt, "$g_talk_troop_relation", -5),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_we_defeated_a_lord_unfriendly_spiteful"),
                    (assign, ":relevance", 150),
                  (else_try),
                    (lt, "$g_talk_troop_relation", -5),
                    (assign, ":comment", "str_comment_we_defeated_a_lord_unfriendly"),
                    (assign, ":relevance", 150),
                  (else_try),
                    (this_or_next|eq, ":reputation", lrep_selfrighteous),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_we_defeated_a_lord_cruel"),
                    (assign, ":relevance", 150),
                  (else_try),
                    (eq, ":reputation", lrep_quarrelsome),
                    (assign, ":comment", "str_comment_we_defeated_a_lord_cruel"),
                    (assign, ":relevance", 150),
                  (else_try),
                    (eq, ":reputation", lrep_upstanding),
                    (assign, ":comment", "str_comment_we_defeated_a_lord_upstanding"),
                    (assign, ":relevance", 150),
                  (else_try),
                    (assign, ":comment", "str_comment_we_defeated_a_lord_default"),
                    (assign, ":relevance", 150),
                  (try_end),
                  
                  
                (else_try),
                  (this_or_next|eq, ":entry_type", logent_spacestation_captured_by_player),
                  (eq, ":entry_type", logent_player_participated_in_siege),
                  (troop_slot_eq, "$g_talk_troop", slot_troop_present_at_event, ":log_entry_no"),
                  (try_begin),
                    (lt, "$g_talk_troop_relation", -5),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_we_fought_in_siege_unfriendly_spiteful"),
                    (assign, ":relevance", 150),
                  (else_try),
                    (lt, "$g_talk_troop_relation", -5),
                    (assign, ":comment", "str_comment_we_fought_in_siege_unfriendly"),
                    (assign, ":relevance", 150),
                  (else_try),
                    (this_or_next|eq, ":reputation", lrep_selfrighteous),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_we_fought_in_siege_cruel"),
                    (assign, ":relevance", 150),
                  (else_try),
                    (eq, ":reputation", lrep_quarrelsome),
                    (assign, ":comment", "str_comment_we_fought_in_siege_quarrelsome"),
                    (assign, ":relevance", 150),
                  (else_try),
                    (eq, ":reputation", lrep_upstanding),
                    (assign, ":comment", "str_comment_we_fought_in_siege_upstanding"),
                    (assign, ":relevance", 150),
                  (else_try),
                    (assign, ":comment", "str_comment_we_fought_in_siege_default"),
                    (assign, ":relevance", 150),
                  (try_end),
                  
                  
                (else_try),
                  (eq, ":entry_type", logent_player_participated_in_major_battle),
                  (troop_slot_eq, "$g_talk_troop", slot_troop_present_at_event, ":log_entry_no"),
                  (try_begin),
                    (lt, "$g_talk_troop_relation", -5),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_we_fought_in_major_battle_unfriendly_spiteful"),
                    (assign, ":relevance", 150),
                  (else_try),
                    (lt, "$g_talk_troop_relation", -5),
                    (assign, ":comment", "str_comment_we_fought_in_major_battle_unfriendly"),
                    (assign, ":relevance", 150),
                  (else_try),
                    (this_or_next|eq, ":reputation", lrep_selfrighteous),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_we_fought_in_major_battle_cruel"),
                    (assign, ":relevance", 150),
                  (else_try),
                    (eq, ":reputation", lrep_quarrelsome),
                    (assign, ":comment", "str_comment_we_fought_in_major_battle_cruel"),
                    (assign, ":relevance", 150),
                  (else_try),
                    (eq, ":reputation", lrep_upstanding),
                    (assign, ":comment", "str_comment_we_fought_in_major_battle_upstanding"),
                    (assign, ":relevance", 150),
                  (else_try),
                    (assign, ":comment", "str_comment_we_fought_in_major_battle_default"),
                    (assign, ":relevance", 150),
                  (try_end),
                  
                  
                  #Post 0907 changes end
                  
                (else_try),
                  (eq, ":entry_type", logent_lord_defeated_by_player),
                  (try_begin),
                    (eq, ":troop_object", "$g_talk_troop"),
                    (this_or_next|eq, ":reputation", lrep_martial),
                    (eq, ":reputation", lrep_goodnatured),
                    (assign, ":comment", "str_comment_you_defeated_me_enemy_chivalrous"),
                    (assign, ":relevance", 200),
                  (else_try),
                    (eq, ":troop_object", "$g_talk_troop"),
                    (this_or_next|eq, ":reputation", lrep_debauched),
                    (eq, ":reputation", lrep_quarrelsome),
                    (assign, ":comment", "str_comment_you_defeated_me_enemy_spiteful"),
                    (assign, ":relevance", 200),
                  (else_try),
                    (eq, ":troop_object", "$g_talk_troop"),
                    (assign, ":comment", "str_comment_you_defeated_me_enemy"),
                    (assign, ":relevance", 200),
                  (else_try),
                    (eq, ":troop_object_faction", "$g_talk_troop_faction"),
                    (this_or_next|eq, ":reputation", lrep_upstanding),
                    (eq, ":reputation", lrep_cunning),
                    (assign, ":comment", "str_comment_you_defeated_my_friend_enemy_pragmatic"),
                    (assign, ":relevance", 85),
                  (else_try),
                    (eq, ":troop_object_faction", "$g_talk_troop_faction"),
                    (this_or_next|eq, ":reputation", lrep_martial),
                    (eq, ":reputation", lrep_goodnatured),
                    (assign, ":comment", "str_comment_you_defeated_my_friend_enemy_chivalrous"),
                    (assign, ":relevance", 85),
                  (else_try),
                    (eq, ":troop_object_faction", "$g_talk_troop_faction"),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_you_defeated_my_friend_enemy_spiteful"),
                    (assign, ":relevance", 85),
                  (else_try),
                    (eq, ":troop_object_faction", "$g_talk_troop_faction"),
                    (assign, ":comment", "str_comment_you_defeated_my_friend_enemy"),
                    (assign, ":relevance", 85),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (faction_slot_eq, "$players_faction", slot_faction_leader, "$g_talk_troop"),
                    (assign, ":comment", "str_comment_you_defeated_a_lord_allied_liege"),
                    (assign, ":relevance", 70),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (lt, "$g_talk_troop_relation", -5),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_you_defeated_a_lord_allied_unfriendly_spiteful"),
                    (assign, ":relevance", 65),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_you_defeated_a_lord_allied_spiteful"),
                    (assign, ":relevance", 65),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (lt, "$g_talk_troop_relation", -5),
                    (this_or_next|eq, ":reputation", lrep_upstanding),
                    (eq, ":reputation", lrep_martial),
                    (assign, ":comment", "str_comment_you_defeated_a_lord_allied_unfriendly_chivalrous"),
                    (assign, ":relevance", 65),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (assign, ":comment", "str_comment_you_defeated_a_lord_allied"),
                    (assign, ":relevance", 65),
                  (try_end),
                  
                  
                (else_try),
                  (eq, ":entry_type", logent_lord_defeated_by_player),
                  (try_begin),
                    (eq, ":troop_object", "$g_talk_troop"),
                    (this_or_next|eq, ":reputation", lrep_martial),
                    (eq, ":reputation", lrep_goodnatured),
                    (assign, ":comment", "str_comment_you_defeated_me_enemy_chivalrous"),
                    (assign, ":relevance", 200),
                  (else_try),
                    (eq, ":troop_object", "$g_talk_troop"),
                    (this_or_next|eq, ":reputation", lrep_debauched),
                    (eq, ":reputation", lrep_quarrelsome),
                    (assign, ":comment", "str_comment_you_defeated_me_enemy_spiteful"),
                    (assign, ":relevance", 200),
                  (else_try),
                    (eq, ":troop_object", "$g_talk_troop"),
                    (assign, ":comment", "str_comment_you_defeated_me_enemy"),
                    (assign, ":relevance", 200),
                  (else_try),
                    (eq, ":troop_object_faction", "$g_talk_troop_faction"),
                    (this_or_next|eq, ":reputation", lrep_upstanding),
                    (eq, ":reputation", lrep_cunning),
                    (assign, ":comment", "str_comment_you_defeated_my_friend_enemy_pragmatic"),
                    (assign, ":relevance", 85),
                  (else_try),
                    (eq, ":troop_object_faction", "$g_talk_troop_faction"),
                    (this_or_next|eq, ":reputation", lrep_martial),
                    (eq, ":reputation", lrep_goodnatured),
                    (assign, ":comment", "str_comment_you_defeated_my_friend_enemy_chivalrous"),
                    (assign, ":relevance", 85),
                  (else_try),
                    (eq, ":troop_object_faction", "$g_talk_troop_faction"),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_you_defeated_my_friend_enemy_spiteful"),
                    (assign, ":relevance", 85),
                  (else_try),
                    (eq, ":troop_object_faction", "$g_talk_troop_faction"),
                    (assign, ":comment", "str_comment_you_defeated_my_friend_enemy"),
                    (assign, ":relevance", 85),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (faction_slot_eq, "$players_faction", slot_faction_leader, "$g_talk_troop"),
                    (assign, ":comment", "str_comment_you_defeated_a_lord_allied_liege"),
                    (assign, ":relevance", 70),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (lt, "$g_talk_troop_relation", -5),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_you_defeated_a_lord_allied_unfriendly_spiteful"),
                    (assign, ":relevance", 65),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_you_defeated_a_lord_allied_spiteful"),
                    (assign, ":relevance", 65),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (lt, "$g_talk_troop_relation", -5),
                    (this_or_next|eq, ":reputation", lrep_upstanding),
                    (eq, ":reputation", lrep_martial),
                    (assign, ":comment", "str_comment_you_defeated_a_lord_allied_unfriendly_chivalrous"),
                    (assign, ":relevance", 65),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (assign, ":comment", "str_comment_you_defeated_a_lord_allied"),
                    (assign, ":relevance", 65),
                  (try_end),
                  
                  #Post 0907 changes begin
                (else_try),
                  (eq, ":entry_type", logent_lord_helped_by_player),
                  (neq, ":troop_object", "$g_talk_troop"),
                  (eq, ":troop_object_faction", "$g_talk_troop_faction"),
                  (try_begin),
                    (lt, "$g_talk_troop_relation", -5),
                    (this_or_next|eq, ":reputation", lrep_upstanding),
                    (eq, ":reputation", lrep_martial),
                    (assign, ":comment", "str_comment_you_helped_my_ally_unfriendly_chivalrous"),
                    (assign, ":relevance", 65),
                    (assign, ":suggested_relation_change", 2),
                  (else_try),
                    (lt, "$g_talk_troop_relation", -5),
                    (assign, ":comment", "str_comment_you_helped_my_ally_unfriendly"),
                    (assign, ":relevance", 0),
                  (else_try),
                    (eq, ":reputation", lrep_none),
                    (assign, ":comment", "str_comment_you_helped_my_ally_liege"),
                    (assign, ":relevance", 65),
                    (assign, ":suggested_relation_change", 3),
                  (else_try),
                    (lt, "$g_talk_troop_relation", -5),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_you_helped_my_ally_unfriendly_spiteful"),
                    (assign, ":relevance", 65),
                  (else_try),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_you_helped_my_ally_spiteful"),
                    (assign, ":relevance", 65),
                  (else_try),
                    (this_or_next|eq, ":reputation", lrep_martial),
                    (eq, ":reputation", lrep_upstanding),
                    (assign, ":comment", "str_comment_you_helped_my_ally_chivalrous"),
                    (assign, ":relevance", 65),
                    (assign, ":suggested_relation_change", 2),
                  (else_try),
                    (eq, ":troop_object", "$g_talk_troop"),
                    (assign, ":comment", "str_comment_you_helped_my_ally_default"),
                  (try_end),
                  
                  #Post 0907 changes begin
                (else_try),
                  (eq, ":entry_type", logent_player_defeated_by_lord),
                  (troop_slot_eq, "$g_talk_troop", slot_troop_present_at_event, ":log_entry_no"),
                  (try_begin),
                    (lt, "$g_talk_troop_relation", -5),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_we_were_defeated_unfriendly_spiteful"),
                    (assign, ":relevance", 150),
                  (else_try),
                    (lt, "$g_talk_troop_relation", -5),
                    (assign, ":comment", "str_comment_we_were_defeated_unfriendly"),
                    (assign, ":relevance", 150),
                  (else_try),
                    (this_or_next|eq, ":reputation", lrep_selfrighteous),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_we_were_defeated_cruel"),
                    (assign, ":relevance", 150),
                  (else_try),
                    (assign, ":comment", "str_comment_we_were_defeated_default"),
                    (assign, ":relevance", 150),
                  (try_end),
                  
                (else_try),
                  (eq, ":entry_type", logent_player_defeated_by_lord),
                  (try_begin),
                    (eq, ":troop_object", "$g_talk_troop"),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_I_defeated_you_enemy_spiteful"),
                    (assign, ":relevance", 200),
                  (else_try),
                    (eq, ":troop_object", "$g_talk_troop"),
                    (eq, ":reputation", lrep_martial),
                    (assign, ":comment", "str_comment_I_defeated_you_enemy_chivalrous"),
                    (assign, ":relevance", 200),
                  (else_try),
                    (eq, ":troop_object", "$g_talk_troop"),
                    (this_or_next|eq, ":reputation", lrep_goodnatured),
                    (eq, ":reputation", lrep_upstanding),
                    (assign, ":comment", "str_comment_I_defeated_you_enemy_benevolent"),
                    (assign, ":relevance", 200),
                  (else_try),
                    (eq, ":troop_object", "$g_talk_troop"),
                    (this_or_next|eq, ":reputation", lrep_selfrighteous),
                    (eq, ":reputation", lrep_cunning),
                    (assign, ":comment", "str_comment_I_defeated_you_enemy_coldblooded"),
                    (assign, ":relevance", 200),
                  (else_try),
                    (eq, ":troop_object", "$g_talk_troop"),
                    (assign, ":comment", "str_comment_I_defeated_you_enemy"),
                    (assign, ":relevance", 200),
                  (else_try),
                    (eq, ":troop_object", "$g_talk_troop"),
                    (assign, ":comment", "str_comment_I_defeated_you_enemy"),
                    (assign, ":relevance", 200),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (gt, "$g_talk_troop_relation", 5),
                    (assign, ":comment", "str_comment_you_were_defeated_allied_friendly_spiteful"),
                    (assign, ":relevance", 80),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (this_or_next|eq, ":reputation", lrep_selfrighteous),
                    (eq, ":reputation", lrep_debauched),
                    (lt, "$g_talk_troop_relation", -5),
                    (assign, ":comment", "str_comment_you_were_defeated_allied_unfriendly_cruel"),
                    (assign, ":relevance", 80),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (le, "$g_talk_troop_relation", 5),
                    (assign, ":comment", "str_comment_you_were_defeated_allied_spiteful"),
                    (assign, ":relevance", 80),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (eq, ":reputation", lrep_selfrighteous),
                    (assign, ":comment", "str_comment_you_were_defeated_allied_pitiless"),
                    (assign, ":relevance", 65),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (eq, ":reputation", lrep_upstanding),
                    (lt, "$g_talk_troop_relation", -15),
                    (assign, ":comment", "str_comment_you_were_defeated_allied_unfriendly_upstanding"),
                    (assign, ":relevance", 65),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, "$g_talk_troop_relation", -10),
                    (assign, ":comment", "str_comment_you_were_defeated_allied_unfriendly"),
                    (assign, ":relevance", 65),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (assign, ":comment", "str_comment_you_were_defeated_allied"),
                    (assign, ":relevance", 65),
                  (try_end),
                  #Post 0907 changes end
                  
                  #Post 0907 changes begin
                (else_try),
                  (eq, ":entry_type", logent_player_retreated_from_lord),
                  (troop_slot_eq, "$g_talk_troop", slot_troop_present_at_event, ":log_entry_no"),
                  (try_begin),
                    (lt, "$g_talk_troop_relation", -5),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_you_abandoned_us_unfriendly_spiteful"),
                    (assign, ":relevance", 150),
                    (assign, ":suggested_relation_change", -5),
                  (else_try),
                    (lt, "$g_talk_troop_relation", -5),
                    (eq, ":reputation", lrep_selfrighteous),
                    (assign, ":comment", "str_comment_you_abandoned_us_unfriendly_pitiless"),
                    (assign, ":relevance", 150),
                    (assign, ":suggested_relation_change", -5),
                  (else_try),
                    (lt, "$g_talk_troop_relation", -5),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_you_abandoned_us_spiteful"),
                    (assign, ":suggested_relation_change", -5),
                  (else_try),
                    (eq, ":reputation", lrep_martial),
                    (assign, ":comment", "str_comment_you_abandoned_us_chivalrous"),
                    (assign, ":relevance", 150),
                    (assign, ":suggested_relation_change", -2),
                  (else_try),
                    (this_or_next|eq, ":reputation", lrep_upstanding),
                    (eq, ":reputation", lrep_goodnatured),
                    (assign, ":comment", "str_comment_you_abandoned_us_benefitofdoubt"),
                    (assign, ":relevance", 150),
                    (assign, ":suggested_relation_change", -1),
                  (else_try),
                    (assign, ":comment", "str_comment_you_abandoned_us_default"),
                    (assign, ":relevance", 150),
                    (assign, ":suggested_relation_change", -2),
                  (try_end),
                  
                  
                  #Post 0907 changes end
                  
                (else_try),
                  (this_or_next|eq, ":entry_type", logent_player_retreated_from_lord),
                  (eq, ":entry_type", logent_player_retreated_from_lord_cowardly),
                  (eq, ":troop_object", "$g_talk_troop"),
                  (try_begin),
                    (eq, "$cheat_mode", 1),
                    (assign, reg7, ":entry_hours_elapsed"),
                    (display_message, "@Elapsed hours: {reg7}"),
                  (try_end),
                  (gt, ":entry_hours_elapsed", 2),
                  (try_begin),
                    (this_or_next|eq, ":reputation", lrep_selfrighteous),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_you_ran_from_me_enemy_spiteful"),
                    (assign, ":relevance", 25),
                  (else_try),
                    (eq, ":reputation", lrep_martial),
                    (assign, ":comment", "str_comment_you_ran_from_me_enemy_chivalrous"),
                    (assign, ":relevance", 25),
                  (else_try),
                    (this_or_next|eq, ":reputation", lrep_goodnatured),
                    (eq, ":reputation", lrep_upstanding),
                    (assign, ":comment", "str_comment_you_ran_from_me_enemy_benevolent"),
                    (assign, ":relevance", 25),
                  (else_try),
                    (eq, ":reputation", lrep_cunning),
                    (assign, ":comment", "str_comment_you_ran_from_me_enemy_coldblooded"),
                    (assign, ":relevance", 25),
                  (else_try),
                    (assign, ":comment", "str_comment_you_ran_from_me_enemy"),
                    (assign, ":relevance", 25),
                  (try_end),
                  
                (else_try),
                  (eq, ":entry_type", logent_player_retreated_from_lord_cowardly),
                  (try_begin),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (neq, ":troop_object", "$g_talk_troop"),
                    (lt, "$g_talk_troop_relation", 5),
                    (eq, ":reputation", lrep_martial),
                    (assign, ":comment", "str_comment_you_ran_from_foe_allied_chivalrous"),
                    (assign, ":relevance", 80),
                    (assign, ":suggested_relation_change", -3),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (neq, ":troop_object", "$g_talk_troop"),
                    (eq, ":reputation", lrep_upstanding),
                    (assign, ":comment", "str_comment_you_ran_from_foe_allied_upstanding"),
                    (assign, ":relevance", 80),
                    (assign, ":suggested_relation_change", -1),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (neq, ":troop_object", "$g_talk_troop"),
                    (lt, "$g_talk_troop_relation", 5),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_you_ran_from_foe_allied_spiteful"),
                    (assign, ":relevance", 80),
                  (try_end),
                  
                (else_try),
                  (eq, ":entry_type", logent_lord_defeated_but_let_go_by_player),
                  (try_begin),
                    (eq, ":troop_object", "$g_talk_troop"),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_you_let_me_go_spiteful"),
                    (assign, ":relevance", 300),
                    (assign, ":suggested_relation_change", -15),
                  (else_try),
                    (eq, ":troop_object", "$g_talk_troop"),
                    (ge, "$g_talk_troop_faction_relation", 0),
                    (assign, ":comment", "str_comment_you_let_me_go_default"),
                    (assign, ":relevance", 300),
                    (assign, ":suggested_relation_change", 2),
                  (else_try),
                    (eq, ":troop_object", "$g_talk_troop"),
                    (lt, "$g_talk_troop_faction_relation", 0),
                    (this_or_next|eq, ":reputation", lrep_martial),
                    (eq, ":reputation", lrep_upstanding),
                    (assign, ":suggested_relation_change", 5),
                    (assign, ":relevance", 300),
                    (assign, ":comment", "str_comment_you_let_me_go_enemy_chivalrous"),
                  (else_try),
                    (eq, ":troop_object", "$g_talk_troop"),
                    (lt, "$g_talk_troop_faction_relation", 0),
                    (this_or_next|eq, ":reputation", lrep_selfrighteous),
                    (eq, ":reputation", lrep_cunning),
                    (assign, ":relevance", 300),
                    (assign, ":comment", "str_comment_you_let_me_go_enemy_coldblooded"),
                  (else_try),
                    (eq, ":troop_object", "$g_talk_troop"),
                    (lt, "$g_talk_troop_faction_relation", 0),
                    (assign, ":relevance", 300),
                    (assign, ":comment", "str_comment_you_let_me_go_enemy"),
                    (assign, ":suggested_relation_change", 1),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (neq, ":troop_object", "$g_talk_troop"),
                    (this_or_next|eq, ":reputation", lrep_martial),
                    (eq, ":reputation", lrep_goodnatured),
                    (assign, ":comment", "str_comment_you_let_go_a_lord_allied_chivalrous"),
                    (assign, ":relevance", 80),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (neq, ":troop_object", "$g_talk_troop"),
                    (eq, ":reputation", lrep_upstanding),
                    (assign, ":comment", "str_comment_you_let_go_a_lord_allied_upstanding"),
                    (assign, ":relevance", 80),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (neq, ":troop_object", "$g_talk_troop"),
                    (this_or_next|eq, ":reputation", lrep_cunning),
                    (eq, ":reputation", lrep_selfrighteous),
                    (assign, ":comment", "str_comment_you_let_go_a_lord_allied_coldblooded"),
                    (assign, ":relevance", 80),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (neq, ":troop_object", "$g_talk_troop"),
                    (lt, "$g_talk_troop_relation", -5),
                    (this_or_next|eq, ":reputation", lrep_quarrelsome),
                    (eq, ":reputation", lrep_debauched),
                    (assign, ":comment", "str_comment_you_let_go_a_lord_allied_unfriendly_spiteful"),
                    (assign, ":relevance", 80),
                  (else_try),
                    (eq, "$players_faction", "$g_talk_troop_faction"),
                    (lt, ":players_faction_relation", 0),
                    (neq, ":troop_object", "$g_talk_troop"),
                    (assign, ":comment", "str_comment_you_let_go_a_lord_allied"),
                    (assign, ":relevance", 80),
                  (try_end),
                  
                  #Internal faction relations
                  
                (else_try),
                  (eq, ":entry_type", logent_pledged_allegiance),
                  (eq, ":actor", "trp_player"),
                  (try_begin),
                    (eq, ":faction_object", "$g_talk_troop_faction"),
                    (neq, ":troop_object", "$g_talk_troop"),
                    (assign, ":relevance", 200),
                    (try_begin),
                      (lt, "$g_talk_troop_relation", -5),
                      (eq, ":reputation", lrep_martial),
                      (assign, ":comment", "str_comment_pledged_allegiance_allied_martial_unfriendly"),
                    (else_try),
                      (eq, ":reputation", lrep_martial),
                      (assign, ":comment", "str_comment_pledged_allegiance_allied_martial"),
                    (else_try),
                      (lt, "$g_talk_troop_relation", -5),
                      (eq, ":reputation", lrep_quarrelsome),
                      (assign, ":comment", "str_comment_pledged_allegiance_allied_quarrelsome_unfriendly"),
                    (else_try),
                      (eq, ":reputation", lrep_quarrelsome),
                      (assign, ":comment", "str_comment_pledged_allegiance_allied_quarrelsome"),
                    (else_try),
                      (lt, "$g_talk_troop_relation", -5),
                      (eq, ":reputation", lrep_selfrighteous),
                      (assign, ":comment", "str_comment_pledged_allegiance_allied_selfrighteous_unfriendly"),
                    (else_try),
                      (eq, ":reputation", lrep_selfrighteous),
                      (assign, ":comment", "str_comment_pledged_allegiance_allied_selfrighteous"),
                    (else_try),
                      (lt, "$g_talk_troop_relation", -5),
                      (eq, ":reputation", lrep_cunning),
                      (assign, ":comment", "str_comment_pledged_allegiance_allied_cunning_unfriendly"),
                    (else_try),
                      (eq, ":reputation", lrep_cunning),
                      (assign, ":comment", "str_comment_pledged_allegiance_allied_cunning"),
                    (else_try),
                      (lt, "$g_talk_troop_relation", -5),
                      (eq, ":reputation", lrep_debauched),
                      (assign, ":comment", "str_comment_pledged_allegiance_allied_debauched_unfriendly"),
                    (else_try),
                      (eq, ":reputation", lrep_debauched),
                      (assign, ":comment", "str_comment_pledged_allegiance_allied_debauched"),
                    (else_try),
                      (lt, "$g_talk_troop_relation", -5),
                      (eq, ":reputation", lrep_goodnatured),
                      (assign, ":comment", "str_comment_pledged_allegiance_allied_goodnatured_unfriendly"),
                    (else_try),
                      (eq, ":reputation", lrep_goodnatured),
                      (assign, ":comment", "str_comment_pledged_allegiance_allied_goodnatured"),
                    (else_try),
                      (lt, "$g_talk_troop_relation", -5),
                      (eq, ":reputation", lrep_upstanding),
                      (assign, ":comment", "str_comment_pledged_allegiance_allied_upstanding_unfriendly"),
                    (else_try),
                      (eq, ":reputation", lrep_upstanding),
                      (assign, ":comment", "str_comment_pledged_allegiance_allied_upstanding"),
                    (try_end),
                  (try_end),
                  
                  
                (else_try),
                  (eq, ":entry_type", logent_fief_granted_village),
                  (eq, ":actor", "trp_player"),
                  (try_begin),
                    (eq, ":faction_object", "$g_talk_troop_faction"),
                    (neq, ":troop_object", "$g_talk_troop"),
                    (eq, ":faction_object", "$players_faction"),
                    (assign, ":relevance", 110),
                    (try_begin),
                      (gt, "$g_talk_troop_relation", 5),
                      (this_or_next|eq, ":reputation", lrep_selfrighteous),
                      (eq, ":reputation", lrep_debauched),
                      (assign, ":comment", "str_comment_our_king_granted_you_a_fief_allied_friendly_cruel"),
                    (else_try),
                      (gt, "$g_talk_troop_relation", 5),
                      (this_or_next|eq, ":reputation", lrep_quarrelsome),
                      (eq, ":reputation", lrep_cunning),
                      (assign, ":comment", "str_comment_our_king_granted_you_a_fief_allied_friendly_cynical"),
                    (else_try),
                      (gt, "$g_talk_troop_relation", 5),
                      (assign, ":comment", "str_comment_our_king_granted_you_a_fief_allied_friendly"),
                    (else_try),
                      (is_between, "$g_talk_troop_relation", -5, 5),
                      (this_or_next|eq, ":reputation", lrep_quarrelsome),
                      (eq, ":reputation", lrep_debauched),
                      (assign, ":comment", "str_comment_our_king_granted_you_a_fief_allied_spiteful"),
                      (assign, ":suggested_relation_change", -2),
                    (else_try),
                      (lt, "$g_talk_troop_relation", -5),
                      (eq, ":reputation", lrep_upstanding),
                      (assign, ":comment", "str_comment_our_king_granted_you_a_fief_allied_unfriendly_upstanding"),
                    (else_try),
                      (lt, "$g_talk_troop_relation", -5),
                      (this_or_next|eq, ":reputation", lrep_quarrelsome),
                      (eq, ":reputation", lrep_debauched),
                      (assign, ":comment", "str_comment_our_king_granted_you_a_fief_allied_unfriendly_spiteful"),
                    (else_try),
                      (assign, ":comment", "str_comment_our_king_granted_you_a_fief_allied"),
                    (try_end),
                  (try_end),
                  
                (else_try),
                  (eq, ":entry_type", logent_renounced_allegiance),
                  (eq, ":actor", "trp_player"),
                  (try_begin),
                    (eq, ":faction_object", "$g_talk_troop_faction"),
                    (neq, ":troop_object", "$g_talk_troop"),
                    (try_begin),
                      (ge, "$g_talk_troop_faction_relation", 0),
                      (neq, "$g_talk_troop_faction", "$players_faction"),
                      (assign, ":relevance", 180),
                      (try_begin),
                        (gt, "$g_talk_troop_relation", 5),
                        (assign, ":comment", "str_comment_you_renounced_your_alliegance_friendly"),
                      (else_try),
                        (ge, "$g_talk_troop_relation", 0),
                        (eq, ":reputation", lrep_goodnatured),
                        (assign, ":comment", "str_comment_you_renounced_your_alliegance_friendly"),
                      (try_end),
                    (else_try),
                      (lt, "$g_talk_troop_faction_relation", 0),
                      (assign, ":relevance", 300),
                      (try_begin),
                        (ge, "$g_talk_troop_relation", 0),
                        (this_or_next|eq, ":reputation", lrep_selfrighteous),
                        (eq, ":reputation", lrep_debauched),
                        (assign, ":comment", "str_comment_you_renounced_your_alliegance_unfriendly_moralizing"),
                      (else_try),
                        (gt, "$g_talk_troop_relation", 5),
                        (this_or_next|eq, ":reputation", lrep_goodnatured),
                        (eq, ":reputation", lrep_upstanding),
                        (assign, ":comment", "str_comment_you_renounced_your_alliegance_enemy_friendly"),
                      (else_try),
                        (gt, "$g_talk_troop_relation", 5),
                        (assign, ":comment", "str_comment_you_renounced_your_alliegance_enemy"),
                      (else_try),
                        (is_between, "$g_talk_troop_relation", -5, 5),
                        (this_or_next|eq, ":reputation", lrep_quarrelsome),
                        (eq, ":reputation", lrep_debauched),
                        (assign, ":comment", "str_comment_you_renounced_your_alliegance_unfriendly_spiteful"),
                        (assign, ":suggested_relation_change", -2),
                      (else_try),
                        (lt, "$g_talk_troop_relation", -5),
                        (this_or_next|eq, ":reputation", lrep_quarrelsome),
                        (this_or_next|eq, ":reputation", lrep_selfrighteous),
                        (eq, ":reputation", lrep_debauched),
                        (assign, ":comment", "str_comment_you_renounced_your_alliegance_unfriendly_spiteful"),
                      (else_try),
                        (assign, ":comment", "str_comment_you_renounced_your_alliegance_default"),
                      (try_end),
                    (try_end),
                  (try_end),
                  
                  
                (try_end),
                (assign, reg0, ":comment"),
                (assign, reg1, ":relevance"),
                (assign, reg2, ":suggested_relation_change"),
            ]),
            
            # script_get_relevant_comment_to_s42
            # Input: none
            # Output: reg0 = 1 if comment found, 0 otherwise; s61 will contain comment string if found
            ("get_relevant_comment_to_s42",
              [
                (troop_get_slot, ":reputation", "$g_talk_troop", slot_lord_reputation_type),
                (try_begin),
                  (eq, "$cheat_mode", 1),
                  (store_add, ":rep_string", ":reputation", "str_personality_archetypes"),
                  (str_store_string, s15, ":rep_string"),
                  (display_message, "@Reputation type: {s15}"),
                (try_end),
                
                (assign, ":highest_score_so_far", 50),
                (assign, ":best_comment_so_far", -1),
                (assign, ":comment_found", 0),
                (assign, ":best_log_entry", -1),
                (assign, ":comment_relation_change", 0),
                (store_current_hours, ":current_time"),
                
                #prevents multiple comments in conversations in same hour
                
                #     (troop_get_slot, ":talk_troop_last_comment_time", "$g_talk_troop", slot_troop_last_comment_time),
                #"$num_log_entries should also be set to one, not zero. This is included in the initialize npcs script, although could be moved to game_start
                (troop_get_slot, ":talk_troop_last_comment_slot", "$g_talk_troop", slot_troop_last_comment_slot),
                (troop_set_slot, "$g_talk_troop", slot_troop_last_comment_slot, "$num_log_entries"),
                
                (store_add, ":log_entries_plus_one", "$num_log_entries", 1),
                (try_for_range, ":log_entry_no", 1, ":log_entries_plus_one"),
                  #      It should be log entries plus one, so that the try_ sequence does not stop short of the last log entry
                  #      $Num_log_entries is now the number of the last log entry, which begins at "1" rather than "0"
                  #      This is so that (le, ":log_entry_no", ":talk_troop_last_comment_slot") works properly
                  
                  (troop_get_slot, ":entry_time",           "trp_log_array_entry_time",           ":log_entry_no"),
                  #      (val_max, ":entry_time", 1), #This is needed for pre-game events to be commented upon, if hours are used rather than the order of events
                  (store_sub, ":entry_hours_elapsed", ":current_time", ":entry_time"),
                  (try_begin),
                    (le, ":log_entry_no", ":talk_troop_last_comment_slot"),
                    #         (le, ":entry_time", ":talk_troop_last_comment_time"),
                    (try_begin),
                      (eq, ":log_entry_no", ":talk_troop_last_comment_slot"),
                      (eq, "$cheat_mode", 1),
                      (assign, reg5, ":log_entry_no"),
                      (display_message, "@Entries up to #{reg5} skipped"),
                      (try_end),
                      #       I suggest using the log entry number as opposed to time so that events in the same hour can be commented upon
                      #       This feels more natural, for example, if there are other lords in the court when the player pledges allegiance
                    (else_try),
                      #         (le, ":entry_hours_elapsed", 3), #don't comment on really fresh events
                      #       (else_try),
                      (call_script, "script_get_relevant_comment_for_log_entry", ":log_entry_no"),
                      (gt, reg1, 10),
                      (assign, ":score", reg1),
                      (assign, ":comment", reg0),
                      (store_random_in_range, ":rand", 70, 140),
                      (val_mul, ":score", ":rand"),
                      (store_add, ":entry_time_score", ":entry_hours_elapsed", 500), #approx. one month
                      (val_mul, ":score", 1000),
                      (val_div, ":score", ":entry_time_score"), ###Relevance decreases over time - halved after one month, one-third after two, etc
                      (try_begin),
                        (gt, ":score", ":highest_score_so_far"),
                        (assign, ":highest_score_so_far", ":score"),
                        (assign, ":best_comment_so_far",  ":comment"),
                        (assign, ":best_log_entry", ":log_entry_no"),
                        (assign, ":comment_relation_change", reg2),
                      (try_end),
                    (try_end),
                  (try_end),
                  
                  (try_begin),
                    (gt, ":best_comment_so_far", 0),
                    (assign, ":comment_found", 1), #comment found print it to s61 now.
                    (troop_get_slot, ":actor",                 "trp_log_array_actor",                 ":best_log_entry"),
                    (troop_get_slot, ":center_object",         "trp_log_array_center_object",         ":best_log_entry"),
                    (troop_get_slot, ":center_object_lord",    "trp_log_array_center_object_lord",    ":best_log_entry"),
                    (troop_get_slot, ":center_object_faction", "trp_log_array_center_object_faction", ":best_log_entry"),
                    (troop_get_slot, ":troop_object",          "trp_log_array_troop_object",          ":best_log_entry"),
                    (troop_get_slot, ":troop_object_faction",  "trp_log_array_troop_object_faction",  ":best_log_entry"),
                    (troop_get_slot, ":faction_object",        "trp_log_array_faction_object",        ":best_log_entry"),
                    (try_begin),
                      (ge, ":actor", 0),
                      (str_store_troop_name,   s50, ":actor"),
                    (try_end),
                    (try_begin),
                      (ge, ":center_object", 0),
                      (str_store_party_name,   s51, ":center_object"),
                    (try_end),
                    (try_begin),
                      (ge, ":center_object_lord", 0),
                      (str_store_troop_name,   s52, ":center_object_lord"),
                    (try_end),
                    (try_begin),
                      (ge, ":center_object_faction", 0),
                      (str_store_faction_name, s53, ":center_object_faction"),
                    (try_end),
                    (try_begin),
                      (ge, ":troop_object", 0),
                      (str_store_troop_name,   s54, ":troop_object"),
                    (try_end),
                    (try_begin),
                      (ge, ":troop_object_faction", 0),
                      (str_store_faction_name, s55, ":troop_object_faction"),
                    (try_end),
                    (try_begin),
                      (ge, ":faction_object", 0),
                      (str_store_faction_name, s56, ":faction_object"),
                    (try_end),
                    (str_store_string, s42, ":best_comment_so_far"),
                  (try_end),
                  
                  (assign, reg0, ":comment_found"),
                  (assign, "$log_comment_relation_change", ":comment_relation_change"),
              ]),
              
              #Troop Commentaries end
              
              #Rebellion changes begin
              ("find_rival_from_faction",
                [
                  (store_script_param, ":source_lord", 1),
                  (store_script_param, ":target_faction", 2),
                  
                  (assign, ":rival", 0),
                  (troop_get_slot, ":source_reputation", ":source_lord", slot_lord_reputation_type),
                  
                  (try_for_range, ":target_lord", faction_heroes_begin, faction_heroes_end),
                    (store_troop_faction, ":test_faction", ":target_lord"),
                    (eq, ":test_faction", ":target_faction"),
                    (troop_get_slot, ":target_reputation", ":target_lord", slot_lord_reputation_type),
                    (try_begin),
                      (eq, ":source_reputation", lrep_martial),
                      (eq, ":target_reputation", lrep_martial),
                      (assign, ":rival", ":target_lord"),
                    (else_try),
                      (eq, ":source_reputation", lrep_debauched),
                      (eq, ":target_reputation", lrep_upstanding),
                      (assign, ":rival", ":target_lord"),
                    (else_try),
                      (eq, ":source_reputation", lrep_selfrighteous),
                      (eq, ":target_reputation", lrep_goodnatured),
                      (assign, ":rival", ":target_lord"),
                    (else_try),
                      (eq, ":source_reputation", lrep_cunning),
                      (eq, ":target_reputation", lrep_quarrelsome),
                      (assign, ":rival", ":target_lord"),
                    (else_try),
                      (eq, ":source_reputation", lrep_quarrelsome),
                      (eq, ":target_reputation", lrep_cunning),
                      (assign, ":rival", ":target_lord"),
                    (else_try),
                      (eq, ":source_reputation", lrep_goodnatured),
                      (eq, ":target_reputation", lrep_selfrighteous),
                      (assign, ":rival", ":target_lord"),
                    (else_try),
                      (eq, ":source_reputation", lrep_upstanding),
                      (eq, ":target_reputation", lrep_debauched),
                      (assign, ":rival", ":target_lord"),
                    (try_end),
                  (try_end),
                  
                  (assign, reg0, ":rival"),
              ]),
              
              
              
              
              
              
              
              ("rebellion_arguments",
                [
                  (store_script_param, ":lord", 1),
                  (store_script_param, ":argument", 2),
                  
                  (assign, ":argument_value", 0),
                  (troop_get_slot, ":reputation", ":lord", slot_lord_reputation_type),
                  
                  (try_begin),
                    (eq, ":reputation", lrep_martial),
                    (try_begin),
                      (eq, ":argument", argument_claim),
                      (assign, ":argument_value", 30),
                    (else_try),
                      (eq, ":argument", argument_ruler),
                      (assign, ":argument_value", 10),
                    (else_try),
                      (eq, ":argument", argument_benefit),
                      (assign, ":argument_value", -20),
                    (else_try),
                      (eq, ":argument", argument_victory),
                      (assign, ":argument_value", -30),
                    (try_end),
                  (else_try),
                    (eq, ":reputation", lrep_quarrelsome),
                    (try_begin),
                      (eq, ":argument", argument_claim),
                      (assign, ":argument_value", -20),
                    (else_try),
                      (eq, ":argument", argument_ruler),
                      (assign, ":argument_value", -30),
                    (else_try),
                      (eq, ":argument", argument_benefit),
                      (assign, ":argument_value", 30),
                    (else_try),
                      (eq, ":argument", argument_victory),
                      (assign, ":argument_value", 10),
                    (try_end),
                  (else_try),
                    (eq, ":reputation", lrep_selfrighteous),
                    (try_begin),
                      (eq, ":argument", argument_claim),
                      (assign, ":argument_value", -20),
                    (else_try),
                      (eq, ":argument", argument_ruler),
                      (assign, ":argument_value", -30),
                    (else_try),
                      (eq, ":argument", argument_benefit),
                      (assign, ":argument_value", 20),
                    (else_try),
                      (eq, ":argument", argument_victory),
                      (assign, ":argument_value", 20),
                    (try_end),
                  (else_try),
                    (eq, ":reputation", lrep_cunning),
                    (try_begin),
                      (eq, ":argument", argument_claim),
                      (assign, ":argument_value", -30),
                    (else_try),
                      (eq, ":argument", argument_ruler),
                      (assign, ":argument_value", 20),
                    (else_try),
                      (eq, ":argument", argument_benefit),
                      (assign, ":argument_value", -20),
                    (else_try),
                      (eq, ":argument", argument_victory),
                      (assign, ":argument_value", 20),
                    (try_end),
                  (else_try),
                    (eq, ":reputation", lrep_debauched),
                    (try_begin),
                      (eq, ":argument", argument_claim),
                      (assign, ":argument_value", -20),
                    (else_try),
                      (eq, ":argument", argument_ruler),
                      (assign, ":argument_value", -20),
                    (else_try),
                      (eq, ":argument", argument_benefit),
                      (assign, ":argument_value", 20),
                    (else_try),
                      (eq, ":argument", argument_victory),
                      (assign, ":argument_value", 10),
                    (try_end),
                  (else_try),
                    (eq, ":reputation", lrep_goodnatured),
                    (try_begin),
                      (eq, ":argument", argument_claim),
                      (assign, ":argument_value", 10),
                    (else_try),
                      (eq, ":argument", argument_ruler),
                      (assign, ":argument_value", 20),
                    (else_try),
                      (eq, ":argument", argument_benefit),
                      (assign, ":argument_value", -15),
                    (else_try),
                      (eq, ":argument", argument_victory),
                      (assign, ":argument_value", -25),
                    (try_end),
                  (else_try),
                    (eq, ":reputation", lrep_upstanding),
                    (try_begin),
                      (eq, ":argument", argument_claim),
                      (assign, ":argument_value", 10),
                    (else_try),
                      (eq, ":argument", argument_ruler),
                      (assign, ":argument_value", 0),
                    (else_try),
                      (eq, ":argument", argument_benefit),
                      (assign, ":argument_value", -40),
                    (else_try),
                      (eq, ":argument", argument_victory),
                      (assign, ":argument_value", 10),
                    (try_end),
                  (try_end),
                  
                  (assign, reg0, ":argument_value"),
                  
              ]),
              
              
              
              #Rebellion changes end
              
              # script_get_culture_with_party_faction_for_music
              # Input: arg1 = party_no
              # Output: reg0 = culture
              ("get_culture_with_party_faction_for_music",
                [
                  (store_script_param, ":party_no", 1),
                  (store_faction_of_party, ":faction_no", ":party_no"),
                  (try_begin),
                    (this_or_next|eq, ":faction_no", "fac_player_faction"),
                    (eq, ":faction_no", "fac_player_supporters_faction"),
                    (assign, ":faction_no", "$players_faction"),
                  (try_end),
                  (try_begin),
                    (is_between, ":party_no", centers_begin, centers_end),
                    (this_or_next|eq, ":faction_no", "fac_player_supporters_faction"),
                    (neg|is_between, ":faction_no", factions_begin, factions_end),
                    (party_get_slot, ":faction_no", ":party_no", slot_center_original_faction),
                  (try_end),
                  (try_begin),
                    (eq, ":faction_no", "fac_galacticempire"),
                    (assign, ":result", mtf_culture_1),
                  (else_try),
                    (eq, ":faction_no", "fac_rebelalliance"),
                    (assign, ":result", mtf_culture_2),
                  (else_try),
                    (eq, ":faction_no", "fac_huttcartel"),
                    (assign, ":result", mtf_culture_3),
                    #SW - commented out faction 4 & 5
                    # (else_try),
                    # (eq, ":faction_no", "fac_faction_4"),
                    # (assign, ":result", mtf_culture_4),
                    # (else_try),
                    # (eq, ":faction_no", "fac_faction_5"),
                    # (assign, ":result", mtf_culture_5),
                  (else_try),
                    (this_or_next|eq, ":faction_no", "fac_outlaws"),
                    #(this_or_next|eq, ":faction_no", "fac_peasant_rebels"),
                    (this_or_next|eq, ":faction_no", "fac_deserters"),
                    (this_or_next|eq, ":faction_no", "fac_black_sun_pirates"),
                    (eq, ":faction_no", "fac_blazing_claw_pirates"),
                    (assign, ":result", mtf_culture_6),
                  (else_try),
                    (assign, ":result", 0), #no culture, including player with no bindings to another faction
                  (try_end),
                  (assign, reg0, ":result"),
              ]),
              
              # script_music_set_situation_with_culture
              # Input: arg1 = music_situation
              # Output: none
              ("music_set_situation_with_culture",
                [
                  (store_script_param, ":situation", 1),
                  (assign, ":culture", 0), #no culture
                  (try_begin),
                    (this_or_next|eq, ":situation", mtf_sit_town),
                    (this_or_next|eq, ":situation", mtf_sit_day),
                    (this_or_next|eq, ":situation", mtf_sit_night),
                    (this_or_next|eq, ":situation", mtf_sit_town_infiltrate),
                    (eq, ":situation", mtf_sit_encounter_hostile),
                    (call_script, "script_get_culture_with_party_faction_for_music", "$g_encountered_party"),
                    (val_or, ":culture", reg0),
                  (else_try),
                    (this_or_next|eq, ":situation", mtf_sit_ambushed),
                    (eq, ":situation", mtf_sit_fight),
                    (call_script, "script_get_culture_with_party_faction_for_music", "$g_encountered_party"),
                    (val_or, ":culture", reg0),
                    (call_script, "script_get_culture_with_party_faction_for_music", "p_main_party"),
                    (val_or, ":culture", reg0),
                    (call_script, "script_get_closest_center", "p_main_party"),
                    (call_script, "script_get_culture_with_party_faction_for_music", reg0),
                    (val_or, ":culture", reg0),
                  (else_try),
                    (eq, ":situation", mtf_sit_travel),
                    (call_script, "script_get_culture_with_party_faction_for_music", "p_main_party"),
                    (val_or, ":culture", reg0),
                    (call_script, "script_get_closest_center", "p_main_party"),
                    (call_script, "script_get_culture_with_party_faction_for_music", reg0),
                    (val_or, ":culture", reg0),
                  (else_try),
                    (eq, ":situation", mtf_sit_victorious),
                    (call_script, "script_get_culture_with_party_faction_for_music", "p_main_party"),
                    (val_or, ":culture", reg0),
                  (else_try),
                    (eq, ":situation", mtf_sit_killed),
                    (call_script, "script_get_culture_with_party_faction_for_music", "$g_encountered_party"),
                    (val_or, ":culture", reg0),
                  (try_end),
                  (try_begin),
                    (this_or_next|eq, ":situation", mtf_sit_town),
                    (eq, ":situation", mtf_sit_day),
                    (try_begin),
                      (is_currently_night),
                      (assign, ":situation", mtf_sit_night),
                    (try_end),
                  (try_end),
                  
                  #SW - no longer call music_set_situation or music_set_culture in script_music_set_situation_with_culture since I'll manually play tracks as necessary (nevermind, that doesn't work)
                  (music_set_situation, ":situation"),
                  (music_set_culture, ":culture"),
              ]),
              
              
              # script_combat_music_set_situation_with_culture
              # Input: none
              # Output: none
              ("combat_music_set_situation_with_culture",
                [
                  (assign, ":situation", mtf_sit_fight),
                  (assign, ":num_allies", 0),
                  (assign, ":num_enemies", 0),
                  (try_for_agents, ":agent_no"),
                    (agent_is_alive, ":agent_no"),
                    (agent_is_human, ":agent_no"),
                    (agent_get_troop_id, ":agent_troop_id", ":agent_no"),
                    (store_character_level, ":troop_level", ":agent_troop_id"),
                    (val_add,  ":troop_level", 10),
                    (val_mul, ":troop_level", ":troop_level"),
                    (try_begin),
                      (agent_is_ally, ":agent_no"),
                      (val_add, ":num_allies", ":troop_level"),
                    (else_try),
                      (val_add, ":num_enemies", ":troop_level"),
                    (try_end),
                  (try_end),
                  (val_mul, ":num_allies", 4), #play ambushed music if we are 2 times outnumbered.
                  (val_div, ":num_allies", 3),
                  (try_begin),
                    (lt, ":num_allies", ":num_enemies"),
                    (assign, ":situation", mtf_sit_ambushed),
                  (try_end),
                  (call_script, "script_music_set_situation_with_culture", ":situation"),
              ]),
              
              # script_play_victorious_sound
              # Input: none
              # Output: none
              ("play_victorious_sound",
                [
                  (call_script, "script_music_set_situation_with_culture", mtf_sit_victorious),
                  #      (play_cue_track, "track_victorious_neutral_1"),
                  #      (play_track, "track_victorious_neutral_1", 1),
              ]),
              
              # script_set_items_for_tournament
              # Input: arg1 = horse_chance, arg2 = lance_chance (with horse only), arg3 = sword_chance, arg4 = axe_chance, arg5 = bow_chance (without horse only), arg6 = javelin_chance (with horse only), arg7 = mounted_bow_chance (with horse only), arg8 = crossbow_sword_chance, arg9 = armor_item_begin, arg10 = helm_item_begin
              # Output: none (sets mt_arena_melee_fight items)
              ("set_items_for_tournament",
                #SW - modified tournament items
                [
                  (store_script_param, ":horse_chance", 1),
                  (store_script_param, ":lance_chance", 2),
                  (store_script_param, ":sword_chance", 3),
                  (store_script_param, ":axe_chance", 4),
                  (store_script_param, ":bow_chance", 5),
                  (store_script_param, ":javelin_chance", 6),
                  (store_script_param, ":mounted_bow_chance", 7),
                  (store_script_param, ":crossbow_sword_chance", 8),
                  (store_script_param, ":armor_item_begin", 9),
                  (store_script_param, ":helm_item_begin", 10),
                  (store_add, ":total_chance", ":sword_chance", ":axe_chance"),
                  (val_add, ":total_chance", ":crossbow_sword_chance"),
                  (try_for_range, ":i_ep", 0, 32),
                    (mission_tpl_entry_clear_override_items, "mt_arena_melee_fight", ":i_ep"),
                    #SW - added leather boots since I added af_override_everything to the mt_arena_melee_fight
                    (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_arena_tunic_white"),
                    (assign, ":has_horse", 0),
                    (store_div, ":cur_team", ":i_ep", 8),
                    (try_begin),
                      (store_random_in_range, ":random_no", 0, 100),
                      (lt, ":random_no", ":horse_chance"),
                      (assign, ":has_horse", 1),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_arena_speeder"),
                    (try_end),
                    (try_begin),
                      (eq, ":has_horse", 1),
                      (store_add, ":cur_total_chance", ":total_chance", ":lance_chance"),
                      (val_add, ":cur_total_chance", ":javelin_chance"),
                      (val_add, ":cur_total_chance", ":mounted_bow_chance"),
                    (else_try),
                      (store_add, ":cur_total_chance", ":total_chance", ":bow_chance"),
                    (try_end),
                    (store_random_in_range, ":random_no", 0, ":cur_total_chance"),
                    (store_add, ":cur_shield_item", "itm_energy_shield_red_small", ":cur_team"),
                    (try_begin),
                      (val_sub, ":random_no", ":sword_chance"),
                      (lt, ":random_no", 0),
                      (try_begin),
                        (store_random_in_range, ":sub_random_no", 0, 100),
                        (lt, ":sub_random_no", 50),
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_vibro_sword3a"),
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", ":cur_shield_item"),
                        #            (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_shield"),
                      (else_try),
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_vibro_sword2b"),
                      (try_end),
                    (else_try),
                      (val_sub, ":random_no", ":axe_chance"),
                      (lt, ":random_no", 0),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_vibro_axe_long"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", ":cur_shield_item"),
                      #         (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_shield"),
                    (else_try),
                      (val_sub, ":random_no", ":crossbow_sword_chance"),
                      (lt, ":random_no", 0),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_vibro_sword1b"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", ":cur_shield_item"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_crossbow"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_bolts"),
                    (else_try),
                      (eq, ":has_horse", 0),
                      (val_sub, ":random_no", ":bow_chance"),
                      (lt, ":random_no", 0),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_vibro_axe_medium"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", ":cur_shield_item"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_bow"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_arrows"),
                    (else_try),
                      (eq, ":has_horse", 1),
                      (val_sub, ":random_no", ":lance_chance"),
                      (lt, ":random_no", 0),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_vibro_sword3a"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", ":cur_shield_item"),
                      #          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_shield"),
                    (else_try),
                      (eq, ":has_horse", 1),
                      (val_sub, ":random_no", ":javelin_chance"),
                      (lt, ":random_no", 0),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_vibro_sword1b"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", ":cur_shield_item"),
                      #          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_shield"),
                    (else_try),
                      (eq, ":has_horse", 1),
                      (val_sub, ":random_no", ":mounted_bow_chance"),
                      (lt, ":random_no", 0),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_vibro_axe_long"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_bow"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_arrows"),
                    (else_try),
                      #SW - added an extra else_try since some players reported that sometimes they had no weapons in tournaments
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_vibro_sword3a"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", ":cur_shield_item"),
                    (try_end),
                    (try_begin),
                      (ge, ":armor_item_begin", 0),
                      (store_add, ":cur_armor_item", ":armor_item_begin", ":cur_team"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", ":cur_armor_item"),
                    (try_end),
                    (try_begin),
                      (ge, ":helm_item_begin", 0),
                      (store_add, ":cur_helm_item", ":helm_item_begin", ":cur_team"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", ":cur_helm_item"),
                    (try_end),
                  (try_end),
              ]),
              
              
              # script_custom_battle_end
              # Input: none
              # Output: none
              ("custom_battle_end",
                [
                  (assign, "$g_custom_battle_team1_death_count", 0),
                  (assign, "$g_custom_battle_team2_death_count", 0),
                  (try_for_agents, ":cur_agent"),
                    (agent_is_human, ":cur_agent"),
                    (neg|agent_is_alive, ":cur_agent"),
                    (agent_get_team, ":cur_team", ":cur_agent"),
                    (try_begin),
                      (eq, ":cur_team", 0),
                      (val_add, "$g_custom_battle_team1_death_count", 1),
                    (else_try),
                      (val_add, "$g_custom_battle_team2_death_count", 1),
                    (try_end),
                  (try_end),
              ]),
              
              # script_remove_troop_from_prison
              # Input: troop_no
              # Output: none
              ("remove_troop_from_prison",
                [
                  (store_script_param, ":troop_no", 1),
                  (troop_set_slot, ":troop_no", slot_troop_prisoner_of_party, -1),
                  (try_begin),
                    (check_quest_active, "qst_rescue_lord_by_replace"),
                    (quest_slot_eq, "qst_rescue_lord_by_replace", slot_quest_target_troop, ":troop_no"),
                    (call_script, "script_cancel_quest", "qst_rescue_lord_by_replace"),
                  (try_end),
                  (try_begin),
                    (check_quest_active, "qst_deliver_message_to_prisoner_lord"),
                    (quest_slot_eq, "qst_deliver_message_to_prisoner_lord", slot_quest_target_troop, ":troop_no"),
                    (call_script, "script_cancel_quest", "qst_deliver_message_to_prisoner_lord"),
                  (try_end),
              ]),
              
              #----------------------------------------------------------------------------------------
              # START OF CUSTOM BATTLE MOD
              ###############################################
              # Custom Battle Scripts
              ###############################################
              
              ("custom_battle_set_faction_troops",
                [
                  (troop_get_slot,reg(31),"trp_custom_battle_fac_store",reg(32)),
                  (try_begin),
                    (eq,reg(31),1),
                    # (assign,reg(11),"trp_vaegir_recruit"),
                    # (assign,reg(12),"trp_vaegir_footman"),
                    # (assign,reg(13),"trp_vaegir_veteran"),
                    # (assign,reg(14),"trp_vaegir_infantry"),
                    # (assign,reg(15),"trp_vaegir_guard"),
                    # (assign,reg(16),"trp_vaegir_skirmisher"),
                    # (assign,reg(17),"trp_vaegir_archer"),
                    # (assign,reg(18),"trp_vaegir_marksman"),
                    # (assign,reg(19),"trp_vaegir_horseman"),
                    # (assign,reg(20),"trp_vaegir_knight"),
                    (assign,reg(11),"trp_imperial_recruit"),
                    (assign,reg(12),"trp_imperial_stormtrooper"),
                    #(assign,reg(12),"trp_clone_trooper_1"),      #for testing purposes
                    (assign,reg(13),"trp_imperial_scout_trooper"),
                    (assign,reg(14),"trp_imperial_royal_guard"),
                    (assign,reg(15),"trp_imperial_stormtrooper_officer"),
                    #(assign,reg(15),"trp_clone_trooper_4"),      #for tesitng purposes
                    (assign,reg(16),"trp_sith_apprentice"),
                    (assign,reg(17),"trp_sith_knight"),
                    (assign,reg(18),"trp_sith_marauder"),
                    #(assign,reg(19),"trp_sith_master"),
                    #(assign,reg(20),"trp_sith_lord"),
                  (else_try),
                    (eq,reg(31),2),
                    # (assign,reg(11),"trp_swadian_recruit"),
                    # (assign,reg(12),"trp_swadian_militia"),
                    # (assign,reg(13),"trp_swadian_footman"),
                    # (assign,reg(14),"trp_swadian_infantry"),
                    # (assign,reg(15),"trp_swadian_sergeant"),
                    # (assign,reg(16),"trp_swadian_skirmisher"),
                    # (assign,reg(17),"trp_swadian_crossbowman"),
                    # (assign,reg(18),"trp_swadian_sharpshooter"),
                    # (assign,reg(19),"trp_swadian_man_at_arms"),
                    # (assign,reg(20),"trp_swadian_knight"),
                    (assign,reg(11),"trp_rebel_recruit"),
                    (assign,reg(12),"trp_rebel_trooper"),
                    (assign,reg(13),"trp_rebel_pilot"),
                    (assign,reg(14),"trp_rebel_commando"),
                    (assign,reg(15),"trp_rebel_sniper"),
                    (assign,reg(16),"trp_jedi_padawan"),
                    (assign,reg(17),"trp_jedi_guardian"),
                    #(assign,reg(17),"trp_rancor"),   #for testing
                    #(assign,reg(17),"trp_r2series"), # for testing purposes
                    #(assign,reg(17),"trp_ig88"),  # for testing purposes
                    #(assign,reg(17),"trp_huttcartel_lord"),   #for testing purposes
                    (assign,reg(18),"trp_jedi_sage_master"),
                    #(assign,reg(18),"trp_mse6"),     # for testing purposes
                    #(assign,reg(19),"trp_jedi_knight"),
                    #(assign,reg(20),"trp_jedi_master"),
                  (else_try),
                    (eq,reg(31),3),
                    # (assign,reg(11),"trp_nord_recruit"),
                    # (assign,reg(12),"trp_nord_footman"),
                    # (assign,reg(13),"trp_nord_trained_footman"),
                    # (assign,reg(14),"trp_nord_warrior"),
                    # (assign,reg(15),"trp_nord_veteran"),
                    # (assign,reg(16),"trp_nord_champion"),
                    (assign,reg(11),"trp_hutt_militia"),
                    (assign,reg(12),"trp_hutt_guard"),
                    (assign,reg(13),"trp_hutt_marksman"),
                    (assign,reg(14),"trp_hutt_bounty_hunter"),
                    (assign,reg(15),"trp_hutt_skiff_guard"),
                    (assign,reg(16),"trp_hutt_commando"),
                  (else_try),
                    (eq,reg(31),4),
                    # (assign,reg(11),"trp_rhodok_tribesman"),
                    # (assign,reg(12),"trp_rhodok_spearman"),
                    # (assign,reg(13),"trp_rhodok_trained_spearman"),
                    # (assign,reg(14),"trp_rhodok_veteran_spearman"),
                    # (assign,reg(15),"trp_rhodok_sergeant"),
                    # (assign,reg(16),"trp_rhodok_crossbowman"),
                    # (assign,reg(17),"trp_rhodok_trained_crossbowman"),
                    # (assign,reg(18),"trp_rhodok_veteran_crossbowman"),
                    # (assign,reg(19),"trp_rhodok_sharpshooter"),
                    (assign,reg(11),"trp_rodian_hunter"),
                    (assign,reg(12),"trp_wookiee_berserker"),
                    (assign,reg(13),"trp_twilek_soldier"),
                    (assign,reg(14),"trp_mandalorian_commando"),
                    (assign,reg(15),"trp_mandalorian_crusader"),
                    (assign,reg(16),"trp_moncal_3"),
                    (assign,reg(17),"trp_gamorrean_guard"),
                    (assign,reg(18),"trp_security_guard"),
                  (else_try),
                    (eq,reg(31),5),
                    # (assign,reg(11),"trp_khergit_tribesman"),
                    # (assign,reg(12),"trp_khergit_skirmisher"),
                    # (assign,reg(13),"trp_khergit_horseman"),
                    # (assign,reg(14),"trp_khergit_horse_archer"),
                    # (assign,reg(15),"trp_khergit_veteran_horse_archer"),
                    # (assign,reg(16),"trp_khergit_lancer"),
                    (assign,reg(11),"trp_clone_trooper_1"),
                    (assign,reg(12),"trp_clone_trooper_2"),
                    (assign,reg(13),"trp_arc_trooper_3"),
                    (assign,reg(14),"trp_arc_trooper_4"),
                    (assign,reg(15),"trp_clone_trooper_5"),
                    (assign,reg(16),"trp_b1series"),
                    (assign,reg(17),"trp_b2series"),
                    (assign,reg(18),"trp_b2series_enhanced"),
                    
                  (end_try),
                  
              ]),
              ("update_agent_position_on_map_2",
                [(store_script_param_1, ":agent_no"),
                  (agent_get_slot, ":agent_overlay", ":agent_no", slot_agent_map_overlay_id),
                  
                  (get_player_agent_no, ":player_agent"),
                  (try_begin),
                    (le, ":agent_overlay", 0),
                    (set_fixed_point_multiplier, 1000),
                    (try_begin),
                      (eq, ":agent_no", ":player_agent"),
                      (create_mesh_overlay, reg1, "mesh_player_dot"),
                      (position_set_x, pos1, 500),
                      (position_set_y, pos1, 500),
                      (overlay_set_size, reg1, pos1),
                    (else_try),
                      (create_mesh_overlay, reg1, "mesh_white_dot"),
                      (position_set_x, pos1, 200),
                      (position_set_y, pos1, 200),
                      (overlay_set_size, reg1, pos1),
                    (try_end),
                    (overlay_set_alpha, reg1, 0x88),
                    (agent_set_slot, ":agent_no", slot_agent_map_overlay_id, reg1),
                    (assign, ":agent_overlay", reg1),
                  (try_end),
                  
                  (try_begin),
                    (neq, ":agent_no", ":player_agent"),
                    (agent_get_team, ":agent_team", ":agent_no"),
                    (try_begin),
                      (eq,":agent_team",1),
                      (overlay_set_color, ":agent_overlay", 0x2020e7),
                    (else_try),
                      (eq,":agent_team",2),
                      (overlay_set_color, ":agent_overlay", 0xf60b0b),
                    (else_try),
                      (eq,":agent_team",3),
                      (overlay_set_color, ":agent_overlay", 0x0bf61b),
                    (else_try),
                      (eq,":agent_team",4),
                      (overlay_set_color, ":agent_overlay", 0xfcff00),
                    (else_try),
                      (eq,":agent_team",5),
                      (overlay_set_color, ":agent_overlay", 0xfd9706),
                    (else_try),
                      (eq,":agent_team",6),
                      (overlay_set_color, ":agent_overlay", 0xcc00ff),
                    (try_end),
                  (try_end),
                  
                  (try_begin),
                    (eq, ":agent_no", ":player_agent"),
                    (agent_get_look_position, pos1, ":agent_no"),
                    (position_get_rotation_around_z, ":rot", pos1),
                    (init_position, pos10),
                    (position_rotate_z, pos10, ":rot"),
                    (overlay_set_mesh_rotation, ":agent_overlay", pos10),
                    (call_script, "script_convert_3d_pos_to_map_pos"),
                  (else_try),
                    (agent_get_position, pos1, ":agent_no"),
                    (call_script, "script_convert_3d_pos_to_map_pos"),
                  (try_end),
                  (overlay_set_position, ":agent_overlay", pos0),
              ]),
              
              ("update_order_panel_statistics_and_map_2", #TODO: Call this in every battle mission template, once per second
                [(set_fixed_point_multiplier, 1000),
                  (assign, ":num_us_ready_infantry", 0),
                  (assign, ":num_us_ready_archers", 0),
                  (assign, ":num_us_ready_cavalry", 0),
                  (assign, ":num_us_wounded_infantry", 0),
                  (assign, ":num_us_wounded_archers", 0),
                  (assign, ":num_us_wounded_cavalry", 0),
                  (assign, ":num_us_dead_infantry", 0),
                  (assign, ":num_us_dead_archers", 0),
                  (assign, ":num_us_dead_cavalry", 0),
                  (assign, ":num_allies_ready_men", 0),
                  (assign, ":num_allies_wounded_men", 0),
                  (assign, ":num_allies_dead_men", 0),
                  (assign, ":num_enemies_ready_men", 0),
                  (assign, ":num_enemies_wounded_men", 0),
                  (assign, ":num_enemies_dead_men", 0),
                  
                  (get_player_agent_no, ":player_agent"),
                  (agent_get_team, ":player_team", ":player_agent"),
                  
                  (assign, ":old_is_infantry_listening", 0),
                  (try_begin),
                    (class_is_listening_order, ":player_team", grc_infantry),
                    (assign, ":old_is_infantry_listening", 1),
                  (try_end),
                  (assign, ":old_is_archers_listening", 0),
                  (try_begin),
                    (class_is_listening_order, ":player_team", grc_archers),
                    (assign, ":old_is_archers_listening", 1),
                  (try_end),
                  (assign, ":old_is_cavalry_listening", 0),
                  (try_begin),
                    (class_is_listening_order, ":player_team", grc_cavalry),
                    (assign, ":old_is_cavalry_listening", 1),
                  (try_end),
                  
                  (get_scene_boundaries, pos2, pos3),
                  
                  (try_for_agents,":cur_agent"),
                    (agent_is_human, ":cur_agent"),
                    (agent_get_class, ":agent_class", ":cur_agent"),
                    (agent_get_party_id, ":agent_party", ":cur_agent"),
                    (agent_get_slot, ":agent_overlay", ":cur_agent", slot_agent_map_overlay_id),
                    (try_begin),
                      (eq, ":agent_party", "p_main_party"),
                      (try_begin),
                        (agent_is_alive, ":cur_agent"),
                        (call_script, "script_update_agent_position_on_map_2", ":cur_agent"),
                        
                        (try_begin),
                          (eq, ":agent_class", grc_infantry),
                          (val_add, ":num_us_ready_infantry", 1),
                        (else_try),
                          (eq, ":agent_class", grc_archers),
                          (val_add, ":num_us_ready_archers", 1),
                        (else_try),
                          (eq, ":agent_class", grc_cavalry),
                          (val_add, ":num_us_ready_cavalry", 1),
                        (try_end),
                      (else_try),
                        (overlay_set_alpha, ":agent_overlay", 0),
                        (agent_is_wounded, ":cur_agent"),
                        (try_begin),
                          (eq, ":agent_class", grc_infantry),
                          (val_add, ":num_us_wounded_infantry", 1),
                        (else_try),
                          (eq, ":agent_class", grc_archers),
                          (val_add, ":num_us_wounded_archers", 1),
                        (else_try),
                          (eq, ":agent_class", grc_cavalry),
                          (val_add, ":num_us_wounded_cavalry", 1),
                        (try_end),
                      (else_try),
                        (try_begin),
                          (eq, ":agent_class", grc_infantry),
                          (val_add, ":num_us_dead_infantry", 1),
                        (else_try),
                          (eq, ":agent_class", grc_archers),
                          (val_add, ":num_us_dead_archers", 1),
                        (else_try),
                          (eq, ":agent_class", grc_cavalry),
                          (val_add, ":num_us_dead_cavalry", 1),
                        (try_end),
                      (try_end),
                    (else_try),
                      (agent_is_ally, ":cur_agent"),
                      (try_begin),
                        (agent_is_alive, ":cur_agent"),
                        (call_script, "script_update_agent_position_on_map_2", ":cur_agent"),
                        (val_add, ":num_allies_ready_men", 1),
                      (else_try),
                        (overlay_set_alpha, ":agent_overlay", 0),
                        (agent_is_wounded, ":cur_agent"),
                        (val_add, ":num_allies_wounded_men", 1),
                      (else_try),
                        (val_add, ":num_allies_dead_men", 1),
                      (try_end),
                    (else_try),
                      (try_begin),
                        (agent_is_alive, ":cur_agent"),
                        (call_script, "script_update_agent_position_on_map_2", ":cur_agent"),
                        (val_add, ":num_enemies_ready_men", 1),
                      (else_try),
                        (overlay_set_alpha, ":agent_overlay", 0),
                        (agent_is_wounded, ":cur_agent"),
                        (val_add, ":num_enemies_wounded_men", 1),
                      (else_try),
                        (val_add, ":num_enemies_dead_men", 1),
                      (try_end),
                    (try_end),
                  (try_end),
                  (assign, reg1, ":num_us_ready_infantry"),
                  (assign, reg2, ":num_us_ready_archers"),
                  (assign, reg3, ":num_us_ready_cavalry"),
                  (store_add, ":num_us_ready_men", ":num_us_ready_infantry", ":num_us_ready_archers"),
                  (val_add, ":num_us_ready_men", ":num_us_ready_cavalry"),
                  (store_add, ":num_us_wounded_men", ":num_us_wounded_infantry", ":num_us_wounded_archers"),
                  (val_add, ":num_us_wounded_men", ":num_us_wounded_cavalry"),
                  (store_add, ":num_us_dead_men", ":num_us_dead_infantry", ":num_us_dead_archers"),
                  (val_add, ":num_us_dead_men", ":num_us_dead_cavalry"),
                  (assign, reg4, ":num_us_ready_men"),
                  (assign, reg5, ":num_us_wounded_men"),
                  (assign, reg6, ":num_us_dead_men"),
                  (assign, reg7, ":num_allies_ready_men"),
                  (assign, reg8, ":num_allies_wounded_men"),
                  (assign, reg9, ":num_allies_dead_men"),
                  (assign, reg10, ":num_enemies_ready_men"),
                  (assign, reg11, ":num_enemies_wounded_men"),
                  (assign, reg12, ":num_enemies_dead_men"),
                  (overlay_set_text, "$g_presentation_obj_7", "@Infantry ({reg1})"),
                  (overlay_set_text, "$g_presentation_obj_8", "@Archers ({reg2})"),
                  (overlay_set_text, "$g_presentation_obj_9", "@Cavalry ({reg3})"),
                  (overlay_set_text, "$g_battle_us_ready", "@{reg4}"),
                  (overlay_set_text, "$g_battle_us_wounded", "@{reg5}"),
                  (overlay_set_text, "$g_battle_us_dead", "@{reg6}"),
                  (overlay_set_text, "$g_battle_allies_ready", "@{reg7}"),
                  (overlay_set_text, "$g_battle_allies_wounded", "@{reg8}"),
                  (overlay_set_text, "$g_battle_allies_dead", "@{reg9}"),
                  (overlay_set_text, "$g_battle_enemies_ready", "@{reg10}"),
                  (overlay_set_text, "$g_battle_enemies_wounded", "@{reg11}"),
                  (overlay_set_text, "$g_battle_enemies_dead", "@{reg12}"),
                  
                  (assign, ":stat_position_x", 100),
                  (assign, ":stat_position_y", 100),
                  (val_add, ":stat_position_x", 150),
                  (val_add, ":stat_position_y", 80),
                  (position_set_x, pos1, ":stat_position_x"),
                  (position_set_y, pos1, ":stat_position_y"),
                  (overlay_set_position, "$g_battle_us_ready", pos1),
                  (val_add, ":stat_position_x", 150),
                  (position_set_x, pos1, ":stat_position_x"),
                  (overlay_set_position, "$g_battle_us_wounded", pos1),
                  (val_add, ":stat_position_x", 150),
                  (position_set_x, pos1, ":stat_position_x"),
                  (overlay_set_position, "$g_battle_us_dead", pos1),
                  (val_add, ":stat_position_x", -300),
                  (val_add, ":stat_position_y", -40),
                  (position_set_x, pos1, ":stat_position_x"),
                  (position_set_y, pos1, ":stat_position_y"),
                  (overlay_set_position, "$g_battle_allies_ready", pos1),
                  (val_add, ":stat_position_x", 150),
                  (position_set_x, pos1, ":stat_position_x"),
                  (overlay_set_position, "$g_battle_allies_wounded", pos1),
                  (val_add, ":stat_position_x", 150),
                  (position_set_x, pos1, ":stat_position_x"),
                  (overlay_set_position, "$g_battle_allies_dead", pos1),
                  (val_add, ":stat_position_x", -300),
                  (val_add, ":stat_position_y", -40),
                  (position_set_x, pos1, ":stat_position_x"),
                  (position_set_y, pos1, ":stat_position_y"),
                  (overlay_set_position, "$g_battle_enemies_ready", pos1),
                  (val_add, ":stat_position_x", 150),
                  (position_set_x, pos1, ":stat_position_x"),
                  (overlay_set_position, "$g_battle_enemies_wounded", pos1),
                  (val_add, ":stat_position_x", 150),
                  (position_set_x, pos1, ":stat_position_x"),
                  (overlay_set_position, "$g_battle_enemies_dead", pos1),
                  
                  (call_script, "script_update_order_flags_on_map"),
                  
                  (try_begin),
                    (eq, ":old_is_infantry_listening", 1),
                    (eq, ":old_is_archers_listening", 1),
                    (eq, ":old_is_cavalry_listening", 1),
                    (team_set_order_listener, ":player_team", grc_everyone),
                  (else_try),
                    (eq, ":old_is_infantry_listening", 1),
                    (team_set_order_listener, ":player_team", grc_infantry),
                  (else_try),
                    (eq, ":old_is_archers_listening", 1),
                    (team_set_order_listener, ":player_team", grc_archers),
                  (else_try),
                    (eq, ":old_is_cavalry_listening", 1),
                    (team_set_order_listener, ":player_team", grc_cavalry),
                  (try_end),
              ]),
              
              # END OF CUSTOM BATTLE
              #----------------------------------------------------------------------------------------
              #SW - I considered adding Battlefield Tactics Kit but decided it didn't work as well for infantry, guns, etc.
              # http://forums.taleworlds.net/index.php/topic,34685.0.html
              #----------------------------------------------------------------------------------------
              
              #SW BSG integration
              
              #BSG
              #script_set_fighters
              # INPUT: arg1 = center_no
              # OUTPUT: reg0 = ideal_prosperity
              ("set_fighters",
                [(store_script_param, ":cylon_type", 1),
                  (store_script_param, ":viper_type", 2),
                  
                  (troop_set_slot,"trp_cylon_a",slot_troop_craft_no,0),
                  (troop_set_slot,"trp_cylon_b",slot_troop_craft_no,1),
                  (troop_set_slot,"trp_cylon_c",slot_troop_craft_no,2),
                  (troop_set_slot,"trp_cylon_d",slot_troop_craft_no,3),
                  (troop_set_slot,"trp_cylon_e",slot_troop_craft_no,4),
                  (troop_set_slot,"trp_cylon_f",slot_troop_craft_no,5),
                  (troop_set_slot,"trp_cylon_g",slot_troop_craft_no,6),
                  (troop_set_slot,"trp_cylon_h",slot_troop_craft_no,7),
                  (troop_set_slot,"trp_cylon_a",slot_troop_craft_type,":cylon_type"),
                  (troop_set_slot,"trp_cylon_b",slot_troop_craft_type,":cylon_type"),
                  (troop_set_slot,"trp_cylon_c",slot_troop_craft_type,":cylon_type"),
                  (troop_set_slot,"trp_cylon_d",slot_troop_craft_type,":cylon_type"),
                  (troop_set_slot,"trp_cylon_e",slot_troop_craft_type,":cylon_type"),
                  (troop_set_slot,"trp_cylon_f",slot_troop_craft_type,":cylon_type"),
                  (troop_set_slot,"trp_cylon_g",slot_troop_craft_type,":cylon_type"),
                  (troop_set_slot,"trp_cylon_h",slot_troop_craft_type,":cylon_type"),
                  (troop_set_slot,"trp_cylon_a",slot_troop_damage,100),
                  (troop_set_slot,"trp_cylon_b",slot_troop_damage,100),
                  (troop_set_slot,"trp_cylon_c",slot_troop_damage,100),
                  (troop_set_slot,"trp_cylon_d",slot_troop_damage,100),
                  (troop_set_slot,"trp_cylon_e",slot_troop_damage,100),
                  (troop_set_slot,"trp_cylon_f",slot_troop_damage,100),
                  (troop_set_slot,"trp_cylon_g",slot_troop_damage,100),
                  (troop_set_slot,"trp_cylon_h",slot_troop_damage,100),
                  (troop_set_slot,"trp_cylon_a",slot_troop_status,1),
                  (troop_set_slot,"trp_cylon_b",slot_troop_status,1),
                  (troop_set_slot,"trp_cylon_c",slot_troop_status,1),
                  (troop_set_slot,"trp_cylon_d",slot_troop_status,1),
                  (troop_set_slot,"trp_cylon_e",slot_troop_status,1),
                  (troop_set_slot,"trp_cylon_f",slot_troop_status,1),
                  (troop_set_slot,"trp_cylon_g",slot_troop_status,1),
                  (troop_set_slot,"trp_cylon_h",slot_troop_status,1),
                  (troop_set_slot,"trp_viper_a",slot_troop_craft_no,0),
                  (troop_set_slot,"trp_viper_b",slot_troop_craft_no,1),
                  (troop_set_slot,"trp_viper_c",slot_troop_craft_no,2),
                  (troop_set_slot,"trp_viper_d",slot_troop_craft_no,0),
                  (troop_set_slot,"trp_viper_e",slot_troop_craft_no,1),
                  (troop_set_slot,"trp_viper_f",slot_troop_craft_no,2),
                  (troop_set_slot,"trp_viper_g",slot_troop_craft_no,3),
                  (troop_set_slot,"trp_viper_h",slot_troop_craft_no,3),
                  (troop_set_slot,"trp_viper_a",slot_troop_craft_type,":viper_type"),
                  (troop_set_slot,"trp_viper_b",slot_troop_craft_type,":viper_type"),
                  (troop_set_slot,"trp_viper_c",slot_troop_craft_type,":viper_type"),
                  (troop_set_slot,"trp_viper_d",slot_troop_craft_type,"spr_viper_mk2"),
                  (troop_set_slot,"trp_viper_e",slot_troop_craft_type,"spr_viper_mk2"),
                  (troop_set_slot,"trp_viper_f",slot_troop_craft_type,"spr_viper_mk2"),
                  (troop_set_slot,"trp_viper_g",slot_troop_craft_type,"spr_viper_mk2"),
                  (troop_set_slot,"trp_viper_h",slot_troop_craft_type,":viper_type"),
                  (troop_set_slot,"trp_viper_a",slot_troop_damage,100),
                  (troop_set_slot,"trp_viper_b",slot_troop_damage,100),
                  (troop_set_slot,"trp_viper_c",slot_troop_damage,100),
                  (troop_set_slot,"trp_viper_d",slot_troop_damage,100),
                  (troop_set_slot,"trp_viper_e",slot_troop_damage,100),
                  (troop_set_slot,"trp_viper_f",slot_troop_damage,100),
                  (troop_set_slot,"trp_viper_g",slot_troop_damage,100),
                  (troop_set_slot,"trp_viper_h",slot_troop_damage,100),
                  (troop_set_slot,"trp_viper_a",slot_troop_status,1),
                  (troop_set_slot,"trp_viper_b",slot_troop_status,1),
                  (troop_set_slot,"trp_viper_c",slot_troop_status,1),
                  (troop_set_slot,"trp_viper_d",slot_troop_status,1),
                  (troop_set_slot,"trp_viper_e",slot_troop_status,1),
                  (troop_set_slot,"trp_viper_f",slot_troop_status,1),
                  (troop_set_slot,"trp_viper_g",slot_troop_status,1),
                  (troop_set_slot,"trp_viper_h",slot_troop_status,1),
              ]),
              #script_calculate_fighter_damages
              # INPUT: arg1 = center_no
              # OUTPUT: reg0 = ideal_prosperity
              ("calculate_fighter_damages",
                [
                  (try_for_range,":collision","spr_viper_mk2","spr_scene_props_end"),
                    (scene_prop_get_num_instances,":instance_no", ":collision"),
                    (try_for_range,":col_object",0,":instance_no"),
                      (scene_prop_get_instance,":col_instance", ":collision", ":col_object"),
                      (prop_instance_get_position,pos2,":col_instance"),
                      (try_for_range,":target","spr_target1","spr_target_end"),
                        (scene_prop_get_instance,":target_instance", ":target", 0),
                        (prop_instance_get_position,pos1,":target_instance"),
                        (get_distance_between_positions, ":target_distance", pos1, pos2),
                        (try_begin),
                          (lt,":target_distance",400),
                          (play_sound,"snd_cannon_hit"),
                          (troop_get_slot,":cylon_a","trp_cylon_a",slot_troop_craft_no),
                          (troop_get_slot,":cylon_b","trp_cylon_b",slot_troop_craft_no),
                          (troop_get_slot,":cylon_c","trp_cylon_c",slot_troop_craft_no),
                          (troop_get_slot,":cylon_d","trp_cylon_d",slot_troop_craft_no),
                          (troop_get_slot,":cylon_e","trp_cylon_e",slot_troop_craft_no),
                          (troop_get_slot,":cylon_f","trp_cylon_f",slot_troop_craft_no),
                          (troop_get_slot,":cylon_g","trp_cylon_g",slot_troop_craft_no),
                          (troop_get_slot,":cylon_h","trp_cylon_h",slot_troop_craft_no),
                          (troop_get_slot,":cylon_a_type","trp_cylon_a",slot_troop_craft_type),
                          (troop_get_slot,":cylon_b_type","trp_cylon_b",slot_troop_craft_type),
                          (troop_get_slot,":cylon_c_type","trp_cylon_c",slot_troop_craft_type),
                          (troop_get_slot,":cylon_d_type","trp_cylon_d",slot_troop_craft_type),
                          (troop_get_slot,":cylon_e_type","trp_cylon_e",slot_troop_craft_type),
                          (troop_get_slot,":cylon_f_type","trp_cylon_f",slot_troop_craft_type),
                          (troop_get_slot,":cylon_g_type","trp_cylon_g",slot_troop_craft_type),
                          (troop_get_slot,":cylon_h_type","trp_cylon_h",slot_troop_craft_type),
                          (troop_get_slot,":viper_a","trp_viper_a",slot_troop_craft_no),
                          (troop_get_slot,":viper_b","trp_viper_b",slot_troop_craft_no),
                          (troop_get_slot,":viper_c","trp_viper_c",slot_troop_craft_no),
                          (troop_get_slot,":viper_d","trp_viper_d",slot_troop_craft_no),
                          (troop_get_slot,":viper_e","trp_viper_e",slot_troop_craft_no),
                          (troop_get_slot,":viper_f","trp_viper_f",slot_troop_craft_no),
                          (troop_get_slot,":viper_g","trp_viper_g",slot_troop_craft_no),
                          (troop_get_slot,":viper_h","trp_viper_h",slot_troop_craft_no),
                          (troop_get_slot,":viper_a_type","trp_viper_a",slot_troop_craft_type),
                          (troop_get_slot,":viper_b_type","trp_viper_b",slot_troop_craft_type),
                          (troop_get_slot,":viper_c_type","trp_viper_c",slot_troop_craft_type),
                          (troop_get_slot,":viper_d_type","trp_viper_d",slot_troop_craft_type),
                          (troop_get_slot,":viper_e_type","trp_viper_e",slot_troop_craft_type),
                          (troop_get_slot,":viper_f_type","trp_viper_f",slot_troop_craft_type),
                          (troop_get_slot,":viper_g_type","trp_viper_g",slot_troop_craft_type),
                          (troop_get_slot,":viper_h_type","trp_viper_h",slot_troop_craft_type),
                          (try_begin),
                            (eq,":col_object",":cylon_a"),
                            (eq,":collision",":cylon_a_type"),
                            (troop_get_slot,":cylon_a_damage","trp_cylon_a",slot_troop_damage),
                            (val_sub,":cylon_a_damage","$player_cannon_damage"),
                            (troop_set_slot,"trp_cylon_a",slot_troop_damage,":cylon_a_damage"),
                          (try_end),
                          (try_begin),
                            (eq,":col_object",":cylon_b"),
                            (eq,":collision",":cylon_b_type"),
                            (troop_get_slot,":cylon_b_damage","trp_cylon_b",slot_troop_damage),
                            (val_sub,":cylon_b_damage","$player_cannon_damage"),
                            (troop_set_slot,"trp_cylon_b",slot_troop_damage,":cylon_b_damage"),
                          (try_end),
                          (try_begin),
                            (eq,":col_object",":cylon_c"),
                            (eq,":collision",":cylon_c_type"),
                            (troop_get_slot,":cylon_c_damage","trp_cylon_c",slot_troop_damage),
                            (val_sub,":cylon_c_damage","$player_cannon_damage"),
                            (troop_set_slot,"trp_cylon_c",slot_troop_damage,":cylon_c_damage"),
                          (try_end),
                          (try_begin),
                            (eq,":col_object",":cylon_d"),
                            (eq,":collision",":cylon_d_type"),
                            (troop_get_slot,":cylon_d_damage","trp_cylon_d",slot_troop_damage),
                            (val_sub,":cylon_d_damage","$player_cannon_damage"),
                            (troop_set_slot,"trp_cylon_d",slot_troop_damage,":cylon_d_damage"),
                          (try_end),
                          (try_begin),
                            (eq,":col_object",":cylon_e"),
                            (eq,":collision",":cylon_e_type"),
                            (troop_get_slot,":cylon_e_damage","trp_cylon_e",slot_troop_damage),
                            (val_sub,":cylon_e_damage","$player_cannon_damage"),
                            (troop_set_slot,"trp_cylon_e",slot_troop_damage,":cylon_e_damage"),
                          (try_end),
                          (try_begin),
                            (eq,":col_object",":cylon_f"),
                            (eq,":collision",":cylon_f_type"),
                            (troop_get_slot,":cylon_f_damage","trp_cylon_f",slot_troop_damage),
                            (val_sub,":cylon_f_damage","$player_cannon_damage"),
                            (troop_set_slot,"trp_cylon_f",slot_troop_damage,":cylon_f_damage"),
                          (try_end),
                          (try_begin),
                            (eq,":col_object",":cylon_g"),
                            (eq,":collision",":cylon_g_type"),
                            (troop_get_slot,":cylon_g_damage","trp_cylon_g",slot_troop_damage),
                            (val_sub,":cylon_g_damage","$player_cannon_damage"),
                            (troop_set_slot,"trp_cylon_g",slot_troop_damage,":cylon_g_damage"),
                          (try_end),
                          (try_begin),
                            (eq,":col_object",":cylon_h"),
                            (eq,":collision",":cylon_h_type"),
                            (troop_get_slot,":cylon_h_damage","trp_cylon_h",slot_troop_damage),
                            (val_sub,":cylon_h_damage","$player_cannon_damage"),
                            (troop_set_slot,"trp_cylon_h",slot_troop_damage,":cylon_h_damage"),
                          (try_end),
                          (try_begin),
                            (eq,":col_object",":viper_a"),
                            (eq,":collision",":viper_a_type"),
                            (troop_get_slot,":viper_a_damage","trp_viper_a",slot_troop_damage),
                            (val_sub,":viper_a_damage","$player_cannon_damage"),
                            (troop_set_slot,"trp_viper_a",slot_troop_damage,":viper_a_damage"),
                          (try_end),
                          (try_begin),
                            (eq,":col_object",":viper_b"),
                            (eq,":collision",":viper_b_type"),
                            (troop_get_slot,":viper_b_damage","trp_viper_b",slot_troop_damage),
                            (val_sub,":viper_b_damage","$player_cannon_damage"),
                            (troop_set_slot,"trp_viper_b",slot_troop_damage,":viper_b_damage"),
                          (try_end),
                          (try_begin),
                            (eq,":col_object",":viper_c"),
                            (eq,":collision",":viper_c_type"),
                            (troop_get_slot,":viper_c_damage","trp_viper_c",slot_troop_damage),
                            (val_sub,":viper_c_damage","$player_cannon_damage"),
                            (troop_set_slot,"trp_viper_c",slot_troop_damage,":viper_c_damage"),
                          (try_end),
                          (try_begin),
                            (eq,":col_object",":viper_d"),
                            (eq,":collision",":viper_d_type"),
                            (troop_get_slot,":viper_d_damage","trp_viper_d",slot_troop_damage),
                            (val_sub,":viper_d_damage","$player_cannon_damage"),
                            (troop_set_slot,"trp_viper_d",slot_troop_damage,":viper_d_damage"),
                          (try_end),
                          (try_begin),
                            (eq,":col_object",":viper_e"),
                            (eq,":collision",":viper_e_type"),
                            (troop_get_slot,":viper_e_damage","trp_viper_e",slot_troop_damage),
                            (val_sub,":viper_e_damage","$player_cannon_damage"),
                            (troop_set_slot,"trp_viper_e",slot_troop_damage,":viper_e_damage"),
                          (try_end),
                          (try_begin),
                            (eq,":col_object",":viper_f"),
                            (eq,":collision",":viper_f_type"),
                            (troop_get_slot,":viper_f_damage","trp_viper_f",slot_troop_damage),
                            (val_sub,":viper_f_damage","$player_cannon_damage"),
                            (troop_set_slot,"trp_viper_f",slot_troop_damage,":viper_f_damage"),
                          (try_end),
                          (try_begin),
                            (eq,":col_object",":viper_g"),
                            (eq,":collision",":viper_g_type"),
                            (troop_get_slot,":viper_g_damage","trp_viper_g",slot_troop_damage),
                            (val_sub,":viper_g_damage","$player_cannon_damage"),
                            (troop_set_slot,"trp_viper_g",slot_troop_damage,":viper_g_damage"),
                          (try_end),
                          (try_begin),
                            (eq,":col_object",":viper_h"),
                            (eq,":collision",":viper_h_type"),
                            (troop_get_slot,":viper_h_damage","trp_viper_h",slot_troop_damage),
                            (val_sub,":viper_h_damage","$player_cannon_damage"),
                            (troop_set_slot,"trp_viper_h",slot_troop_damage,":viper_h_damage"),
                          (try_end),
                        (try_end),
                      (try_end),
                    (try_end),
                  (try_end),
              ]),
              #script_fighter_explosions
              # INPUT: arg1 = center_no
              # OUTPUT: reg0 = ideal_prosperity
              ("fighter_explosions",
                [(store_script_param, ":cylon_type", 1),
                  (store_script_param, ":viper_type", 2),
                  (try_begin),
                    (lt,reg5,1),
                    (troop_slot_eq,"trp_cylon_a",slot_troop_status,1),
                    (scene_prop_get_instance,":cylon_a_ins", ":cylon_type", 0),
                    (prop_instance_get_position,pos2,":cylon_a_ins"),
                    (particle_system_burst,"psys_explosion",pos2,1),
                    (troop_set_slot,"trp_cylon_a",slot_troop_status,0),
                    (position_move_y,pos2,100000),
                    (prop_instance_animate_to_position,":cylon_a_ins",pos2,10),
                    (play_sound,"snd_fighter_explode"),
                  (try_end),
                  (try_begin),
                    (lt,reg6,1),
                    (troop_slot_eq,"trp_cylon_b",slot_troop_status,1),
                    (scene_prop_get_instance,":cylon_b_ins", ":cylon_type", 1),
                    (prop_instance_get_position,pos3,":cylon_b_ins"),
                    (particle_system_burst,"psys_explosion",pos3,1),
                    (troop_set_slot,"trp_cylon_b",slot_troop_status,0),
                    (position_move_y,pos3,1000000),
                    (prop_instance_animate_to_position,":cylon_b_ins",pos3,10),
                    (play_sound,"snd_fighter_explode"),
                  (try_end),
                  (try_begin),
                    (lt,reg7,1),
                    (troop_slot_eq,"trp_cylon_c",slot_troop_status,1),
                    (scene_prop_get_instance,":cylon_c_ins", ":cylon_type", 2),
                    (prop_instance_get_position,pos4,":cylon_c_ins"),
                    (particle_system_burst,"psys_explosion",pos4,1),
                    (troop_set_slot,"trp_cylon_c",slot_troop_status,0),
                    (position_move_y,pos4,1000000),
                    (prop_instance_animate_to_position,":cylon_c_ins",pos4,10),
                    (play_sound,"snd_fighter_explode"),
                  (try_end),
                  (try_begin),
                    (lt,reg8,1),
                    (troop_slot_eq,"trp_cylon_d",slot_troop_status,1),
                    (scene_prop_get_instance,":cylon_d_ins", ":cylon_type", 3),
                    (prop_instance_get_position,pos5,":cylon_d_ins"),
                    (particle_system_burst,"psys_explosion",pos5,1),
                    (troop_set_slot,"trp_cylon_d",slot_troop_status,0),
                    (position_move_y,pos5,1000000),
                    (prop_instance_animate_to_position,":cylon_d_ins",pos5,10),
                    (play_sound,"snd_fighter_explode"),
                  (try_end),
                  (try_begin),
                    (lt,reg9,1),
                    (troop_slot_eq,"trp_cylon_e",slot_troop_status,1),
                    (scene_prop_get_instance,":cylon_e_ins", ":cylon_type", 4),
                    (prop_instance_get_position,pos6,":cylon_e_ins"),
                    (particle_system_burst,"psys_explosion",pos6,1),
                    (troop_set_slot,"trp_cylon_e",slot_troop_status,0),
                    (position_move_y,pos6,100000),
                    (prop_instance_animate_to_position,":cylon_e_ins",pos6,10),
                    (play_sound,"snd_fighter_explode"),
                  (try_end),
                  (try_begin),
                    (lt,reg10,1),
                    (troop_slot_eq,"trp_cylon_f",slot_troop_status,1),
                    (scene_prop_get_instance,":cylon_f_ins", ":cylon_type", 5),
                    (prop_instance_get_position,pos7,":cylon_f_ins"),
                    (particle_system_burst,"psys_explosion",pos7,1),
                    (troop_set_slot,"trp_cylon_f",slot_troop_status,0),
                    (position_move_y,pos7,1000000),
                    (prop_instance_animate_to_position,":cylon_f_ins",pos7,10),
                    (play_sound,"snd_fighter_explode"),
                  (try_end),
                  (try_begin),
                    (lt,reg11,1),
                    (troop_slot_eq,"trp_cylon_g",slot_troop_status,1),
                    (scene_prop_get_instance,":cylon_g_ins", ":cylon_type", 6),
                    (prop_instance_get_position,pos8,":cylon_g_ins"),
                    (particle_system_burst,"psys_explosion",pos8,1),
                    (troop_set_slot,"trp_cylon_g",slot_troop_status,0),
                    (position_move_y,pos8,1000000),
                    (prop_instance_animate_to_position,":cylon_g_ins",pos8,10),
                    (play_sound,"snd_fighter_explode"),
                  (try_end),
                  (try_begin),
                    (lt,reg12,1),
                    (troop_slot_eq,"trp_cylon_h",slot_troop_status,1),
                    (scene_prop_get_instance,":cylon_h_ins", ":cylon_type", 7),
                    (prop_instance_get_position,pos9,":cylon_h_ins"),
                    (particle_system_burst,"psys_explosion",pos9,1),
                    (troop_set_slot,"trp_cylon_h",slot_troop_status,0),
                    (position_move_y,pos9,1000000),
                    (prop_instance_animate_to_position,":cylon_h_ins",pos9,10),
                    (play_sound,"snd_fighter_explode"),
                  (try_end),
                  (try_begin),
                    (lt,reg13,1),
                    (troop_slot_eq,"trp_viper_a",slot_troop_status,1),
                    (scene_prop_get_instance,":viper_a_ins", ":viper_type", 0),
                    (prop_instance_get_position,pos10,":viper_a_ins"),
                    (particle_system_burst,"psys_explosion",pos10,1),
                    (troop_set_slot,"trp_viper_a",slot_troop_status,0),
                    (position_move_y,pos10,100000),
                    (prop_instance_animate_to_position,":viper_a_ins",pos10,10),
                    (play_sound,"snd_fighter_explode"),
                  (try_end),
                  (try_begin),
                    (lt,reg14,1),
                    (troop_slot_eq,"trp_viper_b",slot_troop_status,1),
                    (scene_prop_get_instance,":viper_b_ins", ":viper_type", 1),
                    (prop_instance_get_position,pos11,":viper_b_ins"),
                    (particle_system_burst,"psys_explosion",pos11,1),
                    (troop_set_slot,"trp_viper_b",slot_troop_status,0),
                    (position_move_y,pos11,1000000),
                    (prop_instance_animate_to_position,":viper_b_ins",pos11,10),
                    (play_sound,"snd_fighter_explode"),
                  (try_end),
                  (try_begin),
                    (lt,reg15,1),
                    (troop_slot_eq,"trp_viper_c",slot_troop_status,1),
                    (scene_prop_get_instance,":viper_c_ins", ":viper_type", 2),
                    (prop_instance_get_position,pos12,":viper_c_ins"),
                    (particle_system_burst,"psys_explosion",pos12,1),
                    (troop_set_slot,"trp_viper_c",slot_troop_status,0),
                    (position_move_y,pos12,1000000),
                    (prop_instance_animate_to_position,":viper_c_ins",pos12,10),
                    (play_sound,"snd_fighter_explode"),
                  (try_end),
                  (try_begin),
                    (lt,reg16,1),
                    (troop_slot_eq,"trp_viper_d",slot_troop_status,1),
                    (scene_prop_get_instance,":viper_d_ins", ":viper_type", 3),
                    (prop_instance_get_position,pos13,":viper_d_ins"),
                    (particle_system_burst,"psys_explosion",pos13,1),
                    (troop_set_slot,"trp_viper_d",slot_troop_status,0),
                    (position_move_y,pos13,1000000),
                    (prop_instance_animate_to_position,":viper_d_ins",pos13,10),
                    (play_sound,"snd_fighter_explode"),
                  (try_end),
                  (try_begin),
                    (lt,reg17,1),
                    (troop_slot_eq,"trp_viper_e",slot_troop_status,1),
                    (scene_prop_get_instance,":viper_e_ins", ":viper_type", 4),
                    (prop_instance_get_position,pos14,":viper_e_ins"),
                    (particle_system_burst,"psys_explosion",pos14,1),
                    (troop_set_slot,"trp_viper_e",slot_troop_status,0),
                    (position_move_y,pos14,100000),
                    (prop_instance_animate_to_position,":viper_e_ins",pos14,10),
                    (play_sound,"snd_fighter_explode"),
                  (try_end),
                  (try_begin),
                    (lt,reg18,1),
                    (troop_slot_eq,"trp_viper_f",slot_troop_status,1),
                    (scene_prop_get_instance,":viper_f_ins", ":viper_type", 5),
                    (prop_instance_get_position,pos15,":viper_f_ins"),
                    (particle_system_burst,"psys_explosion",pos15,1),
                    (troop_set_slot,"trp_viper_f",slot_troop_status,0),
                    (position_move_y,pos15,1000000),
                    (prop_instance_animate_to_position,":viper_f_ins",pos15,10),
                    (play_sound,"snd_fighter_explode"),
                  (try_end),
                  (try_begin),
                    (lt,reg19,1),
                    (troop_slot_eq,"trp_viper_g",slot_troop_status,1),
                    (scene_prop_get_instance,":viper_g_ins", ":viper_type", 6),
                    (prop_instance_get_position,pos16,":viper_g_ins"),
                    (particle_system_burst,"psys_explosion",pos16,1),
                    (troop_set_slot,"trp_viper_g",slot_troop_status,0),
                    (position_move_y,pos16,1000000),
                    (prop_instance_animate_to_position,":viper_g_ins",pos16,10),
                    (play_sound,"snd_fighter_explode"),
                  (try_end),
                  (try_begin),
                    (lt,reg20,1),
                    (troop_slot_eq,"trp_viper_h",slot_troop_status,1),
                    (scene_prop_get_instance,":viper_h_ins", ":viper_type", 7),
                    (prop_instance_get_position,pos17,":viper_h_ins"),
                    (particle_system_burst,"psys_explosion",pos17,1),
                    (troop_set_slot,"trp_viper_h",slot_troop_status,0),
                    (position_move_y,pos17,1000000),
                    (prop_instance_animate_to_position,":viper_h_ins",pos17,10),
                    (play_sound,"snd_fighter_explode"),
                  (try_end),
              ]),
              #script_ai_cylon_movements
              # INPUT: arg1 = center_no
              # OUTPUT: reg0 = ideal_prosperity
              ("ai_cylon_movements",
                [(store_script_param, ":instance", 1),
                  (store_script_param, ":cylon", 2),
                  (troop_get_slot,":target_instance",":cylon",slot_troop_ai_target),
                  (prop_instance_get_position,pos1,":instance"),
                  (prop_instance_get_position,pos2,":instance"),
                  (prop_instance_get_position,pos3,":instance"),
                  (prop_instance_get_position,pos4,":instance"),
                  (prop_instance_get_position,pos5,":instance"),
                  (prop_instance_get_position,pos6,":instance"),
                  (prop_instance_get_position,pos7,":instance"),
                  (prop_instance_get_position,pos8,":target_instance"),
                  (prop_instance_get_position,pos9,":instance"),
                  (position_move_y,pos2,-100),
                  (position_move_y,pos3,500),
                  (position_move_x,pos4,500),
                  (position_move_x,pos5,-500),
                  (position_move_z,pos6,500),
                  (position_move_z,pos7,-500),
                  (position_move_z,pos9,-4000),
                  (get_distance_between_positions, ":front_distance", pos8, pos2),
                  (get_distance_between_positions, ":back_distance", pos8, pos3),
                  (get_distance_between_positions, ":left_distance", pos8, pos4),
                  (get_distance_between_positions, ":right_distance", pos8, pos5),
                  (get_distance_between_positions, ":upper_distance", pos8, pos6),
                  (get_distance_between_positions, ":down_distance", pos8, pos7),
                  (get_distance_between_positions, ":shot_distance", pos8, pos9),
                  (try_begin),
                    (lt,":front_distance",":back_distance"),
                    (lt,":front_distance",":right_distance"),
                    (lt,":front_distance",":left_distance"),
                    (lt,":front_distance",":upper_distance"),
                    (lt,":front_distance",":down_distance"),
                    (assign,":ai_rotate_x",0),
                    (assign,":ai_rotate_y",0),
                  (else_try),
                    (lt,":back_distance",":front_distance"),
                    (lt,":back_distance",":right_distance"),
                    (lt,":back_distance",":left_distance"),
                    (lt,":back_distance",":upper_distance"),
                    (lt,":back_distance",":down_distance"),
                    (assign,":ai_rotate_x",5),
                    (assign,":ai_rotate_y",0),
                  (else_try),
                    (lt,":right_distance",":front_distance"),
                    (lt,":right_distance",":back_distance"),
                    (lt,":right_distance",":left_distance"),
                    (lt,":right_distance",":upper_distance"),
                    (lt,":right_distance",":down_distance"),
                    (assign,":ai_rotate_y",-6),
                    (assign,":ai_rotate_x",0),
                  (else_try),
                    (lt,":left_distance",":front_distance"),
                    (lt,":left_distance",":right_distance"),
                    (lt,":left_distance",":back_distance"),
                    (lt,":left_distance",":upper_distance"),
                    (lt,":left_distance",":down_distance"),
                    (assign,":ai_rotate_y",6),
                    (assign,":ai_rotate_x",0),
                  (else_try),
                    (lt,":upper_distance",":front_distance"),
                    (lt,":upper_distance",":right_distance"),
                    (lt,":upper_distance",":left_distance"),
                    (lt,":upper_distance",":back_distance"),
                    (lt,":upper_distance",":down_distance"),
                    (assign,":ai_rotate_x",5),
                    (assign,":ai_rotate_y",0),
                  (else_try),
                    (lt,":down_distance",":front_distance"),
                    (lt,":down_distance",":right_distance"),
                    (lt,":down_distance",":left_distance"),
                    (lt,":down_distance",":upper_distance"),
                    (lt,":down_distance",":back_distance"),
                    (assign,":ai_rotate_x",-5),
                    (assign,":ai_rotate_y",0),
                  (try_end),
                  (position_rotate_y,pos1,":ai_rotate_y"),
                  (position_rotate_x,pos1,":ai_rotate_x"),
                  (position_move_y,pos1,230),
                  (try_begin),
                    (troop_slot_eq,":cylon",slot_troop_status,1),
                    (prop_instance_animate_to_position,":instance",pos1,10),
                  (try_end),
                  (try_begin),
                    (lt,":shot_distance",2000),
                    (call_script,"script_cf_ai_cylon_shot",":instance",":cylon"),
                  (try_end),
              ]),
              #script_ai_viper_movements
              # INPUT: arg1 = center_no
              # OUTPUT: reg0 = ideal_prosperity
              ("ai_viper_movements",
                [(store_script_param, ":instance", 1),
                  (store_script_param, ":viper", 2),
                  (troop_get_slot,":target_instance",":viper",slot_troop_ai_target),
                  (prop_instance_get_position,pos1,":instance"),
                  (prop_instance_get_position,pos2,":instance"),
                  (prop_instance_get_position,pos3,":instance"),
                  (prop_instance_get_position,pos4,":instance"),
                  (prop_instance_get_position,pos5,":instance"),
                  (prop_instance_get_position,pos6,":instance"),
                  (prop_instance_get_position,pos7,":instance"),
                  (prop_instance_get_position,pos8,":target_instance"),
                  (prop_instance_get_position,pos9,":instance"),
                  (position_move_y,pos2,-100),
                  (position_move_y,pos3,500),
                  (position_move_x,pos4,500),
                  (position_move_x,pos5,-500),
                  (position_move_z,pos6,500),
                  (position_move_z,pos7,-500),
                  (position_move_z,pos9,-4000),
                  (get_distance_between_positions, ":front_distance", pos8, pos2),
                  (get_distance_between_positions, ":back_distance", pos8, pos3),
                  (get_distance_between_positions, ":left_distance", pos8, pos4),
                  (get_distance_between_positions, ":right_distance", pos8, pos5),
                  (get_distance_between_positions, ":upper_distance", pos8, pos6),
                  (get_distance_between_positions, ":down_distance", pos8, pos7),
                  (get_distance_between_positions, ":shot_distance", pos8, pos9),
                  (try_begin),
                    (lt,":front_distance",":back_distance"),
                    (lt,":front_distance",":right_distance"),
                    (lt,":front_distance",":left_distance"),
                    (lt,":front_distance",":upper_distance"),
                    (lt,":front_distance",":down_distance"),
                    (assign,":ai_rotate_x",0),
                    (assign,":ai_rotate_y",0),
                  (else_try),
                    (lt,":back_distance",":front_distance"),
                    (lt,":back_distance",":right_distance"),
                    (lt,":back_distance",":left_distance"),
                    (lt,":back_distance",":upper_distance"),
                    (lt,":back_distance",":down_distance"),
                    (assign,":ai_rotate_x",5),
                    (assign,":ai_rotate_y",0),
                  (else_try),
                    (lt,":right_distance",":front_distance"),
                    (lt,":right_distance",":back_distance"),
                    (lt,":right_distance",":left_distance"),
                    (lt,":right_distance",":upper_distance"),
                    (lt,":right_distance",":down_distance"),
                    (assign,":ai_rotate_y",-6),
                    (assign,":ai_rotate_x",0),
                  (else_try),
                    (lt,":left_distance",":front_distance"),
                    (lt,":left_distance",":right_distance"),
                    (lt,":left_distance",":back_distance"),
                    (lt,":left_distance",":upper_distance"),
                    (lt,":left_distance",":down_distance"),
                    (assign,":ai_rotate_y",6),
                    (assign,":ai_rotate_x",0),
                  (else_try),
                    (lt,":upper_distance",":front_distance"),
                    (lt,":upper_distance",":right_distance"),
                    (lt,":upper_distance",":left_distance"),
                    (lt,":upper_distance",":back_distance"),
                    (lt,":upper_distance",":down_distance"),
                    (assign,":ai_rotate_x",5),
                    (assign,":ai_rotate_y",0),
                  (else_try),
                    (lt,":down_distance",":front_distance"),
                    (lt,":down_distance",":right_distance"),
                    (lt,":down_distance",":left_distance"),
                    (lt,":down_distance",":upper_distance"),
                    (lt,":down_distance",":back_distance"),
                    (assign,":ai_rotate_x",-5),
                    (assign,":ai_rotate_y",0),
                  (try_end),
                  (position_rotate_y,pos1,":ai_rotate_y"),
                  (position_rotate_x,pos1,":ai_rotate_x"),
                  (position_move_y,pos1,240),
                  (try_begin),
                    (troop_slot_eq,":viper",slot_troop_status,1),
                    (prop_instance_animate_to_position,":instance",pos1,10),
                  (try_end),
                  (try_begin),
                    (lt,":shot_distance",2000),
                    (call_script,"script_cf_ai_viper_shot",":instance",":viper"),
                  (try_end),
              ]),
              #script_ai_viper_shot
              # INPUT: arg1 = center_no
              # OUTPUT: reg0 = ideal_prosperity
              ("cf_ai_viper_shot",
                [(store_script_param, ":instance", 1),
                  (store_script_param, ":viper", 2),
                  (prop_instance_get_position,pos1,":instance"),
                  (prop_instance_get_position,pos2,":instance"),
                  (prop_instance_get_position,pos3,":instance"),
                  (prop_instance_get_position,pos4,":instance"),
                  (scene_prop_get_instance,":s_instance", "$player_ship", 0),
                  (prop_instance_get_position,pos5,":s_instance"),
                  (position_move_y,pos1,25),
                  (position_move_x,pos1,-300),
                  (position_move_z,pos1,-45),
                  (position_move_y,pos2,25),
                  (position_move_x,pos2,300),
                  (position_move_z,pos2,-45),
                  (position_move_y,pos3,-110),
                  (position_move_x,pos3,0),
                  (position_move_z,pos3,190),
                  (particle_system_burst,"psys_viper_machine_gun",pos1,1),
                  (particle_system_burst,"psys_viper_machine_gun",pos2,1),
                  (particle_system_burst,"psys_viper_machine_gun",pos3,1),
                  (get_distance_between_positions, ":sound_distance", pos4, pos5),
                  (try_begin),
                    (lt,":sound_distance",10000),
                    (play_sound,"snd_viper_cannon_far"),
                  (try_end),
                  (troop_get_slot,":cylon",":viper",slot_troop_ai_target_troop),
                  (troop_get_slot,":cylon_damage",":cylon",slot_troop_damage),
                  (val_sub,":cylon_damage",3),
                  (troop_set_slot,":cylon",slot_troop_damage,":cylon_damage"),
              ]),
              #script_ai_cylon_shot
              # INPUT: arg1 = center_no
              # OUTPUT: reg0 = ideal_prosperity
              ("cf_ai_cylon_shot",
                [(store_script_param, ":instance", 1),
                  (store_script_param, ":cylon", 2),
                  (prop_instance_get_position,pos1,":instance"),
                  (prop_instance_get_position,pos2,":instance"),
                  (prop_instance_get_position,pos4,":instance"),
                  (scene_prop_get_instance,":s_instance", "$player_ship", 0),
                  (prop_instance_get_position,pos5,":s_instance"),
                  (position_move_y,pos1,25),
                  (position_move_x,pos1,-75),
                  (position_move_z,pos1,0),
                  (position_move_y,pos2,25),
                  (position_move_x,pos2,75),
                  (position_move_z,pos2,0),
                  (particle_system_burst,"psys_cylon_machine_gun",pos1,1),
                  (particle_system_burst,"psys_cylon_machine_gun",pos2,1),
                  (get_distance_between_positions, ":sound_distance", pos4, pos5),
                  (try_begin),
                    (lt,":sound_distance",10000),
                    (play_sound,"snd_cylon_cannon_far"),
                  (try_end),
                  (troop_get_slot,":viper",":cylon",slot_troop_ai_target_troop),
                  (troop_get_slot,":viper_damage",":viper",slot_troop_damage),
                  (val_sub,":viper_damage",2),
                  (troop_set_slot,":viper",slot_troop_damage,":viper_damage"),
              ]),
              #-------------------------------------------------------------------------------------
              
              #SW - added shield bash kit --------------------------------------------------------
              # START OF SHIELD BASH KIT
              
              ("cf_agent_shield_bash",
                [
                  (store_script_param, ":agent",1),
                  (agent_get_position,pos1,":agent"),
                  (agent_set_animation, ":agent", "anim_release_bash"),
                  #check what sound to play
                  (assign, ":lightsaber_noise", 0),
                  (try_for_range,":shield",shield_bash_lightsaber_begin, shield_bash_lightsaber_end),
                    (agent_has_item_equipped,":agent",":shield"),
                    (assign,":lightsaber_noise",1),
                  (end_try),
                  (try_begin),
                    (eq, ":lightsaber_noise", 1),  #its a lightsaber shield, make a lightsaber swing noise
                    (agent_play_sound,":agent","snd_lightsaber_swing"),
                  (else_try),
                    (agent_play_sound,":agent","snd_man_grunt"),
                  (try_end),
                  #check if you deal any damage
                  (assign,":victim",-1),
                  (try_for_agents,":possible_victim"),
                    (agent_is_alive,":possible_victim"),
                    (agent_is_human,":possible_victim"),
                    (neq,":possible_victim",":agent"),
                    (agent_get_class ,":class", ":possible_victim"),
                    (neq,":class",grc_cavalry),
                    (agent_get_position,pos2,":possible_victim"),
                    (get_distance_between_positions,":dist",pos1,pos2),
                    (lt,":dist",150),
                    (neg|position_is_behind_position,pos2,pos1),
                    (assign,":victim",":possible_victim"),
                  (end_try),
                  (gt,":victim",-1),
                  #(store_random_in_range,":rand",0,2),
                  (store_random_in_range,":rand",5,20),  #SW - modified shield_bash damage
                  (store_agent_hit_points,":hp",":victim",1),
                  (val_sub,":hp",":rand"),
                  (store_random_in_range,":hit_reaction",1,101),
                  (store_skill_level,":a_shield",skl_shield,":victim"),
                  (store_skill_level,":v_shield",skl_shield,":agent"),
                  (try_begin),
                    (gt,":hp",0),
                    (agent_set_hit_points,":victim",":hp",1),
                    #(agent_deliver_damage_to_agent,":agent",":victim"),       #SW - added ability for agent to deliver damage (nevermind, it always does a lot of damage, not the :rand number above)
                    (get_player_agent_no, ":player_agent"),  #new
                    (try_begin),
                      (eq, ":agent", ":player_agent"),      #since custom commander is integrated
                      (assign, reg12, ":rand"),             #new text
                      (display_message, "@Delivered {reg12} damage."),  #new text
                    (else_try),
                      (eq, ":victim", ":player_agent"),     #since custom commander is integrated
                      (assign, reg12, ":rand"),             #new text
                      (display_message, "@Received {reg12} damage.", 0xd09595),  #new text
                    (try_end),
                    (agent_play_sound,":agent","snd_shield_hit_wood_wood"),
                    (agent_play_sound,":victim","snd_blunt_hit"),
                    (agent_play_sound,":victim","snd_blunt_hit"),
                    (try_begin),
                      (gt,":a_shield", ":v_shield"),
                      (try_begin),
                        (is_between,":hit_reaction",0,1),
                        (agent_set_animation, ":victim", "anim_bash_unsuccessful"),
                      (else_try),
                        (is_between,":hit_reaction",0,1),
                        (agent_set_animation, ":victim", "anim_bash_crouch"),
                      (else_try),
                        (is_between,":hit_reaction",0,1),
                        (agent_set_animation, ":victim", "anim_bash_mini_stun"),
                      (else_try),
                        (is_between,":hit_reaction",0,1),
                        (agent_set_animation, ":victim", "anim_bash_stun"),
                      (else_try),
                        (is_between,":hit_reaction",0,100),
                        (agent_set_animation, ":victim", "anim_bash_knocked"),
                      (end_try),
                    (else_try),
                      (lt,":a_shield", ":v_shield"),
                      (try_begin),
                        (is_between,":hit_reaction",0,1),
                        (agent_set_animation, ":victim", "anim_bash_unsuccessful"),
                      (else_try),
                        (is_between,":hit_reaction",0,1),
                        (agent_set_animation, ":victim", "anim_bash_crouch"),
                      (else_try),
                        (is_between,":hit_reaction",0,1),
                        (agent_set_animation, ":victim", "anim_bash_mini_stun"),
                      (else_try),
                        (is_between,":hit_reaction",0,1),
                        (agent_set_animation, ":victim", "anim_bash_stun"),
                      (else_try),
                        (is_between,":hit_reaction",0,100),
                        (agent_set_animation, ":victim", "anim_bash_knocked"),
                      (end_try),
                    (else_try),
                      (eq,":a_shield", ":v_shield"),
                      (try_begin),
                        (is_between,":hit_reaction",0,1),
                        (agent_set_animation, ":victim", "anim_bash_unsuccessful"),
                      (else_try),
                        (is_between,":hit_reaction",0,1),
                        (agent_set_animation, ":victim", "anim_bash_crouch"),
                      (else_try),
                        (is_between,":hit_reaction",0,1),
                        (agent_set_animation, ":victim", "anim_bash_mini_stun"),
                      (else_try),
                        (is_between,":hit_reaction",0,1),
                        (agent_set_animation, ":victim", "anim_bash_stun"),
                      (else_try),
                        (is_between,":hit_reaction",0,100),
                        (agent_set_animation, ":victim", "anim_bash_knocked"),
                      (end_try),
                    (end_try),
                  (else_try),
                    (agent_play_sound,":agent","snd_shield_hit_wood_wood"),
                    (agent_play_sound,":victim","snd_blunt_hit"),
                    (agent_deliver_damage_to_agent,":agent",":victim"),
                  (end_try),
              ]),
              
              # END OF SHIELD BASH KIT ----------------------------------------------------------------------
              
              ####################################################################################
              # Autoloot Scripts begin
              ####################################################################################
              ("init_item_difficulties",
                [
                  (try_for_range, ":item", 0, "itm_items_end"),
                    (store_item_value, ":cost", ":item"),
                    (try_begin),
                      (le, ":cost", 50),
                      # low cost items are all 0 difficulty
                      (item_set_slot, ":item", slot_item_difficulty, 0),
                    (else_try),
                      # get the ones digit of the cost
                      (store_mod, ":difficulty", ":cost", 10),
                      # if it is strength based, add 5
                      (item_get_type, ":type", ":item"),
                      (try_begin),
                        (this_or_next|eq, ":type", itp_type_one_handed_wpn),
                        (this_or_next|eq, ":type", itp_type_two_handed_wpn),
                        (this_or_next|eq, ":type", itp_type_polearm),
                        (this_or_next|eq, ":type", itp_type_head_armor),
                        (this_or_next|eq, ":type", itp_type_body_armor),
                        (this_or_next|eq, ":type", itp_type_foot_armor),
                        (eq, ":type", itp_type_hand_armor),
                        (val_add, ":difficulty", 5),
                      (try_end),
                      (item_set_slot, ":item", slot_item_difficulty, ":difficulty"),
                    (try_end),
                  (try_end),
                ]
              ),
              
              ###################################
              # Can a troop qualify to use this item?
              # Returns 1 = yes, 0 = no.
              ("troop_can_use_item",
                [
                  (store_script_param, ":troop", 1),
                  (store_script_param, ":item", 2),
                  (store_script_param, ":item_modifier", 3),
                  
                  (item_get_slot, ":difficulty", ":item", slot_item_difficulty),
                  
                  (item_get_type, ":type", ":item"),
                  
                  # HC - Ignore imod_heavy for itp_type_musket or itp_type_pistol
                  #(try_begin),
                  #(this_or_next|neq, ":type", itp_type_musket),
                  #(         neq, ":type", itp_type_pistol),
                  (try_begin),
                    (eq, ":item_modifier", imod_stubborn),
                    (val_add, ":difficulty", 1),
                  (else_try),
                    (eq, ":item_modifier", imod_timid),
                    (val_sub, ":difficulty", 1),
                  (else_try),
                    (eq, ":item_modifier", imod_heavy),
                    (val_add, ":difficulty", 1),
                  (else_try),
                    (eq, ":item_modifier", imod_strong),
                    (val_add, ":difficulty", 2),
                  (else_try),
                    (eq, ":item_modifier", imod_masterwork),
                    (val_add, ":difficulty", 4),
                  (try_end),
                  #(try_end),
                  
                  (try_begin),
                    (eq, ":type", itp_type_horse),
                    (store_skill_level, ":skill", skl_riding, ":troop"),
                  (else_try),
                    (this_or_next|eq, ":type", itp_type_one_handed_wpn),
                    (this_or_next|eq, ":type", itp_type_two_handed_wpn),
                    (this_or_next|eq, ":type", itp_type_polearm),
                    (this_or_next|eq, ":type", itp_type_head_armor),
                    (this_or_next|eq, ":type", itp_type_body_armor),
                    (this_or_next|eq, ":type", itp_type_foot_armor),
                    (           eq, ":type", itp_type_hand_armor),
                    (store_attribute_level, ":skill", ":troop", ca_strength),
                  (else_try),
                    (eq, ":type", itp_type_shield),
                    (store_skill_level, ":skill", skl_shield, ":troop"),
                  (else_try),
                    (eq, ":type", itp_type_bow),
                    (store_skill_level, ":skill", skl_power_draw, ":troop"),
                  (else_try),
                    (eq, ":type", itp_type_thrown),
                    (store_skill_level, ":skill", skl_power_throw, ":troop"),
                  (try_end),
                  
                  # HC - Try to short-circuit the difficulty for any laser gun. The last code attempt
                  #      doesn't seem to want to ignore guns.
                  (try_begin),
                    (eq, ":type", itp_type_musket),
                    (assign, ":skill", 10),
                  (else_try),
                    (eq, ":type", itp_type_pistol),
                    (assign, ":skill", 10),
                  (try_end),
                  
                  (try_begin),
                    (lt, ":skill", ":difficulty"),
                    (assign, reg0, 0),
                  (else_try),
                    (assign, reg0, 1),
                  (try_end),
              ]),
              
              #####################################################################
              # gets an item's value
              # Param1: item ID
              # Param2: item modifier
              #####################################################################
              ("get_item_value_with_imod", [  # returns the sell price based on the item's money value and its imod
                  (store_script_param, ":item", 1),
                  (store_script_param, ":imod", 2),
                  (store_item_value, ":score", ":item"),
                  (try_begin),
                    (eq, ":imod", imod_plain),
                    (val_mul, ":score", 100),
                  (else_try),
                    (eq, ":imod", imod_cracked),
                    (val_mul, ":score", 50),
                  (else_try),
                    (eq, ":imod", imod_rusty),
                    (val_mul, ":score", 55),
                  (else_try),
                    (eq, ":imod", imod_bent),
                    (val_mul, ":score", 65),
                  (else_try),
                    (eq, ":imod", imod_chipped),
                    (val_mul, ":score", 72),
                  (else_try),
                    (eq, ":imod", imod_battered),
                    (val_mul, ":score", 75),
                  (else_try),
                    (eq, ":imod", imod_poor),
                    (val_mul, ":score", 80),
                  (else_try),
                    (eq, ":imod", imod_crude),
                    (val_mul, ":score", 83),
                  (else_try),
                    (eq, ":imod", imod_old),
                    (val_mul, ":score", 86),
                  (else_try),
                    (eq, ":imod", imod_cheap),
                    (val_mul, ":score", 90),
                  (else_try),
                    (eq, ":imod", imod_fine),
                    (val_mul, ":score", 190),
                  (else_try),
                    (eq, ":imod", imod_well_made),
                    (val_mul, ":score", 250),
                  (else_try),
                    (eq, ":imod", imod_sharp),
                    (val_mul, ":score", 160),
                  (else_try),
                    (eq, ":imod", imod_balanced),
                    (val_mul, ":score", 350),
                  (else_try),
                    (eq, ":imod", imod_tempered),
                    (val_mul, ":score", 670),
                  (else_try),
                    (eq, ":imod", imod_deadly),
                    (val_mul, ":score", 850),
                  (else_try),
                    (eq, ":imod", imod_exquisite),
                    (val_mul, ":score", 1450),
                  (else_try),
                    (eq, ":imod", imod_masterwork),
                    (val_mul, ":score", 1750),
                  (else_try),
                    (eq, ":imod", imod_heavy),
                    (val_mul, ":score", 190),
                  (else_try),
                    (eq, ":imod", imod_strong),
                    (val_mul, ":score", 490),
                  (else_try),
                    (eq, ":imod", imod_powerful),
                    (val_mul, ":score", 320),
                  (else_try),
                    (eq, ":imod", imod_tattered),
                    (val_mul, ":score", 50),
                  (else_try),
                    (eq, ":imod", imod_ragged),
                    (val_mul, ":score", 70),
                  (else_try),
                    (eq, ":imod", imod_rough),
                    (val_mul, ":score", 60),
                  (else_try),
                    (eq, ":imod", imod_sturdy),
                    (val_mul, ":score", 170),
                  (else_try),
                    (eq, ":imod", imod_thick),
                    (val_mul, ":score", 260),
                  (else_try),
                    (eq, ":imod", imod_hardened),
                    (val_mul, ":score", 390),
                  (else_try),
                    (eq, ":imod", imod_reinforced),
                    (val_mul, ":score", 650),
                  (else_try),
                    (eq, ":imod", imod_superb),
                    (val_mul, ":score", 250),
                  (else_try),
                    (eq, ":imod", imod_lordly),
                    (val_mul, ":score", 1150),
                  (else_try),
                    (eq, ":imod", imod_lame),
                    (val_mul, ":score", 40),
                  (else_try),
                    (eq, ":imod", imod_swaybacked),
                    (val_mul, ":score", 60),
                  (else_try),
                    (eq, ":imod", imod_stubborn),
                    (val_mul, ":score", 90),
                  (else_try),
                    (eq, ":imod", imod_timid),
                    (val_mul, ":score", 180),
                  (else_try),
                    (eq, ":imod", imod_meek),
                    (val_mul, ":score", 180),
                  (else_try),
                    (eq, ":imod", imod_spirited),
                    (val_mul, ":score", 650),
                  (else_try),
                    (eq, ":imod", imod_champion),
                    (val_mul, ":score", 1450),
                  (else_try),
                    (eq, ":imod", imod_fresh),
                    (val_mul, ":score", 100),
                  (else_try),
                    (eq, ":imod", imod_day_old),
                    (val_mul, ":score", 100),
                  (else_try),
                    (eq, ":imod", imod_two_day_old),
                    (val_mul, ":score", 90),
                  (else_try),
                    (eq, ":imod", imod_smelling),
                    (val_mul, ":score", 40),
                  (else_try),
                    (eq, ":imod", imod_rotten),
                    (val_mul, ":score", 5),
                  (else_try),
                    (eq, ":imod", imod_large_bag),
                    (val_mul, ":score", 190),
                  (try_end),
                  
                  (assign, reg0, ":score"),
              ]),
              
              
              ###################
              # Used in conversations
              
              ("print_wpn_upgrades_to_s0", [
                  (store_script_param_1, ":troop"),
                  
                  (str_store_string, s0, "str_empty_string"),
                  (troop_get_slot, ":upg", ":troop", slot_upgrade_wpn_0),
                  (troop_get_inventory_slot, ":item", ":troop", 0),
                  (try_begin),
                    (ge, ":item", 0),
                    (str_store_item_name, s10, ":item"),
                  (else_try),
                    (str_store_string, s10, "str_none"),
                  (try_end),
                  (val_add, ":upg", "str_hero_wpn_slot_none"),
                  (str_store_string, s1, ":upg"),
                  (str_store_string, s0, "@{s0}^{s1}"),
                  (troop_get_slot, ":upg", ":troop", slot_upgrade_wpn_1),
                  (troop_get_inventory_slot, ":item", ":troop", 1),
                  (try_begin),
                    (ge, ":item", 0),
                    (str_store_item_name, s10, ":item"),
                  (else_try),
                    (str_store_string, s10, "str_none"),
                  (try_end),
                  (val_add, ":upg", "str_hero_wpn_slot_none"),
                  (str_store_string, s1, ":upg"),
                  (str_store_string, s0, "@{s0}^{s1}"),
                  (troop_get_slot, ":upg", ":troop", slot_upgrade_wpn_2),
                  (troop_get_inventory_slot, ":item", ":troop", 2),
                  (try_begin),
                    (ge, ":item", 0),
                    (str_store_item_name, s10, ":item"),
                  (else_try),
                    (str_store_string, s10, "str_none"),
                  (try_end),
                  (val_add, ":upg", "str_hero_wpn_slot_none"),
                  (str_store_string, s1, ":upg"),
                  (str_store_string, s0, "@{s0}^{s1}"),
                  (troop_get_slot, ":upg", ":troop", slot_upgrade_wpn_3),
                  (troop_get_inventory_slot, ":item", ":troop", 3),
                  (try_begin),
                    (ge, ":item", 0),
                    (str_store_item_name, s10, ":item"),
                  (else_try),
                    (str_store_string, s10, "str_none"),
                  (try_end),
                  (val_add, ":upg", "str_hero_wpn_slot_none"),
                  (str_store_string, s1, ":upg"),
                  (str_store_string, s0, "@{s0}^{s1}"),
              ]),
              
              ################################
              # Copy this troop's upgrade options to everyone
              
              ("copy_upgrade_to_all_heroes", [
                  (store_script_param_1, ":troop"),
                  
                  (troop_get_slot,":upg_armor", ":troop",slot_upgrade_armor),
                  (troop_get_slot,":upg_horse",":troop",slot_upgrade_horse),
                  (troop_get_slot,":upg_wpn0",":troop",slot_upgrade_wpn_0),
                  (troop_get_slot,":upg_wpn1",":troop",slot_upgrade_wpn_1),
                  (troop_get_slot,":upg_wpn2",":troop",slot_upgrade_wpn_2),
                  (troop_get_slot,":upg_wpn3",":troop",slot_upgrade_wpn_3),
                  
                  (try_for_range, ":hero", companions_begin, companions_end),
                    (troop_set_slot,":hero",slot_upgrade_armor,":upg_armor"),
                    (troop_set_slot,":hero",slot_upgrade_horse,":upg_horse"),
                    (troop_set_slot,":hero",slot_upgrade_wpn_0,":upg_wpn0"),
                    (troop_set_slot,":hero",slot_upgrade_wpn_1,":upg_wpn1"),
                    (troop_set_slot,":hero",slot_upgrade_wpn_2,":upg_wpn2"),
                    (troop_set_slot,":hero",slot_upgrade_wpn_3,":upg_wpn3"),
                  (try_end),
              ]),
              
              ####################################
              # Talk to this troop from the loot menu
              
              ("loot_menu_talk", [
                  (store_script_param, ":troop", 1),
                  (set_jump_mission,"mt_conversation_encounter"),
                  (modify_visitors_at_site,"scn_conversation_scene"),(reset_visitors),
                  (set_visitor,0,"trp_player"),
                  (set_visitor,17,":troop"),
                  (jump_to_scene,"scn_conversation_scene"),
                  (assign, "$g_camp_talk",1),
                  (change_screen_map_conversation, ":troop"),
              ]),
              
              ####################################
              # Let each hero loot from the pool
              
              ("auto_loot_all", [
                  # for all the NPCs,
                  (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
                  (try_for_range, ":i_stack", 0, ":num_stacks"),
                    (party_stack_get_troop_id, ":this_hero","p_main_party",":i_stack"),
                    (is_between, ":this_hero", companions_begin, companions_end),
                    (call_script, "script_auto_loot_troop", ":this_hero", "$pool_troop"),
                  (try_end),
                  # once more to pick up any discards
                  (try_for_range, ":i_stack", 0, ":num_stacks"),
                    (party_stack_get_troop_id, ":this_hero","p_main_party",":i_stack"),
                    (is_between, ":this_hero", companions_begin, companions_end),
                    (call_script, "script_auto_loot_troop", ":this_hero", "$pool_troop"),
                  (try_end),
                  #Done. Now sort the remainder
                  (troop_sort_inventory, "$pool_troop"),
              ]),
              
              
              ####################################
              # let this troop take its pick from the loot pool
              
              ("auto_loot_troop", [
                  (try_begin),
                    (store_script_param, ":troop", 1),
                    (store_script_param, ":pool", 2),
                    
                    (troop_get_slot,":upg_armor", ":troop",slot_upgrade_armor),
                    (troop_get_slot,":upg_horses",":troop",slot_upgrade_horse),
                    
                    # dump whatever rubbish is in the main inventory
                    (troop_get_inventory_capacity, ":inv_cap", ":troop"),
                    (try_for_range, ":i_slot", 10, ":inv_cap"),
                      (troop_get_inventory_slot, ":item", ":troop", ":i_slot"),
                      (ge, ":item", 0),
                      (troop_get_inventory_slot_modifier, ":imod", ":troop", ":i_slot"),
                      (troop_add_item, ":pool", ":item", ":imod"), #put it back in the pool
                      (troop_set_inventory_slot, ":troop", ":i_slot", -1), # delete it
                    (try_end),
                    
                    # dispose of the troop's equipped items if necessary
                    (try_begin),
                      (troop_slot_ge, ":troop", slot_upgrade_wpn_0, 1),
                      (troop_get_inventory_slot, ":item", ":troop", 0),
                      (ge, ":item", 0),
                      (troop_get_inventory_slot_modifier, ":imod", ":troop", 0),
                      (troop_set_inventory_slot, ":troop", 0, -1), #delete it
                      (troop_add_item, ":pool", ":item", ":imod"), # chuck it in the pool
                    (try_end),
                    
                    (try_begin),
                      (troop_slot_ge, ":troop", slot_upgrade_wpn_1, 1),
                      (troop_get_inventory_slot, ":item", ":troop", 1),
                      (ge, ":item", 0),
                      (troop_get_inventory_slot_modifier, ":imod", ":troop", 1),
                      (troop_set_inventory_slot, ":troop", 1, -1), #delete it
                      (troop_add_item, ":pool", ":item", ":imod"), # chuck it in the pool
                    (try_end),
                    
                    (try_begin),
                      (troop_slot_ge, ":troop", slot_upgrade_wpn_2, 1),
                      (troop_get_inventory_slot, ":item", ":troop", 2),
                      (ge, ":item", 0),
                      (troop_get_inventory_slot_modifier, ":imod", ":troop", 2),
                      (troop_set_inventory_slot, ":troop", 2, -1), #delete it
                      (troop_add_item, ":pool", ":item", ":imod"), # chuck it in the pool
                    (try_end),
                    
                    (try_begin),
                      (troop_slot_ge, ":troop", slot_upgrade_wpn_3, 1),
                      (troop_get_inventory_slot, ":item", ":troop", 3),
                      (ge, ":item", 0),
                      (troop_get_inventory_slot_modifier, ":imod", ":troop", 3),
                      (troop_set_inventory_slot, ":troop", 3, -1), #delete it
                      (troop_add_item, ":pool", ":item", ":imod"), # chuck it in the pool
                    (try_end),
                    
                    (try_for_range, ":i_slot", 4, 9),
                      (troop_get_inventory_slot, ":item", ":troop", ":i_slot"),
                      (ge, ":item", 0),
                      (troop_get_inventory_slot_modifier, ":imod", ":troop", ":i_slot"),
                      (try_begin),
                        (neq, ":upg_armor", 0), # we're uprgrading armors
                        (is_between, ":i_slot", ek_head, ek_horse), # it's an armor slot
                        (troop_set_inventory_slot, ":troop", ":i_slot", -1), #delete it
                        (troop_add_item, ":pool", ":item", ":imod"), # chuck it in the pool
                      (else_try),
                        (neq, ":upg_horses", 0), # we're uprgrading horses
                        (eq, ":i_slot", ek_horse), # it's a horse slot
                        (troop_set_inventory_slot, ":troop", ":i_slot", -1), #delete it
                        (troop_add_item, ":pool", ":item", ":imod"), # chuck it in the pool
                      (try_end),
                    (try_end),
                    
                    # clear best matches
                    (assign, ":best_helmet_slot", -1),
                    (assign, ":best_helmet_val", 0),
                    (assign, ":best_body_slot", -1),
                    (assign, ":best_body_val", 0),
                    (assign, ":best_boots_slot", -1),
                    (assign, ":best_boots_val", 0),
                    (assign, ":best_gloves_slot", -1),
                    (assign, ":best_gloves_val", 0),
                    (assign, ":best_horse_slot", -1),
                    (assign, ":best_horse_val", 0),
                    
                    # Now search through the pool for the best items
                    (troop_get_inventory_capacity, ":inv_cap", ":pool"),
                    (try_for_range, ":i_slot", 0, ":inv_cap"),
                      (troop_get_inventory_slot, ":item", ":pool", ":i_slot"),
                      (ge, ":item", 0),
                      (troop_get_inventory_slot_modifier, ":imod", ":pool", ":i_slot"),
                      (call_script, "script_troop_can_use_item", ":troop", ":item", ":imod"),
                      (eq, reg0, 1), # can use
                      (call_script, "script_get_item_value_with_imod", ":item", ":imod"),
                      (assign, ":score", reg0),
                      
                      (item_get_type, ":item_type", ":item"),
                      
                      (try_begin),
                        (eq, ":item_type", itp_type_horse), #it's a horse
                        (eq, ":upg_horses", 1), # we're uprgrading horses
                        (gt, ":score", ":best_horse_val"),
                        (assign, ":best_horse_slot", ":i_slot"),
                        (assign, ":best_horse_val", ":score"),
                      (else_try),
                        (try_begin),
                          (eq, ":item_type", itp_type_head_armor),
                          (eq, ":upg_armor", 1), # we're uprgrading armor
                          (gt, ":score", ":best_helmet_val"),
                          (assign, ":best_helmet_slot", ":i_slot"),
                          (assign, ":best_helmet_val", ":score"),
                        (else_try),
                          (eq, ":item_type", itp_type_body_armor),
                          (eq, ":upg_armor", 1), # we're uprgrading armor
                          (gt, ":score", ":best_body_val"),
                          (assign, ":best_body_slot", ":i_slot"),
                          (assign, ":best_body_val", ":score"),
                        (else_try),
                          (eq, ":item_type", itp_type_foot_armor),
                          (eq, ":upg_armor", 1), # we're uprgrading armor
                          (gt, ":score", ":best_boots_val"),
                          (assign, ":best_boots_slot", ":i_slot"),
                          (assign, ":best_boots_val", ":score"),
                        (else_try),
                          (eq, ":item_type", itp_type_hand_armor),
                          (eq, ":upg_armor", 1), # we're uprgrading armor
                          (gt, ":score", ":best_gloves_val"),
                          (assign, ":best_gloves_slot", ":i_slot"),
                          (assign, ":best_gloves_val", ":score"),
                        (try_end),
                      (try_end),
                    (try_end),
                    
                    # Now we know which ones are the best. Give them to the troop.
                    (try_begin),
                      (assign, ":best_slot", ":best_helmet_slot"),
                      (ge, ":best_slot", 0),
                      (troop_get_inventory_slot, ":item", ":pool", ":best_slot"),
                      (ge, ":item", 0),
                      (troop_get_inventory_slot_modifier, ":imod", ":pool", ":best_slot"),
                      (troop_set_inventory_slot, ":troop", ek_head, ":item"),
                      (troop_set_inventory_slot_modifier, ":troop", ek_head, ":imod"),
                      (troop_set_inventory_slot, ":pool", ":best_slot", -1),
                    (try_end),
                    
                    (try_begin),
                      (assign, ":best_slot", ":best_body_slot"),
                      (ge, ":best_slot", 0),
                      (troop_get_inventory_slot, ":item", ":pool", ":best_slot"),
                      (ge, ":item", 0),
                      (troop_get_inventory_slot_modifier, ":imod", ":pool", ":best_slot"),
                      (troop_set_inventory_slot, ":troop", ek_body, ":item"),
                      (troop_set_inventory_slot_modifier, ":troop", ek_body, ":imod"),
                      (troop_set_inventory_slot, ":pool", ":best_slot", -1),
                    (try_end),
                    
                    (try_begin),
                      (assign, ":best_slot", ":best_boots_slot"),
                      (ge, ":best_slot", 0),
                      (troop_get_inventory_slot, ":item", ":pool", ":best_slot"),
                      (ge, ":item", 0),
                      (troop_get_inventory_slot_modifier, ":imod", ":pool", ":best_slot"),
                      (troop_set_inventory_slot, ":troop", ek_foot, ":item"),
                      (troop_set_inventory_slot_modifier, ":troop", ek_foot, ":imod"),
                      (troop_set_inventory_slot, ":pool", ":best_slot", -1),
                    (try_end),
                    
                    (try_begin),
                      (assign, ":best_slot", ":best_gloves_slot"),
                      (ge, ":best_slot", 0),
                      (troop_get_inventory_slot, ":item", ":pool", ":best_slot"),
                      (ge, ":item", 0),
                      (troop_get_inventory_slot_modifier, ":imod", ":pool", ":best_slot"),
                      (troop_set_inventory_slot, ":troop", ek_gloves, ":item"),
                      (troop_set_inventory_slot_modifier, ":troop", ek_gloves, ":imod"),
                      (troop_set_inventory_slot, ":pool", ":best_slot", -1),
                    (try_end),
                    
                    (try_begin),
                      (assign, ":best_slot", ":best_horse_slot"),
                      (ge, ":best_slot", 0),
                      (troop_get_inventory_slot, ":item", ":pool", ":best_slot"),
                      (ge, ":item", 0),
                      (troop_get_inventory_slot_modifier, ":imod", ":pool", ":best_slot"),
                      (troop_set_inventory_slot, ":troop", ek_horse, ":item"),
                      (troop_set_inventory_slot_modifier, ":troop", ek_horse, ":imod"),
                      (troop_set_inventory_slot, ":pool", ":best_slot", -1),
                    (try_end),
                    
                    (try_for_range, ":i_slot", 0,4),
                      (store_add, ":trp_slot", ":i_slot", slot_upgrade_wpn_0),
                      (troop_get_slot, ":type", ":troop", ":trp_slot"),
                      (gt, ":type", 0), #we're upgrading for this slot
                      (call_script, "script_scan_for_best_item_of_type", ":pool", ":type", ":troop"), #search for the best
                      (assign, ":best_slot", reg0),
                      (neq, ":best_slot", -1), #got something
                      (troop_get_inventory_slot, ":item", ":pool", ":best_slot"), #get it
                      (ge, ":item", 0),
                      (troop_get_inventory_slot_modifier, ":imod", ":pool", ":best_slot"),
                      (troop_set_inventory_slot, ":pool", ":best_slot", -1), #remove from pool
                      (troop_set_inventory_slot, ":troop", ":i_slot", ":item"), #add to slot
                      (troop_set_inventory_slot_modifier, ":troop", ":i_slot", ":imod"),
                    (try_end),
                    
                  (try_end),
              ]),
              
              #######################
              # Search for the most expensive item of a specified type
              
              ("scan_for_best_item_of_type", [
                  (store_script_param, ":troop",1),
                  (store_script_param, ":item_type",2),
                  (store_script_param, ":troop_using", 3),
                  
                  (assign, ":best_slot", -1),
                  (assign, ":best_value", -1),
                  # iterate through the list of items
                  (troop_get_inventory_capacity, ":inv_cap", ":troop"),
                  (try_for_range, ":i_slot", 0, ":inv_cap"),
                    (troop_get_inventory_slot, ":item", ":troop", ":i_slot"),
                    (ge, ":item", 0),
                    (troop_get_inventory_slot_modifier, ":imod", ":troop", ":i_slot"),
                    (item_get_type, ":this_item_type", ":item"),
                    (eq, ":this_item_type", ":item_type"), # it's one of the kind we're looking for
                    (call_script, "script_troop_can_use_item", ":troop_using", ":item", ":imod"),
                    (eq, reg0, 1), # can use
                    (call_script, "script_get_item_value_with_imod", ":item", ":imod"),
                    (gt, reg0, ":best_value"), # best one we've seen yet
                    (assign, ":best_slot", ":i_slot"),
                    (assign, ":best_value", reg0),
                  (try_end),
                  
                  # return the slot of the best one
                  (assign, reg0, ":best_slot"),
              ]),
              ####################################################################################
              # Autoloot Scripts End
              ####################################################################################
              
              ####################################################################################
              # Color Coded Messages Scripts Begin
              ####################################################################################
              # HC - Script to figure out what color a display message should be
              ("get_message_color", [
                  (store_script_param, ":news_type", 1), # See News Types in module_constants
                  (store_script_param, ":entity", 2),    # The troop or town in question
                  
                  # Set a default color
                  (assign, reg20, 0xFFFFFFFF),
                  (assign, ":color", reg20),
                  
                  # Get the player's faction
                  (store_troop_faction, ":player_faction", "trp_player"),
                  
                  (try_begin),
                    # news_lord_defeated = 1
                    # ":entity" is the troop id of the captured lord
                    (eq, ":news_type", news_lord_defeated),
                    (store_troop_faction, ":lord_faction", ":entity"),
                    (try_begin),
                      (eq, ":lord_faction", ":player_faction"),
                      (assign, ":color", color_bad_news),
                    (else_try),
                      (store_relation, ":relation", ":lord_faction", ":player_faction"),
                      (lt, ":relation", 0),
                      (assign, ":color", color_good_news),
                    (else_try),
                      (assign, ":color", color_neutral_news),
                    (try_end),
                    
                  (else_try),
                    # news_lord_captured = 2
                    # ":entity" is the troop id of the captured lord
                    (eq, ":news_type", news_lord_captured),
                    (store_troop_faction, ":lord_faction", ":entity"),
                    (try_begin),
                      (eq, ":lord_faction", ":player_faction"),
                      (assign, ":color", color_terrible_news),
                    (else_try),
                      (store_relation, ":relation", ":lord_faction", ":player_faction"),
                      (lt, ":relation", 0),
                      (assign, ":color", color_great_news),
                    (else_try),
                      (assign, ":color", color_neutral_news),
                    (try_end),
                    
                  (else_try),
                    # news_lord_freed = 3
                    (eq, ":news_type", news_lord_freed),
                    (store_troop_faction, ":lord_faction", ":entity"),
                    (try_begin),
                      (eq, ":lord_faction", ":player_faction"),
                      (assign, ":color", color_great_news),
                    (else_try),
                      (store_relation, ":relation", ":lord_faction", ":player_faction"),
                      (lt, ":relation", 0),
                      (assign, ":color", color_terrible_news),
                    (else_try),
                      (assign, ":color", color_neutral_news),
                    (try_end),
                    
                  (else_try),
                    # news_lord_escaped = 4
                    (eq, ":news_type", news_lord_escaped),
                    
                  (else_try),
                    # news_minorplanet_looted = 5
                    # ":entity" is the village number
                    (eq, ":news_type", news_minorplanet_looted),
                    (store_faction_of_party,":center_faction",":entity"),
                    (try_begin),
                      (eq, ":center_faction", ":player_faction"),
                      (assign, ":color", color_bad_news),
                    (else_try),
                      (store_relation, ":relation", ":center_faction", ":player_faction"),
                      (lt, ":relation", 0),
                      (assign, ":color", color_good_news),
                    (else_try),
                      (assign, ":color", color_neutral_news),
                    (try_end),
                    
                  (else_try),
                    # news_center_captured = 6
                    # ":entity" is ":root_defeated_party".
                    (eq, ":news_type", news_center_captured),
                    (store_faction_of_party,":defeated_center_faction",":entity"),
                    (try_begin),
                      (eq, ":defeated_center_faction", ":player_faction"),
                      (assign, ":color", color_terrible_news),
                    (else_try),
                      (store_relation, ":relation", ":defeated_center_faction", ":player_faction"),
                      (lt, ":relation", 0),
                      (assign, ":color", color_great_news),
                    (else_try),
                      (assign, ":color", color_neutral_news),
                    (try_end),
                    
                  (else_try),
                    # news_center_under_siege = 7
                    # ":entity" is the ai_object, which appears to be the center under siege
                    (eq, ":news_type", news_center_under_siege),
                    (store_faction_of_party,":center_faction",":entity"),
                    (try_begin),
                      (eq, ":center_faction", ":player_faction"),
                      (assign, ":color", color_bad_news),
                    (else_try),
                      (store_relation, ":relation", ":center_faction", ":player_faction"),
                      (lt, ":relation", 0),
                      (assign, ":color", color_good_news),
                    (else_try),
                      (assign, ":color", color_neutral_news),
                    (try_end),
                    
                  (else_try),
                    # news_center_siege_lifted = 8
                    # ":entity" is the center number
                    (eq, ":news_type", news_center_siege_lifted),
                    (store_faction_of_party,":center_faction",":entity"),
                    (try_begin),
                      (eq, ":center_faction", ":player_faction"),
                      (assign, ":color", color_good_news),
                    (else_try),
                      (store_relation, ":relation", ":center_faction", ":player_faction"),
                      (lt, ":relation", 0),
                      (assign, ":color", color_bad_news),
                    (else_try),
                      (assign, ":color", color_neutral_news),
                    (try_end),
                    
                  (else_try),
                    # news_center_prosperity_changed = 9
                    # ":entity" is the center number
                    (eq, ":news_type", news_center_prosperity_changed),
                    (party_get_slot, ":center_lord", ":entity", slot_mainplanet_lord),
                    (try_begin),
                      (eq, ":center_lord", "trp_player"),
                      (assign, ":color", color_good_news),
                    (else_try),
                      (assign, ":color", 0xFFFFFFFF),
                    (try_end),
                    
                  (try_end),
                  
                  (assign, reg20, ":color"),
              ]),
              ####################################################################################
              # Color Coded Messages Scripts End
              ####################################################################################
              
              ####################################################################################
              #Tavern recruitment and ale START 3/3
              #no input/output
              #could need a faction check
              #that's from the 808 module system
              
              ("add_tavern_troops",
                [
                  (try_for_range,reg(2),merc_parties_begin,merc_parties_end),
                    (store_party_size,reg(6),reg(2)),
                    (lt,reg(6),40), #never have many more than 40 troops in the tavern
                    (store_random,reg(7),5),
                    (party_add_members,reg(2),"trp_wookiee",(7)),
                    (store_random,reg(8),5),
                    (party_add_members,reg(2),"trp_mandalorian",reg(8)),
            (store_random,reg(8),5),
                    (party_add_members,reg(2),"trp_umbaran_militia",reg(8)),
                    (store_random,reg(9),5),
                    (party_add_members,reg(2),"trp_gamorrean",reg(9)),
                    (store_random,reg(10),5),
                    (party_add_members,reg(2),"trp_twilek_female1",reg(10)),
                    (store_random,reg(11),5),
                    (party_add_members,reg(2),"trp_twilek",reg(11)),
                    (store_random,reg(12),5),
                    (party_add_members,reg(2),"trp_rodian",reg(12)),
                    (store_random,reg(13),5),
                    (party_add_members,reg(2),"trp_moncal_1",reg(13)),
                    (store_random,reg(14),5),
                    (party_add_members,reg(2),"trp_bothan",reg(14)),
                    (store_random,reg(15),5),
                    (party_add_members,reg(2),"trp_civilian",reg(15)),
                    (store_random,reg(16),5),
                    (party_add_members,reg(2),"trp_trandoshan",reg(16)),
                    (store_random,reg(17),5),
                    (party_add_members,reg(2),"trp_chiss_1",reg(17)),
                    (store_random,reg(18),5),
                    (party_add_members,reg(2),"trp_geonosian_1",reg(18)),
                    (store_random,reg(19),5),
                    (party_add_members,reg(2),"trp_sullustan_1",reg(19)),
                    (store_random,reg(20),5),
                    (party_add_members,reg(2),"trp_ig88",reg(20)),
                    #(store_random,reg(21),5),
                    #(party_add_members,reg(2),"trp_imperial_army_trooper",reg(21)),
                    (store_random,reg(22),5),
                    (party_add_members,reg(2),"trp_hkseries",reg(22)),
                    (store_random,reg(23),5),
                    (party_add_members,reg(2),"trp_power_droid",reg(23)),
                    (store_random,reg(24),5),
                    (party_add_members,reg(2),"trp_fxseries_droid",reg(24)),
                    #(store_random,reg(20),5),
                    #(party_add_members,reg(2),"trp_clone_trooper_1",reg(20)),
                  (try_end),
                  
              ]),
              #Tavern recruitment and ale END 3/3
              ####################################################################################
              
              #Highlander begin--------------------------------------
              ("emit_projectile",
                [
                  (set_fixed_point_multiplier,100),
                  
                  (store_script_param, ":position", 1),
                  (store_script_param, ":power", 2),
                  (store_script_param, ":damage", 3),
                  (store_script_param, ":bounce_effect", 4),
                  (store_script_param, ":explosive", 5),
                  (store_script_param, ":explosion_countdown", 6),
                  (store_script_param, ":explosion_area", 7),
                  (store_script_param, ":explosion_damage", 8),
                  (store_script_param, ":particle_system", 9),
                  (store_script_param, ":particle_system_magnitude", 10),
                  (store_script_param, ":explode_on_ground_hit", 11),
                  (store_script_param, ":scene_prop_attached_to", 12),
                  (store_script_param, ":check_collision", 13),
                  
                  (assign,":lowest_dist", 99999999),
                  (try_for_agents,":cur_agent"),
                    (agent_is_alive,":cur_agent"),
                    (agent_is_human,":cur_agent"),
                    (agent_get_position,pos0,":cur_agent"),
                    (get_distance_between_positions,":dist",pos0,":position"),
                    (lt,":dist",":lowest_dist"),
                    (assign,":lowest_dist",":dist"),
                    #     (position_transform_position_to_local,pos60,pos0,":position"),
                    #     (position_get_x,":pos_x",pos60),
                    #     (position_get_y,":pos_y",pos60),
                    #     (is_between,":pos_x",-500,500),
                    #     (is_between,":pos_y",-500,500),
                    #     (assign,reg1,":pos_x"),
                    #     (assign,reg2,":pos_y"),
                    #     (display_message,"@DEBUG: {reg1}/{reg2}"),
                    (assign,":agent",":cur_agent"),
                  (try_end),
                  (get_player_agent_no,":agent"),
                  
                  (try_for_range_backwards,reg0,1,256),
                    (troop_slot_eq,"trp_pjct_active",reg0,0),
                    (assign,":projectile",reg0),
                  (try_end),
                  
                  (troop_set_slot,"trp_pjct_active",":projectile",1),
                  (troop_set_slot,"trp_pjct_source_agent",":projectile",":agent"),
                  (troop_set_slot,"trp_pjct_damage",":projectile",":damage"),
                  (troop_set_slot,"trp_pjct_bounce_effect",":projectile",":bounce_effect"),
                  (troop_set_slot,"trp_pjct_explosive",":projectile",":explosive"),
                  (troop_set_slot,"trp_pjct_explosion_area",":projectile",":explosion_area"),
                  (troop_set_slot,"trp_pjct_explosion_damage",":projectile",":explosion_damage"),
                  (troop_set_slot,"trp_pjct_particle_system",":projectile",":particle_system"),
                  (troop_set_slot,"trp_pjct_explode_on_ground_hit",":projectile",":explode_on_ground_hit"),
                  (troop_set_slot,"trp_pjct_particle_system_magnitude",":projectile",":particle_system_magnitude"),
                  (troop_set_slot,"trp_pjct_check_collision",":projectile",":check_collision"),
                  
                  (store_add,":position_b",":position",1),
                  (agent_get_look_position,":position_b",":agent"),
                  (position_copy_rotation,":position",":position_b"),
                  (troop_set_slot,"trp_pjct_emit_time",":projectile","$timer"),
                  (store_add,":explosion_time","$timer",":explosion_countdown"),
                  (troop_set_slot,"trp_pjct_explosion_countdown",":projectile",":explosion_time"),
                  
                  (position_get_x,":x_pos",":position"),
                  (position_get_y,":y_pos",":position"),
                  (position_get_z,":z_pos",":position"),
                  (troop_set_slot,"trp_pjct_x",":projectile",":x_pos"),
                  (troop_set_slot,"trp_pjct_y",":projectile",":y_pos"),
                  (troop_set_slot,"trp_pjct_z",":projectile",":z_pos"),
                  
                  (position_move_y,":position",":power"),
                  (position_get_x,":x_velocity",":position"),
                  (position_get_y,":y_velocity",":position"),
                  (position_get_z,":z_velocity",":position"),
                  (val_sub,":x_velocity",":x_pos"),
                  (val_sub,":y_velocity",":y_pos"),
                  (val_sub,":z_velocity",":z_pos"),
                  (troop_set_slot,"trp_pjct_x_velocity",":projectile",":x_velocity"),
                  (troop_set_slot,"trp_pjct_y_velocity",":projectile",":y_velocity"),
                  (troop_set_slot,"trp_pjct_z_velocity",":projectile",":z_velocity"),
                  
                  (troop_set_slot,"trp_pjct_attach_scene_prop",":projectile",-1),
                  (try_begin),
                    (ge,":scene_prop_attached_to",0),
                    (scene_prop_get_num_instances,":num_instances",":scene_prop_attached_to"),
                    (assign,":cur_instance",-1),
                    (try_for_range,":instance_no",0,":num_instances"),
                      (scene_prop_get_instance,":instance",":scene_prop_attached_to",":instance_no"),
                      (troop_slot_eq,"trp_instance_attached_to",":instance",0),
                      (assign, ":cur_instance", ":instance"),
                    (try_end),
                    (ge,":cur_instance",0),
                    (troop_set_slot,"trp_instance_attached_to",":cur_instance",":projectile"),
                    (troop_set_slot,"trp_pjct_attach_scene_prop",":projectile",":cur_instance"),
                    (prop_instance_set_position,":cur_instance",":position"),
                  (try_end),
              ]),
              ("position_face_position",
                [
                  (store_script_param, ":position", 1),
                  (store_script_param, ":position_b", 2),
                  (assign,":min_dist",9999999),
                  (assign,":x_rotation",0),
                  (try_for_range,":rotation",1,361),
                    (position_rotate_x,":position",1),
                    (copy_position,pos0,":position"),
                    (position_move_y,pos0,1000),
                    (get_distance_between_positions,":dist",pos0,":position_b"),
                    (lt,":dist",":min_dist"),
                    (assign,":min_dist",":dist"),
                    (assign,":x_rotation",":rotation"),
                  (try_end),
                  (position_rotate_x,":position",":x_rotation"),
                  
                  (assign,":min_dist",9999999),
                  (assign,":z_rotation",0),
                  (try_for_range,":rotation",1,361),
                    (position_rotate_z,":position",1),
                    (copy_position,pos0,":position"),
                    (position_move_y,pos0,1000),
                    (get_distance_between_positions,":dist",pos0,":position_b"),
                    (lt,":dist",":min_dist"),
                    (assign,":min_dist",":dist"),
                    (assign,":z_rotation",":rotation"),
                  (try_end),
                  (position_rotate_z,":position",":z_rotation"),
              ]),
              ("agent_deliver_damage_to_agent",
                [
                  (store_script_param, ":agent_deliverer", 1),
                  (store_script_param, ":agent", 2),
                  (store_script_param, ":damage", 3),
                  (get_player_agent_no,":player_agent"),
                  (assign,reg1,":damage"),
                  (try_begin),
                    (eq,":player_agent",":agent_deliverer"),
                    (display_message,"@Delivered {reg1} damage."),
                  (try_end),
                  (try_begin),
                    (eq,":player_agent",":agent"),
                    (display_message,"@Received %d damage."),
                  (try_end),
                  (store_agent_hit_points,":health",":agent",1),
                  (val_sub,":health",":damage"),
                  (try_begin),
                    (lt,":health",0),
                    (agent_set_hit_points,":agent",0,1),
                    (agent_deliver_damage_to_agent,":agent_deliverer",":agent"),
                  (else_try),
                    (agent_set_hit_points,":agent",":health",1),
                  (try_end),
              ]),
              ("position_get_rotation_around",
                [
                  (store_script_param, ":position", 1),
                  (store_script_param, ":angle", 2),
                  (copy_position,pos62, ":position"),
                  (try_begin), #x
                    (eq,":angle",0),
                    (init_position,pos0),
                    (position_copy_origin,pos0,pos62),
                    (position_get_rotation_around_z,reg0,pos62),
                    (val_mul,reg0,-1),
                    (position_rotate_z,pos62,reg0),
                    (position_rotate_y,pos62,90),
                    (position_transform_position_to_local,pos63,pos62,pos0),
                    (position_get_rotation_around_z,reg0,pos63),
                  (else_try), #y
                    (eq,":angle",1),
                    (init_position,pos0),
                    (position_copy_origin,pos0,pos62),
                    (position_get_rotation_around_z,reg0,pos62),
                    (val_mul,reg0,-1),
                    (position_rotate_z,pos62,reg0),
                    (position_rotate_x,pos62,90),
                    (position_transform_position_to_local,pos63,pos62,pos0),
                    (position_get_rotation_around_z,reg0,pos63),
                  (else_try), # z
                    (position_get_rotation_around_z,reg0,pos62),
                  (try_end),
              ]),
              #Highlander end--------------------------------------
              
              #SW - integrated companion overview
              ############## JEDEDIAH Q START #################################################
              
              # (lvl 2-12)  600,1360, 2296, 3426, 4768, 6345, 8179, 10297, 13010, 16161, 19806,
              # (lvl 13-21) 24007, 28832, 34362, 40682, 47892, 56103, 65441, 77233, 90809
              # (lvl 22-31) 106425, 124371, 144981, 168636, 195769, 226879, 262533, 303381, 350164, 412091
              # script_jq_xp_to_next_lvl
              # Input: xp points
              # Output: none
              ("jq_xp_to_next_lvl",
                [
                  (store_script_param, ":jq_xpvalue", 1),
                  (try_begin),
                    (lt, ":jq_xpvalue",600),
                    (assign, ":jq_xpvalue2", 600),
                  (else_try),
                    (lt, ":jq_xpvalue",1360),
                    (assign, ":jq_xpvalue2", 1360),
                  (else_try),
                    (lt, ":jq_xpvalue",2296),
                    (assign, ":jq_xpvalue2", 2296),
                  (else_try),
                    (lt, ":jq_xpvalue",3426),
                    (assign, ":jq_xpvalue2", 3426),
                  (else_try),
                    (lt, ":jq_xpvalue",4768),
                    (assign, ":jq_xpvalue2", 4768),
                  (else_try),
                    (lt, ":jq_xpvalue",6345),
                    (assign, ":jq_xpvalue2", 6345),
                  (else_try),
                    (lt, ":jq_xpvalue",8179),
                    (assign, ":jq_xpvalue2", 8179),
                  (else_try),
                    (lt, ":jq_xpvalue",10297),
                    (assign, ":jq_xpvalue2", 10297),
                  (else_try),
                    (lt, ":jq_xpvalue",13010),
                    (assign, ":jq_xpvalue2", 13010),
                  (else_try),
                    (lt, ":jq_xpvalue",16161),
                    (assign, ":jq_xpvalue2", 16161),
                  (else_try),
                    (lt, ":jq_xpvalue",19806),
                    (assign, ":jq_xpvalue2", 19806),
                  (else_try),
                    (lt, ":jq_xpvalue",24007),
                    (assign, ":jq_xpvalue2", 24007),
                  (else_try),
                    (lt, ":jq_xpvalue",28832),
                    (assign, ":jq_xpvalue2", 28832),
                  (else_try),
                    (lt, ":jq_xpvalue",34362),
                    (assign, ":jq_xpvalue2", 34362),
                  (else_try),
                    (lt, ":jq_xpvalue",40682),
                    (assign, ":jq_xpvalue2", 40682),
                  (else_try),
                    (lt, ":jq_xpvalue",47892),
                    (assign, ":jq_xpvalue2", 47892),
                  (else_try),
                    (lt, ":jq_xpvalue",56103),
                    (assign, ":jq_xpvalue2", 56103),
                  (else_try),
                    (lt, ":jq_xpvalue",65441),
                    (assign, ":jq_xpvalue2", 65441),
                  (else_try),
                    (lt, ":jq_xpvalue",77233),
                    (assign, ":jq_xpvalue2", 77233),
                  (else_try),
                    (lt, ":jq_xpvalue",90809),
                    (assign, ":jq_xpvalue2", 90809),
                  (else_try),
                    (lt, ":jq_xpvalue",106425),
                    (assign, ":jq_xpvalue2", 106425),
                  (else_try),
                    (lt, ":jq_xpvalue",124371),
                    (assign, ":jq_xpvalue2", 124371),
                  (else_try),
                    (lt, ":jq_xpvalue",144981),
                    (assign, ":jq_xpvalue2", 144981),
                  (else_try),
                    (lt, ":jq_xpvalue",168636),
                    (assign, ":jq_xpvalue2", 168636),
                  (else_try),
                    (lt, ":jq_xpvalue",195769),
                    (assign, ":jq_xpvalue2", 195769),
                  (else_try),
                    (lt, ":jq_xpvalue",226879),
                    (assign, ":jq_xpvalue2", 226879),
                  (else_try),
                    (lt, ":jq_xpvalue",262533),
                    (assign, ":jq_xpvalue2", 262533),
                  (else_try),
                    (lt, ":jq_xpvalue",303381),
                    (assign, ":jq_xpvalue2", 303381),
                  (else_try),
                    (lt, ":jq_xpvalue",350164),
                    (assign, ":jq_xpvalue2", 350164),
                  (else_try),
                    (lt, ":jq_xpvalue",412091),
                    (assign, ":jq_xpvalue2", 412091),
                  (try_end),
                  (store_sub, reg1, ":jq_xpvalue2", ":jq_xpvalue"),
                  (str_store_string, s1, "@{reg1}"),
              ]),
              # --------------------------------------------------------------------------------------
              # script_jq_extra_stats - get extra info about the selected hero in 'Companions Overview'
              # Input: selected hero ("$jq_dude")
              # Output: none
              ("jq_extra_stats",
                [
                  (store_script_param, ":jq_troop_no", 1),
                  (str_store_troop_name, s9, ":jq_troop_no"),
                  (store_troop_health , reg2, ":jq_troop_no"),
                  (store_character_level, reg3, ":jq_troop_no"),
                  (call_script, "script_npc_morale", ":jq_troop_no"),
                  (assign, ":troop_morale", reg0),
                  (assign, reg1, ":troop_morale"),
                  (str_store_string, s1, "@{s9}^^^Level: {reg3}^Health: {reg2}%^Morale: {reg1}"),
                  (overlay_set_text, "$g_jq_equipment_status", s1),
                  
                  (try_for_range, ":jq_cur_slot", 0, 8),#equipment slots
                    (troop_get_inventory_slot, reg1, ":jq_troop_no", ":jq_cur_slot"),
                    (try_begin),
                      (lt, reg1, 1), # if item slot is empty...
                      (str_store_string, s8, "@________________n/a________________"),
                    (else_try),
                      (str_store_item_name, s8, reg1),
                    (try_end),
                    (try_begin),
                      (eq, ":jq_cur_slot", 0),
                      (overlay_set_text, "$g_jq_equipment_item0", s8),
                    (else_try),
                      (eq, ":jq_cur_slot", 1),
                      (overlay_set_text, "$g_jq_equipment_item1", s8),
                    (else_try),
                      (eq, ":jq_cur_slot", 2),
                      (overlay_set_text, "$g_jq_equipment_item2", s8),
                    (else_try),
                      (eq, ":jq_cur_slot", 3),
                      (overlay_set_text, "$g_jq_equipment_item3", s8),
                    (else_try),
                      (eq, ":jq_cur_slot", 4),
                      (overlay_set_text, "$g_jq_equipment_item4", s8),#head
                    (else_try),
                      (eq, ":jq_cur_slot", 5),
                      (overlay_set_text, "$g_jq_equipment_item5", s8),#body
                    (else_try),
                      (eq, ":jq_cur_slot", 6),
                      (overlay_set_text, "$g_jq_equipment_item6", s8),#feet
                    (else_try),
                      (eq, ":jq_cur_slot", 7),
                      (overlay_set_text, "$g_jq_equipment_item7", s8),#hands
                    (try_end),
                  (try_end), # try-for-range-loop-end
                  (set_result_string, s8),
              ]),
              
              ############## JEDEDIAH Q END #################################################
              
              #SW - Bounty Hunting Begin - http://forums.taleworlds.com/index.php/topic,59300.0.html
              ("random_bounty",
                [
                  (store_script_param_1, ":giver_troop"),
                  
                  (store_troop_faction, ":giver_faction_no", ":giver_troop"),
                  
                  (troop_get_slot, ":giver_party_no", ":giver_troop", slot_troop_leaded_party),
                  
                  (assign, ":giver_center_no", -1),
                  (try_begin),
                    (gt, ":giver_party_no", 0),
                    (party_get_attached_to, ":giver_center_no", ":giver_party_no"),
                  (else_try),
                    (is_between, "$g_encountered_party", centers_begin, centers_end),
                    (assign, ":giver_center_no", "$g_encountered_party"),
                  (try_end),
                  
                  (try_begin),
                    (eq, ":giver_faction_no", "fac_commoners"),
                    (store_faction_of_party, ":giver_faction_no", ":giver_center_no"),
                  (try_end),
                  
                  (assign, ":result", -1),
                  (try_for_range, ":unused", 0, 20), #Repeat trial twenty times
                    (eq, ":result", -1),
                    (assign, ":quest_target_troop", -1),
                    (assign, ":quest_target_center", -1),
                    (assign, ":quest_target_faction", -1),
                    (assign, ":quest_object_faction", -1),
                    (assign, ":quest_object_troop", -1),
                    (assign, ":quest_object_center", -1),
                    (assign, ":quest_target_party", -1),
                    (assign, ":quest_target_party_template", -1),
                    (assign, ":quest_target_amount", -1),
                    (assign, ":quest_target_dna", -1),
                    (assign, ":quest_target_item", -1),
                    (assign, ":quest_importance", 1),
                    (assign, ":quest_xp_reward", 0),
                    (assign, ":quest_gold_reward", 0),
                    (assign, ":quest_convince_value", 0),
                    (assign, ":quest_expiration_days", 0),
                    (assign, ":quest_dont_give_again_period", 0),
                    
                    (store_random_in_range, ":quest_no", bounties_begin, bounties_end),
                    (neg|check_quest_active,":quest_no"),
                    (neg|quest_slot_ge, ":quest_no", slot_quest_dont_give_again_remaining_days, 1),
                    (try_begin),
                      (eq, ":quest_no", "qst_bounty_1"),
                      (try_begin),
                        (ge, "$g_talk_troop_faction_relation", 0),
                        (call_script, "script_cf_select_random_minorplanet_with_faction", ":giver_faction_no"),
                        (assign, ":quest_target_center", reg0),
                        (store_random_in_range, ":quest_target_dna", 0, 1000000),
                        (assign, ":result", ":quest_no"),
                        (assign, ":quest_expiration_days", 7),
                        (assign, ":quest_dont_give_again_period", 7),
                      (try_end),
                    (else_try),
                      (eq, ":quest_no", "qst_bounty_2"),
                      (try_begin),
                        (ge, "$g_talk_troop_faction_relation", 0),
                        (call_script, "script_cf_select_random_minorplanet_with_faction", ":giver_faction_no"),
                        (assign, ":quest_target_center", reg0),
                        (store_random_in_range, ":quest_target_dna", 0, 1000000),
                        (assign, ":result", ":quest_no"),
                        (assign, ":quest_expiration_days", 7),
                        (assign, ":quest_dont_give_again_period", 7),
                      (try_end),
                    (else_try),
                      (eq, ":quest_no", "qst_bounty_3"),
                      (try_begin),
                        (ge, "$g_talk_troop_faction_relation", 0),
                        (call_script, "script_cf_select_random_minorplanet_with_faction", ":giver_faction_no"),
                        (assign, ":quest_target_center", reg0),
                        (store_random_in_range, ":quest_target_dna", 0, 1000000),
                        (assign, ":result", ":quest_no"),
                        (assign, ":quest_expiration_days", 7),
                        (assign, ":quest_dont_give_again_period", 7),
                      (try_end),
                    (else_try),
                      (eq, ":quest_no", "qst_bounty_4"),
                      (try_begin),
                        (ge, "$g_talk_troop_faction_relation", 0),
                        (call_script, "script_cf_select_random_minorplanet_with_faction", ":giver_faction_no"),
                        (assign, ":quest_target_center", reg0),
                        (store_random_in_range, ":quest_target_dna", 0, 1000000),
                        (assign, ":result", ":quest_no"),
                        (assign, ":quest_expiration_days", 7),
                        (assign, ":quest_dont_give_again_period", 7),
                      (try_end),
                    (else_try),
                      (eq, ":quest_no", "qst_bounty_5"),
                      (try_begin),
                        (ge, "$g_talk_troop_faction_relation", 0),
                        (call_script, "script_cf_select_random_minorplanet_with_faction", ":giver_faction_no"),
                        (assign, ":quest_target_center", reg0),
                        (store_random_in_range, ":quest_target_dna", 0, 1000000),
                        (assign, ":result", ":quest_no"),
                        (assign, ":quest_expiration_days", 7),
                        (assign, ":quest_dont_give_again_period", 7),
                      (try_end),
                    (else_try),
                      (eq, ":quest_no", "qst_bounty_6"),
                      (try_begin),
                        (ge, "$g_talk_troop_faction_relation", 0),
                        (call_script, "script_cf_select_random_minorplanet_with_faction", ":giver_faction_no"),
                        (assign, ":quest_target_center", reg0),
                        (store_random_in_range, ":quest_target_dna", 0, 1000000),
                        (assign, ":result", ":quest_no"),
                        (assign, ":quest_expiration_days", 7),
                        (assign, ":quest_dont_give_again_period", 7),
                      (try_end),
                    (try_end),
                  (try_end),
                  (try_begin),
                    (neq, ":result", -1),
                    
                    (try_begin),
                      (ge, ":quest_target_center", 0),
                      (store_faction_of_party, ":quest_target_faction", ":quest_target_center"),
                    (try_end),
                    
                    (quest_set_slot, ":result", slot_quest_target_troop, ":quest_target_troop"),
                    (quest_set_slot, ":result", slot_quest_target_center, ":quest_target_center"),
                    (quest_set_slot, ":result", slot_quest_object_troop, ":quest_object_troop"),
                    (quest_set_slot, ":result", slot_quest_target_faction, ":quest_target_faction"),
                    (quest_set_slot, ":result", slot_quest_object_faction, ":quest_object_faction"),
                    (quest_set_slot, ":result", slot_quest_object_center, ":quest_object_center"),
                    (quest_set_slot, ":result", slot_quest_target_party, ":quest_target_party"),
                    (quest_set_slot, ":result", slot_quest_target_party_template, ":quest_target_party_template"),
                    (quest_set_slot, ":result", slot_quest_target_amount, ":quest_target_amount"),
                    (quest_set_slot, ":result", slot_quest_importance, ":quest_importance"),
                    (quest_set_slot, ":result", slot_quest_xp_reward, ":quest_xp_reward"),
                    (quest_set_slot, ":result", slot_quest_gold_reward, ":quest_gold_reward"),
                    (quest_set_slot, ":result", slot_quest_convince_value, ":quest_convince_value"),
                    (quest_set_slot, ":result", slot_quest_expiration_days, ":quest_expiration_days"),
                    (quest_set_slot, ":result", slot_quest_dont_give_again_period, ":quest_dont_give_again_period"),
                    (quest_set_slot, ":result", slot_quest_current_state, 0),
                    (quest_set_slot, ":result", slot_quest_giver_troop, ":giver_troop"),
                    (quest_set_slot, ":result", slot_quest_giver_center, ":giver_center_no"),
                    (quest_set_slot, ":result", slot_quest_target_dna, ":quest_target_dna"),
                    (quest_set_slot, ":result", slot_quest_target_item, ":quest_target_item"),
                  (try_end),
                  
                  (assign, reg0, ":result"),
              ]),
              #SW - Bounty Hunting End
              
              #############################################################################
              # HokieBT scripts
              # script_walk_around_ship
              # Input: player_entry_point
              # Output: none (starts scene)
              ("walk_around_ship",
                [
                  (store_script_param, ":player_entry_point", 1),

                  #set the mission template
                  (set_jump_mission,"mt_ship_interior"),

                  #may be necessary for dialogs to work correctly?
                  (assign, "$talk_context", 0),    #default
                  
                  #autoloot flag to allow player to talk to companions
                  (assign, "$g_camp_talk",1),      #must switch back to 0 in the leave game menu
                  
                  #new variable so we can talk to troops on the ship
                  (assign,"$g_walk_around_ship",1),
                  
                  #modify/reset visitors
                  (faction_get_slot,":hangar_faction","fac_player_supporters_faction", slot_faction_culture),
                  
                  (try_begin),
                    (eq,":hangar_faction","fac_culture_1"),
                    (assign,":scene_to_use","scn_ship_interior_imp"),
                  (else_try),
                    (eq,":hangar_faction","fac_culture_2"),
                    (assign,":scene_to_use","scn_ship_interior_reb"),
                  (else_try),
                    (eq,":hangar_faction","fac_culture_3"),
                    (assign,":scene_to_use","scn_ship_interior_hut"),
                  (else_try),
                    (assign,":scene_to_use","scn_ship_interior"),
                  (try_end),
                  
                  (modify_visitors_at_site,":scene_to_use"),
                  
                  #reset visitors
                  (reset_visitors),
                  
                  #set the player entry point
                  (set_visitor, ":player_entry_point", "$g_player_troop"),
                  
                  #populate any companions who are in your party to this scene
                  (assign, ":entry_point", 1),
                  (try_for_range, ":companion", companions_begin, companions_end),
                    (party_count_companions_of_type, ":count", "p_main_party", ":companion"),
                    (try_begin),
                      (ge, ":count", 1),
                      (set_visitor, ":entry_point", ":companion"),
                    (try_end),
                    (val_add, ":entry_point", 1),
                  (try_end),
                  
                  #populate some guards
                  #(try_for_range, ":entry_point", 30, 60),
                  (try_for_range, ":entry_point", 30, 57),
                    (store_random_in_range, ":random", 2, 9),
                    (try_begin),
                      #(eq, ":random", 1),
                      #(faction_get_slot, ":troop", "fac_player_supporters_faction",  slot_faction_tier_1_troop),
                      #(else_try),
                      (eq, ":random", 2),
                      (faction_get_slot, ":troop", "fac_player_supporters_faction",  slot_faction_tier_2_troop),
                    (else_try),
                      (eq, ":random", 3),
                      (faction_get_slot, ":troop", "fac_player_supporters_faction",  slot_faction_tier_3_troop),
                    (else_try),
                      (eq, ":random", 4),
                      (faction_get_slot, ":troop", "fac_player_supporters_faction",  slot_faction_tier_4_troop),
                    (else_try),
                      (eq, ":random", 5),
                      (faction_get_slot, ":troop", "fac_player_supporters_faction",  slot_faction_tier_5_troop),
                    (else_try),
                      (eq, ":random", 6),
                      (faction_get_slot, ":troop", "fac_player_supporters_faction",  slot_faction_patrol_unit_1),
                    (else_try),
                      (eq, ":random", 7),
                      (faction_get_slot, ":troop", "fac_player_supporters_faction",  slot_faction_patrol_unit_2),
                    (else_try),
                      #(eq, ":random", 8),
                      (faction_get_slot, ":troop", "fac_player_supporters_faction",  slot_faction_patrol_unit_3),
                    (try_end),
                    (set_visitor, ":entry_point", ":troop"),
                    #(set_visitor, ":entry_point", "trp_rebel_trooper"),
                  (try_end),
                  
                  #jump to the scene
                  (jump_to_scene,":scene_to_use"),
                  
                  #start the scene
                  (change_screen_mission),
                  
                ]
              ),
              
              #script_change_culture_empire
              ("change_culture_empire",
                [
                  #(assign,"$culture_selected",1),
                  #(faction_set_slot, "fac_player_supporters_faction", slot_faction_culture, "fac_huttcartel"),   #just re-use an original culture ? shouldn't it be fac_culture_3 instead of fac_huttcartel ?
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_culture, "fac_culture_1"),  #just re-use an original culture ? shouldn't it be fac_culture_3 instead of fac_huttcartel ?
                  #(faction_set_name, "fac_player_supporters_faction", "@Wookiee Faction"),     #nevermind, I gave the player the ability to change the faction name
                  #(assign,"$players_faction","fac_player_supporters_faction"),     would this be necessary to add?
                  
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_deserter_troop, "trp_imperial_deserter"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_guard_troop, "trp_imperial_stormtrooper"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_messenger_troop, "trp_imperial_messenger"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_prison_guard_troop, "trp_imperial_stormtrooper_officer"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_spacestation_guard_troop, "trp_imperial_royal_guard"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_reinforcements_a, "pt_galacticempire_reinforcements_a"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_reinforcements_b, "pt_galacticempire_reinforcements_b"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_reinforcements_c, "pt_galacticempire_reinforcements_c"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_tier_1_troop, "trp_imperial_recruit"), # also used for village recruits
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_tier_2_troop, "trp_imperial_army_trooper"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_tier_3_troop, "trp_imperial_stormtrooper"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_tier_4_troop, "trp_imperial_stormtrooper_veteran"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_tier_5_troop, "trp_imperial_stormtrooper_officer"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_patrol_unit_1, "trp_imperial_navy_trooper"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_patrol_unit_2, "trp_imperial_pilot"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_patrol_unit_3, "trp_imperial_gunner"),
                  
                  #deleted code for fac_neutral since it was not necessary for the original 3 factions
                  
                  (try_for_range,":knight",reserved_knight_begin,reserved_knight_end), #SW modified
                    #(troop_slot_eq, ":knight", slot_troop_occupation, slto_faction_hero),   #comment this out since some may not be a faction hero yet but we still want to change their race/equipment/etc
                    #(troop_set_slot, ":knight", slot_troop_original_faction,"fac_player_supporters_faction"), # don't do this, it stops lords from building armies!!!
                    (troop_set_slot, ":knight", slot_troop_original_faction,"fac_galacticempire"),
                    
                    #new culture specific troops
                    #clear any inventory
                    (troop_clear_inventory, ":knight"),
                    #remove all equipment
                    (try_for_range, ":slot_no", 0, 9),
                      #(troop_get_inventory_slot,":cur_item",":knight",":slot_no"),
                      (troop_set_inventory_slot, ":knight",":slot_no",-1),
                    (try_end),
                    #change race
                    #unisex troops -- let's not be misogynistic :)
                    (store_random_in_range, ":rand", 0, 3),
                    (try_begin),
                      (eq,":rand",0),
                      (troop_set_type,":knight",tf_female),
                    (else_try),
                      (troop_set_type,":knight",tf_male),
                    (try_end),
                    #change equipment
                    #(troop_add_item, ":knight","itm_imperial_stormtrooper_armor_officer",0),
                    #(troop_add_item, ":knight","itm_imperial_stormtrooper_helmet",0),
                    #(troop_add_item, ":knight","itm_imperial_stormtrooper_boots",0),
                    #(troop_add_item, ":knight","itm_imperial_stormtrooper_gloves",0),
                    (troop_add_item, ":knight","itm_baton",0),
                    (troop_add_item, ":knight","itm_laser_bolts_red_rifle",0),
                    (troop_add_item, ":knight","itm_e11",0),
                    #(troop_add_item, ":knight","itm_speeder",0),
                    #equip items
                    (troop_equip_items, ":knight"),
                  (try_end),
              ]),
              
              #script_change_culture_rebel
              ("change_culture_rebel",
                [
                  #(assign,"$culture_selected",1),
                  #(faction_set_slot, "fac_player_supporters_faction", slot_faction_culture, "fac_huttcartel"),   #just re-use an original culture ? shouldn't it be fac_culture_3 instead of fac_huttcartel ?
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_culture, "fac_culture_2"),  #just re-use an original culture ? shouldn't it be fac_culture_3 instead of fac_huttcartel ?
                  #(faction_set_name, "fac_player_supporters_faction", "@Wookiee Faction"),     #nevermind, I gave the player the ability to change the faction name
                  #(assign,"$players_faction","fac_player_supporters_faction"),     would this be necessary to add?
                  
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_deserter_troop, "trp_rebel_deserter"),
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_messenger_troop, "trp_rebel_messenger"),
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_guard_troop, "trp_rebel_trooper"),
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_prison_guard_troop, "trp_wookiee_warrior"),
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_spacestation_guard_troop, "trp_rebel_honor_guard"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_reinforcements_a, "pt_rebelalliance_reinforcements_a"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_reinforcements_b, "pt_rebelalliance_reinforcements_b"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_reinforcements_c, "pt_rebelalliance_reinforcements_c"),
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_tier_1_troop, "trp_rebel_recruit"),  # also used for village recruits
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_tier_2_troop, "trp_rebel_cadet"),
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_tier_3_troop, "trp_rebel_trooper"),
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_tier_4_troop, "trp_rebel_heavy_trooper"),
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_tier_5_troop, "trp_rebel_commando"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_patrol_unit_1, "trp_rebel_cadet"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_patrol_unit_2, "trp_rebel_pilot"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_patrol_unit_3, "trp_rebel_trooper"),
                  
                  #deleted code for fac_neutral since it was not necessary for the original 3 factions
                  
                  (try_for_range,":knight",reserved_knight_begin,reserved_knight_end), #SW modified
                    #(troop_slot_eq, ":knight", slot_troop_occupation, slto_faction_hero),   #comment this out since some may not be a faction hero yet but we still want to change their race/equipment/etc
                    #(troop_set_slot, ":knight", slot_troop_original_faction,"fac_player_supporters_faction"), # don't do this, it stops lords from building armies!!!
                    (troop_set_slot, ":knight", slot_troop_original_faction,"fac_rebelalliance"),
                    
                    #new culture specific troops
                    #clear any inventory
                    (troop_clear_inventory, ":knight"),
                    #remove all equipment
                    (try_for_range, ":slot_no", 0, 9),
                      #(troop_get_inventory_slot,":cur_item",":knight",":slot_no"),
                      (troop_set_inventory_slot, ":knight",":slot_no",-1),
                    (try_end),
                    #change race and equipment
                    (troop_add_item, ":knight","itm_laser_bolts_green_rifle",0),
                    (troop_add_item, ":knight","itm_energy_shield_green_medium",0),
                    (troop_add_item, ":knight","itm_vibro_sword3_blue",0),
                    #(troop_add_item, ":knight","itm_speeder",0),
                    (store_random_in_range, ":rand", 0, 5),
                    (try_begin),
                      (eq, ":rand", 0),
                      (troop_set_type, ":knight",tf_moncal),
                      (troop_add_item, ":knight","itm_transparent_helmet_armor",0),
                      #(troop_add_item, ":knight","itm_officer_uniform_white",0),
                      #(troop_add_item, ":knight","itm_black_boots",0),
                      (troop_add_item, ":knight","itm_a295",0),
                    (else_try),
                      (eq, ":rand", 1),
                      (troop_set_type, ":knight",tf_sullustan),
                      (troop_add_item, ":knight","itm_transparent_helmet_armor",0),
                      #(troop_add_item, ":knight","itm_vest_closed_a",0),
                      #(troop_add_item, ":knight","itm_black_boots",0),
                      (troop_add_item, ":knight","itm_quicksnap_36t",0),
                    (else_try),
                      (eq, ":rand", 2),
                      (troop_set_type, ":knight",tf_bothan),
                      (troop_add_item, ":knight","itm_transparent_helmet_armor",0),
                      #(troop_add_item, ":knight","itm_vest_closed_a",0),
                      #(troop_add_item, ":knight","itm_black_boots",0),
                      (troop_add_item, ":knight","itm_bothan_bola_carabine",0),
                    (else_try),
                      (eq, ":rand", 3),
                      (troop_set_type, ":knight",tf_wookiee),
                      (troop_add_item, ":knight","itm_transparent_helmet_armor",0),
                      #(troop_add_item, ":knight","itm_wookiee_armor1",0),
                      #(troop_add_item, ":knight","itm_wookiee_bowcaster",0),
                      (troop_add_item, ":knight","itm_wookiee_fur",0),
                    (else_try),
                      (troop_set_type, ":knight",tf_twilek),
                      (troop_add_item, ":knight","itm_transparent_helmet_armor",0),
                      #(troop_add_item, ":knight","itm_twilek_armor",0),
                      #(troop_add_item, ":knight","itm_leather_boots",0),
                      (troop_add_item, ":knight","itm_a295",0),
                    (try_end),
                    #equip items
                    (troop_equip_items, ":knight"),
                  (try_end),
              ]),
              
              # script_change_culture_hutt
              ("change_culture_hutt",
                [
                  #(assign,"$culture_selected",1),
                  #(faction_set_slot, "fac_player_supporters_faction", slot_faction_culture, "fac_huttcartel"),   #just re-use an original culture ? shouldn't it be fac_culture_3 instead of fac_huttcartel ?
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_culture, "fac_culture_3"),  #just re-use an original culture ? shouldn't it be fac_culture_3 instead of fac_huttcartel ?
                  #(faction_set_name, "fac_player_supporters_faction", "@Wookiee Faction"),     #nevermind, I gave the player the ability to change the faction name
                  #(assign,"$players_faction","fac_player_supporters_faction"),     would this be necessary to add?
                  
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_deserter_troop, "trp_hutt_deserter"),
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_messenger_troop, "trp_hutt_messenger"),
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_guard_troop, "trp_hutt_guard"),
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_prison_guard_troop, "trp_gamorrean_guard"),
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_spacestation_guard_troop, "trp_gamorrean_guard"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_reinforcements_a, "pt_huttcartel_reinforcements_a"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_reinforcements_b, "pt_huttcartel_reinforcements_b"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_reinforcements_c, "pt_huttcartel_reinforcements_c"),
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_tier_1_troop, "trp_hutt_militia"),   # also used for village recruits
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_tier_2_troop, "trp_hutt_guard"),
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_tier_3_troop, "trp_hutt_marksman"),
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_tier_4_troop, "trp_hutt_skiff_guard"),
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_tier_5_troop, "trp_hutt_palace_guard_captain"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_patrol_unit_1, "trp_hutt_mercenary"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_patrol_unit_2, "trp_hutt_skiff_guard"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_patrol_unit_3, "trp_hutt_marksman"),
                  
                  #deleted code for fac_neutral since it was not necessary for the original 3 factions
                  
                  (try_for_range,":knight",reserved_knight_begin,reserved_knight_end), #SW modified
                    #(troop_slot_eq, ":knight", slot_troop_occupation, slto_faction_hero),   #comment this out since some may not be a faction hero yet but we still want to change their race/equipment/etc
                    #(troop_set_slot, ":knight", slot_troop_original_faction,"fac_player_supporters_faction"), # don't do this, it stops lords from building armies!!!
                    (troop_set_slot, ":knight", slot_troop_original_faction,"fac_huttcartel"),
                    
                    #new culture specific troops
                    #clear any inventory
                    (troop_clear_inventory, ":knight"),
                    #remove all equipment
                    (try_for_range, ":slot_no", 0, 9),
                      #(troop_get_inventory_slot,":cur_item",":knight",":slot_no"),
                      (troop_set_inventory_slot, ":knight",":slot_no",-1),
                    (try_end),
                    #change race
                    (troop_set_type,":knight",tf_male),
                    #add equipment
                    (troop_add_item, ":knight","itm_leather_gloves",0),
                    #(troop_add_item, ":knight","itm_leather_boots",0),
                    (troop_add_item, ":knight","itm_vibro_sword3_gold",0),
                    (troop_add_item, ":knight","itm_energy_shield_yellow_medium",0),
                    (troop_add_item, ":knight","itm_laser_bolts_orange_rifle",0),
                    (troop_add_item, ":knight","itm_a295",0),
                    #(troop_add_item, ":knight","itm_speeder",0),
                    #random equipment
                    (store_random_in_range, ":rand", 0, 8),
                    (try_begin),
                      (eq, ":rand", 0),
                      (troop_add_item, ":knight","itm_klatooinian_head_helmet_a",0),
                      #(troop_add_item, ":knight","itm_klatooinian_armor",0),
                    (else_try),
                      (eq, ":rand", 1),
                      (troop_add_item, ":knight","itm_weequay_head_helmet_a",0),
                      #(troop_add_item, ":knight","itm_armor_blue",0),
                    (else_try),
                      (eq, ":rand", 2),
                      (troop_add_item, ":knight","itm_weequay_head_helmet_b",0),
                      #(troop_add_item, ":knight","itm_armor_brown",0),
                    (else_try),
                      (eq, ":rand", 3),
                      (troop_add_item, ":knight","itm_nikto_head_helmet_a",0),
                      #(troop_add_item, ":knight","itm_armor_red",0),
                    (else_try),
                      (eq, ":rand", 4),
                      (troop_add_item, ":knight","itm_nikto_head_helmet_b",0),
                      #(troop_add_item, ":knight","itm_armor_white",0),
                    (else_try),
                      (eq, ":rand", 5),
                      (troop_add_item, ":knight","itm_nikto_head_helmet_c",0),
                      #(troop_add_item, ":knight","itm_armor_brown",0),
                    (else_try),
                      (eq, ":rand", 6),
                      (troop_add_item, ":knight","itm_mining_helmet",0),
                      #(troop_add_item, ":knight","itm_armor_red",0),
                    (else_try),
                      (troop_add_item, ":knight","itm_pipe_helmet",0),
                      #(troop_add_item, ":knight","itm_armor_white",0),
                    (try_end),
                    #equip items
                    (troop_equip_items, ":knight"),
                  (try_end),
              ]),
              
              # script_change_culture_human
              ("change_culture_human",
                [
                  #(assign,"$culture_selected",1),
                  #(faction_set_slot, "fac_player_supporters_faction", slot_faction_culture, "fac_huttcartel"),   #just re-use an original culture ? shouldn't it be fac_culture_3 instead of fac_huttcartel ?
                  (faction_set_slot, "fac_player_supporters_faction", slot_faction_culture, "fac_culture_3"),  #just re-use an original culture ? shouldn't it be fac_culture_3 instead of fac_huttcartel ?
                  #(faction_set_name, "fac_player_supporters_faction", "@Wookiee Faction"),     #nevermind, I gave the player the ability to change the faction name
                  
                  #(assign,"$players_faction","fac_player_supporters_faction"),     would this be necessary to add?
                  
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_deserter_troop, "trp_human_deserter"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_messenger_troop, "trp_human_messenger"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_guard_troop, "trp_security_guard"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_prison_guard_troop, "trp_security_guard"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_spacestation_guard_troop, "trp_bodyguard"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_reinforcements_a, "pt_faction_human_reinforcements_a"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_reinforcements_b, "pt_faction_human_reinforcements_b"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_reinforcements_c, "pt_faction_human_reinforcements_c"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_tier_1_troop, "trp_civilian"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_tier_2_troop, "trp_militia"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_tier_3_troop, "trp_soldier"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_tier_4_troop, "trp_commando"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_tier_5_troop, "trp_pilot"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_patrol_unit_1, "trp_militia"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_patrol_unit_2, "trp_thug"),
                  (faction_set_slot, "fac_player_supporters_faction",  slot_faction_patrol_unit_3, "trp_biker"),
                  
                  #do this because we set the recruited knights original faction to fac_neutral
                  (faction_set_slot, "fac_neutral",  slot_faction_deserter_troop, "trp_human_deserter"),
                  (faction_set_slot, "fac_neutral",  slot_faction_messenger_troop, "trp_human_messenger"),
                  (faction_set_slot, "fac_neutral",  slot_faction_guard_troop, "trp_security_guard"),
                  (faction_set_slot, "fac_neutral",  slot_faction_prison_guard_troop, "trp_security_guard"),
                  (faction_set_slot, "fac_neutral",  slot_faction_spacestation_guard_troop, "trp_bodyguard"),
                  (faction_set_slot, "fac_neutral",  slot_faction_reinforcements_a, "pt_faction_human_reinforcements_a"),
                  (faction_set_slot, "fac_neutral",  slot_faction_reinforcements_b, "pt_faction_human_reinforcements_b"),
                  (faction_set_slot, "fac_neutral",  slot_faction_reinforcements_c, "pt_faction_human_reinforcements_c"),
                  (faction_set_slot, "fac_neutral",  slot_faction_tier_1_troop, "trp_civilian"),
                  (faction_set_slot, "fac_neutral",  slot_faction_tier_2_troop, "trp_militia"),
                  (faction_set_slot, "fac_neutral",  slot_faction_tier_3_troop, "trp_soldier"),
                  (faction_set_slot, "fac_neutral",  slot_faction_tier_4_troop, "trp_commando"),
                  (faction_set_slot, "fac_neutral",  slot_faction_tier_5_troop, "trp_pilot"),
                  (faction_set_slot, "fac_neutral",  slot_faction_patrol_unit_1, "trp_militia"),
                  (faction_set_slot, "fac_neutral",  slot_faction_patrol_unit_2, "trp_thug"),
                  (faction_set_slot, "fac_neutral",  slot_faction_patrol_unit_3, "trp_biker"),
                  
                  (try_for_range,":knight",reserved_knight_begin,reserved_knight_end), #SW modified
                    #(troop_slot_eq, ":knight", slot_troop_occupation, slto_faction_hero),   #comment this out since some may not be a faction hero yet but we still want to change their race/equipment/etc
                    #(troop_set_slot, ":knight", slot_troop_original_faction,"fac_player_supporters_faction"), # don't do this, it stops lords from building armies!!!
                    (troop_set_slot, ":knight", slot_troop_original_faction,"fac_neutral"),
                    
                    #new culture specific troops
                    #clear any inventory
                    (troop_clear_inventory, ":knight"),
                    #remove all equipment
                    (try_for_range, ":slot_no", 0, 9),
                      #(troop_get_inventory_slot,":cur_item",":knight",":slot_no"),
                      (troop_set_inventory_slot, ":knight",":slot_no",-1),
                    (try_end),
                    #change race
                    #unisex troops -- let's not be misogynistic :)
                    (store_random_in_range, ":rand", 0, 2),
                    (try_begin),
                      (eq,":rand",0),
                      (troop_set_type,":knight",tf_female),
                    (else_try),
                      (troop_set_type,":knight",tf_male),
                    (try_end),
                    #add equipment
                    (troop_add_item, ":knight","itm_black_gloves",0),
                    #(troop_add_item, ":knight","itm_black_boots",0),
                    (troop_add_item, ":knight","itm_vibro_sword3_gold",0),
                    (troop_add_item, ":knight","itm_laser_bolts_orange_rifle",0),
                    (troop_add_item, ":knight","itm_a295",0),
                    (troop_add_item, ":knight","itm_westar_shield",0),
                    #(troop_add_item, ":knight","itm_speeder",0),
                    #random equipment
                    (store_random_in_range, ":rand", 0, 4),
                    (try_begin),
                      (eq, ":rand", 0),
                      (troop_add_item, ":knight","itm_pipe_helmet",0),
                      #(troop_add_item, ":knight","itm_outfit_black",0),
                    (else_try),
                      (eq, ":rand", 1),
                      (troop_add_item, ":knight","itm_fang_helmet",0),
                      #(troop_add_item, ":knight","itm_outfit_black",0),
                    (else_try),
                      (eq, ":rand", 2),
                      (troop_add_item, ":knight","itm_mining_helmet",0),
                      #(troop_add_item, ":knight","itm_outfit_grey",0),
                    (else_try),
                      (troop_add_item, ":knight","itm_beak_helmet",0),
                      #(troop_add_item, ":knight","itm_outfit_grey",0),
                    (try_end),
                    #equip items
                    (troop_equip_items, ":knight"),
                  (try_end),
              ]),
              
              # script_start_arena_battle
              # Input: none
              # Output: none (starts scene)
              ("start_arena_battle",
                #SW - modified tournament items
                [
                  (set_jump_mission,"mt_arena_melee_fight"),
                  (assign, "$last_training_fight_town", "$current_town"),
                  (store_current_hours,"$training_fight_time"),
                  (assign, "$g_mt_mode", abm_training),
                  (party_get_slot, ":scene","$current_town",slot_mainplanet_arena),
                  (modify_visitors_at_site,":scene"),
                  (reset_visitors),
                  (store_random_in_range, "$g_player_entry_point", 32, 40),

                  #SW - added script_set_items_for_arena so we can toggle what weapons are used
                  (call_script, "script_set_items_for_arena", "$g_player_entry_point","trp_player"),

                  (set_visitor, "$g_player_entry_point", "trp_player"),

                  #SW - added script_set_items_for_arena so we can toggle what weapons are used (didn't see to work correctly here)
                  #(call_script, "script_set_items_for_arena", 0),

                  (jump_to_scene, ":scene"),
              ]),
              
              # script_set_items_for_arena
              # Input: arg1 = weapon type
              # Output: none (sets mt_arena_melee_fight items)
              ("set_items_for_arena",
                #SW - modified tournament items
                [
                  
                  (store_script_param, ":entry_point", 1),
                  (store_script_param, ":added_troop", 2),
                  
                  #have to clear all the override_items first
                  (mission_tpl_entry_clear_override_items, "mt_arena_melee_fight", ":entry_point"),
                  
                  (try_begin),
                    (le, "$arena_weapons", 0),  #lightsabers
                    (store_random_in_range, ":random", 1, 7),
                    (try_begin),
                      (le, ":random", 1),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_lightsaber_yellow_arena"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_jedi_robe_a"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_leather_boots_reinforced"),
                      #set the shields or throwing lightsaber percentage
                      (store_random_in_range, ":random", 1, 101),
                      (try_begin),
                        (le, ":random", 25), #add a lightsaber shield
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_lightsaber_block_yellow"),
                      (else_try),
                        (le, ":random", 50), #add throwing lightsaber & force block
                        #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_throw_lightsaber_yellow_merch"),
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_throw_lightsaber_yellow"),
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_block"),
                      (else_try),
                        (le, ":random", 75), #add a force shield
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_shield"),
                      (else_try),      #otherwise just a force block
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_block"),
                      (try_end),
                    (else_try),
                      (eq, ":random", 2),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_lightsaber_red_arena"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_jedi_robe_b"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_black_boots_reinforced"),
                      #set the shields or throwing lightsaber percentage
                      (store_random_in_range, ":random", 1, 101),
                      (try_begin),
                        (le, ":random", 25), #add a lightsaber shield
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_lightsaber_block_red"),
                      (else_try),
                        (le, ":random", 50), #add throwing lightsaber & force block
                        #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_throw_lightsaber_red_merch"),
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_throw_lightsaber_red"),
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_block"),
                      (else_try),
                        (le, ":random", 75), #add a force shield
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_shield"),
                      (else_try),      #otherwise just a force block
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_block"),
                      (try_end),
                    (else_try),
                      (eq, ":random", 3),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_lightsaber_yellow_arena"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_jedi_robe_c"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_leather_boots_reinforced"),
                      #set the shields or throwing lightsaber percentage
                      (store_random_in_range, ":random", 1, 101),
                      (try_begin),
                        (le, ":random", 25), #add a lightsaber shield
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_lightsaber_block_yellow"),
                      (else_try),
                        (le, ":random", 50), #add throwing lightsaber & force block
                        #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_throw_lightsaber_yellow_merch"),
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_throw_lightsaber_yellow"),
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_block"),
                      (else_try),
                        (le, ":random", 75), #add a force shield
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_shield"),
                      (else_try),      #otherwise just a force block
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_block"),
                      (try_end),
                    (else_try),
                      (eq, ":random", 4),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_lightsaber_red_arena"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_jedi_robe_d"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_black_boots_reinforced"),
                      #set the shields or throwing lightsaber percentage
                      (store_random_in_range, ":random", 1, 101),
                      (try_begin),
                        (le, ":random", 25), #add a lightsaber shield
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_lightsaber_block_red"),
                      (else_try),
                        (le, ":random", 50), #add throwing lightsaber & force block
                        #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_throw_lightsaber_red_merch"),
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_throw_lightsaber_red"),
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_block"),
                      (else_try),
                        (le, ":random", 75), #add a force shield
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_shield"),
                      (else_try),      #otherwise just a force block
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_block"),
                      (try_end),
                    (else_try),
                      (eq, ":random", 5),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_lightsaber_green_arena"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_jedi_robe_e"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_leather_boots_reinforced"),
                      #set the shields or throwing lightsaber percentage
                      (store_random_in_range, ":random", 1, 101),
                      (try_begin),
                        (le, ":random", 25), #add a lightsaber shield
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_lightsaber_block_green"),
                      (else_try),
                        (le, ":random", 50), #add throwing lightsaber & force block
                        #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_throw_lightsaber_green_merch"),
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_throw_lightsaber_green"),
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_block"),
                      (else_try),
                        (le, ":random", 75), #add a force shield
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_shield"),
                      (else_try),      #otherwise just a force block
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_block"),
                      (try_end),
                    (else_try),
                      #(eq, ":random", 6),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_lightsaber_blue_arena"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_jedi_robe_f"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_leather_boots_reinforced"),
                      #set the shields or throwing lightsaber percentage
                      (store_random_in_range, ":random", 1, 101),
                      (try_begin),
                        (le, ":random", 25), #add a lightsaber shield
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_lightsaber_block_blue"),
                      (else_try),
                        (le, ":random", 50), #add throwing lightsaber & force block
                        #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_throw_lightsaber_blue_merch"),
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_throw_lightsaber_blue"),
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_block"),
                      (else_try),
                        (le, ":random", 75), #add a force shield
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_shield"),
                      (else_try),      #otherwise just a force block
                        (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_block"),
                      (try_end),
                    (try_end),
                  (else_try),
                    (eq, "$arena_weapons", 2),  #players current equipment
                    (troop_get_type,":holod_race","$g_player_troop"),
                    (troop_set_type,":added_troop",":holod_race"),
                    (try_for_range, ":slot", 0, 9),   # ek_item_0 to ek_gloves
                      (troop_get_inventory_slot,":item","$g_player_troop",":slot"),
                      (gt,":item",0),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", ":item"),
                    (try_end),
                  (else_try),
                    (eq, "$arena_weapons", 3),  # blasters, vibroblades, and energy shields
                    (store_random_in_range, ":random", 1, 6),
                    (try_begin),
                      (le, ":random", 1),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_vibro_blade1"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_laser_bolts_green_pistol"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_ddc_defender"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_energy_shield_green_small"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_arena_tunic_green"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_leather_boots"),
                    (else_try),
                      (eq, ":random", 2),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_vibro_blade1"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_laser_bolts_blue_pistol"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_ddc_defender"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_energy_shield_blue_small"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_arena_tunic_blue"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_leather_boots"),
                    (else_try),
                      (eq, ":random", 3),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_vibro_blade1"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_laser_bolts_yellow_pistol"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_ddc_defender"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_energy_shield_yellow_small"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_arena_tunic_yellow"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_leather_boots"),
                    (else_try),
                      (eq, ":random", 4),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_vibro_blade1"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_laser_bolts_red_pistol"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_ddc_defender"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_energy_shield_red_small"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_arena_tunic_red"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_leather_boots"),
                    (else_try),
                      #(eq, ":random", 5),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_vibro_blade1"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_laser_bolts_orange_pistol"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_ddc_defender"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_energy_shield_yellow_small"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_arena_tunic_white"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_leather_boots"),
                    (try_end),
                  (else_try),
                    (eq, "$arena_weapons", 4),  # random weapons
                    #give everybody leather boots
                    #TAS 0.42 fix
                    (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_arena_tunic_white"),
                    #choose the armor
                    (store_random_in_range, ":random", 1, 6),
                    (try_begin),
                      (le, ":random", 1),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_arena_tunic_green"),
                    (else_try),
                      (eq, ":random", 2),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_arena_tunic_blue"),
                    (else_try),
                      (eq, ":random", 3),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_arena_tunic_yellow"),
                    (else_try),
                      (eq, ":random", 4),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_arena_tunic_red"),
                    (else_try),
                      #(eq, ":random", 5),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_arena_tunic_white"),
                    (try_end),
                    #choose the weapon
                    (store_random_in_range, ":random", 1, 15),
                    (try_begin),
                      (le, ":random", 1), #vibrosword
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_vibro_sword3_gold"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_energy_shield_yellow_small"),
                    (else_try),
                      (le, ":random", 2), #vibrosword
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_vibro_sword3_blue"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_energy_shield_blue_small"),
                    (else_try),
                      (eq, ":random", 3), #pistol
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_vibro_blade1"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_laser_bolts_yellow_pistol"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_ddc_defender"),
                    (else_try),
                      (eq, ":random", 4), #pistol
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_vibro_blade2"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_laser_bolts_orange_pistol"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_dl18"),
                    (else_try),
                      (eq, ":random", 5), #pistol
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_vibro_blade3"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_laser_bolts_blue_pistol"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_westar"),
                    (else_try),
                      (eq, ":random", 6), #electrostaff
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_electro_staff_medium"),
                    (else_try),
                      (eq, ":random", 7), #electrostaff
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_electro_staff_long"),
                    (else_try),
                      (eq, ":random", 8), #vibroaxe
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_vibro_axe_medium_1h"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_durasteel_shield_small"),
                    (else_try),
                      (eq, ":random", 9), #vibroaxe
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_vibro_axe_long_2h"),
                    (else_try),
                      (eq, ":random", 10),   #force pike
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_force_pike"),
                    (else_try),
                      (eq, ":random", 11),   #throwing axes
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_throwing_axes"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_gamorrean_axe_1h"),
                    (else_try),
                      (eq, ":random", 12),   #throwing knives
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_twilek_dagger_throwing"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_twilek_dagger"),
                    (else_try),
                      (eq, ":random", 13),   #gaffi staff
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_tusken_gaffi_staff"),
                    (else_try),
                      (eq, ":random", 14),   #mace
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_durasteel_mace"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_durasteel_shield_small"),
                    (else_try),  #safety, shouldn't be used
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_vibro_sword3_red"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_energy_shield_red_small"),
                    (try_end),
                  (else_try),
                    #(eq, "$arena_weapons", 1), # vibroswords & energy shields
                    (store_random_in_range, ":random", 1, 6),
                    (try_begin),
                      (le, ":random", 1),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_vibro_sword3_gold"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_energy_shield_green_small"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_arena_tunic_green"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_leather_boots"),
                    (else_try),
                      (eq, ":random", 2),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_vibro_sword3_blue"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_energy_shield_blue_small"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_arena_tunic_blue"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_leather_boots"),
                    (else_try),
                      (eq, ":random", 3),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_vibro_sword3_gold"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_energy_shield_yellow_small"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_arena_tunic_yellow"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_leather_boots"),
                    (else_try),
                      (eq, ":random", 4),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_vibro_sword3_red"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_energy_shield_red_small"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_arena_tunic_red"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_leather_boots"),
                    (else_try),
                      #(eq, ":random", 5),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_vibro_sword3_gold"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_energy_shield_yellow_small"),
                      (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_arena_tunic_white"),
                      #(mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":entry_point", "itm_leather_boots"),
                    (try_end),
                  (try_end),
                  
              ]),
              
              # script_display_fullscreen_background
              #  Input: arg1 = c_town
              # Output: none (executes set_background_mesh command)
              ("display_fullscreen_background",
                [
                  (store_script_param_1, ":c_town"),
                  #SW - display a new menu background depending on the location
                  (try_begin), # same mnu_town is used for towns and castles
                    (party_slot_eq,":c_town",slot_party_type, spt_mainplanet),
                    (try_begin),
                      (eq, ":c_town", "p_endor"),           #Endor
                      (set_background_mesh, "mesh_pic_fullscreen_mainplanet_endor"),
                    (else_try),
                      (eq, ":c_town", "p_geonosis"),           #Geonosis
                      (set_background_mesh, "mesh_pic_fullscreen_mainplanet_tatooine"),
                    (else_try),
                      (eq, ":c_town", "p_mon_cal"),            #Mon Cal
                      (set_background_mesh, "mesh_pic_fullscreen_mainplanet_1"),
                    (else_try),
                      (eq, ":c_town", "p_kashyyyk"),           #Kashyyk
                      (set_background_mesh, "mesh_pic_fullscreen_mainplanet_kashyyk"),
                    (else_try),
                      (eq, ":c_town", "p_hoth"),            #Hoth
                      (set_background_mesh, "mesh_pic_fullscreen_mainplanet_hoth"),
                    (else_try),
                      (eq, ":c_town", "p_gamorr"),          #Gamorr
                      (set_background_mesh, "mesh_pic_fullscreen_mainplanet_gamorr"),
                    (else_try),
                      (eq, ":c_town", "p_yavin_iv"),           #Yavin 4
                      (set_background_mesh, "mesh_pic_fullscreen_mainplanet_endor"),
                    (else_try),
                      (eq, ":c_town", "p_tatooine"),           #Tatooine
                      (set_background_mesh, "mesh_pic_fullscreen_mainplanet_tatooine"),
                    (else_try),
                      (eq, ":c_town", "p_ryloth"),          #Ryloth
                      (set_background_mesh, "mesh_pic_fullscreen_mainplanet_tatooine"),
                    (else_try),
                      (eq, ":c_town", "p_kamino"),          #Kamino
                      (set_background_mesh, "mesh_pic_fullscreen_mainplanet_kamino"),
                    (else_try),
                      (eq, ":c_town", "p_bespin"),          #Bespin
                      (set_background_mesh, "mesh_pic_fullscreen_mainplanet_bespin"),
                    (else_try),
                      (store_random_in_range, ":rand", 0, 100),
                      (try_begin),
                        (lt, ":rand", 33),
                        (set_background_mesh, "mesh_pic_fullscreen_mainplanet_1"),
                      (else_try),
                        (lt, ":rand", 66),
                        (set_background_mesh, "mesh_pic_fullscreen_mainplanet_2"),
                      (else_try),
                        (set_background_mesh, "mesh_pic_fullscreen_mainplanet_3"),
                      (try_end),
                    (try_end),
                  (else_try),
                    (party_slot_eq,":c_town",slot_party_type, spt_castle),
                    (set_background_mesh, "mesh_pic_fullscreen_spacestation"),
                  (else_try),
                    (party_slot_eq,":c_town",slot_party_type, spt_minorplanet),
                    (store_random_in_range, ":rand", 0, 100),
                    (try_begin),
                      (lt, ":rand", 50),
                      (set_background_mesh, "mesh_pic_fullscreen_minorplanet_1"),
                    (else_try),
                      (set_background_mesh, "mesh_pic_fullscreen_minorplanet_2"),
                    (try_end),
                  (else_try),
                    (set_background_mesh, "mesh_pic_fullscreen_default"),
                  (try_end),
              ]),
              
              # script_change_rain
              #  Input: arg1 = c_town
              # Output: none (executes set_rain command, must go in ti_before_mission_start)
              ("change_rain",
                [
                  (store_script_param_1, "$current_town"),
                  #SW - change the weather depending on the location
                  #(try_begin), # same mnu_town is used for towns and castles
                  #(party_slot_eq,"$current_town",slot_party_type, spt_mainplanet),
                  (try_begin),
                    #@FIXME -- snow/rain disabled on mon cal
                   #(eq, "$current_town", "p_mon_cal"),           #Mon Cal
                   #(store_random_in_range, ":random", 50, 100),
                   #(set_rain,1,":random"),
                 #(else_try),
                    #@FIXME -- snow/rain disabled on hoth
                    #(eq, "$current_town", "p_hoth"),             #Hoth
                    #(store_random_in_range, ":random", 60, 100),
                    #(set_rain,2,":random"),
                 #(else_try),
                    (eq, "$current_town", "p_kamino"),            #Kamino
                    (set_rain,1,100),
                    #(set_fog_distance, 20, 0xFFFFFFFF),
                  (else_try),
                    (eq, "$current_town", "p_minorplanet_62"),    #vjun
                    #(store_random_in_range, ":random", 79, 100),
                    (set_rain,1,100),
                    #(set_fog_distance, 40, 0xFFFFFFFF),
                  (else_try),
                    # (this_or_next|eq, ":c_town", "p_geonosis"),       #Geonosis / without atmosferic effects
                    # (this_or_next|eq, ":c_town", "p_kessel"),            #Kessel   / without atmosferic effects
                    # (this_or_next|eq, ":c_town", "p_tatooine"),       #Tatooine / without atmosferic effects
                    # (this_or_next|eq, ":c_town", "p_ryloth"),            #Ryloth   / without atmosferic effects
                    # (this_or_next|eq, ":c_town", "p_mustafar"),       #Mustafar / without atmosferic effects
                    # (this_or_next|eq, ":c_town", "p_sarapin"),        #Sarapin  / without atmosferic effects
                    # (eq, ":c_town", "p_hypori"),                      #Hypori   / without atmosferic effects
                    (set_rain,0,0),
                  (try_end),
                ]
              ),
              
              # script_fix_town_walkers
              #  Input: arg1 = c_town
              # Output: none
              ("fix_town_walkers",
                [
                  (store_script_param_1, ":center_no"),
                  
                  #SW - re-initialize walkers when the faction of a town switches
                  (store_faction_of_party, ":faction_no", ":center_no"),
                  (try_for_range, ":walker_no", 0, num_town_walkers),
                    (store_add, ":type_slot", slot_center_walker_0_type, ":walker_no"),
                    (party_set_slot, ":center_no", ":type_slot", walkert_default),
                    
                    # (try_begin),  #village
                    # (party_slot_eq, ":center_no", slot_party_type, spt_minorplanet),
                    # (store_random_in_range, ":walker_troop_id", minorplanet_walkers_begin, minorplanet_walkers_end),
                    # (else_try),   #town/castle
                    (try_begin),
                      (this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_mainplanet),
                      (party_slot_eq, ":center_no", slot_party_type, spt_castle),
                      
                      #modified town_walkers so certain planets only have certain walkers - example code originally posted by Keedo420
                      # NOTE - any changes to this script must be updated in both the center_set_walker_to_type and fix_town_walker scripts
                      (try_begin),
                        (eq, ":center_no", "p_geonosis"),
                        (assign, ":town_walkers_modified_begin",town8_walkers_begin),
                        (assign, ":town_walkers_modified_end",town8_walkers_end),
                      (else_try),
                        (eq, ":center_no", "p_mon_cal"),
                        (assign, ":town_walkers_modified_begin",town9_walkers_begin),
                        (assign, ":town_walkers_modified_end",town9_walkers_end),
                      (else_try),
                        (eq, ":center_no", "p_kashyyyk"),
                        (assign, ":town_walkers_modified_begin",town10_walkers_begin),
                        (assign, ":town_walkers_modified_end",town10_walkers_end),
                      (else_try),
                        (eq, ":center_no", "p_gamorr"),
                        (assign, ":town_walkers_modified_begin",town12_walkers_begin),
                        (assign, ":town_walkers_modified_end",town12_walkers_end),
                      (else_try),
                        (eq, ":center_no", "p_tatooine"),
                        (assign, ":town_walkers_modified_begin",town14_walkers_begin),
                        (assign, ":town_walkers_modified_end",town14_walkers_end),
                      (else_try),
                        (eq, ":center_no", "p_ryloth"),
                        (assign, ":town_walkers_modified_begin",town17_walkers_begin),
                        (assign, ":town_walkers_modified_end",town17_walkers_end),
                      (else_try),
                        (eq, ":center_no", "p_kamino"),
                        (assign, ":town_walkers_modified_begin","trp_kaminoan"),
                        (assign, ":town_walkers_modified_end","trp_kaminoan"),
                      (else_try),
                        (eq, ":center_no", "p_minorplanet_35"), #Iridonia - Zabrak walkers
                        (assign, ":town_walkers_modified_begin",iridonia_walkers_begin),
                        (assign, ":town_walkers_modified_end",iridonia_walkers_end),
                      (else_try),
                        (eq, ":center_no", "p_minorplanet_53"), #Pzob - Gamorreans
                        (assign, ":town_walkers_modified_begin",pzob_walkers_begin),
                        (assign, ":town_walkers_modified_end",pzob_walkers_end),
                      (else_try),
                        (eq, ":center_no", "p_minorplanet_58"), #Rodia - Added Rodians
                        (assign, ":town_walkers_modified_begin",rodia_walkers_begin),
                        (assign, ":town_walkers_modified_end",rodia_walkers_end),
                      (else_try),
                        (eq, ":center_no", "p_minorplanet_42"), #Bothawui Moon - Added Bothans
                        (assign, ":town_walkers_modified_begin",bothaw_moon_walkers_begin),
                        (assign, ":town_walkers_modified_end",bothaw_moon_walkers_end),
                      (else_try),
                      (else_try),
                        (assign, ":town_walkers_modified_begin",town_walkers_neutral_begin),
                        (assign, ":town_walkers_modified_end",town_walkers_neutral_end),
                        #(assign, ":default_town_walkers",1),
                      (try_end),
                      
                      (store_faction_of_party, ":faction_no", ":center_no"),
                      (try_begin),
                        (eq, ":faction_no", "fac_galacticempire"),   #empire
                        (store_random_in_range, ":rand", 0, 100),
                        (try_begin),
                          (le, ":rand", 40),
                          (store_random_in_range, ":walker_troop_id", town_walkers_empire_begin, town_walkers_empire_end),
                        (else_try),
                          (store_random_in_range, ":walker_troop_id", ":town_walkers_modified_begin", ":town_walkers_modified_end"),
                        (try_end),
                      (else_try),
                        (eq, ":faction_no", "fac_rebelalliance"), #rebel
                        (store_random_in_range, ":rand", 0, 100),
                        (try_begin),
                          (le, ":rand", 40),
                          (store_random_in_range, ":walker_troop_id", town_walkers_rebel_begin, town_walkers_rebel_end),
                        (else_try),
                          (store_random_in_range, ":walker_troop_id", ":town_walkers_modified_begin", ":town_walkers_modified_end"),
                        (try_end),
                      (else_try),
                        (eq, ":faction_no", "fac_huttcartel"), #hutt
                        (store_random_in_range, ":rand", 0, 100),
                        (try_begin),
                          (le, ":rand", 40),
                          (store_random_in_range, ":walker_troop_id", town_walkers_hutt_begin, town_walkers_hutt_end),
                        (else_try),
                          (store_random_in_range, ":walker_troop_id", ":town_walkers_modified_begin", ":town_walkers_modified_end"),
                        (try_end),
                      (else_try),   #default
                        (store_random_in_range, ":walker_troop_id", ":town_walkers_modified_begin", ":town_walkers_modified_begin"),
                      (try_end),
                      
                    (try_end),
                    
                    (store_add, ":troop_slot", slot_center_walker_0_troop, ":walker_no"),
                    (party_set_slot, ":center_no", ":troop_slot", ":walker_troop_id"),
                    (store_random_in_range, ":walker_dna", 0, 1000000),
                    (store_add, ":dna_slot", slot_center_walker_0_dna, ":walker_no"),
                    (party_set_slot, ":center_no", ":dna_slot", ":walker_dna"),
                    
                  (try_end),
                ]
              ),
              
              #script_update_fs_merchants
              # INPUT: none
              # OUTPUT: none
              ("update_fs_trainers",
                [
                  
                  (try_for_range, ":merchant", tavern_fs_trainer_begin, tavern_fs_trainer_end),
                    (troop_clear_inventory, ":merchant"),
                    (troop_add_item, ":merchant","itm_force_power_ls_1",0),
                    (troop_add_item, ":merchant","itm_force_power_ls_2",0),
                    (troop_add_item, ":merchant","itm_force_power_ls_3",0),
                    (troop_add_item, ":merchant","itm_force_power_ls_4",0),
                    (troop_add_item, ":merchant","itm_force_power_ds_1",0),
                    (troop_add_item, ":merchant","itm_force_power_ds_2",0),
                    (troop_add_item, ":merchant","itm_force_power_ds_3",0),
                    (troop_add_item, ":merchant","itm_force_power_ds_4",0),
                    (troop_add_item, ":merchant","itm_force_lightning_ammo",0),
                    (troop_add_item, ":merchant","itm_force_push_ammo",0),
                    (troop_add_item, ":merchant","itm_force_block",0),
                    (troop_add_item, ":merchant","itm_force_shield",0),
                    (troop_add_item, ":merchant","itm_force_protect",0),
                    (troop_add_item, ":merchant","itm_force_kill",0),
                    (troop_add_item, ":merchant","itm_force_choke",0),
                    (troop_add_item, ":merchant","itm_force_knockdown",0),
                    (troop_add_item, ":merchant","itm_force_stun",0),
                    (troop_add_item, ":merchant","itm_force_jump",0),
                    
                  (try_end),
                  
              ]),
              
              #script_update_fs_merchants
              #Jedi Stuff Seller
              # INPUT: none
              # OUTPUT: none
              ("update_fs_merchants",
                [
                  
                  (try_for_range, ":merchant", tavern_fs_merchant_begin, tavern_fs_merchant_end),
                    (troop_clear_inventory, ":merchant"),
                    
                    #lightsabers
                    (try_for_range, ":item_no", "itm_lightsaber_green", "itm_darth_vader_lightsaber"),
                      (troop_add_item, ":merchant",":item_no",0),
                    (try_end),
                    
                    #lightsaber shields
                    (try_for_range, ":item_no", "itm_lightsaber_block_blue", "itm_shields_end"),
                      (troop_add_item, ":merchant",":item_no",0),
                    (try_end),
                    
                    #throwing lightsabers
                    (try_for_range, ":item_no", "itm_force_throw_lightsaber_green_merch", "itm_twilek_dagger_throwing"),
                      (troop_add_item, ":merchant",":item_no",0),
                    (try_end),
                    
                  (try_end),
                  
              ]),
              
              #script_update_fs_merchants
              #Clone Wars Merchant
              # INPUT: none
              # OUTPUT: none
              ("update_ce_merchants",
                [
                  
                  (try_for_range, ":merchant", tavern_ce_merchant_begin, tavern_ce_merchant_end),
                    (troop_clear_inventory, ":merchant"),
                    (troop_add_item, ":merchant","itm_clone_trooper_gloves_white",0),
                    (troop_add_item, ":merchant","itm_clone_trooper_gloves_white",0),
                    (troop_add_item, ":merchant","itm_clone_trooper_gloves_green",0),
                    (troop_add_item, ":merchant","itm_clone_trooper_gloves_green",0),
                    (troop_add_item, ":merchant","itm_clone_trooper_gloves_blue",0),
                    (troop_add_item, ":merchant","itm_clone_trooper_gloves_blue",0),
                    (troop_add_item, ":merchant","itm_clone_trooper_gloves_red",0),
                    (troop_add_item, ":merchant","itm_clone_trooper_gloves_red",0),
                    (troop_add_item, ":merchant","itm_clone_trooper_gloves_yellow",0),
                    (troop_add_item, ":merchant","itm_clone_trooper_gloves_yellow",0),
                    (troop_add_item, ":merchant","itm_clone_trooper_gloves_orange",0),
                    (troop_add_item, ":merchant","itm_clone_trooper_gloves_orange",0),
                    #Phase I & II helmets
                    (troop_add_item, ":merchant","itm_rep_helm_phase1_white",0),
                    (troop_add_item, ":merchant","itm_rep_helm_phase1_blue",0),
                    (troop_add_item, ":merchant","itm_rep_helm_phase1_green",0),
                    (troop_add_item, ":merchant","itm_rep_helm_phase1_orange",0),
                    (troop_add_item, ":merchant","itm_rep_helm_phase1_red",0),
                    (troop_add_item, ":merchant","itm_rep_helm_phase1_yellow",0),
                    (troop_add_item, ":merchant","itm_phase_ii_helmet_clean",0),
                    (troop_add_item, ":merchant","itm_phase_ii_helmet_worn",0),
                    (troop_add_item, ":merchant","itm_phase_ii_helmet_501",0),
                    (troop_add_item, ":merchant","itm_phase_ii_helmet_212",0),
                    (troop_add_item, ":merchant","itm_phase_ii_helmet_442",0),
                    (troop_add_item, ":merchant","itm_phase_ii_helmet_shock",0),
                    (troop_add_item, ":merchant","itm_phase_ii_helmet_wolf",0),
                    (troop_add_item, ":merchant","itm_phase_ii_helmet_echo",0),
                    (troop_add_item, ":merchant","itm_phase_ii_helmet_fives",0),
                    (troop_add_item, ":merchant","itm_phase_ii_helmet_rex",0),
                    (troop_add_item, ":merchant","itm_phase_ii_helmet_fox",0),
                    (troop_add_item, ":merchant","itm_phase_ii_helmet_wolffe",0),
                    (troop_add_item, ":merchant","itm_phase_ii_helmet_cody",0),
                    (troop_add_item, ":merchant","itm_rep_helm_phase2_black",0),
                    (troop_add_item, ":merchant","itm_rep_helm_phase2_camo",0),
                    (troop_add_item, ":merchant","itm_rep_helm_phase2assassin",0),
                    (troop_add_item, ":merchant","itm_rep_helm_phase2arf",0),
                    (troop_add_item, ":merchant","itm_rep_helm_phase2scout",0),
                    (troop_add_item, ":merchant","itm_rep_helm_phase2sniper",0),
                    #Phase I & II armor
                    (troop_add_item, ":merchant","itm_rep_arm_phase1_white",0),
                    (troop_add_item, ":merchant","itm_rep_arm_phase1_blue",0),
                    (troop_add_item, ":merchant","itm_rep_arm_phase1_green",0),
                    (troop_add_item, ":merchant","itm_rep_arm_phase1_orange",0),
                    (troop_add_item, ":merchant","itm_rep_arm_phase1_red",0),
                    (troop_add_item, ":merchant","itm_rep_arm_phase1_yellow",0),
                    (troop_add_item, ":merchant","itm_phase_ii_armor_clean",0),
                    (troop_add_item, ":merchant","itm_phase_ii_armor_worn",0),
                    (troop_add_item, ":merchant","itm_phase_ii_armor_501",0),
                    (troop_add_item, ":merchant","itm_phase_ii_armor_212",0),
                    (troop_add_item, ":merchant","itm_phase_ii_armor_442",0),
                    (troop_add_item, ":merchant","itm_phase_ii_armor_shock",0),
                    (troop_add_item, ":merchant","itm_phase_ii_armor_wolf",0),
                    (troop_add_item, ":merchant","itm_phase_ii_armor_echo",0),
                    (troop_add_item, ":merchant","itm_phase_ii_armor_fives",0),
                    (troop_add_item, ":merchant","itm_phase_ii_armor_rex",0),
                    (troop_add_item, ":merchant","itm_phase_ii_armor_fox",0),
                    (troop_add_item, ":merchant","itm_phase_ii_armor_wolffe",0),
                    (troop_add_item, ":merchant","itm_phase_ii_armor_cody",0),
                    (troop_add_item, ":merchant","itm_rep_arm_phase2_black",0),
                    (troop_add_item, ":merchant","itm_rep_arm_phase2_camo",0),
                    (troop_add_item, ":merchant","itm_rep_arm_phase2assassin",0),
                    (troop_add_item, ":merchant","itm_rep_arm_phase2assassin_kama",0),
                    #Sith stuff
                    (troop_add_item, ":merchant","itm_sith_arm_eradicator",0),
                    (troop_add_item, ":merchant","itm_sith_arm_eradicator2",0),
                    #weapons & ammo
                    (troop_add_item, ":merchant","itm_dc15a",0),
                    (troop_add_item, ":merchant","itm_dc15a",0),
                    (troop_add_item, ":merchant","itm_dc15s",0),
                    (troop_add_item, ":merchant","itm_dc15s",0),
                    (troop_add_item, ":merchant","itm_laser_bolts_blue_rifle",0),
                    (troop_add_item, ":merchant","itm_laser_bolts_blue_rifle",0),
                    #heads
                    (troop_add_item, ":merchant","itm_clone_trooper_head",0),
                    #(troop_add_item, ":merchant","itm_clone_trooper_head",0),
                    (troop_add_item, ":merchant","itm_clone_trooper_head_scar",0),
                    #(troop_add_item, ":merchant","itm_clone_trooper_head_scar",0),
                  (try_end),
                  
              ]),
              
              #script_update_iw_merchants
              #Illegal Weapons merchant
              # INPUT: none
              # OUTPUT: none
              ("update_iw_merchants",
                [
                  
                  (try_for_range, ":merchant", tavern_iw_merchant_begin, tavern_iw_merchant_end),
                    (troop_clear_inventory, ":merchant"),
                    #(troop_add_item, ":merchant","itm_rocket_launcher",0),
                    (troop_add_item, ":merchant","itm_flame_rifle",0),
                    (troop_add_item, ":merchant","itm_concussion_rifle",0),
                    (troop_add_item, ":merchant","itm_thermal_detonator1",0),
                    (troop_add_item, ":merchant","itm_thermal_detonator2",0),
                    (troop_add_item, ":merchant","itm_thermal_detonator3",0),
                    (troop_add_item, ":merchant","itm_heavy_weapons_ammo",0),
                    (troop_add_item, ":merchant","itm_heavy_weapons_ammo",0),
                    (troop_add_item, ":merchant","itm_heavy_weapons_ammo",0),
                    
                    #Disruptor Ammo, Revan Suggestion
                    (troop_add_item, ":merchant","itm_disruptor_ammo",0),
                    (troop_add_item, ":merchant","itm_disruptor_ammo_rifle",0),

                    #animation test items
                    #Rotary canon animations commented out
                    #(troop_add_item, ":merchant","itm_ft0",0),
                    #(troop_add_item, ":merchant","itm_ft1",0),
                    #(troop_add_item, ":merchant","itm_ft2",0),
                    #(troop_add_item, ":merchant","itm_ft3",0),
                    #(troop_add_item, ":merchant","itm_ft4",0),
                    #(troop_add_item, ":merchant","itm_ft5",0),
                    #(troop_add_item, ":merchant","itm_ft6",0),
                    #(troop_add_item, ":merchant","itm_ft7",0),
                    #(troop_add_item, ":merchant","itm_ft8",0),
                    #(troop_add_item, ":merchant","itm_ft9",0),
                    #(troop_add_item, ":merchant","itm_ft10",0),
                    #(troop_add_item, ":merchant","itm_ft11",0),
                    #(troop_add_item, ":merchant","itm_ft12",0),
                    #(troop_add_item, ":merchant","itm_ft12",0),
                    #(troop_add_item, ":merchant","itm_ft13",0),
                    #(troop_add_item, ":merchant","itm_ft14",0),
                    #(troop_add_item, ":merchant","itm_ft15",0),
                    #(troop_add_item, ":merchant","itm_ft16",0),
                    #(troop_add_item, ":merchant","itm_ft17",0),
                    #(troop_add_item, ":merchant","itm_ft18",0),
                    #(troop_add_item, ":merchant","itm_ft19",0),
                    #(troop_add_item, ":merchant","itm_ft20",0),
                    #(troop_add_item, ":merchant","itm_ft21",0),
                    #(troop_add_item, ":merchant","itm_ft22",0),
                    #(troop_add_item, ":merchant","itm_ft23",0),
                    #(troop_add_item, ":merchant","itm_ft24",0),
                    #(troop_add_item, ":merchant","itm_ft25",0),
                    #(troop_add_item, ":merchant","itm_ft26",0),
                    #(troop_add_item, ":merchant","itm_ft27",0),
                    #(troop_add_item, ":merchant","itm_ft28",0),
                    #(troop_add_item, ":merchant","itm_ft29",0),
                    #(troop_add_item, ":merchant","itm_ft30",0),
                    (troop_add_item, ":merchant","itm_sword_shield_test",0),
                  (try_end),
                  
              ]),
              
              #script_update_dp_merchants
              # INPUT: none
              # OUTPUT: none
              ("update_dp_merchants",
                [
                  
                  (try_for_range, ":merchant", tavern_dp_merchant_begin, tavern_dp_merchant_end),
                    (troop_clear_inventory, ":merchant"),
                    (troop_add_item, ":merchant","itm_4lom_head",0),
                    #(troop_add_item, ":merchant","itm_ig88_head",0),
                    #(troop_add_item, ":merchant","itm_ig88_hands",0),
                    #(troop_add_item, ":merchant","itm_ig88_body",0),
                    #(troop_add_item, ":merchant","itm_ig88_feet",0),
                    #(troop_add_item, ":merchant","itm_ig86_head",0),
                    #(troop_add_item, ":merchant","itm_ig86_hand",0),
                    (troop_add_item, ":merchant","itm_ig86_body",0),
                    (troop_add_item, ":merchant","itm_ig88_feet",0),
                    (troop_add_item, ":merchant","itm_ig86_e5_pistol",0),
                    (troop_add_item, ":merchant","itm_ig86_e5_shield",0),
                    (troop_add_item, ":merchant","itm_magna_head_plain",0),
                    #(troop_add_item, ":merchant","itm_aseries",0),
                    (troop_add_item, ":merchant","itm_magnaplain",0),
                    (troop_add_item, ":merchant","itm_sith_droid",0),
                    (troop_add_item, ":merchant","itm_sith_droid_blaster",0),
                    #(troop_add_item, ":merchant","itm_ig86_e5_shield",0),
                    (troop_add_item, ":merchant","itm_hk_head",0),
                    (troop_add_item, ":merchant","itm_hk_hands",0),
                    (troop_add_item, ":merchant","itm_hk_body",0),
                    (troop_add_item, ":merchant","itm_hk_feet",0),
                    (troop_add_item, ":merchant","itm_c3po_blue_head",0),
                    (troop_add_item, ":merchant","itm_c3po_blue_hands",0),
                    (troop_add_item, ":merchant","itm_c3po_blue_body",0),
                    (troop_add_item, ":merchant","itm_c3po_blue_feet",0),
                    (troop_add_item, ":merchant","itm_c3po_gold_head",0),
                    (troop_add_item, ":merchant","itm_c3po_gold_hands",0),
                    (troop_add_item, ":merchant","itm_c3po_gold_body",0),
                    (troop_add_item, ":merchant","itm_c3po_gold_feet",0),
                    (troop_add_item, ":merchant","itm_c3po_grey_head",0),
                    (troop_add_item, ":merchant","itm_c3po_grey_hands",0),
                    (troop_add_item, ":merchant","itm_c3po_grey_body",0),
                    (troop_add_item, ":merchant","itm_c3po_grey_feet",0),
                    (troop_add_item, ":merchant","itm_c3po_red_head",0),
                    (troop_add_item, ":merchant","itm_c3po_red_hands",0),
                    (troop_add_item, ":merchant","itm_c3po_red_body",0),
                    (troop_add_item, ":merchant","itm_c3po_red_feet",0),
                    #droid parts below require transparent body parts
                    (troop_add_item, ":merchant","itm_b1series_body",0),
                    (troop_add_item, ":merchant","itm_bxseries_body",0),
                    (troop_add_item, ":merchant","itm_oomseries_body",0),
                    (troop_add_item, ":merchant","itm_oomseries_pilot_body",0),
                    (troop_add_item, ":merchant","itm_oomseries_marine_body",0),
                    (troop_add_item, ":merchant","itm_oomseries_command_body",0),
                    #(troop_add_item, ":merchant","itm_b2series_body",0),
                    (troop_add_item, ":merchant","itm_r2series_blue",0),
                    (troop_add_item, ":merchant","itm_r2series_green",0),
                    (troop_add_item, ":merchant","itm_r2series_orange",0),
                    (troop_add_item, ":merchant","itm_r2series_purple",0),
                    (troop_add_item, ":merchant","itm_power_droid_tan",0),
                    (troop_add_item, ":merchant","itm_power_droid_grey",0),
                    (troop_add_item, ":merchant","itm_power_droid_snow",0),
                    (troop_add_item, ":merchant","itm_fxseries_droid_armor",0),
                    (troop_add_item, ":merchant","itm_lin_droid_armor",0),
                    (troop_add_item, ":merchant","itm_lin_droid_armor_w_arm",0),
                    (troop_add_item, ":merchant","itm_mse6_armor",0),
                    #transparent body parts
                    (troop_add_item, ":merchant","itm_transparent_droid_head",0),
                    (troop_add_item, ":merchant","itm_transparent_droid_head",0),
                    (troop_add_item, ":merchant","itm_transparent_droid_hands",0),
                    (troop_add_item, ":merchant","itm_transparent_droid_hands",0),
                    (troop_add_item, ":merchant","itm_transparent_droid_feet",0),
                    (troop_add_item, ":merchant","itm_transparent_droid_feet",0),
                    (troop_add_item, ":merchant","itm_droid_weapon_no_attack",0),
                    (troop_add_item, ":merchant","itm_droid_weapon_no_attack",0),
                    #SWY 0.9.0.3 - Added B2 and C-B3 droid Parts
                    (troop_add_item, ":merchant","itm_b2series_attack",0),
                    (troop_add_item, ":merchant","itm_b2series_body_enhanced",0),
                    (troop_add_item, ":merchant","itm_b2series_body",0),
                    (troop_add_item, ":merchant","itm_b2series_blaster",0),
                  (try_end),
                  
              ]),
              
              #script_update_iw_merchants
              # INPUT: none
              # OUTPUT: none
              ("update_ps_merchants",
                [
                  
                  (try_for_range, ":merchant", tavern_ps_merchant_begin, tavern_ps_merchant_end),
                    (troop_clear_inventory, ":merchant"),
                    (troop_add_item, ":merchant","itm_twilek_male_head_bib",0),
                    (troop_add_item, ":merchant","itm_weequay_head_helmet_a",0),
                    (troop_add_item, ":merchant","itm_weequay_head_helmet_b",0),
                    (troop_add_item, ":merchant","itm_klatooinian_head_helmet_a",0),
                    (troop_add_item, ":merchant","itm_nikto_head_helmet_a",0),
                    (troop_add_item, ":merchant","itm_nikto_head_helmet_b",0),
                    (troop_add_item, ":merchant","itm_nikto_head_helmet_c",0),
                    (troop_add_item, ":merchant","itm_tarkin_head",0),
                    (troop_add_item, ":merchant","itm_clone_trooper_head",0),
                    (troop_add_item, ":merchant","itm_clone_trooper_head_scar",0),
                  (try_end),
                  
              ]),
              
              # race/gender fix (call before dialogs)
              # concept by Keedo420 - http://forums.taleworlds.net/index.php/topic,59300.msg1534679.html#msg1534679
              
              ("gender_fix",
                [
                  (store_script_param, ":troop_no", 1),
                  (troop_get_type,":character_race",":troop_no"),
                  
                  (try_begin), #male species
                    (this_or_next|eq,":character_race",tf_male),
                    (this_or_next|eq,":character_race",tf_twilek),
                    (this_or_next|eq,":character_race",tf_rodian),
                    (this_or_next|eq,":character_race",tf_moncal),
                    (this_or_next|eq,":character_race",tf_trandoshan),
                    (this_or_next|eq,":character_race",tf_droid),
                    (this_or_next|eq,":character_race",tf_wookiee),
                    (this_or_next|eq,":character_race",tf_sullustan),
                    (this_or_next|eq,":character_race",tf_gamorrean),
                    (this_or_next|eq,":character_race",tf_bothan),
                    (this_or_next|eq,":character_race",tf_geonosian),
                    (this_or_next|eq,":character_race",tf_jawa),
                    (             eq,":character_race",tf_tusken),
                    
                    (assign, ":gender",0),
                  
                  (else_try), #female species
                    (this_or_next|eq,":character_race",tf_female),
                    (             eq,":character_race",tf_twilek_female),
                    
                    (assign, ":gender",1),
                  (try_end),
                  
                  (assign, reg33, ":gender"), #we return the choice as as the register 33, which is rarely used.
                                              #in dialogs 1 is used for the first option of the conditional and 0 for the second one
                                              #{reg33?her:him}
              ]),
              
              ("placeholder_because_savegames_are_important_haha_easter_egg_1138", []),
              #############################################################################
              #SW MF start new scripts
              
              #initializing patrols for certain bases
              ("init_patrol_bases", [
                  
                  (try_for_parties, ":temp_party"),
                    (party_set_slot, ":temp_party", slot_center_has_patrol, 0),
                  (try_end),
                  
                  #empire
                  (call_script, "script_init_patrol_settings", "p_coruscant", 3), #coruscant
                  (call_script, "script_init_patrol_settings", "p_geonosis", 2), #Geonosis
                  (call_script, "script_init_patrol_settings", "p_corellia", 3), #corellia
                  (call_script, "script_init_patrol_settings", "p_manaan", 1), #manaan
                  (call_script, "script_init_patrol_settings", "p_christophsis", 1), #christophsis
                  (call_script, "script_init_patrol_settings", "p_mandalore", 2), #mandalore
                  (call_script, "script_init_patrol_settings", "p_kessel", 1), #kessel
                  (call_script, "script_init_patrol_settings", "p_endor", 3), #Endor
                  (call_script, "script_init_patrol_settings", "p_mustafar", 1), #Mustafar
                  (call_script, "script_init_patrol_settings", "p_kamino", 1), #Kamino
                  (call_script, "script_init_patrol_settings", "p_taris", 1), #Taris
                  #rebels
                  (call_script, "script_init_patrol_settings", "p_dantooine", 2), #dantooine
                  (call_script, "script_init_patrol_settings", "p_kashyyyk", 2), #kashyyyk
                  (call_script, "script_init_patrol_settings", "p_mon_cal", 1),  #Mon Cal
                  (call_script, "script_init_patrol_settings", "p_hoth", 3), #hoth
                  (call_script, "script_init_patrol_settings", "p_naboo", 3), #yavin IV
                  (call_script, "script_init_patrol_settings", "p_bothawui", 1), #Bothawui
                  
                  #hutt
                  (call_script, "script_init_patrol_settings", "p_nalhutta", 2), #nal hutta
                  (call_script, "script_init_patrol_settings", "p_ryloth", 1), #Ryloth
                  (call_script, "script_init_patrol_settings", "p_tatooine", 3), #Tatooine
                  (call_script, "script_init_patrol_settings", "p_gamorr", 2), #Gamorr
              ]),
              
              #setting the patrol faction troops for each faction.
              ("init_patrol_faction_settings",[
                  (faction_set_slot, "fac_galacticempire",  slot_faction_patrol_unit_1, "trp_imperial_navy_trooper"),
                  (faction_set_slot, "fac_galacticempire",  slot_faction_patrol_unit_2, "trp_imperial_pilot"),
                  (faction_set_slot, "fac_galacticempire",  slot_faction_patrol_unit_3, "trp_imperial_gunner"),
                  
                  (faction_set_slot, "fac_rebelalliance",  slot_faction_patrol_unit_1, "trp_rebel_cadet"),
                  (faction_set_slot, "fac_rebelalliance",  slot_faction_patrol_unit_2, "trp_rebel_pilot"),
                  (faction_set_slot, "fac_rebelalliance",  slot_faction_patrol_unit_3, "trp_rebel_trooper"),
                  
                  (faction_set_slot, "fac_huttcartel",  slot_faction_patrol_unit_1, "trp_hutt_mercenary"),
                  (faction_set_slot, "fac_huttcartel",  slot_faction_patrol_unit_2, "trp_hutt_skiff_guard"),
                  (faction_set_slot, "fac_huttcartel",  slot_faction_patrol_unit_3, "trp_hutt_marksman"),
                  
                  #SW - added player_faction (nevermind, I did this in the change culture game menu)
                  #(faction_set_slot, "fac_player_supporters_faction",  slot_faction_patrol_unit_1, "trp_hired_guard"),
                  #(faction_set_slot, "fac_player_supporters_faction",  slot_faction_patrol_unit_2, "trp_hired_guard"),
                  #(faction_set_slot, "fac_player_supporters_faction",  slot_faction_patrol_unit_3, "trp_bodyguard"),
              ]),
              
              #temp script for init of a patrol base
              ("init_patrol_settings",[
                  (store_script_param, ":cur_base", 1),
                  (store_script_param, ":base_lvl", 2),
                  (party_set_slot, ":cur_base", slot_center_has_patrol, ":base_lvl"),
                  (str_store_party_name, s10, ":cur_base"),
                  (assign, reg9, ":base_lvl"),
                  #  (display_message, "@{s10} initiated for base lvl {reg9}"),
              ]),
              
              #script_patrol_base_spawn_patrols
              #input arg1 = party_id
              #this scripped is called from simple striggers and makes sure there are enough parties of patrols for that base
              
              ("patrol_base_spawn_patrols",
                [
                  (store_script_param, ":cur_base", 1),
                  (party_get_slot, ":base_lvl", ":cur_base", slot_center_has_patrol),
                  (assign, ":cur_number", 0),
                  
                  #see if the required number of patrols are available to that base
                  (try_for_parties,":cur_patrol"), #go through all parties to find patrols
                    (party_get_template_id,":cur_party_template",":cur_patrol"),
                    (eq, ":cur_party_template", "pt_galacticempire_escort"),
                    (party_slot_eq, ":cur_patrol", slot_party_home_center, ":cur_base"),
                    #      (display_message, "@found a coruscant patrol"),
                    (val_add, ":cur_number", 1),
                  (try_end),
                  #SW - lowered ideal_number of patrols from 3 to 2
                  #(assign, ":ideal_number", 3), #this could be replaced later if lower lvl bases have less patrols.
                  (assign, ":ideal_number", 2), #this could be replaced later if lower lvl bases have less patrols.
                  (val_sub, ":ideal_number", ":cur_number"),
                  #SW - should I comment out this assign statement below?  yes, it doesn't seem to be used
                  #(assign, ":cur_patrol", 0), #test for bugfix
                  (try_begin),
                    (gt, ":ideal_number", 0),
                    
                    #spawn the needed number of patrol parties
                    (try_for_range, ":unused", 0, ":ideal_number"),
                      (set_spawn_radius,1),
                      (spawn_around_party,":cur_base","pt_galacticempire_escort"),
                      (store_faction_of_party, ":cur_faction", ":cur_base"),
                      #SW - should this assign statement be reversed? leaving it the way it is since reg0 doesn't seem to be used below so it must be the patrol id
                      (assign, ":cur_patrol", reg0),
                      (party_set_faction, ":cur_patrol", ":cur_faction"),
                      
                      #SW - set unique patrol icon for each faction
                      (try_begin),
                        (eq, ":cur_faction", "fac_galacticempire"),
                        (party_set_icon, ":cur_patrol", "icon_tie_fighter"),
                      (else_try),
                        (eq, ":cur_faction", "fac_rebelalliance"),
                        (party_set_icon, ":cur_patrol", "icon_a_wing"),
                      (else_try),
                        (eq, ":cur_faction", "fac_huttcartel"),
                        (party_set_icon, ":cur_patrol", "icon_hutt_patrol"),
                      (else_try),
                        (party_set_icon, ":cur_patrol", "icon_z95"),
                      (try_end),
                      
                      (party_set_slot, ":cur_patrol", slot_party_home_center, ":cur_base"),
                      #       (str_store_party_name, s5, ":cur_base"),
                      #       (display_message, "@spawned a new patrol for {s5}"),
                      
                      #now add proper troops
                      (faction_get_slot, ":faction_trp_1", ":cur_faction", slot_faction_patrol_unit_1),
                      (faction_get_slot, ":faction_trp_2", ":cur_faction", slot_faction_patrol_unit_2),
                      (faction_get_slot, ":faction_trp_3", ":cur_faction", slot_faction_patrol_unit_3),
                      # (assign, reg10, ":faction_trp_1"),
                      # (assign, reg11, ":faction_trp_2"),
                      # (assign, reg12, ":faction_trp_3"),
                      #       (display_message, "@faction 1 trp is {reg10}. faction 2 trp is {reg11}. faction 3 trp is {reg12}"),
                      
                      (try_begin),  # safety/bug fix
                        (this_or_next|le, ":faction_trp_1", 0),
                        (this_or_next|le, ":faction_trp_2", 0),
                        (             le, ":faction_trp_3", 0),
                        (assign, ":faction_trp_1", "trp_militia"),
                        (assign, ":faction_trp_2", "trp_security_guard"),
                        (assign, ":faction_trp_3", "trp_bodyguard"),
                      (try_end),
                      
                      (try_begin),
                        (eq, ":base_lvl", 1),
                        #SW - increasing patrol size (also had to increase ideal_size in code below this)
                        #(party_add_members,":cur_patrol",":faction_trp_1",10),
                        #(party_add_members,":cur_patrol",":faction_trp_2",1),
                        (party_add_members,":cur_patrol",":faction_trp_1",15),
                        (party_add_members,":cur_patrol",":faction_trp_2",5),
                        #           (display_message, "@added units lvl 1"),
                        
                        
                      (else_try),
                        (eq, ":base_lvl", 2),
                        #SW - increasing patrol size(also had to increase ideal_size in code below this)
                        #(party_add_members,":cur_patrol",":faction_trp_1",15),
                        #(party_add_members,":cur_patrol",":faction_trp_2",5),
                        #(party_add_members,":cur_patrol",":faction_trp_3",1),
                        (party_add_members,":cur_patrol",":faction_trp_1",20),
                        (party_add_members,":cur_patrol",":faction_trp_2",10),
                        (party_add_members,":cur_patrol",":faction_trp_3",5),
                        #           (display_message, "@added units lvl 2"),
                        
                        
                      (else_try),
                        (eq, ":base_lvl", 3),
                        #SW - increasing patrol size(also had to increase ideal_size in code below this)
                        #(party_add_members,":cur_patrol",":faction_trp_1",30),
                        #(party_add_members,":cur_patrol",":faction_trp_2",10),
                        #(party_add_members,":cur_patrol",":faction_trp_3",2),
                        (party_add_members,":cur_patrol",":faction_trp_1",25),
                        (party_add_members,":cur_patrol",":faction_trp_2",15),
                        (party_add_members,":cur_patrol",":faction_trp_3",10),
                        #           (display_message, "@added units lvl 3"),
                      (try_end),
                      
                      #remove the starter troop
                      (party_remove_members,":cur_patrol","trp_farmer",1),
                      
                      #set orders
                      (call_script, "script_decide_next_patrol_location", ":cur_patrol"),
                      #       (party_set_ai_behavior, ":cur_patrol", ai_bhvr_patrol_party),
                      #       (party_set_slot,":cur_patrol",slot_party_type, spt_faction_hero_party), #using faction hero ai doesn't seem to work
                      #          (party_set_ai_object, ":cur_patrol", ":cur_base"),
                      #       (party_set_slot, ":cur_patrol", slot_party_ai_state, spai_undefined),
                      #       (party_set_ai_patrol_radius,":cur_patrol",5),
                      #       (party_set_ai_initiative, ":cur_patrol", 50),
                      #       (display_message, "@orders given to patrol"),
                    (try_end),
                  (try_end),
              ]),
              
              #script_process_patrol_maintenance
              #input arg_1 =  troop_id
              #this script is called from simple_triggers and will send patrols back to base for maintenance, as well as sending them out again
              
              ("process_patrol_maintenance",
                [
                  (store_script_param, ":cur_patrol", 1),
                  #  (display_message, "@running maintenance script"),
                  #reqs and info gathering
                  (party_get_slot, ":cur_home_base", ":cur_patrol", slot_party_home_center),
                  (party_get_slot, ":base_lvl", ":cur_home_base", slot_center_has_patrol),
                  (get_party_ai_current_behavior,":cur_behavior",":cur_patrol"),
                  (party_get_num_companions,":num_troops",":cur_patrol"),
                  (party_get_num_prisoners,":num_prisoners",":cur_patrol"),
                  (get_party_ai_object,":cur_object",":cur_patrol"),
                  (party_get_battle_opponent,":cur_enemy",":cur_patrol"),
                  
                  
                  #make them return if needed
                  (try_begin),
                    
                    (le, ":cur_enemy", 0), #don't do anything for units that are in combat
                    #      (display_message, "@unit not in combat. Running script"),
                    (this_or_next|eq,":cur_behavior",ai_bhvr_patrol_party), #only make them return if they're not doing something more important
                    (this_or_next|eq,":cur_behavior",ai_bhvr_hold),
                    (this_or_next|eq,":cur_behavior",ai_bhvr_escort_party),
                    (eq,":cur_behavior",ai_bhvr_travel_to_point),
                    (try_begin),
                      (eq, ":base_lvl", 1),
                      #SW - increased size of patrols (also had to increase initial troops that are set above)
                      #(assign, ":ideal_size", 11),
                      (assign, ":ideal_size", 20),
                    (else_try),
                      (eq, ":base_lvl", 2),
                      #SW - increased size of patrols (also had to increase initial troops that are set above)
                      #(assign, ":ideal_size", 21),
                      (assign, ":ideal_size", 35),
                    (else_try),
                      (eq, ":base_lvl", 3),
                      #SW - increased size of patrols (also had to increase initial troops that are set above)
                      #(assign, ":ideal_size", 42),
                      (assign, ":ideal_size", 50),
                    (try_end),
                    (this_or_next|gt, ":num_prisoners", 0),
                    (this_or_next|lt, ":num_troops", ":ideal_size"), #send patrol to the death star when they have more than 0 prisoners or are low on troops
                    (gt, ":num_troops", ":ideal_size"),
                    (party_set_slot, ":cur_patrol", slot_party_ai_state, spai_undefined),
                    (gt, ":cur_home_base", 0), #no travelling to the player by accident
                    (party_set_ai_behavior, ":cur_patrol", ai_bhvr_travel_to_party),
                    (party_set_ai_object, ":cur_patrol", ":cur_home_base"),
                    #      (str_store_party_name, s1, ":cur_patrol"),
                    #      (display_message, "@ {s1} decided to head back to the Death Star"),     #for testing
                    
                    #schedule maintenance and send them out
                    
                    
                  (else_try),
                    (get_party_ai_current_behavior,":cur_behavior",":cur_patrol"),
                    (eq,":cur_behavior",ai_bhvr_in_town),
                    (eq,":cur_object", ":cur_home_base"), #make sure it's not in the wrong town
                    #      (assign, reg22, ":cur_object"),
                    #      (display_message,"@ship is at home base, scheduling maintenance"),
                    (call_script, "script_patrol_unit_maintenance", ":cur_patrol"),
                    (party_set_ai_behavior, ":cur_patrol", ai_bhvr_hold),
                    # (party_set_ai_object, ":cur_patrol", ":cur_home_base"),
                    (call_script, "script_decide_next_patrol_location", ":cur_patrol"), #send them on their way again.
                    #      (display_message, "@sent patrol out after rendezvous"), #test
                    
                    #in case they somehow ended up in the wrong town
                    
                    
                  (else_try),
                    (get_party_ai_current_behavior,":cur_behavior",":cur_patrol"),
                    (eq,":cur_behavior",ai_bhvr_in_town),
                    (neq,":cur_object", ":cur_home_base"), #they're in the wrong town, send em home
                    (party_set_ai_behavior, ":cur_patrol", ai_bhvr_travel_to_party),
                    (party_set_ai_object, ":cur_patrol", ":cur_home_base"),
                  (try_end),
              ]),
              
              #script_patrol_unit_maintenance
              #input :arg_1 =    party_id
              #this script is called from simple_triggers to keep patrol units clean
              ("patrol_unit_maintenance",
                [
                  (store_script_param, ":cur_patrol", 1),
                  #  (display_message, "@running scheduled maintenance"),
                  
                  #reqs and info gathering
                  (party_get_slot, ":cur_home_base", ":cur_patrol", slot_party_home_center),
                  (party_get_slot, ":base_lvl", ":cur_home_base", slot_center_has_patrol),
                  #  (party_get_slot, ":patrol_base_party", ":cur_home_base", slot_center_patrol_party),
                  #  (party_get_slot, ":recruit_ai", ":cur_home_base", slot_center_recruit_ai),
                  #  (get_party_ai_current_behavior,":cur_behavior",":cur_patrol"), #will use this to make sure they're in town - don't need to, other script does that
                  #  (get_party_ai_object,":cur_object",":cur_patrol"),
                  (store_faction_of_party, ":cur_faction", ":cur_home_base"),
                  (faction_get_slot, ":faction_trp_1", ":cur_faction", slot_faction_patrol_unit_1),
                  (faction_get_slot, ":faction_trp_2", ":cur_faction", slot_faction_patrol_unit_2),
                  (faction_get_slot, ":faction_trp_3", ":cur_faction", slot_faction_patrol_unit_3),
                  
                  (try_begin),  # safety/bug fix
                    (this_or_next|le, ":faction_trp_1", 0),
                    (this_or_next|le, ":faction_trp_2", 0),
                    (             le, ":faction_trp_3", 0),
                    (assign, ":faction_trp_1", "trp_militia"),
                    (assign, ":faction_trp_2", "trp_security_guard"),
                    (assign, ":faction_trp_3", "trp_bodyguard"),
                  (try_end),
                  
                  #move prisoners to base
                  (try_begin),
                    (party_get_num_prisoners,":num_prisoners",":cur_patrol"),
                    (gt, ":num_prisoners", 0),
                    (party_get_num_prisoner_stacks, ":num_prisoner_stacks",":cur_patrol"),
                    (try_for_range_backwards, ":i_stack", 0, ":num_prisoner_stacks"),
                      (party_prisoner_stack_get_troop_id, ":stack_troop",":cur_patrol", ":i_stack"),
                      (gt, ":stack_troop", 0), #avoid cloning player by accident
                      (party_prisoner_stack_get_size, ":stack_size",":cur_patrol",":i_stack"),
                      (party_add_prisoners,":cur_home_base",":stack_troop",":stack_size"),
                      (party_remove_prisoners,":cur_patrol",":stack_troop",":stack_size"),
                      (assign, reg24, ":stack_troop"),
                      #    (display_message, "@prisoners {reg24} moved to station"), #test
                    (try_end),
                  (try_end),
                  
                  #strip extra units.
                  (try_begin),
                    (party_get_num_companion_stacks, ":num_stacks",":cur_patrol"),
                    (try_for_range_backwards, ":i_stack", 0, ":num_stacks"),
                      (party_stack_get_troop_id, ":temp_id", ":cur_patrol", ":i_stack"),
                      (party_stack_get_size, ":stack_size",":cur_patrol",":i_stack"),
                      (is_between, ":temp_id", soldiers_begin, soldiers_end),
                      (neq, ":temp_id", ":faction_trp_1"),
                      (neq, ":temp_id", ":faction_trp_2"),
                      (neq, ":temp_id", ":faction_trp_3"), #stack is not any of the faction trps, so remove.
                      (party_add_members,":cur_home_base",":temp_id",":stack_size"),
                      (party_remove_members,":cur_patrol",":temp_id",":stack_size"),
                      # (assign, reg24, ":temp_id"),
                      # (assign, reg25, ":stack_size"),
                      #    (display_message, "@extra units removed: {reg25} x unit {reg24}"),
                    (try_end),
                  (try_end),
                  
                  #reinforce by unit type. Less code than doing it by base lvl
                  #(try_begin),
                  #  (ge, ":recruit_ai", 0), #if recruit AI is switched to -1, we don't auto-reinforce patrols
                  
                  #unit lvl 1's
                  (try_begin),
                    (party_count_members_of_type,":total_lvl_1",":cur_patrol",":faction_trp_1"),
                    (try_begin),
                      (eq, ":base_lvl", 1),
                      (assign, ":ideal_size", 10),
                    (else_try),
                      (eq, ":base_lvl", 2),
                      (assign, ":ideal_size", 15),
                    (else_try),
                      (eq, ":base_lvl", 3),
                      (assign, ":ideal_size", 30),
                    (try_end),
                    (lt, ":total_lvl_1", ":ideal_size"),
                    # (party_count_members_of_type,":lvl_1_available",":patrol_base_party",":faction_trp_1"),
                    (store_sub, ":take_troops", ":ideal_size", ":total_lvl_1"), #calculate how many troops you need
                    # (try_begin),
                    # (lt, ":lvl_1_available", ":take_troops"), #not enough troops on the station
                    # (assign, ":take_troops", ":lvl_1_available"), #only take the available ones
                    # (try_end),
                    (party_add_members,":cur_patrol",":faction_trp_1",":take_troops"),
                    # (party_remove_members,":patrol_base_party",":faction_trp_1",":take_troops"),
                    #      (display_message, "@done reinforcing lvl 1 units"),
                  (try_end),
                  
                  #unit lvl 2's
                  (try_begin),
                    (party_count_members_of_type,":total_lvl_2",":cur_patrol",":faction_trp_2"),
                    (try_begin),
                      (eq, ":base_lvl", 1),
                      (assign, ":ideal_size", 1),
                    (else_try),
                      (eq, ":base_lvl", 2),
                      
                      (assign, ":ideal_size", 5),
                    (else_try),
                      (eq, ":base_lvl", 3),
                      (assign, ":ideal_size", 10),
                    (try_end),
                    (lt, ":total_lvl_2", ":ideal_size"),
                    # (party_count_members_of_type,":lvl_2_available",":patrol_base_party",":faction_trp_2"),
                    (store_sub, ":take_troops", ":ideal_size", ":total_lvl_2"), #calculate how many troops you need
                    # (try_begin),
                    # (lt, ":lvl_2_available", ":take_troops"), #not enough troops on the station
                    # (assign, ":take_troops", ":lvl_2_available"), #only take the available ones
                    # (try_end),
                    (party_add_members,":cur_patrol",":faction_trp_2",":take_troops"),
                    # (party_remove_members,":patrol_base_party",":faction_trp_2",":take_troops"),
                    #      (display_message, "@done reinforcing lvl 2 units"),
                  (try_end),
                  
                  (try_begin), #unit lvl 3's
                    (party_count_members_of_type,":total_lvl_3",":cur_patrol",":faction_trp_3"),
                    (try_begin),
                      (ge, ":base_lvl", 2), # lvl 3 units don't exist on lvl 1 patrols so no need to reinforce them
                      (try_begin),
                        (eq, ":base_lvl", 2),
                        
                        (assign, ":ideal_size", 1),
                      (else_try),
                        (eq, ":base_lvl", 3),
                        (assign, ":ideal_size", 2),
                      (try_end),
                      (lt, ":total_lvl_3", ":ideal_size"),
                      # (party_count_members_of_type,":lvl_3_available",":patrol_base_party",":faction_trp_3"),
                      (store_sub, ":take_troops", ":ideal_size", ":total_lvl_3"), #calculate how many troops you need
                      # (try_begin),
                      # (lt, ":lvl_3_available", ":take_troops"), #not enough troops on the station
                      # (assign, ":take_troops", ":lvl_3_available"), #only take the available ones
                      # (try_end),
                      (party_add_members,":cur_patrol",":faction_trp_3",":take_troops"),
                      # (party_remove_members,":patrol_base_party",":faction_trp_3",":take_troops"),
                      #    (display_message, "@done reinforcing lvl 3 units"),
                    (try_end),
                    
                  (try_end),
              ]),
              
              #script_process_patrol_ai
              #input arg_1 =  troop_id
              #this script is called from simple_triggers and will set patrol behavior, sending it back to its base if necessary
              
              ("process_patrol_ai",
                [
                  (store_script_param, ":cur_patrol", 1),
                  
                  #reqs and info gathering
                  (party_get_slot, ":cur_home_base", ":cur_patrol", slot_party_home_center),
                  (get_party_ai_current_behavior,":cur_behavior",":cur_patrol"),
                  
                  
                  #set behavior
                  
                  (try_begin),
                    (neq,":cur_behavior",ai_bhvr_in_town),
                    (get_party_ai_object,":cur_object",":cur_patrol"),
                    (assign, ":continue", 1),
                    (try_begin),
                      (eq, ":cur_behavior", ai_bhvr_travel_to_party),
                      (eq, ":cur_object", ":cur_home_base"), #dont interfere with units on their way home
                      (assign, ":continue", 0),
                    (try_end),
                    (neq, ":continue", 0),
                    (party_get_battle_opponent,":cur_enemy",":cur_patrol"),
                    (le, ":cur_enemy", 0), #don't do anything for units that are in combat
                    (store_distance_to_party_from_party, ":distance", ":cur_patrol", ":cur_home_base"),
                    
                    
                    #find nearby enemies and decide on action #these only seem to be necessary for the lvl 1 patrols, the others attack fine
                    (try_begin),
                      (neq, ":cur_behavior", ai_bhvr_attack_party), #don't change behavior if attacking
                      (call_script, "script_party_calculate_strength", ":cur_patrol",0),
                      (assign, ":cur_strength", reg0),
                      (assign, ":target_set", 0),
                      (try_for_parties, ":temp_hostile"),
                        (eq, ":target_set", 0),
                        (store_distance_to_party_from_party, ":distance", ":temp_hostile", ":cur_patrol"),
                        (le, ":distance", 5), #make sure party is close enough
                        (neg|is_between, ":temp_hostile", centers_begin, centers_end), #no inanimate parties considered
                        (call_script, "script_get_relation_between_parties", ":temp_hostile", ":cur_patrol"),
                        (lt, reg0, 0), #only consider hostiles
                        (call_script, "script_party_calculate_strength", ":temp_hostile",0),
                        (assign, ":threat_lvl", reg0),
                        (val_mul, ":threat_lvl", 5),
                        (val_div, ":threat_lvl", 4), #make enemies seem a bit stronger
                        (try_begin),
                          (ge, ":cur_strength", ":threat_lvl"),
                          (party_set_ai_behavior, ":cur_patrol", ai_bhvr_attack_party),
                          (party_set_ai_object, ":cur_patrol", ":temp_hostile"),
                          
                          (assign, ":target_set", 1),
                        (else_try),
                          (party_get_battle_opponent,":cur_enemy",":temp_hostile"),
                          (le, ":cur_enemy", 0), #don't run from trps who are in combat
                          (store_sub, ":threat_dif", ":threat_lvl", ":cur_strength"), #difference between patrol str and threat lvl
                          (ge, ":threat_dif", 100),
                          (party_get_slot, ":cur_home_base", ":cur_patrol", slot_party_home_center),
                          (neq, ":cur_home_base", 0), #no travelling to the player by accident
                          (party_set_ai_behavior, ":cur_patrol", ai_bhvr_travel_to_party),
                          (party_set_ai_object, ":cur_home_base"), #return home
                          #               (display_message, "@patrol runs back to base from strong enemy"),
                        (try_end),
                      (try_end),
                    (try_end),
                    
                    #start movement corrections.
                    
                    (store_distance_to_party_from_party, ":distance", ":cur_patrol", ":cur_home_base"), #need to reset this cause it's used in the last block
                    
                    #correct wrongful targeting of travel_to_party
                    (try_begin),
                      (eq, ":cur_behavior", ai_bhvr_travel_to_party),
                      (neq, ":cur_object", ":cur_home_base"), #travel to party is only used to return home, so if the object is something else, there's a problem
                      (call_script, "script_decide_next_patrol_location", ":cur_patrol"),
                      #recall party if it chases an enemy too far
                    (else_try),
                      (eq,":cur_behavior", ai_bhvr_attack_party),
                      (gt, ":distance", 24),
                      (party_set_ai_behavior, ":cur_patrol", ai_bhvr_hold),
                      #       (display_message, "@recalled a patrol due to chasing too far."), #for testing
                      
                      # make patrol move closer to the base if it wanders too far
                      
                      
                    (else_try),
                      (gt, ":distance", 20),
                      (neq, ":cur_behavior", ai_bhvr_attack_party),
                      (party_get_position, pos1, ":cur_home_base"),
                      (map_get_random_position_around_position, pos2, pos1, 4),
                      (party_set_ai_behavior, ":cur_patrol", ai_bhvr_travel_to_point),
                      (party_set_ai_target_position, ":cur_patrol", pos2),
                      #       (display_message, "@recalled a patrol due to wandering"), #for testing
                      
                      # set nearby patrols back to patrol
                      
                      
                    (else_try),
                      (lt, ":distance", 5),
                      (neq, ":cur_behavior", ai_bhvr_attack_party), #don't do anything if they're chasing
                      (call_script, "script_decide_next_patrol_location", ":cur_patrol"),
                      
                      
                      #catch-all to reset units that are waiting around
                      
                    (else_try),
                      (eq, ":cur_behavior", ai_bhvr_hold),
                      (call_script, "script_decide_next_patrol_location", ":cur_patrol"),
                      #       (display_message, "@decided new travel location for patrol"),
                    (try_end),
                  (try_end),
                  
              ]),
              
              #script_process_automated_attack_system
              #input:   arg1= party_id
              #this script is called from simple_triggers to automatically send patrols to attack nearby enemies
              ("process_automated_attack_system",
                [
                  (store_script_param, ":cur_base", 1),
                  (party_get_slot, ":base_lvl", ":cur_base", slot_center_has_patrol),
                  (assign,":patrol_dispatched",0),
                  #set scanner range based on base lvl
                  (try_begin),
                    (eq, ":base_lvl", 1),
                    #SW - attempting to make patrols attack enemies which are farther away
                    #(assign, ":scanning_dist", 5),
                    (assign, ":scanning_dist", 10),
                  (else_try),
                    (eq, ":base_lvl", 2),
                    #SW - attempting to make patrols attack enemies which are farther away
                    #(assign, ":scanning_dist", 10),
                    (assign, ":scanning_dist", 15),
                  (else_try),
                    (eq, ":base_lvl", 3),
                    #SW - attempting to make patrols attack enemies which are farther away
                    #(assign, ":scanning_dist", 15),
                    (assign, ":scanning_dist", 20),
                  (try_end),
                  
                  #find nearby hostile to Death Star
                  (try_for_parties, ":temp_hostile"),
                    (store_distance_to_party_from_party, ":distance", ":temp_hostile", ":cur_base"),
                    (le, ":distance", ":scanning_dist"), #make sure party is close enough
                    (neg|is_between, ":temp_hostile", centers_begin, centers_end), #no inanimate parties considered
                    (call_script, "script_get_relation_between_parties", ":temp_hostile", ":cur_base"),
                    (lt, reg0, 0), #only consider hostiles
                    (party_get_battle_opponent,":cur_enemy",":temp_hostile"),
                    (le, ":cur_enemy", 0), #second attempt at not counting hostiles who are already engaged.
                    #         (display_message, "@Death Star found a nearby hostile"), #testing
                    (call_script, "script_party_calculate_strength", ":temp_hostile",0),
                    (assign, ":temp_hostile_str", reg0),
                    #         (display_message, "@enemy strength is {reg0}"), #test
                    #      (le, reg0, ":max_hostile_str"),
                    #         (display_message, "@Hostile party is smaller than 30"), #test
                    
                    #make patrols attack
                    (try_for_parties, ":temp_patrol"),
                      (try_begin), #send only one patrol. If one patrol already has ai_object for target, another one won't be sent
                        (get_party_ai_object, ":temp_object", ":temp_patrol"),
                        (eq, ":temp_object", ":temp_hostile"),
                        (assign, ":patrol_dispatched", 1),
                        #              (display_message, "@patrol has already been sent"), #test
                      (try_end),
                      (eq, ":patrol_dispatched",0),
                      (party_get_template_id,":cur_party_template",":temp_patrol"),
                      (eq, ":cur_party_template", "pt_galacticempire_escort"),
                      (party_slot_eq, ":temp_patrol", slot_party_home_center, ":cur_base"),
                      (eq, ":patrol_dispatched",0),
                      (get_party_ai_current_behavior, ":temp_behavior", ":temp_patrol"),
                      (this_or_next|eq, ":temp_behavior", ai_bhvr_patrol_party),
                      (eq, ":temp_behavior", ai_bhvr_travel_to_point), #so it only picks patrols that aren't already doing something else
                      (store_distance_to_party_from_party, ":distance", ":temp_hostile", ":temp_patrol"),
                      #SW - trying to increase attack distance
                      #(le, ":distance", 15), #only send patrols that are within 15k of hostile
                      (le, ":distance", 20), #only send patrols that are within 20k of hostile
                      (call_script, "script_party_calculate_strength", ":temp_patrol",0),
                      #       (display_message, "@ patrol str is {reg0}"), #for testing
                      (ge, reg0, ":temp_hostile_str"), #don't send party to enemies that are stronger
                      (party_set_ai_behavior, ":temp_patrol", ai_bhvr_attack_party),
                      (party_set_ai_object, ":temp_patrol", ":temp_hostile"),
                      #          (display_message, "@Death Star dispatched patrol to hostile"),
                      (assign, ":patrol_dispatched",1), #so it only sends one patrol per trigger cycle
                    (try_end),
                  (try_end),
              ]),
              
              #scipt_decide_next_patrol_location
              #input arg1 = party_id
              #script called from simple triggers to set up patrol routes
              ("decide_next_patrol_location",
                [
                  (store_script_param, ":cur_patrol", 1),
                  
                  #reqs and info gathering
                  (party_get_slot, ":cur_home_base", ":cur_patrol", slot_party_home_center),
                  #  (party_get_slot, ":base_lvl", ":cur_home_base", slot_center_has_patrol),
                  # (get_party_ai_current_behavior,":cur_behavior",":cur_patrol"),
                  (get_party_ai_object,":cur_object",":cur_patrol"),
                  (store_faction_of_party, ":cur_faction", ":cur_home_base"),
                  
                  
                  
                  #find walled center or village near home_base that is not cur_object
                  
                  (try_begin),
                    #count number of possible patrol targets
                    (assign, ":num_objects", 0),
                    (try_for_range, ":temp_object", centers_begin, centers_end),
                      (neq, ":temp_object", ":cur_object"),
                      (neq, ":temp_object", 0), #no travelling to the player by accident
                      (store_distance_to_party_from_party, ":distance", ":cur_home_base", ":temp_object"),
                      (le, ":distance", 20),
                      (store_faction_of_party, ":temp_faction", ":temp_object"),
                      (eq, ":temp_faction", ":cur_faction"), #only patrol own faction locations
                      (val_add, ":num_objects", 1),
                    (try_end),
                    (gt, ":num_objects", 0), #fail if there are no towns
                    
                    #now choose a random one
                    (assign, ":new_object", -1),
                    (store_random_in_range, ":random_object", 0, ":num_objects"),
                    #      (assign, reg28, ":random_object"),
                    #         (display_message, "@random object is {reg28}"),
                    (assign, ":num_objects", 0),
                    (try_for_range, ":temp_object", centers_begin, centers_end),
                      (eq, ":new_object", -1),
                      (neq, ":temp_object", ":cur_object"),
                      (neq, ":temp_object", 0), #no travelling to the player by accident
                      (store_distance_to_party_from_party, ":distance", ":cur_home_base", ":temp_object"),
                      (le, ":distance", 20),
                      (store_faction_of_party, ":temp_faction", ":temp_object"),
                      (eq, ":temp_faction", ":cur_faction"), #only patrol own faction locations
                      (val_add, ":num_objects", 1),
                      (gt, ":num_objects", ":random_object"),
                      (assign, ":new_object", ":temp_object"),
                    (try_end),
                    
                    #send unit to location
                    (gt, ":new_object", 0), #there are no usable objects - shouldn't be necessary since it should fail in previous block
                    #      (assign, reg25, ":new_object"),
                    #      (assign, reg26, ":random_object"),
                    #         (display_message, "@sent patrol to new location - {reg25} - random object was {reg26}"),
                    (party_get_position, pos1, ":new_object"),
                    (map_get_random_position_around_position, pos2, pos1, 4),
                    (party_set_ai_behavior, ":cur_patrol", ai_bhvr_travel_to_point),
                    (party_set_ai_target_position, ":cur_patrol", pos2),
                    (party_set_ai_object, ":new_object"),
                    
                    #failsafe
                    
                    
                  (else_try),
                    (party_get_position, pos1, ":cur_home_base"),
                    (map_get_random_position_around_position, pos2, pos1, 8),
                    (party_set_ai_behavior, ":cur_patrol", ai_bhvr_travel_to_point),
                    (party_set_ai_target_position, ":cur_patrol", pos2),
                    #         (display_message, "@set patrol to move to random position near home base"),
                  (try_end),
                  
              ]),
              
              #script_decide_next_trader_destination
              #input arg1 = party_id
              #script called by trader AI in simple triggers to decide next place to travel to. This is either a town/castle with a lot of prisoners or home
              
              ("decide_next_trader_destination",
                [
                  (store_script_param, ":cur_party", 1),
                  (get_party_ai_object,":cur_object",":cur_party"),
                  (party_get_slot, ":cur_home_base", ":cur_party", slot_party_home_center),
                  #  (assign, reg28, ":cur_party"),
                  
                  #start thinking
                  #when you've gathered more than 25 prisoners, go back home
                  (try_begin),
                    (party_get_num_prisoners,":num_prisoners",":cur_party"),
                    (gt, ":num_prisoners", 25),
                    (party_set_ai_behavior, ":cur_party", ai_bhvr_travel_to_party),
                    (party_set_ai_object, ":cur_party", ":cur_home_base"),
                    
                  (else_try
                    ),
                    #if not, find a random good planet to travel to.
                    #good is defined as having at least 10 prisoners or 10 r2 units and not being closer than 30ks to the trader
                    (assign, ":new_location", -1),
                    (assign, ":num_locations", 0),
                    
                    #count number of good planets
                    (try_for_range, ":temp_location", walled_centers_begin, walled_centers_end),
                      (neq, ":temp_location", ":cur_object"), #disgerard current location
                      (neq, ":temp_location", ":cur_home_base"), #disregard home base
                      #       (display_message, "@found a planet that's not our home planet or current location"), #works up to here
                      (party_get_num_prisoners,":num_prisoners",":temp_location"),
                      (party_count_members_of_type,":r2_available",":temp_location","trp_r2series"),
                      (this_or_next|gt, ":r2_available", 10),
                      (gt, ":num_prisoners", 10),
                      #    (display_message, "@working up to here.. amounts checking ok"),
                      (store_distance_to_party_from_party, ":distance", ":cur_party", ":temp_location"),
                      (gt, ":distance", 30),
                      #       (display_message, "@working up to here.. distance checking ok"),
                      #make sure another patrol isn't using this target already
                      (assign, ":stop", 0),
                      (try_for_parties, ":temp_party"),
                        (party_get_template_id,":temp_party_template",":temp_party"),
                        (eq, ":temp_party_template", "pt_independent_traders"),
                        (get_party_ai_object,":temp_object",":temp_party"),
                        (eq, ":temp_location", ":temp_object"), #other party's AI object is our temp location, so don't count this one
                        #           (display_message, "@assigning a stop because location is already being used"),
                        (assign, ":stop", 1),
                      (try_end),
                      (eq, ":stop", 0),
                      (val_add, ":num_locations", 1),
                    (try_end),
                    #      (display_message, "@done with counting locations"),
                    (gt, ":num_locations", 0), #check if any good location was found, else fail this block and move to pick random location without prereqs
                    
                    #now pick a random one
                    (store_random_in_range, ":random_location", 0, ":num_locations"),
                    (assign, ":num_locations", 0),
                    (try_for_range, ":temp_location", walled_centers_begin, walled_centers_end),
                      (eq, ":new_location", -1),
                      (neq, ":temp_location", ":cur_object"), #disgerard current location
                      (neq, ":temp_location", ":cur_home_base"), #disregard home base
                      (party_get_num_prisoners,":num_prisoners",":temp_location"),
                      (party_count_members_of_type,":r2_available",":temp_location","trp_r2series"),
                      (this_or_next|gt, ":r2_available", 10),
                      (gt, ":num_prisoners", 10),
                      (store_distance_to_party_from_party, ":distance", ":cur_party", ":temp_location"),
                      (gt, ":distance", 30),
                      #make sure another patrol isn't using this target already
                      (assign, ":stop", 0),
                      (try_for_parties, ":temp_party"),
                        (party_get_template_id,":temp_party_template",":temp_party"),
                        (eq, ":temp_party_template", "pt_independent_traders"),
                        (get_party_ai_object,":temp_object",":temp_party"),
                        (eq, ":temp_location", ":temp_object"),
                        (assign, ":stop", 1),
                      (try_end),
                      (eq, ":stop", 0),
                      (val_add, ":num_locations", 1),
                      (gt, ":num_locations", ":random_location"),
                      (assign, ":new_location", ":temp_location"),
                    (try_end),
                    
                    #now travel to the new location
                    (party_set_ai_behavior, ":cur_party", ai_bhvr_travel_to_party),
                    (party_set_ai_object, ":cur_party", ":new_location"),
                    #      (assign, reg40, ":new_location"),
                    #      (assign, reg41, ":r2_available"),
                    #      (assign, reg42, ":num_prisoners"),
                    #      (display_message, "@{reg28} is traveling to {reg40}. There are {reg41} r2 units and {reg42} prisoners there"),
                    
                  (else_try),
                    #if no good location was found, pick a random location far away so they won't just sit there
                    #count the number of possibilities
                    (assign, ":num_locations", 0),
                    (try_for_range, ":temp_location", walled_centers_begin, walled_centers_end),
                      (neq, ":temp_location", ":cur_object"), #disgerard current location
                      (neq, ":temp_location", ":cur_home_base"), #disregard home base
                      (store_distance_to_party_from_party, ":distance", ":cur_party", ":temp_location"),
                      (gt, ":distance", 80),
                      (val_add, ":num_locations", 1),
                    (try_end),
                    
                    #now pick a random one
                    (store_random_in_range, ":random_location", 0, ":num_locations"),
                    (assign, ":num_locations", 0),
                    (assign, ":new_location", -1),
                    (try_for_range, ":temp_location", walled_centers_begin, walled_centers_end),
                      (eq, ":new_location", -1),
                      (neq, ":temp_location", ":cur_object"), #disgerard current location
                      (neq, ":temp_location", ":cur_home_base"), #disregard home base
                      (store_distance_to_party_from_party, ":distance", ":cur_party", ":temp_location"),
                      (gt, ":distance", 80),
                      (val_add, ":num_locations", 1),
                      (gt, ":num_locations", ":random_location"),
                      (assign, ":new_location", ":temp_location"),
                    (try_end),
                    #now travel to the new location
                    (party_set_ai_behavior, ":cur_party", ai_bhvr_travel_to_party),
                    (party_set_ai_object, ":cur_party", ":new_location"),
                    #      (assign, reg40, ":new_location"),
                    #      (display_message, "@{reg28} couldn't find a matching planet so is traveling to {reg40}"),
                  (try_end),
              ]),
              
              #script_reset_starship_slots_for_troop
              #input arg1 = troop_id
              #      arg2 = ship type (number) 0 is reset everything to 0 for selling ship
              ("reset_starship_slots_for_troop",
                [
                  (store_script_param, ":troop_no", 1),
                  (store_script_param, ":ship_type", 2),
                  (try_begin),
                    (eq, ":ship_type", 0),
                    #ship type 0 = sell ship, remove the ship
                    (troop_set_slot, ":troop_no", slot_troop_has_spaceship, 0),
                    #remove all upgrades
                    (troop_set_slot, ":troop_no", slot_ship_drive, 0),
                    (troop_set_slot, ":troop_no", slot_ship_drive_max, 0),
                    (troop_set_slot, ":troop_no", slot_ship_scanner, 0),
                    (troop_set_slot, ":troop_no", slot_ship_scanner_max, 0),
                    (troop_set_slot, ":troop_no", slot_ship_combat_computer, 0),
                    (troop_set_slot, ":troop_no", slot_ship_combat_computer_max, 0),
                    (troop_set_slot, ":troop_no", slot_ship_troop_capacity, 0),
                    (troop_set_slot, ":troop_no", slot_ship_troop_capacity_max, 0),
                    (troop_set_slot, ":troop_no", slot_ship_medical_bay, 0),
                    (troop_set_slot, ":troop_no", slot_ship_medical_bay_max, 0),
                    (troop_set_slot, ":troop_no", slot_ship_prisoner_capacity, 0),
                    (troop_set_slot, ":troop_no", slot_ship_prisoner_capacity_max, 0),
                    (troop_set_slot, ":troop_no", slot_ship_trade_computer, 0),
                    (troop_set_slot, ":troop_no", slot_ship_trade_computer_max, 0),
                    (troop_set_slot, ":troop_no", slot_ship_cargo_capacity, 0),
                    (troop_set_slot, ":troop_no", slot_ship_cargo_capacity_max, 0),
                    #sets the icon back to the default
                    (party_set_icon, "p_main_party", "icon_player"),
                  (else_try),
                    #sets the spaceship
                    (troop_set_slot, ":troop_no", slot_troop_has_spaceship, ":ship_type"),
                    #sets the upgrades
                    (party_get_slot, ":value", ":ship_type", slot_spaceship_drive_min),
                    (troop_set_slot, ":troop_no", slot_ship_drive, ":value"),
                    (party_get_slot, ":value", ":ship_type", slot_spaceship_drive_max),
                    (troop_set_slot, ":troop_no", slot_ship_drive_max, ":value"),
                    (party_get_slot, ":value", ":ship_type", slot_spaceship_scanner_min),
                    (troop_set_slot, ":troop_no", slot_ship_scanner, ":value"),
                    (party_get_slot, ":value", ":ship_type", slot_spaceship_scanner_max),
                    (troop_set_slot, ":troop_no", slot_ship_scanner_max, ":value"),
                    (party_get_slot, ":value", ":ship_type", slot_spaceship_combat_computer_min),
                    (troop_set_slot, ":troop_no", slot_ship_combat_computer, ":value"),
                    (party_get_slot, ":value", ":ship_type", slot_spaceship_combat_computer_max),
                    (troop_set_slot, ":troop_no", slot_ship_combat_computer_max, ":value"),
                    (party_get_slot, ":value", ":ship_type", slot_spaceship_troop_capacity_min),
                    (troop_set_slot, ":troop_no", slot_ship_troop_capacity, ":value"),
                    (party_get_slot, ":value", ":ship_type", slot_spaceship_troop_capacity_max),
                    (troop_set_slot, ":troop_no", slot_ship_troop_capacity_max, ":value"),
                    (party_get_slot, ":value", ":ship_type", slot_spaceship_medical_bay_min),
                    (troop_set_slot, ":troop_no", slot_ship_medical_bay, ":value"),
                    (party_get_slot, ":value", ":ship_type", slot_spaceship_medical_bay_max),
                    (troop_set_slot, ":troop_no", slot_ship_medical_bay_max, ":value"),
                    (party_get_slot, ":value", ":ship_type", slot_spaceship_prisoner_capacity_min),
                    (troop_set_slot, ":troop_no", slot_ship_prisoner_capacity, ":value"),
                    (party_get_slot, ":value", ":ship_type", slot_spaceship_prisoner_capacity_max),
                    (troop_set_slot, ":troop_no", slot_ship_prisoner_capacity_max, ":value"),
                    (party_get_slot, ":value", ":ship_type", slot_spaceship_trade_computer_min),
                    (troop_set_slot, ":troop_no", slot_ship_trade_computer, ":value"),
                    (party_get_slot, ":value", ":ship_type", slot_spaceship_trade_computer_max),
                    (troop_set_slot, ":troop_no", slot_ship_trade_computer_max, ":value"),
                    (party_get_slot, ":value", ":ship_type", slot_spaceship_cargo_capacity_min),
                    (troop_set_slot, ":troop_no", slot_ship_cargo_capacity, ":value"),
                    (party_get_slot, ":value", ":ship_type", slot_spaceship_cargo_capacity_max),
                    (troop_set_slot, ":troop_no", slot_ship_cargo_capacity_max, ":value"),
                    #sets the icon for the player
                    (party_set_icon, "p_main_party", "$g_ship_icon"),
                  (try_end),
                  
              ]),
              
              #script_get_component_upgrade_price
              #input:   arg1 = upgrade type
              #      arg2 = ship type
              #      arg3 = level to upgrade from
              #output: price to reg0
              
              ("get_component_upgrade_price", [
                  (store_script_param, ":upgrade_type", 1),
                  #(store_script_param, ":ship_type", 2),      #no longer necessary since we don't give a price penalty
                  (store_script_param, ":upgrade_lvl", 3),
                  (val_add, ":upgrade_lvl", 1), #so this is now the lvl we're upgrading to
                  
                  (try_begin),
                    #drives
                    (eq, ":upgrade_type", 1),
                    (assign, ":base_price", 500),
                    (val_mul, ":upgrade_lvl", 120),
                    (val_mul, ":base_price", ":upgrade_lvl"),
                    (val_div, ":base_price", 100),
                    # (try_begin),
                    # (gt, ":ship_type", 4), #add price penalty for the heavy ships
                    # (val_mul, ":base_price", 130),
                    # (val_div, ":base_price", 100),
                    # (try_end),
                    #scanners
                  (else_try),
                    (eq, ":upgrade_type", 2),
                    (assign, ":base_price", 250),
                    (val_mul, ":upgrade_lvl", 120),
                    (val_mul, ":base_price", ":upgrade_lvl"),
                    (val_div, ":base_price", 100),
                    #troop compartments
                  (else_try),
                    (eq, ":upgrade_type", 3),
                    (assign, ":base_price", 550),
                    (val_mul, ":upgrade_lvl", 120),
                    (val_mul, ":base_price", ":upgrade_lvl"),
                    (val_div, ":base_price", 100),
                    #prisoner compartments
                  (else_try),
                    (eq, ":upgrade_type", 4),
                    (assign, ":base_price", 400),
                    (val_mul, ":upgrade_lvl", 120),
                    (val_mul, ":base_price", ":upgrade_lvl"),
                    (val_div, ":base_price", 100),
                    #Cargo holds
                  (else_try),
                    (eq, ":upgrade_type", 5),
                    (assign, ":base_price", 300),
                    (val_mul, ":upgrade_lvl", 120),
                    (val_mul, ":base_price", ":upgrade_lvl"),
                    (val_div, ":base_price", 100),
                    #Combat Computer
                  (else_try),
                    (eq, ":upgrade_type", 6),
                    (assign, ":base_price", 600),
                    (val_mul, ":upgrade_lvl", 130),
                    (val_mul, ":base_price", ":upgrade_lvl"),
                    (val_div, ":base_price", 100),
                    #Trade Computer
                  (else_try),
                    (eq, ":upgrade_type", 7),
                    (assign, ":base_price", 300),
                    (val_mul, ":upgrade_lvl", 120),
                    (val_mul, ":base_price", ":upgrade_lvl"),
                    (val_div, ":base_price", 100),
                    #Medical bay
                  (else_try),
                    (eq, ":upgrade_type", 8),
                    (assign, ":base_price", 700),
                    (val_mul, ":upgrade_lvl", 140),
                    (val_mul, ":base_price", ":upgrade_lvl"),
                    (val_div, ":base_price", 100),
                  (try_end),
                  (assign, reg0, ":base_price"),
                  
              ]),
              
              #script_get_ship_sell_value
              #script is called from presentation
              #input:   arg1 = troop_id
              #output: price to reg0
              
              ("get_ship_sell_value",
                [
                  (store_script_param, ":troop_no", 1),
                  (troop_get_slot, "$g_ship_type", ":troop_no", slot_troop_has_spaceship),
                  (troop_get_slot, reg2, ":troop_no", slot_ship_drive),
                  (troop_get_slot, reg3, ":troop_no", slot_ship_scanner),
                  (troop_get_slot, reg4, ":troop_no", slot_ship_troop_capacity),
                  (troop_get_slot, reg5, ":troop_no", slot_ship_prisoner_capacity),
                  (troop_get_slot, reg6, ":troop_no", slot_ship_cargo_capacity),
                  (troop_get_slot, reg7, ":troop_no", slot_ship_combat_computer),
                  (troop_get_slot, reg8, ":troop_no", slot_ship_trade_computer),
                  (troop_get_slot, reg9, ":troop_no", slot_ship_medical_bay),
                  (store_add, ":total_upgrades", reg2, reg3),
                  (val_add, ":total_upgrades", reg4),
                  (val_add, ":total_upgrades", reg5),
                  (val_add, ":total_upgrades", reg6),
                  (val_add, ":total_upgrades", reg7),
                  (val_add, ":total_upgrades", reg8),
                  (val_add, ":total_upgrades", reg9), #is now the total number of ship system levels.
                  #now equate this to normal per shiptype
                  (try_begin),
                    (gt, "$g_ship_type", 0), #verify they have a ship
                    #calculate how many starting upgrades the ship had....
                    (assign, ":starting_upgrades", 0),
                    #(assign, reg4, ":starting_upgrades"), #debug only
                    #(display_message, "@starting_upgrades before = {reg4}"), #debug only
                    (party_get_slot, ":min_val", "$g_ship_type", slot_spaceship_drive_min),
                    (val_add, ":starting_upgrades", ":min_val"),
                    (party_get_slot, ":min_val", "$g_ship_type", slot_spaceship_scanner_min),
                    (val_add, ":starting_upgrades", ":min_val"),
                    (party_get_slot, ":min_val", "$g_ship_type", slot_spaceship_combat_computer_min),
                    (val_add, ":starting_upgrades", ":min_val"),
                    (party_get_slot, ":min_val", "$g_ship_type", slot_spaceship_troop_capacity_min),
                    (val_add, ":starting_upgrades", ":min_val"),
                    (party_get_slot, ":min_val", "$g_ship_type", slot_spaceship_medical_bay_min),
                    (val_add, ":starting_upgrades", ":min_val"),
                    (party_get_slot, ":min_val", "$g_ship_type", slot_spaceship_prisoner_capacity_min),
                    (val_add, ":starting_upgrades", ":min_val"),
                    (party_get_slot, ":min_val", "$g_ship_type", slot_spaceship_trade_computer_min),
                    (val_add, ":starting_upgrades", ":min_val"),
                    (party_get_slot, ":min_val", "$g_ship_type", slot_spaceship_cargo_capacity_min),
                    (val_add, ":starting_upgrades", ":min_val"),
                    #(assign, reg4, ":starting_upgrades"), #debug only
                    #(display_message, "@starting_upgrades after = {reg4}"),  #debug only
                    #calc the sell price
                    (val_sub, ":total_upgrades", ":starting_upgrades"), #total upgrades minus standard ones
                    (val_mul, ":total_upgrades", 200),
                    (party_get_slot, ":price", "$g_ship_type", slot_spaceship_price),
                    (store_div, ":ship_value", ":price", 2), #get half the original price back
                    (val_add, ":ship_value", ":total_upgrades"),
                    (assign, ":ship_sell_price", ":ship_value"),
                  (else_try),
                    (assign, ":ship_sell_price", 0),
                  (try_end),
                  (assign, reg0, ":ship_sell_price"),
                  
                  # (try_begin),
                  # (eq, "$g_ship_type", 1),
                  # (val_sub, ":total_upgrades", 4), #total upgrades minus standard ones
                  # (val_mul, ":total_upgrades", 200),
                  # (store_div, ":ship_value", 4500, 2), #get half the original price back
                  # (val_add, ":ship_value", ":total_upgrades"),
                  # (assign, ":ship_sell_price", ":ship_value"),
                  # (else_try),
                  # (eq, "$g_ship_type", 2),
                  # (val_sub, ":total_upgrades", 6), #total upgrades minus standard ones
                  # (val_mul, ":total_upgrades", 200),
                  # (store_div, ":ship_value", 7500, 2), #get half the original price back
                  # (val_add, ":ship_value", ":total_upgrades"),
                  # (assign, ":ship_sell_price", ":ship_value"),
                  # (else_try),
                  # (eq, "$g_ship_type", 3),
                  # (val_sub, ":total_upgrades", 4), #total upgrades minus standard ones
                  # (val_mul, ":total_upgrades", 200),
                  # (store_div, ":ship_value", 9000, 2), #get half the original price back
                  # (val_add, ":ship_value", ":total_upgrades"),
                  # (assign, ":ship_sell_price", ":ship_value"),
                  # (else_try),
                  # (eq, "$g_ship_type", 4),
                  # (val_sub, ":total_upgrades", 6), #total upgrades minus standard ones
                  # (val_mul, ":total_upgrades", 200),
                  # (store_div, ":ship_value", 15000, 2), #get half the original price back
                  # (val_add, ":ship_value", ":total_upgrades"),
                  # (assign, ":ship_sell_price", ":ship_value"),
                  # (else_try),
                  # (eq, "$g_ship_type", 5),
                  # (val_sub, ":total_upgrades", 10), #total upgrades minus standard ones
                  # (val_mul, ":total_upgrades", 200),
                  # (store_div, ":ship_value", 22500, 2), #get half the original price back
                  # (val_add, ":ship_value", ":total_upgrades"),
                  # (assign, ":ship_sell_price", ":ship_value"),
                  # (else_try),
                  # (eq, "$g_ship_type", 6),
                  # (val_sub, ":total_upgrades", 10), #total upgrades minus standard ones
                  # (val_mul, ":total_upgrades", 200),
                  # (store_div, ":ship_value", 30000, 2), #get half the original price back
                  # (val_add, ":ship_value", ":total_upgrades"),
                  # (assign, ":ship_sell_price", ":ship_value"),
                  # (else_try),
                  # (eq, "$g_ship_type", 7),
                  # (val_sub, ":total_upgrades", 10), #total upgrades minus standard ones
                  # (val_mul, ":total_upgrades", 200),
                  # (store_div, ":ship_value", 45000, 2), #get half the original price back
                  # (val_add, ":ship_value", ":total_upgrades"),
                  # (assign, ":ship_sell_price", ":ship_value"),
                  # (try_end),
                  
              ]),
              
              # script_dmod_kill_agent
              # Input: agent to kill
              # Output: agent slot #5 set to 1, used for counting valid casualties
              # Used to kill specified agent and horse (if applicable)
              ("dmod_kill_agent",[
                  (store_script_param, ":agent", 1),
                  
                  (agent_get_horse, ":horse_agent", ":agent"),
                  (try_begin),
                    (ge, ":horse_agent", 0),
                    (agent_set_hit_points, ":horse_agent", -1, 1),
                    (agent_deliver_damage_to_agent, ":agent", ":horse_agent"),
                    (agent_set_animation_progress, ":horse_agent", 100),
                  (try_end),
                  
                  (agent_set_slot, ":agent", 5, 1),
                  (agent_set_hit_points, ":agent", -1, 1),
                  (agent_deliver_damage_to_agent, ":agent", ":agent"),
                  (agent_set_animation, ":agent", "anim_dance"),
                  #(agent_set_animation, ":agent", "anim_dmod_kill_agent"),   #SW - new animation to move them underground?  doesn't work on dead agents...
                  #(agent_set_stand_animation, ":agent", "anim_dmod_kill_agent"),   #SW - new animation to move them underground?  doesn't work on dead agents...
                  (agent_set_animation_progress, ":agent", 99),
              ]),
              
              # script_dmod_cycle_forwards
              # Output: New $dmod_current_agent
              # Used to cycle forwards through valid agents
              ("dmod_cycle_forwards",[
                  
                  (assign, ":agent_moved",  0),
                  (assign, ":first_agent", -1),
                  (get_player_agent_no, ":player_agent"),
                  (agent_get_team, ":player_team", ":player_agent"),
                  
                  (try_for_agents, ":agent_no"),
                    (agent_is_alive, ":agent_no"),
                    (agent_is_human, ":agent_no"),
                    
                    (neq, ":agent_moved", 1),
                    (neq, ":agent_no", ":player_agent"),
                    (neq, ":agent_no", "$dmod_current_agent"),

                    (agent_get_team, ":cur_team", ":agent_no"),
                    (eq, ":cur_team", ":player_team"),
                    #(agent_get_troop_id, ":agent_troop", ":agent_no"),
                    (try_begin),
                      (lt, ":first_agent", 0),
                      (assign, ":first_agent", ":agent_no"),
                    (try_end),
                    
                    (gt, ":agent_no", "$dmod_current_agent"),
                    (assign, "$dmod_current_agent", ":agent_no"),
                    (assign, ":agent_moved", 1),
                  (try_end),
                  
                  (try_begin),
                    (eq, ":agent_moved", 0),
                    (neq, ":first_agent", -1),
                    (assign, "$dmod_current_agent", ":first_agent"),
                    (assign, ":agent_moved", 1),
                  (else_try),
                    (eq, ":agent_moved", 0),
                    (eq, ":first_agent", -1),
                    (display_message, "@No Troops Left."),
                  (try_end),
                  
                  (try_begin),
                    (eq, ":agent_moved", 1),
                    (str_store_agent_name, 1, "$dmod_current_agent"),
                    (display_message, "@Selected Troop: {s1}"),
                    (assign, "$dmod_move_camera", 1),
                  (try_end),
              ]),
              
              # script_dmod_cycle_backwards
              # Output: New $dmod_current_agent
              # Used to cycle backwards through valid agents
              ("dmod_cycle_backwards",[
                  
                  (assign, ":new_agent",  -1),
                  (assign, ":last_agent", -1),
                  (get_player_agent_no, ":player_agent"),
                  (agent_get_team, ":player_team", ":player_agent"),
                  
                  (try_for_agents, ":agent_no"),
                  
                      (agent_is_alive, ":agent_no"),
                      (agent_is_human, ":agent_no"),
                      
                      (neq, ":agent_no", ":player_agent"),
                      (neq, ":agent_no", "$dmod_current_agent"),
                      
                      (agent_get_team, ":cur_team", ":agent_no"),
                      (eq, ":cur_team", ":player_team"),
                      #(agent_get_troop_id, ":agent_troop", ":agent_no"),
                      (assign, ":last_agent", ":agent_no"),
                      (lt, ":agent_no", "$dmod_current_agent"),
                      (assign, ":new_agent", ":agent_no"),
                      
                  (try_end),
                  
                  (try_begin),
                      (eq, ":new_agent", -1),
                      (neq, ":last_agent", -1),
                      
                      #--> If there's no new agent, check if we had one selected and use that one.
                      (assign, ":new_agent", ":last_agent"),
                  (else_try),
                      (eq, ":new_agent", -1),
                      (eq, ":last_agent", -1),

                      #--> Oops, no troops left, bad luck.
                      (display_message, "@No Troops Left."),
                  (try_end),
                      
                  (try_begin),
                      (neq, ":new_agent", -1),

                      #--> If we do have a new agent in the list, then assign it and move the cam.
                      (assign, "$dmod_current_agent", ":new_agent"),
                      (str_store_agent_name, s1, "$dmod_current_agent"),
                      
                      (display_message, "@Selected Troop: {s1}"),
                      (assign, "$dmod_move_camera", 1),
                  (try_end),
              ]),
              
              #######################################################################################
              # string typer kit by jik and Slawomir of Aaarrghh
              # http://forums.taleworlds.net/index.php/topic,57775.0.html
              # http://forums.taleworlds.net/index.php/topic,57775.msg1503015.html#msg1503015
              
              ##script_show_text_string
              ##converts a string of key presses into a string s10
              ##Input : none
              ##Output: string to s10
              ("show_text_string",
                [(str_clear,s10),
                  (assign,":acaps",0),
                  ######Test Max of 25 Chars
                  (try_begin),
                    (eq,"$str_len",25),
                    (display_message,"@MAXIMUM 25 characters.  The last character was not recorded",0xff8800),
                    (val_sub,"$str_len",1),
                  (try_end),
                  ######Test end
                  (assign,":endcount","$str_len"),
                  (try_for_range,":xcount",0,":endcount"),
                    (troop_get_slot,reg1,"trp_temp_array_b", ":xcount"),
                    (assign,":acaps",0),
                    (assign,":alt",0),
                    ######Test CAPS
                    (try_begin),
                      (gt,reg1,30000), ##capital + alt
                      (assign,":acaps",1),
                      (assign,":alt",1),
                      (val_sub,reg1,30000),
                    (else_try),
                      (gt,reg1,20000),##alt
                      (assign,":alt",1),
                      (val_sub,reg1,20000),
                    (else_try),
                      (gt,reg1,10000),  ##capital letter here
                      (assign,":acaps",1),
                      (val_sub,reg1,10000),
                    (try_end),
                    ######Test end
                    (try_begin),
                      (eq,reg1,key_space),
                      (str_store_string,s10,"@{s10} "),
                    (else_try),
                      (eq,reg1,key_1),
                      (str_store_string,s10,"@{s10}1"),
                    (else_try),
                      (eq,reg1,key_2),
                      (str_store_string,s10,"@{s10}2"),
                    (else_try),
                      (eq,reg1,key_3),
                      (str_store_string,s10,"@{s10}3"),
                    (else_try),
                      (eq,reg1,key_4),
                      (str_store_string,s10,"@{s10}4"),
                    (else_try),
                      (eq,reg1,key_5),
                      (str_store_string,s10,"@{s10}5"),
                    (else_try),
                      (eq,reg1,key_6),
                      (str_store_string,s10,"@{s10}6"),
                    (else_try),
                      (eq,reg1,key_7),
                      (str_store_string,s10,"@{s10}7"),
                    (else_try),
                      (eq,reg1,key_8),
                      (str_store_string,s10,"@{s10}8"),
                    (else_try),
                      (eq,reg1,key_9),
                      (str_store_string,s10,"@{s10}9"),
                    (else_try),
                      (eq,reg1,key_0),
                      (str_store_string,s10,"@{s10}0"),
                    (else_try),
                      (eq,reg1,key_a),
                      (try_begin),
                        (eq,":acaps",1),
                        (try_begin),
                          (eq,":alt",1),
                          (str_store_string,s10,"@{s10}A-polish"),
                        (else_try),
                          (str_store_string,s10,"@{s10}A"),
                        (try_end),
                      (else_try),
                        (eq,":acaps",0),
                        (try_begin),
                          (eq,":alt",1),
                          (str_store_string,s10,"@{s10}a-polish"),
                        (else_try),
                          (str_store_string,s10,"@{s10}a"),
                        (try_end),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_b),
                      (try_begin),
                        (eq,":acaps",1),
                        (str_store_string,s10,"@{s10}B"),
                      (else_try),
                        (eq,":acaps",0),
                        (str_store_string,s10,"@{s10}b"),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_c),
                      (try_begin),
                        (eq,":acaps",1),
                        (try_begin),
                          (eq,":alt",1),
                          (str_store_string,s10,"@{s10}C-polish"),
                        (else_try),
                          (str_store_string,s10,"@{s10}C"),
                        (try_end),
                      (else_try),
                        (eq,":acaps",0),
                        (try_begin),
                          (eq,":alt",1),
                          (str_store_string,s10,"@{s10}c-polish"),
                        (else_try),
                          (str_store_string,s10,"@{s10}c"),
                        (try_end),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_d),
                      (try_begin),
                        (eq,":acaps",1),
                        (str_store_string,s10,"@{s10}D"),
                      (else_try),
                        (eq,":acaps",0),
                        (str_store_string,s10,"@{s10}d"),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_e),
                      (try_begin),
                        (eq,":acaps",1),
                        (try_begin),
                          (eq,":alt",1),
                          (str_store_string,s10,"@{s10}E-polish"),
                        (else_try),
                          (str_store_string,s10,"@{s10}E"),
                        (try_end),
                      (else_try),
                        (eq,":acaps",0),
                        (try_begin),
                          (eq,":alt",1),
                          (str_store_string,s10,"@{s10}e-polish"),
                        (else_try),
                          (str_store_string,s10,"@{s10}e"),
                        (try_end),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_f),
                      (try_begin),
                        (eq,":acaps",1),
                        (str_store_string,s10,"@{s10}F"),
                      (else_try),
                        (eq,":acaps",0),
                        (str_store_string,s10,"@{s10}F"),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_g),
                      (try_begin),
                        (eq,":acaps",1),
                        (str_store_string,s10,"@{s10}G"),
                      (else_try),
                        (eq,":acaps",0),
                        (str_store_string,s10,"@{s10}g"),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_h),
                      (try_begin),
                        (eq,":acaps",1),
                        (str_store_string,s10,"@{s10}H"),
                      (else_try),
                        (eq,":acaps",0),
                        (str_store_string,s10,"@{s10}h"),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_i),
                      (try_begin),
                        (eq,":acaps",1),
                        (str_store_string,s10,"@{s10}I"),
                      (else_try),
                        (eq,":acaps",0),
                        (str_store_string,s10,"@{s10}i"),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_j),
                      (try_begin),
                        (eq,":acaps",1),
                        (str_store_string,s10,"@{s10}J"),
                      (else_try),
                        (eq,":acaps",0),
                        (str_store_string,s10,"@{s10}j"),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_k),
                      (try_begin),
                        (eq,":acaps",1),
                        (str_store_string,s10,"@{s10}K"),
                      (else_try),
                        (eq,":acaps",0),
                        (str_store_string,s10,"@{s10}k"),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_l),
                      (try_begin),
                        (eq,":acaps",1),
                        (try_begin),
                          (eq,":alt",1),
                          (str_store_string,s10,"@{s10}L-polish"),
                        (else_try),
                          (str_store_string,s10,"@{s10}L"),
                        (try_end),
                      (else_try),
                        (eq,":acaps",0),
                        (try_begin),
                          (eq,":alt",1),
                          (str_store_string,s10,"@{s10}l-polish"),
                        (else_try),
                          (str_store_string,s10,"@{s10}l"),
                        (try_end),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_m),
                      (try_begin),
                        (eq,":acaps",1),
                        (str_store_string,s10,"@{s10}M"),
                      (else_try),
                        (eq,":acaps",0),
                        (str_store_string,s10,"@{s10}m"),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_n),
                      (try_begin),
                        (eq,":acaps",1),
                        (try_begin),
                          (eq,":alt",1),
                          (str_store_string,s10,"@{s10}N-polish"),
                        (else_try),
                          (str_store_string,s10,"@{s10}N"),
                        (try_end),
                      (else_try),
                        (eq,":acaps",0),
                        (try_begin),
                          (eq,":alt",1),
                          (str_store_string,s10,"@{s10}n-polish"),
                        (else_try),
                          (str_store_string,s10,"@{s10}n"),
                        (try_end),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_o),
                      (try_begin),
                        (eq,":acaps",1),
                        (try_begin),
                          (eq,":alt",1),
                          (str_store_string,s10,"@{s10}O-polish"),
                        (else_try),
                          (str_store_string,s10,"@{s10}O"),
                        (try_end),
                      (else_try),
                        (eq,":acaps",0),
                        (try_begin),
                          (eq,":alt",1),
                          (str_store_string,s10,"@{s10}o-polish"),
                        (else_try),
                          (str_store_string,s10,"@{s10}o"),
                        (try_end),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_p),
                      (try_begin),
                        (eq,":acaps",1),
                        (str_store_string,s10,"@{s10}P"),
                      (else_try),
                        (eq,":acaps",0),
                        (str_store_string,s10,"@{s10}p"),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_q),
                      (try_begin),
                        (eq,":acaps",1),
                        (str_store_string,s10,"@{s10}Q"),
                      (else_try),
                        (eq,":acaps",0),
                        (str_store_string,s10,"@{s10}q"),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_r),
                      (try_begin),
                        (eq,":acaps",1),
                        (str_store_string,s10,"@{s10}R"),
                      (else_try),
                        (eq,":acaps",0),
                        (str_store_string,s10,"@{s10}r"),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_s),
                      (try_begin),
                        (eq,":acaps",1),
                        (try_begin),
                          (eq,":alt",1),
                          (str_store_string,s10,"@{s10}S-polish"),
                        (else_try),
                          (str_store_string,s10,"@{s10}S"),
                        (try_end),
                      (else_try),
                        (eq,":acaps",0),
                        (try_begin),
                          (eq,":alt",1),
                          (str_store_string,s10,"@{s10}s-polish"),
                        (else_try),
                          (str_store_string,s10,"@{s10}s"),
                        (try_end),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_t),
                      (try_begin),
                        (eq,":acaps",1),
                        (str_store_string,s10,"@{s10}T"),
                      (else_try),
                        (eq,":acaps",0),
                        (str_store_string,s10,"@{s10}t"),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_u),
                      (try_begin),
                        (eq,":acaps",1),
                        (str_store_string,s10,"@{s10}U"),
                      (else_try),
                        (eq,":acaps",0),
                        (str_store_string,s10,"@{s10}u"),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_v),
                      (try_begin),
                        (eq,":acaps",1),
                        (str_store_string,s10,"@{s10}V"),
                      (else_try),
                        (eq,":acaps",0),
                        (str_store_string,s10,"@{s10}v"),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_w),
                      (try_begin),
                        (eq,":acaps",1),
                        (str_store_string,s10,"@{s10}W"),
                      (else_try),
                        (eq,":acaps",0),
                        (str_store_string,s10,"@{s10}w"),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_x),
                      (try_begin),
                        (eq,":acaps",1),
                        (try_begin),
                          (eq,":alt",1),
                          (str_store_string,s10,"@{s10}X-polish"),
                        (else_try),
                          (str_store_string,s10,"@{s10}X"),
                        (try_end),
                      (else_try),
                        (eq,":acaps",0),
                        (try_begin),
                          (eq,":alt",1),
                          (str_store_string,s10,"@{s10}x-polish"),
                        (else_try),
                          (str_store_string,s10,"@{s10}x"),
                        (try_end),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_y),
                      (try_begin),
                        (eq,":acaps",1),
                        (str_store_string,s10,"@{s10}Y"),
                      (else_try),
                        (eq,":acaps",0),
                        (str_store_string,s10,"@{s10}y"),
                      (try_end),
                    (else_try),
                      (eq,reg1,key_z),
                      (try_begin),
                        (eq,":acaps",1),
                        (try_begin),
                          (eq,":alt",1),
                          (str_store_string,s10,"@{s10}Z-polish"),
                        (else_try),
                          (str_store_string,s10,"@{s10}Z"),
                        (try_end),
                      (else_try),
                        (eq,":acaps",0),
                        (try_begin),
                          (eq,":alt",1),
                          (str_store_string,s10,"@{s10}z-polish"),
                        (else_try),
                          (str_store_string,s10,"@{s10}z"),
                        (try_end),
                      (try_end),
                    (try_end),
                  (try_end),
                ]
              ),
              #######################################################################################
              #SW - tavern brawl by HokieBT
              ("setup_tavern_brawl",
                [
                  
                  #(set_party_battle_mode),     #this is run in the trp_fugitive quests so may be necessary?  it appears to allow them to permanently hurt people?
                  (get_player_agent_no, ":player_agent"),
                  (try_for_agents, ":cur_agent"),
                    (neq, ":cur_agent", ":player_agent"),   #don't change the players team (default of 0)
                    (store_random_in_range, ":team", 3, 6), #use team 1-5 for tavern brawlers (nevermind, don't use 2 since we use them for town walkers)
                    (agent_set_team, ":cur_agent", ":team"),
                    (agent_clear_scripted_mode, ":cur_agent"), #so town walkers won't try and continue to walk around town (may not be necessary for tavern?)
                    (agent_set_speed_limit, ":cur_agent", 50), #so they will run faster (may not be necessary for taverns?)
                  (try_end),
                  
                  #stop_all_sounds (ie. the cantina ambiance)
                  (stop_all_sounds,2),
                  #play a specific music track for the start of the fight
                  (play_track, "track_cantina_fight", 2),   # 0 = default, 1 = fade out current track, 2 = stop current track
                  
                  #assign a flag to check if you defeated everybody
                  (assign, "$g_init_fight", 1),
                  
                  #switch the music situtation after the fight track finishes
                  (call_script, "script_music_set_situation_with_culture", mtf_sit_fight),
                  
              ]),
              #######################################################################################
              #SW - init_town_fight by HokieBT
              ("init_town_fight",
                [
                  (get_player_agent_no, ":player_agent"),
                  #(get_player_agent_own_troop_kill_count, "$player_current_friendly_kills"),         #only necessary when using the old code in common_check_town_fight
                  (try_for_agents, ":cur_agent"),
                    #(agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
                    (neq, ":cur_agent", ":player_agent"),   #don't change the players team (default of 0)
                    (agent_get_entry_no,":entry_no",":cur_agent"),
                    (try_begin),
                      (this_or_next|eq,":entry_no",48),  #players companion
                      (eq,":entry_no",49),            #players companion
                      (agent_set_team, ":cur_agent", 0), #set players companion to their team (team 0)
                    (else_try),
                      (agent_set_team, ":cur_agent", 2), #set all other players to team 2 (don't use team 1 since that is used for fugitive, etc)
                      #store their hit points
                      (store_agent_hit_points,":agent_hp",":cur_agent",1), #set to 1 to retrieve actual hp
                      (agent_set_slot, ":cur_agent", slot_agent_hit_points, ":agent_hp"),
                    (try_end),
                  (try_end),
                  #set the teams relationship
                  (team_set_relation, 0, 2, 1), #set the player team 0 and town team 2 to be friendly to each other (-1 for enemy, 1 for friend, 0 for neutral)
              ]),
              #######################################################################################
              #SW - start_town_fight by HokieBT
              ("start_town_fight",
                [
                  #(set_party_battle_mode),     #this is run in the trp_fugitive quests so may be necessary?  it appears to allow them to permanently hurt people?
                  (try_for_agents, ":cur_agent"),
                    (agent_get_team  ,":team", ":cur_agent"),
                    (eq, ":team", 2),  #agent is on the town team
                    (agent_clear_scripted_mode, ":cur_agent"), #so town walkers won't try and continue to walk around town
                    (agent_set_speed_limit, ":cur_agent", 50), #so they will run faster
                  (try_end),
                  (team_set_relation, 0, 2, -1),   #set the player team 0 and town team 2 to be enemy to each other (-1 for enemy, 1 for friend, 0 for neutral)
                  (set_show_messages, 0),    #0 disables window messages 1 re-enables them.
                  (team_give_order, 2, grc_everyone, mordr_charge),  #makes the other team charge
                  (set_show_messages, 1),    #0 disables window messages 1 re-enables them.
                  
                  #play a specific music track for the start of the fight
                  (play_track, "track_town_battle", 2),  # 0 = default, 1 = fade out current track, 2 = stop current track
                  
                  #switch the music situtation after the fight track finishes
                  (call_script, "script_music_set_situation_with_culture", mtf_sit_fight),
                  
              ]),
              #######################################################################################
              
              #random scene encounters by Flanged (modified by HokieBT)
              ("cf_setup_random_scene_encounter",
                [
                  
                  (store_script_param_1, ":choice"),
                  
                  (try_begin),
                    (eq, ":choice", 0),   #town/castle/village
                    #set the enemy_troop depending on the location
                    (try_begin),
                      (eq, "$current_town", "p_kashyyyk"),     #Kashyyyk
                      (assign,"$g_enemy_troop","trp_bountyhunter"),
                      (store_random_in_range, ":enemy_troop_count", 10, 20),
                    (else_try),
                      (eq, "$current_town", "p_tatooine"),     #Tatooine
                      (assign,"$g_enemy_troop","trp_tusken_1"),
                      (store_random_in_range, ":enemy_troop_count", 15, 30),
                    (else_try),
                      (store_faction_of_party, ":town_faction", "$current_town"),
                      (try_begin),
                        (eq, ":town_faction", "fac_galacticempire"),    #empire
                        (assign,"$g_enemy_troop","trp_rebel_trooper"),
                        (store_random_in_range, ":enemy_troop_count", 10, 20),
                        #(assign,":enemy_troop_count", 5),
                      (else_try),
                        (eq, ":town_faction", "fac_rebelalliance"),  #rebel
                        (assign,"$g_enemy_troop","trp_imperial_stormtrooper"),
                        (store_random_in_range, ":enemy_troop_count", 10, 20),
                      (else_try),
                        (assign,"$g_enemy_troop","trp_bandit"),
                        (store_random_in_range, ":enemy_troop_count", 10, 20),
                      (try_end),
                    (try_end),
                    #set the spawn point for the enemy troop
                    (try_for_range, ":count", 0, ":enemy_troop_count"),
                      (assign, ":count", ":count"),   #dummy assignment, just to eliminate the script warning
                      (store_random_in_range, ":enemy_entry_point", 30, 40),     #town walker entry points
                      (entry_point_get_position, pos1, ":enemy_entry_point"),
                      (set_spawn_position, pos1),
                      (set_spawn_radius, 5),
                      (spawn_agent,"$g_enemy_troop"),
                    (try_end),
                    # set the team to 1 so they attack the player and other agents
                    (try_for_agents, ":cur_agent"),
                      #clear_scripted_mode and remove the speed_limit for all agents
                      (agent_clear_scripted_mode, ":cur_agent"),  #so town walkers won't try and continue to walk around town
                      (agent_set_speed_limit, ":cur_agent", 50),  #so they will run faster
                      #then check if they are an enemy and should be set to team 3
                      (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
                      (eq, ":cur_agent_troop", "$g_enemy_troop"),
                      (agent_set_team, ":cur_agent", 3), # maybe it is possible to also give them the aif_start_alarmed flag?
                    (try_end),
                    (team_set_relation, 0, 3, -1), #set attackers to be enemies of team 0
                    (team_set_relation, 2, 3, -1), #set attackers to be enemies of team 2
                    (set_show_messages, 0),     #0 disables window messages 1 re-enables them.
                    (team_give_order, 3, grc_everyone, mordr_charge),   #makes the other team charge (maybe use advance or fire_at_will instead?)
                    (set_show_messages, 1),     #0 disables window messages 1 re-enables them.
                  (else_try),
                    (eq, ":choice", 1),   #tavern, other, etc(do nothing right now)
                  (try_end),
                  
              ]),
              
              #random scene encounters by Flanged (modified by HokieBT)
              ("cf_setup_random_scene_assassination",
                [
                  
                  (store_script_param_1, ":choice"),
                  
                  (assign, ":enemy_entry_point",0),
                  (try_begin),
                    (eq, ":choice", 0),   #town/castle/village entry points
                    (store_random_in_range, ":enemy_entry_point", 30, 40),
                  (else_try),
                    (eq, ":choice", 1),   #tavern
                    (store_random_in_range, ":enemy_entry_point", 16, 24),
                  (try_end),
                  
                  (try_begin),
                    (gt, ":enemy_entry_point",0),  #fail if no entry point was set
                    (try_begin),
                      (get_player_agent_no,":player_agent"),
                      (agent_is_alive, ":player_agent"),
                      (agent_get_position,pos1,":player_agent"),
                      (entry_point_get_position, pos2, ":enemy_entry_point"),
                      (get_distance_between_positions,":temp_distance",pos1,pos2),
                      (try_begin),
                        (ge, ":temp_distance", 100),  #so they don't spawn on top of the player
                        (set_spawn_position, pos2),
                        (store_random_in_range, "$g_assassin", assassins_begin, assassins_end),
                        (spawn_agent,"$g_assassin"),
                        # possibly add code to spawn more then 1 agent?
                        (try_for_agents, ":cur_agent"),
                          (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
                          (eq, ":cur_agent_troop", "$g_assassin"),
                          (agent_set_team, ":cur_agent", 3),   # maybe it is possible to also give them the aif_start_alarmed flag?
                        (try_end),
                        (team_set_relation, 0, 3, -1),   #set attackers to be enemies of team 0
                        (team_set_relation, 2, 3, 0), #set citizens to be neutral to the assassin
                        (set_show_messages, 0),    #0 disables window messages 1 re-enables them.
                        (team_give_order, 3, grc_everyone, mordr_charge),  #makes the other team charge (maybe use advance or fire_at_will instead?)
                        (set_show_messages, 1),    #0 disables window messages 1 re-enables them.
                      (try_end),
                    (try_end),
                  (try_end),
              ]),
              
              
              #script_get_key - code from Expanded Gameplay III
              #input agr1=key
              #output s13 - key string
              ("get_key",
                [
                  (store_script_param, ":key", 1),
                  
                  (try_begin),(eq,":key",0x02),(str_store_string,s13,"@1"),
                  (else_try),(eq,":key",0x03),(str_store_string,s13,"@2"),
                  (else_try),(eq,":key",0x04),(str_store_string,s13,"@3"),
                  (else_try),(eq,":key",0x05),(str_store_string,s13,"@4"),
                  (else_try),(eq,":key",0x06),(str_store_string,s13,"@5"),
                  (else_try),(eq,":key",0x07),(str_store_string,s13,"@6"),
                  (else_try),(eq,":key",0x08),(str_store_string,s13,"@7"),
                  (else_try),(eq,":key",0x09),(str_store_string,s13,"@8"),
                  (else_try),(eq,":key",0x0a),(str_store_string,s13,"@9"),
                  (else_try),(eq,":key",0x0b),(str_store_string,s13,"@0"),
                  (else_try),(eq,":key",0x1e),(str_store_string,s13,"@a"),
                  (else_try),(eq,":key",0x30),(str_store_string,s13,"@b"),
                  (else_try),(eq,":key",0x2e),(str_store_string,s13,"@c"),
                  (else_try),(eq,":key",0x20),(str_store_string,s13,"@d"),
                  (else_try),(eq,":key",0x12),(str_store_string,s13,"@e"),
                  (else_try),(eq,":key",0x21),(str_store_string,s13,"@f"),
                  (else_try),(eq,":key",0x22),(str_store_string,s13,"@g"),
                  (else_try),(eq,":key",0x23),(str_store_string,s13,"@h"),
                  (else_try),(eq,":key",0x17),(str_store_string,s13,"@i"),
                  (else_try),(eq,":key",0x24),(str_store_string,s13,"@j"),
                  (else_try),(eq,":key",0x25),(str_store_string,s13,"@k"),
                  (else_try),(eq,":key",0x26),(str_store_string,s13,"@l"),
                  (else_try),(eq,":key",0x32),(str_store_string,s13,"@m"),
                  (else_try),(eq,":key",0x31),(str_store_string,s13,"@n"),
                  (else_try),(eq,":key",0x18),(str_store_string,s13,"@o"),
                  (else_try),(eq,":key",0x19),(str_store_string,s13,"@p"),
                  (else_try),(eq,":key",0x10),(str_store_string,s13,"@q"),
                  (else_try),(eq,":key",0x13),(str_store_string,s13,"@r"),
                  (else_try),(eq,":key",0x1f),(str_store_string,s13,"@s"),
                  (else_try),(eq,":key",0x14),(str_store_string,s13,"@t"),
                  (else_try),(eq,":key",0x16),(str_store_string,s13,"@u"),
                  (else_try),(eq,":key",0x2f),(str_store_string,s13,"@v"),
                  (else_try),(eq,":key",0x11),(str_store_string,s13,"@w"),
                  (else_try),(eq,":key",0x2d),(str_store_string,s13,"@x"),
                  (else_try),(eq,":key",0x15),(str_store_string,s13,"@y"),
                  (else_try),(eq,":key",0x2c),(str_store_string,s13,"@z"),
                  (else_try),(eq,":key",0x52),(str_store_string,s13,"@numpad_0"),
                  (else_try),(eq,":key",0x4f),(str_store_string,s13,"@numpad_1"),
                  (else_try),(eq,":key",0x50),(str_store_string,s13,"@numpad_2"),
                  (else_try),(eq,":key",0x51),(str_store_string,s13,"@numpad_3"),
                  (else_try),(eq,":key",0x4b),(str_store_string,s13,"@numpad_4"),
                  (else_try),(eq,":key",0x4c),(str_store_string,s13,"@numpad_5"),
                  (else_try),(eq,":key",0x4d),(str_store_string,s13,"@numpad_6"),
                  (else_try),(eq,":key",0x47),(str_store_string,s13,"@numpad_7"),
                  (else_try),(eq,":key",0x48),(str_store_string,s13,"@numpad_8"),
                  (else_try),(eq,":key",0x49),(str_store_string,s13,"@numpad_9"),
                  (else_try),(eq,":key",0x45),(str_store_string,s13,"@num_lock"),
                  (else_try),(eq,":key",0xb5),(str_store_string,s13,"@numpad_slash"),
                  (else_try),(eq,":key",0x37),(str_store_string,s13,"@numpad_multiply"),
                  (else_try),(eq,":key",0x4a),(str_store_string,s13,"@numpad_minus"),
                  (else_try),(eq,":key",0x4e),(str_store_string,s13,"@numpad_plus"),
                  (else_try),(eq,":key",0x9c),(str_store_string,s13,"@numpad_enter"),
                  (else_try),(eq,":key",0x53),(str_store_string,s13,"@numpad_period"),
                  (else_try),(eq,":key",0xd2),(str_store_string,s13,"@insert"),
                  (else_try),(eq,":key",0xd3),(str_store_string,s13,"@delete"),
                  (else_try),(eq,":key",0xc7),(str_store_string,s13,"@home"),
                  (else_try),(eq,":key",0xcf),(str_store_string,s13,"@end"),
                  (else_try),(eq,":key",0xc9),(str_store_string,s13,"@page_up"),
                  (else_try),(eq,":key",0xd1),(str_store_string,s13,"@page_down"),
                  (else_try),(eq,":key",0xc8),(str_store_string,s13,"@up"),
                  (else_try),(eq,":key",0xd0),(str_store_string,s13,"@down"),
                  (else_try),(eq,":key",0xcb),(str_store_string,s13,"@left"),
                  (else_try),(eq,":key",0xcd),(str_store_string,s13,"@right"),
                  (else_try),(eq,":key",0x3b),(str_store_string,s13,"@f1"),
                  (else_try),(eq,":key",0x3c),(str_store_string,s13,"@f2"),
                  (else_try),(eq,":key",0x3d),(str_store_string,s13,"@f3"),
                  (else_try),(eq,":key",0x3e),(str_store_string,s13,"@f4"),
                  (else_try),(eq,":key",0x3f),(str_store_string,s13,"@f5"),
                  (else_try),(eq,":key",0x40),(str_store_string,s13,"@f6"),
                  (else_try),(eq,":key",0x41),(str_store_string,s13,"@f7"),
                  (else_try),(eq,":key",0x42),(str_store_string,s13,"@f8"),
                  (else_try),(eq,":key",0x43),(str_store_string,s13,"@f9"),
                  (else_try),(eq,":key",0x44),(str_store_string,s13,"@f10"),
                  (else_try),(eq,":key",0x57),(str_store_string,s13,"@f11"),
                  (else_try),(eq,":key",0x58),(str_store_string,s13,"@f12"),
                  (else_try),(eq,":key",0x39),(str_store_string,s13,"@space"),
                  (else_try),(eq,":key",0x01),(str_store_string,s13,"@escape"),
                  (else_try),(eq,":key",0x1c),(str_store_string,s13,"@enter"),
                  (else_try),(eq,":key",0x0f),(str_store_string,s13,"@tab"),
                  (else_try),(eq,":key",0x0e),(str_store_string,s13,"@back_space"),
                  (else_try),(eq,":key",0x1a),(str_store_string,s13,"@open_braces"),
                  (else_try),(eq,":key",0x1b),(str_store_string,s13,"@close_braces"),
                  (else_try),(eq,":key",0x33),(str_store_string,s13,"@comma"),
                  (else_try),(eq,":key",0x34),(str_store_string,s13,"@period"),
                  (else_try),(eq,":key",0x35),(str_store_string,s13,"@slash"),
                  (else_try),(eq,":key",0x2b),(str_store_string,s13,"@back_slash"),
                  (else_try),(eq,":key",0x0d),(str_store_string,s13,"@equals"),
                  (else_try),(eq,":key",0x0c),(str_store_string,s13,"@minus"),
                  (else_try),(eq,":key",0x27),(str_store_string,s13,"@semicolon"),
                  (else_try),(eq,":key",0x28),(str_store_string,s13,"@apostrophe"),
                  (else_try),(eq,":key",0x29),(str_store_string,s13,"@tilde"),
                  (else_try),(eq,":key",0x3a),(str_store_string,s13,"@caps_lock"),
                  (else_try),(eq,":key",0x2a),(str_store_string,s13,"@left_shift"),
                  (else_try),(eq,":key",0x36),(str_store_string,s13,"@right_shift"),
                  (else_try),(eq,":key",0x1d),(str_store_string,s13,"@left_control"),
                  (else_try),(eq,":key",0x9d),(str_store_string,s13,"@right_control"),
                  (else_try),(eq,":key",0x38),(str_store_string,s13,"@left_alt"),
                  (else_try),(eq,":key",0xb8),(str_store_string,s13,"@right_alt"),
                  (else_try),(eq,":key",0xe0),(str_store_string,s13,"@left_mouse_button"),
                  (else_try),(eq,":key",0xe1),(str_store_string,s13,"@right_mouse_button"),
                  (else_try),(eq,":key",0xe2),(str_store_string,s13,"@middle_mouse_button"),
                  (else_try),(eq,":key",0xe3),(str_store_string,s13,"@mouse_button_4"),
                  (else_try),(eq,":key",0xe4),(str_store_string,s13,"@mouse_button_5"),
                  (else_try),(eq,":key",0xe5),(str_store_string,s13,"@mouse_button_6"),
                  (else_try),(eq,":key",0xe6),(str_store_string,s13,"@mouse_button_7"),
                  (else_try),(eq,":key",0xe7),(str_store_string,s13,"@mouse_button_8"),
                  (else_try),(eq,":key",0xee),(str_store_string,s13,"@mouse_scroll_up"),
                  (else_try),(eq,":key",0xef),(str_store_string,s13,"@mouse_scroll_down"),
                (else_try),(str_store_string,s13,"@N/A"),(try_end),
              ]),
              
              #script_get_all_binds - code from Expanded Gameplay III
              #output s14 s15 s16 ....
              ("get_all_binds",
                [
                  
                  (str_clear, s13),(str_clear, s14),(str_clear, s15),(str_clear, s16),(str_clear, s17),
                  (str_clear, s18),(str_clear, s19),(str_clear, s20),(str_clear, s21),(str_clear, s22),
                  (str_clear, s23),
                  
                  # (call_script,"script_get_key","$help_key"),
                  # (str_store_string,s14,s13),
                  
                  (call_script,"script_get_key","$crouch_key"),
                  (str_store_string,s15,s13),
                  
                  (call_script,"script_get_key","$toggle_weapon_key"),
                  (str_store_string,s16,s13),
                  
                  (call_script,"script_get_key","$helmet_view_key"),
                  (str_store_string,s17,s13),
                  
                  (call_script,"script_get_key","$jetpack_key"),
                  (str_store_string,s18,s13),
                  
                  #(call_script,"script_get_key","$warcry_key"),
                  #(str_store_string,s19,s13),
                  
                  (call_script,"script_get_key","$bacta_injector_key"),
                  (str_store_string,s20,s13),
                  
                  #(call_script,"script_get_key","$binoculars_key"),
                  #(str_store_string,s21,s13),
                  
                  (call_script,"script_get_key","$deathcam_forward_key"),
                  (str_store_string,s22,s13),
                  
                  (call_script,"script_get_key","$deathcam_backward_key"),
                  (str_store_string,s23,s13),
              ]),
              
              #random scene encounters by Flanged (modified by HokieBT)
              ("setup_spaceship_slots",
                [
                  
                  #--------------------------------- EMPIRE ------------------------------------------------------------------------------------------------------------------------
                  #tie_fighter
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_name, "str_spaceship_tie_fighter_name"),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_price, 17000),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_desc, "str_spaceship_tie_fighter_desc"),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_icon, "icon_tie_fighter"),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_base_speed, 85),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_drive_min, 2),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_drive_max, 5),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_scanner_max, 2),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_combat_computer_max, 2),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_troop_capacity_min, 0),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_troop_capacity_max, 0),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_medical_bay_max, 0),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_prisoner_capacity_min, 0),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_prisoner_capacity_max, 0),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_cargo_capacity_min, 0),
                  (party_set_slot, "p_spaceship_tie_fighter", slot_spaceship_cargo_capacity_max, 0),
                  #imperial shuttle
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_name, "str_spaceship_imperial_shuttle_name"),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_price, 30000),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_desc, "str_spaceship_imperial_shuttle_desc"),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_icon, "icon_imperial_shuttle"),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_base_speed, 81),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_drive_min, 2),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_drive_max, 4),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_scanner_max, 3),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_combat_computer_max, 3),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_troop_capacity_min, 1),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_troop_capacity_max, 3),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_medical_bay_min, 1),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_medical_bay_max, 2),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_prisoner_capacity_min, 0),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_prisoner_capacity_max, 0),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_cargo_capacity_min, 0),
                  (party_set_slot, "p_spaceship_imperial_shuttle", slot_spaceship_cargo_capacity_max, 0),
                  #imperial trade frigate
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_name, "str_spaceship_imperial_trade_frigate_name"),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_price, 48000),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_desc, "str_spaceship_imperial_trade_frigate_desc"),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_icon, "icon_imperial_trade_frigate"),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_base_speed, 70),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_drive_min, 1),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_drive_max, 4),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_scanner_max, 2),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_combat_computer_max, 2),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_troop_capacity_min, 1),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_troop_capacity_max, 4),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_medical_bay_max, 0),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_prisoner_capacity_min, 1),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_prisoner_capacity_max, 3),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_trade_computer_min, 1),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_trade_computer_max, 5),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_cargo_capacity_min, 1),
                  (party_set_slot, "p_spaceship_imperial_trade_frigate", slot_spaceship_cargo_capacity_max, 5),
                  #imperial_dreadnaught_frigate
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_name, "str_spaceship_imperial_dreadnaught_frigate_name"),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_price, 60000),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_desc, "str_spaceship_imperial_dreadnaught_frigate_desc"),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_icon, "icon_imperial_dreadnaught_frigate"),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_base_speed, 60),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_drive_min, 1),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_drive_max, 3),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_scanner_max, 2),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_combat_computer_max, 3),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_troop_capacity_min, 1),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_troop_capacity_max, 3),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_medical_bay_max, 1),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_prisoner_capacity_min, 1),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_prisoner_capacity_max, 2),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_cargo_capacity_min, 1),
                  (party_set_slot, "p_spaceship_imperial_dreadnaught_frigate", slot_spaceship_cargo_capacity_max, 3),
                  #imperial victory-II frigate
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_name, "str_spaceship_imperial_victory_c2_frigate_name"),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_price, 90000),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_desc, "str_spaceship_imperial_victory_c2_frigate_desc"),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_icon, "icon_imperial_victory_c2_frigate"),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_base_speed, 60),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_drive_min, 1),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_drive_max, 3),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_scanner_max, 3),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_combat_computer_max, 3),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_troop_capacity_min, 1),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_troop_capacity_max, 3),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_medical_bay_max, 1),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_prisoner_capacity_min, 1),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_prisoner_capacity_max, 3),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_cargo_capacity_min, 1),
                  (party_set_slot, "p_spaceship_imperial_victory_c2_frigate", slot_spaceship_cargo_capacity_max, 4),
                  #imperial star destroyer
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_name, "str_spaceship_imperial_star_destroyer_name"),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_price, 170000),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_desc, "str_spaceship_imperial_star_destroyer_desc"),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_icon, "icon_imperial_star_destroyer"),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_base_speed, 63),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_drive_min, 1),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_drive_max, 3),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_scanner_max, 3),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_combat_computer_min, 2),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_combat_computer_max, 4),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_troop_capacity_min, 2),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_troop_capacity_max, 5),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_medical_bay_min, 1),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_medical_bay_max, 2),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_prisoner_capacity_min, 2),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_prisoner_capacity_max, 4),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_cargo_capacity_min, 2),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer", slot_spaceship_cargo_capacity_max, 5),
                  #imperial star destroyer interdictor
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_name, "str_spaceship_imperial_star_destroyer_interdictor_name"),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_price, 150000),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_desc, "str_spaceship_imperial_star_destroyer_interdictor_desc"),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_icon, "icon_imperial_star_destroyer_interdictor"),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_base_speed, 65),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_drive_min, 1),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_drive_max, 4),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_scanner_max, 4),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_combat_computer_min, 2),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_combat_computer_max, 5),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_troop_capacity_min, 2),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_troop_capacity_max, 6),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_medical_bay_min, 1),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_medical_bay_max, 2),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_prisoner_capacity_min, 2),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_prisoner_capacity_max, 4),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_cargo_capacity_min, 0),
                  (party_set_slot, "p_spaceship_imperial_star_destroyer_interdictor", slot_spaceship_cargo_capacity_max, 0),
                  #--------------------------------- REBEL ------------------------------------------------------------------------------------------------------------------------
                  #a_wing
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_name, "str_spaceship_a_wing_name"),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_price, 25500),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_desc, "str_spaceship_a_wing_desc"),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_icon, "icon_a_wing"),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_base_speed, 96),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_drive_min, 3),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_drive_max, 6),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_scanner_max, 3),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_combat_computer_max, 2),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_troop_capacity_min, 0),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_troop_capacity_max, 0),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_medical_bay_max, 0),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_prisoner_capacity_min, 0),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_prisoner_capacity_max, 0),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_cargo_capacity_min, 0),
                  (party_set_slot, "p_spaceship_a_wing", slot_spaceship_cargo_capacity_max, 0),
                  #x_wing
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_name, "str_spaceship_x_wing_name"),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_price, 19800),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_desc, "str_spaceship_x_wing_desc"),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_icon, "icon_x_wing"),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_base_speed, 88),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_drive_min, 2),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_drive_max, 5),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_scanner_max, 2),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_combat_computer_min, 2),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_combat_computer_max, 3),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_troop_capacity_min, 0),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_troop_capacity_max, 0),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_medical_bay_max, 0),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_prisoner_capacity_min, 0),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_prisoner_capacity_max, 0),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_cargo_capacity_min, 0),
                  (party_set_slot, "p_spaceship_x_wing", slot_spaceship_cargo_capacity_max, 0),
                  #y_wing
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_name, "str_spaceship_y_wing_name"),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_price, 27000),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_desc, "str_spaceship_y_wing_desc"),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_icon, "icon_y_wing"),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_base_speed, 90),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_drive_min, 2),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_drive_max, 5),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_scanner_max, 3),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_combat_computer_max, 4),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_troop_capacity_min, 0),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_troop_capacity_max, 0),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_medical_bay_max, 0),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_prisoner_capacity_min, 0),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_prisoner_capacity_max, 0),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_cargo_capacity_min, 0),
                  (party_set_slot, "p_spaceship_y_wing", slot_spaceship_cargo_capacity_max, 0),
                  #corellian_gunship
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_name, "str_spaceship_corellian_gunship_name"),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_price, 84000),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_desc, "str_spaceship_corellian_gunship_desc"),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_icon, "icon_corellian_gunship"),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_base_speed, 75),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_drive_min, 2),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_drive_max, 4),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_scanner_min, 2),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_scanner_max, 4),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_combat_computer_min, 2),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_combat_computer_max, 4),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_troop_capacity_min, 0),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_troop_capacity_max, 0),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_medical_bay_max, 1),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_prisoner_capacity_min, 0),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_prisoner_capacity_max, 0),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_cargo_capacity_min, 0),
                  (party_set_slot, "p_spaceship_corellian_gunship", slot_spaceship_cargo_capacity_max, 1),
                  #corellian_corvette
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_name, "str_spaceship_corellian_corvette_name"),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_price, 54000),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_desc, "str_spaceship_corellian_corvette_desc"),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_icon, "icon_corellian_corvette"),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_base_speed, 75),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_drive_min, 2),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_drive_max, 4),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_scanner_max, 3),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_combat_computer_max, 3),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_troop_capacity_min, 1),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_troop_capacity_max, 3),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_medical_bay_min, 1),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_medical_bay_max, 3),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_prisoner_capacity_min, 0),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_prisoner_capacity_max, 0),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_cargo_capacity_min, 1),
                  (party_set_slot, "p_spaceship_corellian_corvette", slot_spaceship_cargo_capacity_max, 2),
                  #rebel transport
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_name, "str_spaceship_rebel_transport_name"),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_price, 70000),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_desc, "str_spaceship_rebel_transport_desc"),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_icon, "icon_rebel_transport"),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_base_speed, 65),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_drive_min, 1),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_drive_max, 4),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_scanner_max, 4),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_combat_computer_max, 4),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_troop_capacity_min, 1),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_troop_capacity_max, 4),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_medical_bay_min, 1),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_medical_bay_max, 2),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_prisoner_capacity_min, 0),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_prisoner_capacity_max, 0),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_trade_computer_min, 1),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_trade_computer_max, 4),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_cargo_capacity_min, 1),
                  (party_set_slot, "p_spaceship_rebel_transport", slot_spaceship_cargo_capacity_max, 4),
                  #moncal_cruiser
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_name, "str_spaceship_moncal_cruiser_name"),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_price, 96000),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_desc, "str_spaceship_moncal_cruiser_desc"),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_icon, "icon_moncal_cruiser"),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_base_speed, 70),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_drive_min, 2),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_drive_max, 5),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_scanner_min, 2),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_scanner_max, 5),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_combat_computer_min, 2),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_combat_computer_max, 5),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_troop_capacity_min, 2),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_troop_capacity_max, 4),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_medical_bay_min, 1),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_medical_bay_max, 5),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_prisoner_capacity_min, 1),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_prisoner_capacity_max, 2),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_cargo_capacity_min, 0),
                  (party_set_slot, "p_spaceship_moncal_cruiser", slot_spaceship_cargo_capacity_max, 3),
                  #--------------------------------- HUTT ------------------------------------------------------------------------------------------------------------------------
                  #hutt_patrol
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_name, "str_spaceship_hutt_patrol_name"),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_price, 21000),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_desc, "str_spaceship_hutt_patrol_desc"),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_icon, "icon_hutt_patrol"),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_base_speed, 88),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_drive_min, 2),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_drive_max, 5),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_scanner_max, 3),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_combat_computer_max, 2),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_troop_capacity_min, 1),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_troop_capacity_max, 2),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_medical_bay_max, 0),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_prisoner_capacity_min, 1),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_prisoner_capacity_max, 2),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_cargo_capacity_min, 0),
                  (party_set_slot, "p_spaceship_hutt_patrol", slot_spaceship_cargo_capacity_max, 0),
                  #hutt_trade
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_name, "str_spaceship_hutt_trade_name"),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_price, 42000),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_desc, "str_spaceship_hutt_trade_desc"),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_icon, "icon_hutt_trade"),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_base_speed, 55),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_drive_min, 1),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_drive_max, 4),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_scanner_min, 0),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_scanner_max, 0),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_combat_computer_min, 0),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_combat_computer_max, 0),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_troop_capacity_min, 1),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_troop_capacity_max, 4),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_medical_bay_max, 0),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_prisoner_capacity_min, 1),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_prisoner_capacity_max, 4),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_trade_computer_min, 2),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_trade_computer_max, 6),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_cargo_capacity_min, 2),
                  (party_set_slot, "p_spaceship_hutt_trade", slot_spaceship_cargo_capacity_max, 6),
                  #hutt_frigate_mk1
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_name, "str_spaceship_hutt_frigate_mk1_name"),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_price, 45000),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_desc, "str_spaceship_hutt_frigate_mk1_desc"),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_icon, "icon_hutt_frigate_mk1"),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_base_speed, 63),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_drive_min, 1),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_drive_max, 3),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_scanner_max, 2),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_combat_computer_max, 2),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_troop_capacity_min, 1),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_troop_capacity_max, 3),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_medical_bay_max, 0),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_prisoner_capacity_min, 1),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_prisoner_capacity_max, 3),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_trade_computer_min, 1),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_trade_computer_max, 3),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_cargo_capacity_min, 1),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk1", slot_spaceship_cargo_capacity_max, 3),
                  #hutt_frigate_mk2
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_name, "str_spaceship_hutt_frigate_mk2_name"),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_price, 60000),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_desc, "str_spaceship_hutt_frigate_mk2_desc"),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_icon, "icon_hutt_frigate_mk2"),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_base_speed, 63),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_drive_min, 1),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_drive_max, 4),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_scanner_max, 3),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_combat_computer_max, 3),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_troop_capacity_min, 1),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_troop_capacity_max, 4),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_medical_bay_max, 0),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_prisoner_capacity_min, 1),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_prisoner_capacity_max, 4),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_trade_computer_min, 1),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_trade_computer_max, 3),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_cargo_capacity_min, 1),
                  (party_set_slot, "p_spaceship_hutt_frigate_mk2", slot_spaceship_cargo_capacity_max, 3),
                  #hutt cruiser
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_name, "str_spaceship_hutt_cruiser_name"),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_price, 67500),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_desc, "str_spaceship_hutt_cruiser_desc"),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_icon, "icon_hutt_cruiser"),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_base_speed, 63),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_drive_min, 1),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_drive_max, 4),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_scanner_max, 3),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_combat_computer_max, 3),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_troop_capacity_min, 1),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_troop_capacity_max, 3),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_medical_bay_min, 1),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_medical_bay_max, 2),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_prisoner_capacity_min, 1),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_prisoner_capacity_max, 5),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_trade_computer_min, 3),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_trade_computer_max, 5),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_cargo_capacity_min, 3),
                  (party_set_slot, "p_spaceship_hutt_cruiser", slot_spaceship_cargo_capacity_max, 5),
                  #--------------------------------- OTHER ------------------------------------------------------------------------------------------------------------------------
                  #civilian_transport
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_name, "str_spaceship_civilian_transport_name"),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_price, 10500),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_desc, "str_spaceship_civilian_transport_desc"),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_icon, "icon_civilian_transport"),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_base_speed, 75),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_drive_min, 1),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_drive_max, 3),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_scanner_max, 2),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_combat_computer_min, 0),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_combat_computer_max, 0),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_troop_capacity_min, 0),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_troop_capacity_max, 0),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_medical_bay_min, 1),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_medical_bay_max, 2),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_prisoner_capacity_min, 0),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_prisoner_capacity_max, 0),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_trade_computer_min, 1),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_trade_computer_max, 2),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_cargo_capacity_min, 1),
                  (party_set_slot, "p_spaceship_civilian_transport", slot_spaceship_cargo_capacity_max, 2),
                  #civilian_cruiser
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_name, "str_spaceship_civilian_cruiser_name"),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_price, 30000),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_desc, "str_spaceship_civilian_cruiser_desc"),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_icon, "icon_civilian_cruiser"),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_base_speed, 55),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_drive_min, 1),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_drive_max, 3),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_scanner_max, 2),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_combat_computer_min, 0),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_combat_computer_max, 0),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_troop_capacity_min, 1),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_troop_capacity_max, 2),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_medical_bay_max, 0),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_prisoner_capacity_min, 0),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_prisoner_capacity_max, 0),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_trade_computer_min, 1),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_trade_computer_max, 3),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_cargo_capacity_min, 1),
                  (party_set_slot, "p_spaceship_civilian_cruiser", slot_spaceship_cargo_capacity_max, 3),
                  #z95
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_name, "str_spaceship_z95_name"),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_price, 18000),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_desc, "str_spaceship_z95_desc"),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_icon, "icon_z95"),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_base_speed, 91),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_drive_min, 3),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_drive_max, 5),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_scanner_max, 3),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_combat_computer_max, 2),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_troop_capacity_min, 0),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_troop_capacity_max, 0),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_medical_bay_max, 0),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_prisoner_capacity_min, 0),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_prisoner_capacity_max, 0),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_cargo_capacity_min, 0),
                  (party_set_slot, "p_spaceship_z95", slot_spaceship_cargo_capacity_max, 0),
                  #scyk_fighter
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_name, "str_spaceship_scyk_fighter_name"),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_price, 16500),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_desc, "str_spaceship_scyk_fighter_desc"),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_icon, "icon_scyk_fighter"),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_base_speed, 92),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_drive_min, 2),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_drive_max, 5),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_scanner_max, 3),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_combat_computer_max, 2),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_troop_capacity_min, 0),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_troop_capacity_max, 0),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_medical_bay_max, 0),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_prisoner_capacity_min, 0),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_prisoner_capacity_max, 0),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_cargo_capacity_min, 0),
                  (party_set_slot, "p_spaceship_scyk_fighter", slot_spaceship_cargo_capacity_max, 0),
                  #mercenary_shuttle
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_name, "str_spaceship_mercenary_shuttle_name"),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_price, 12000),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_desc, "str_spaceship_mercenary_shuttle_desc"),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_icon, "icon_mercenary_shuttle"),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_base_speed, 80),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_drive_min, 1),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_drive_max, 3),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_scanner_max, 2),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_combat_computer_min, 0),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_combat_computer_max, 0),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_troop_capacity_min, 1),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_troop_capacity_max, 2),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_medical_bay_max, 0),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_prisoner_capacity_min, 1),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_prisoner_capacity_max, 2),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_cargo_capacity_min, 1),
                  (party_set_slot, "p_spaceship_mercenary_shuttle", slot_spaceship_cargo_capacity_max, 2),
                  #mercenary_fighter -- t-wing
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_name, "str_spaceship_mercenary_fighter_name"),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_price, 13000),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_desc, "str_spaceship_mercenary_fighter_desc"),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_icon, "icon_mercenary_fighter"),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_base_speed, 88),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_drive_min, 1),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_drive_max, 5),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_scanner_max, 3),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_combat_computer_max, 2),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_troop_capacity_min, 0),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_troop_capacity_max, 0),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_medical_bay_max, 0),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_prisoner_capacity_min, 0),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_prisoner_capacity_max, 0),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_cargo_capacity_min, 0),
                  (party_set_slot, "p_spaceship_mercenary_fighter", slot_spaceship_cargo_capacity_max, 0),
                  #mercenary_raider
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_name, "str_spaceship_mercenary_raider_name"),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_price, 16000),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_desc, "str_spaceship_mercenary_raider_desc"),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_icon, "icon_mercenary_raider"),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_base_speed, 91),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_drive_min, 2),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_drive_max, 4),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_scanner_max, 3),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_combat_computer_max, 3),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_troop_capacity_min, 0),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_troop_capacity_max, 0),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_medical_bay_max, 0),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_prisoner_capacity_min, 2),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_prisoner_capacity_max, 5),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_cargo_capacity_min, 0),
                  (party_set_slot, "p_spaceship_mercenary_raider", slot_spaceship_cargo_capacity_max, 0),
                  #freighter
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_name, "str_spaceship_freighter_name"),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_price, 27000),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_desc, "str_spaceship_freighter_desc"),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_icon, "icon_freighter"),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_base_speed, 63),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_drive_min, 1),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_drive_max, 3),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_scanner_min, 0),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_scanner_max, 0),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_combat_computer_min, 0),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_combat_computer_max, 0),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_troop_capacity_min, 0),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_troop_capacity_max, 0),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_medical_bay_max, 0),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_prisoner_capacity_min, 1),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_prisoner_capacity_max, 2),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_trade_computer_min, 1),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_trade_computer_max, 5),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_cargo_capacity_min, 1),
                  (party_set_slot, "p_spaceship_freighter", slot_spaceship_cargo_capacity_max, 5),
                  #bulk_freighter
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_name, "str_spaceship_bulk_freighter_name"),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_price, 31500),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_desc, "str_spaceship_bulk_freighter_desc"),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_icon, "icon_bulk_freighter"),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_base_speed, 65),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_drive_min, 1),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_drive_max, 4),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_scanner_max, 2),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_combat_computer_min, 0),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_combat_computer_max, 0),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_troop_capacity_min, 0),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_troop_capacity_max, 0),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_medical_bay_max, 0),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_prisoner_capacity_min, 1),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_prisoner_capacity_max, 2),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_trade_computer_min, 1),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_trade_computer_max, 6),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_cargo_capacity_min, 1),
                  (party_set_slot, "p_spaceship_bulk_freighter", slot_spaceship_cargo_capacity_max, 6),
                  #cis_star_cruiser
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_name, "str_spaceship_cis_star_cruiser_name"),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_price, 200000),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_desc, "str_spaceship_cis_star_cruiser_desc"),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_icon, "icon_cis_star_cruiser"),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_base_speed, 50),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_drive_min, 1),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_drive_max, 4),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_scanner_max, 3),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_combat_computer_max, 3),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_troop_capacity_min, 2),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_troop_capacity_max, 6),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_medical_bay_min, 1),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_medical_bay_max, 3),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_prisoner_capacity_min, 1),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_prisoner_capacity_max, 4),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_trade_computer_min, 2),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_trade_computer_max, 4),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_cargo_capacity_min, 2),
                  (party_set_slot, "p_spaceship_cis_star_cruiser", slot_spaceship_cargo_capacity_max, 5),
                  #swy // nebulon
                  #spaceship_nebulon
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_name, "str_spaceship_nebulon_name"),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_price, 95000),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_desc, "str_spaceship_nebulon_desc"),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_icon, "icon_nebulon"),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_base_speed, 60),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_drive_min, 1),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_drive_max, 3),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_scanner_min, 2),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_scanner_max, 4),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_combat_computer_max, 3),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_troop_capacity_min, 2),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_troop_capacity_max, 3),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_medical_bay_min, 1),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_medical_bay_max, 5),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_prisoner_capacity_min, 0),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_prisoner_capacity_max, 2),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_cargo_capacity_min, 1),
                  (party_set_slot, "p_spaceship_nebulon", slot_spaceship_cargo_capacity_max, 2),
                  
                  
                  #spaceship_starchaser
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_name, "str_spaceship_starchaser_name"),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_price, 17000),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_desc, "str_spaceship_starchaser_desc"),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_icon, "icon_starchaser"),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_base_speed, 85),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_drive_min, 3),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_drive_max, 4),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_scanner_min, 1),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_scanner_max, 2),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_combat_computer_min, 1),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_combat_computer_max, 3),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_troop_capacity_min, 2),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_troop_capacity_max, 3),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_medical_bay_min, 0),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_medical_bay_max, 0),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_prisoner_capacity_min, 0),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_prisoner_capacity_max, 2),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_trade_computer_min, 0),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_trade_computer_max, 0),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_cargo_capacity_min, 0),
                  (party_set_slot, "p_spaceship_starchaser", slot_spaceship_cargo_capacity_max, 0),
                  
                  # end of assign slots
                  
              ]),
              
              ####>>>>>>> AI VERSION 3 BY MOTOMATARU
              # script_ranged_avoid_melee by motomataru
              # Input: none
              # Output: none
              #   Note: Uses scripted movement
              ("ranged_avoid_melee", [
                  (try_for_agents, ":agent_no"),
                    (agent_get_class, ":agent_class", ":agent_no"),
                    (eq, ":agent_class", grc_archers),
                    (agent_is_alive, ":agent_no"),
                    (agent_get_team, ":team_no", ":agent_no"),
                    (agent_get_wielded_item, ":item_no", ":agent_no", 0),
                    (try_begin),
                      (neg|is_between, ":item_no", ranged_weapons_begin, ranged_weapons_end),
                      (agent_get_ammo, ":ammo_left", ":agent_no"),
                      (gt, ":ammo_left", 0),
                      (team_get_movement_order, ":ranged_order", ":team_no", grc_archers),
                      (neq, ":ranged_order", mordr_charge),
                      (neq, ":item_no", -1),
                      (assign, ":forced_into_melee", 1),
                    (else_try),
                      (assign, ":forced_into_melee", 0),
                    (try_end),
                    (assign, ":melee_dist", 300),  #distance to back up
                    
                    (try_begin), #already backing up
                      (agent_slot_eq, ":agent_no", slot_agent_is_in_scripted_mode, 1),
                      (agent_get_position, pos1, ":agent_no"),
                      (call_script, "script_get_closest3_distance_of_enemies_at_pos1", ":team_no"),
                      (try_begin),
                        (gt, reg1, 1000), #leave scripted mode only if no enemy within 10m
                        (agent_clear_scripted_mode, ":agent_no"),
                        (agent_set_slot, ":agent_no",  slot_agent_is_in_scripted_mode, 0),
                      (else_try),
                        (le, reg1, ":melee_dist"),
                        (store_mul, ":back_up", ":melee_dist", -1),
                        (position_move_y, pos1, ":back_up", 0),
                        (agent_set_scripted_destination, ":agent_no", pos1, 1),
                      (try_end),
                    (else_try),
                      (eq, ":forced_into_melee", 1),
                      (agent_get_position, pos1, ":agent_no"),
                      (store_mul, ":back_up", ":melee_dist", -1),
                      (position_move_y, pos1, ":back_up", 0),
                      (agent_set_scripted_destination, ":agent_no", pos1, 1),
                      (agent_set_slot, ":agent_no",  slot_agent_is_in_scripted_mode, 1),
                    (try_end),
                  (try_end)
              ]),
              
              # script_ranged_avoid_melee by motomataru - modified by kham
              # Input: none
              # Output: none
              #   Note: Uses scripted movement
              ("new_ranged_avoid_melee", [

                  (set_fixed_point_multiplier, 1),
                  (get_scene_boundaries, pos2, pos3),
                  (position_get_x, ":bound_right", pos2),
                  (position_get_y, ":bound_top", pos2),
                  (position_get_x, ":bound_left", pos3),
                  (position_get_y, ":bound_bottom", pos3),

                  (try_for_agents, ":agent_no"),
                    (agent_is_active, ":agent_no"),
                    (agent_is_human, ":agent_no"),
                    (agent_get_class, ":agent_class", ":agent_no"),
                    (eq, ":agent_class", grc_archers),
                    (agent_slot_eq, ":agent_no", slot_agent_is_running_away, 0), #Is not routing or ordered to retreat
                    (agent_is_alive, ":agent_no"),
                    (agent_get_team, ":team_no", ":agent_no"),
                    (agent_get_wielded_item, ":item_no", ":agent_no", 0),
                    
                    (try_begin),
                      (neg|is_between, ":item_no", ranged_weapons_begin, ranged_weapons_end),
                      (agent_get_ammo, ":ammo_left", ":agent_no"),
                      (gt, ":ammo_left", 0),
                      (team_get_movement_order, ":ranged_order", ":team_no", grc_archers),
                      (neq, ":ranged_order", mordr_charge),
                      (neq, ":item_no", -1),
                      (assign, ":forced_into_melee", 1),
                    (else_try),
                      (assign, ":forced_into_melee", 0),
                    (try_end),
                    
                    (agent_get_position, pos1, ":agent_no"),
                    (position_get_x, ":agent_x", pos1),
                    (position_get_y, ":agent_y", pos1),
                    (store_sub, ":dist_right", ":agent_x", ":bound_right"),
                    (store_sub, ":dist_top", ":agent_y", ":bound_top"),
                    (store_sub, ":dist_left", ":bound_left", ":agent_x"),
                    (store_sub, ":dist_bottom", ":bound_bottom", ":agent_y"),

                    (try_begin), #boundaries
                      (this_or_next|le, ":dist_right", 20),  #Limits accidental routing, of cav in particular
                      (this_or_next|le, ":dist_top", 20),
                      (this_or_next|le, ":dist_left", 20),
                      (le, ":dist_bottom", 20),
                      (agent_stop_running_away, ":agent_no"),
                    (else_try),
                      (call_script, "script_get_closest3_distance_of_enemies_at_pos1", ":team_no"),
                      (assign, ":avg_dist", reg0),
                      (assign, ":closest_dist", reg1),
                      (try_begin),
                        (this_or_next|lt, ":avg_dist", skirmish_min_distance),
                        (lt, ":closest_dist", 500), #If enemy group is getting near or an enemy is on top of agent
                        (agent_start_running_away, ":agent_no"),  
                      (else_try),    
                        (ge, ":avg_dist", skirmish_max_distance), #If distance from enemy is (too) large, resume previous order
                        (agent_stop_running_away, ":agent_no"),         
                      (try_end), #Distance to enemy
                    (else_try),
                     (eq, ":forced_into_melee", 1),
                     (this_or_next|lt, ":avg_dist", skirmish_min_distance),
                     (lt, ":closest_dist", 500), #If enemy group is getting near or an enemy is on top of agent
                     (agent_start_running_away, ":agent_no"),  
                    (try_end),
                  (try_end)
              ]),

              
              # script_SW_team_field_ranged_tactics v2 by motomataru
              # Input: AI team, size relative to largest team in %, size relative to battle in %
              # Output: none
              # Used: pos10, pos11, pos60, pos61, pos62, pos63
              ("SW_team_field_ranged_tactics",
                [ (store_script_param, ":team_no", 1),
                  (store_script_param, ":rel_army_size", 2),
                  (store_script_param, ":battle_presence", 3),
                  (call_script, "script_team_average_troop_level", ":team_no"),
                  (store_div, ":level_bump", reg0, 3),
                  (store_random_in_range, ":rand_no", 2, 11),  #10 is max level bump, 2 minimum
                  (store_add, ":decision_index", ":battle_presence", ":level_bump"),   #decision w.r.t. all enemy teams
                  (val_sub, ":decision_index", ":rand_no"),
                  
                  (try_begin),
                    (gt, ":decision_index", 80),   #outnumber enemies more than 4:1?
                    (team_give_order, ":team_no", grc_archers, mordr_charge),
                  (else_try),
                    (gt, "$cur_casualties", 0),
                    (eq, "$cur_casualties", "$prev_casualties"),  #no new casualties since last function call?
                    (team_give_order, ":team_no", grc_archers, mordr_advance),
                  (else_try),
                    (call_script, "script_cf_team_get_average_position_of_agents_with_type_to_pos1", ":team_no", grc_archers),
                    (copy_position, pos61, pos1),
                    (store_add, ":decision_index", ":rel_army_size", ":level_bump"),   #decision w.r.t. largest enemy team
                    (val_sub, ":decision_index", ":rand_no"),
                    (assign, ":hold_point", 50),   #outnumbered 1:2
                    (try_begin),
                      (this_or_next|ge, ":decision_index", ":hold_point"), #army large enough to advance OR
                      (eq, "$cur_casualties", 0),  #initial setup?
                      (call_script, "script_team_get_average_position_of_enemies", ":team_no"),
                      (copy_position, pos60, pos0),
                      (position_transform_position_to_local, pos62, pos61, pos60), #pos62 = vector to enemy
                      (position_normalize_origin, ":distance_to_enemy", pos62),
                      (convert_from_fixed_point, ":distance_to_enemy"),
                      
                      (try_begin),
                        (lt, ":decision_index", ":hold_point"),   #outnumbered (initial setup)?
                        (store_div, ":distance_to_move", ":distance_to_enemy", 6),  #middle of rear third of battlefield
                        (assign, ":hill_search_radius", ":distance_to_move"),
                      (else_try),
                        (assign, ":shot_distance", 40),  #intended distance from enemy to set up fire line(m)
                        (store_sub, ":distance_to_move", ":distance_to_enemy", ":shot_distance"),
                        (store_div, ":hill_search_radius", ":shot_distance", 3), #limit so as not to run into enemy
                        
                        (store_add, ":scale_factor", 100, ":hold_point"),
                        (store_mul, ":battle_hold_point", ":hold_point", 100),
                        (val_div, ":battle_hold_point", ":scale_factor"),
                        (store_sub, ":advance_more_point", 100, ":battle_hold_point"),
                        (try_begin),
                          (lt, ":battle_presence", ":advance_more_point"), #expect to meet halfway?
                          (val_div, ":distance_to_move", 2),
                        (try_end),
                      (try_end),
                      
                      (position_get_x, ":dir_x", pos62),
                      (position_get_y, ":dir_y", pos62),
                      (val_mul, ":dir_x", ":distance_to_move"),
                      (val_mul, ":dir_y", ":distance_to_move"),
                      (position_set_x, pos62, ":dir_x"),
                      (position_set_y, pos62, ":dir_y"),
                      (position_transform_position_to_parent, pos63, pos61, pos62),
                      (position_set_z_to_ground_level, pos63),
                      (copy_position, pos61, pos63),
                      
                      (try_begin),  #first position find high ground
                        (eq, "$cur_casualties", 0),
                        (copy_position, pos1, pos61),
                        (assign, reg0, ":hill_search_radius"),
                        (call_script, "script_find_high_ground_around_pos1_corrected", reg0),
                        (copy_position, pos61, pos10),
                      (try_end),
                    (try_end),
                    
                    (team_give_order, ":team_no", grc_archers, mordr_hold),
                    (team_set_order_position, ":team_no", grc_archers, pos61),
                  (try_end)
              ]),
              
              
              # script_SW_team_field_melee_tactics by motomataru
              # Input: AI team, size relative to largest team in %, size relative to battle in %
              # Output: none
              # Used: pos10, pos11, pos60, pos61, pos62, pos63
              ("SW_team_field_melee_tactics", [
                  (store_script_param, ":team_no", 1),
                  #  (store_script_param, ":rel_army_size", 2),
                  (store_script_param, ":battle_presence", 3),
                  (call_script, "script_team_get_class_percentages", ":team_no", 0),
                  (assign, ":ai_perc_infantry", reg0),
                  (assign, ":ai_perc_cavalry", reg2),
                  (store_mul, ":portion_cavalry", ":ai_perc_cavalry", ":battle_presence"),
                  (val_div, ":portion_cavalry", 100),
                  (store_sub, ":rel_enemy_size", 100, ":battle_presence"),
                  
                  #find closest distance of enemy to infantry, cavalry troops
                  (assign, ":melee_range", 2000),  #start melee regardless if enemy within 20m
                  (store_add, ":inf_closest_dist", ":melee_range", 1),
                  (store_add, ":cav_closest_dist", ":melee_range", 1),
                  (try_for_agents, ":cur_agent"),
                    (agent_is_alive, ":cur_agent"),
                    (agent_is_human, ":cur_agent"),
                    (agent_get_team, ":cur_team_no", ":cur_agent"),
                    (eq, ":cur_team_no", ":team_no"),
                    (agent_get_class, ":cur_class_no", ":cur_agent"),
                    (try_begin),
                      (eq, ":cur_class_no", grc_infantry),
                      (agent_get_position, pos1, ":cur_agent"),
                      (call_script, "script_get_closest3_distance_of_enemies_at_pos1", ":team_no"),
                      (try_begin),
                        (gt, ":inf_closest_dist", reg1),
                        (assign, ":inf_closest_dist", reg1),
                      (try_end),
                    (else_try),
                      (eq, ":cur_class_no", grc_cavalry),
                      (agent_get_position, pos1, ":cur_agent"),
                      (call_script, "script_get_closest3_distance_of_enemies_at_pos1", ":team_no"),
                      (try_begin),
                        (gt, ":cav_closest_dist", reg1),
                        (assign, ":cav_closest_dist", reg1),
                      (try_end),
                    (try_end),
                  (try_end),
                  
                  (team_get_movement_order, ":ranged_order", ":team_no", grc_archers),
                  (team_get_order_position, pos0, ":team_no", grc_archers),
                  
                  #cavalry AI
                  (try_begin),
                    (eq, "$cur_casualties", 0),
                    (lt, ":portion_cavalry", ":rel_enemy_size"),
                    (gt, ":cav_closest_dist", ":melee_range"),
                    (neq, ":ranged_order", mordr_charge),
                    (team_give_order, ":team_no", grc_cavalry, mordr_hold),
                    (team_set_order_position, ":team_no", grc_cavalry, pos0),
                  (else_try), #fighting started or more cavalry than enemy or enemy within melee or everyone's charging
                    (team_give_order, ":team_no", grc_cavalry, mordr_charge),
                  (try_end),
                  
                  #infantry AI
                  (try_begin),
                    (lt, ":portion_cavalry", ":rel_enemy_size"),
                    (gt, ":inf_closest_dist", ":melee_range"),
                    (neq, ":ranged_order", mordr_charge),
                    (try_begin),
                      (gt, "$cur_casualties", 0),
                      (gt, ":ai_perc_infantry", 33), #more than 1/3 infantry?
                      (team_give_order, ":team_no", grc_infantry, mordr_charge),
                    (else_try),
                      (team_set_order_position, ":team_no", grc_infantry, pos0),
                      (team_give_order, ":team_no", grc_infantry, mordr_fall_back),
                    (try_end),
                  (else_try), #more cavalry than enemy or enemy within melee or everyone's charging
                    (team_give_order, ":team_no", grc_infantry, mordr_charge),
                  (try_end)
              ]),
              
              
              # script_SW_field_tactics v3 by motomataru
              # Input: flag 1 to include ranged
              # Output: none
              ("SW_field_tactics",
                [ (store_script_param, ":include_ranged", 1),
                  #measure teams
                  (assign, ":battle_size", 0),
                  (assign, ":team0_size", 0),
                  (assign, ":team1_size", 0),
                  (assign, ":team2_size", 0),
                  (assign, ":team3_size", 0),
                  (assign, ":team4_size", 0),
                  (assign, ":team5_size", 0),   #max 6 teams handled
                  (try_for_agents, ":cur_agent"),
                    (agent_get_team, ":agent_team", ":cur_agent"),
                    (try_begin),
                      (agent_is_alive, ":cur_agent"),
                      (agent_is_human, ":cur_agent"),
                      (val_add, ":battle_size", 1),
                      (try_begin),
                        (eq, ":agent_team", 0),
                        (val_add, ":team0_size", 1),
                      (else_try),
                        (eq, ":agent_team", 1),
                        (val_add, ":team1_size", 1),
                      (else_try),
                        (eq, ":agent_team", 2),
                        (val_add, ":team2_size", 1),
                      (else_try),
                        (eq, ":agent_team", 3),
                        (val_add, ":team3_size", 1),
                      (else_try),
                        (eq, ":agent_team", 4),
                        (val_add, ":team4_size", 1),
                      (else_try),
                        (eq, ":agent_team", 5),
                        (val_add, ":team5_size", 1),
                      (else_try),
                        (display_message, "@too many teams for AI"),
                      (try_end),
                    (try_end),
                  (try_end),
                  
                  #find largest team size
                  (get_player_agent_no, ":player_agent"),
                  (agent_get_team, ":player_team", ":player_agent"),
                  (assign, ":num_teams", 2),
                  (assign, ":largest_team_size", ":team0_size"),
                  (try_begin),
                    (lt, ":largest_team_size", ":team1_size"),
                    (assign, ":largest_team_size", ":team1_size"),
                  (try_end),
                  (try_begin),
                    (gt, ":team2_size", 0),
                    (assign, ":num_teams", 3),
                    (try_begin),
                      (neg|teams_are_enemies, 2, ":player_team"),
                      (val_add, ":team2_size", ":team0_size"), #ally 2 takes player team 0 into account
                    (try_end),
                    (lt, ":largest_team_size", ":team2_size"),
                    (assign, ":largest_team_size", ":team2_size"),
                  (try_end),
                  (try_begin),
                    (gt, ":team3_size", 0),
                    (assign, ":num_teams", 4),
                    (try_begin),
                      (neg|teams_are_enemies, 3, ":player_team"),
                      (val_add, ":team3_size", ":team1_size"), #ally 3 takes player team 1 into account
                    (try_end),
                    (lt, ":largest_team_size", ":team3_size"),
                    (assign, ":largest_team_size", ":team3_size"),
                  (try_end),
                  (try_begin),
                    (gt, ":team4_size", 0),
                    (assign, ":num_teams", 5),
                    (lt, ":largest_team_size", ":team4_size"),
                    (assign, ":largest_team_size", ":team4_size"),
                  (try_end),
                  (try_begin),
                    (gt, ":team5_size", 0),
                    (assign, ":num_teams", 6),
                    (lt, ":largest_team_size", ":team5_size"),
                    (assign, ":largest_team_size", ":team5_size"),
                  (try_end),
                  
                  #apply tactics to every AI team
                  (try_for_range, ":ai_team", 0, ":num_teams"),
                    (assign, ":ai_team_size", 0),
                    (try_begin),
                      (eq, ":ai_team", 0),
                      (assign, ":ai_team_size", ":team0_size"),
                    (else_try),
                      (eq, ":ai_team", 1),
                      (assign, ":ai_team_size", ":team1_size"),
                    (else_try),
                      (eq, ":ai_team", 2),
                      (assign, ":ai_team_size", ":team2_size"),
                    (else_try),
                      (eq, ":ai_team", 3),
                      (assign, ":ai_team_size", ":team3_size"),
                    (else_try),
                      (eq, ":ai_team", 4),
                      (assign, ":ai_team_size", ":team4_size"),
                    (else_try),
                      (eq, ":ai_team", 5),
                      (assign, ":ai_team_size", ":team5_size"),
                    (try_end),
                    
                    (try_begin),
                      (gt, ":ai_team_size", 0),
                      (neg|eq, ":ai_team", ":player_team"),
                      (val_mul, ":ai_team_size", 100),
                      (store_div, ":team_percentage", ":ai_team_size", ":largest_team_size"),
                      (store_div, ":team_battle_presence", ":ai_team_size", ":battle_size"),
                      (try_begin),
                        (eq, ":include_ranged", 1),
                        (call_script, "script_SW_team_field_ranged_tactics", ":ai_team", ":team_percentage", ":team_battle_presence"),
                      (try_end),
                      (call_script, "script_SW_team_field_melee_tactics", ":ai_team", ":team_percentage", ":team_battle_presence"),
                    (try_end),
                  (try_end),
                  
                  (try_begin),
                    (eq, ":include_ranged", 1),
                    (assign, "$prev_casualties", "$cur_casualties"),
                  (try_end)
              ]),
              
              
              
              ####>>>>>>>  AI VERSION 2 BY MOTOMATARU
              # script_find_high_ground_around_pos1_corrected by motomataru
              # Input: pos1 should hold center_position_no
              #        arg1: search_radius (in meters)
              # Output: pos10 contains highest ground within a <search_radius> meter square around pos1
              # Also uses position registers: pos11
              ("find_high_ground_around_pos1_corrected",
                [
                  (store_script_param, ":search_radius", 1),
                  (val_mul, ":search_radius", 100),
                  (get_scene_boundaries, pos10,pos11),
                  (set_fixed_point_multiplier, 100),
                  (position_get_x, ":o_x", pos1),
                  (position_get_y, ":o_y", pos1),
                  (store_sub, ":min_x", ":o_x", ":search_radius"),
                  (store_sub, ":min_y", ":o_y", ":search_radius"),
                  (store_add, ":max_x", ":o_x", ":search_radius"),
                  (store_add, ":max_y", ":o_y", ":search_radius"),
                  (position_get_x, ":scene_min_x", pos10),
                  (position_get_x, ":scene_max_x", pos11),
                  (position_get_y, ":scene_min_y", pos10),
                  (position_get_y, ":scene_max_y", pos11),
                  (val_max, ":min_x", ":scene_min_x"),
                  (val_max, ":min_y", ":scene_min_y"),
                  (val_min, ":max_x", ":scene_max_x"),
                  (val_min, ":max_y", ":scene_max_y"),
                  
                  (store_div, ":min_x_meters", ":min_x", 100),
                  (store_div, ":min_y_meters", ":min_y", 100),
                  (store_div, ":max_x_meters", ":max_x", 100),
                  (store_div, ":max_y_meters", ":max_y", 100),
                  
                  (assign, ":highest_pos_z", -10000),
                  (copy_position, pos10, pos1),
                  (init_position, pos11),
                  
                  (try_for_range, ":i_x", ":min_x_meters", ":max_x_meters"),
                    (store_mul, ":i_x_cm", ":i_x", 100),
                    (try_for_range, ":i_y", ":min_y_meters", ":max_y_meters"),
                      (store_mul, ":i_y_cm", ":i_y", 100),
                      (position_set_x, pos11, ":i_x_cm"),
                      (position_set_y, pos11, ":i_y_cm"),
                      (position_set_z, pos11, 10000),
                      (position_set_z_to_ground_level, pos11),
                      (position_get_z, ":cur_pos_z", pos11),
                      (try_begin),
                        (gt, ":cur_pos_z", ":highest_pos_z"),
                        (copy_position, pos10, pos11),
                        (assign, ":highest_pos_z", ":cur_pos_z"),
                      (try_end),
                    (try_end),
                  (try_end),
              ]),
              
              
              # script_team_average_troop_level by motomataru
              # Input: arg1 = team_no
              # Output: reg0 = average troop level for team, reg1 = team current count
              ("team_average_troop_level",
                [ (store_script_param_1, ":team_no"),
                  (assign, ":total_level", 0),
                  (assign, ":num_troop", 0),
                  (try_for_agents, ":cur_agent"),
                    (agent_get_team, ":agent_team", ":cur_agent"),
                    (eq, ":team_no", ":agent_team"),
                    (agent_is_human, ":cur_agent"),
                    (agent_is_alive, ":cur_agent"),
                    (agent_get_troop_id, ":cur_troop", ":cur_agent"),
                    (store_character_level, ":cur_level", ":cur_troop"),
                    (val_add, ":total_level", ":cur_level"),
                    (val_add, ":num_troop", 1),
                  (try_end),
                  (store_div, ":average_level", ":total_level", ":num_troop"),
                  (assign, reg0, ":average_level"),
                  (assign, reg1, ":num_troop"),
              ]),
              
              
              # script_cf_count_casualties by motomataru
              # Input: none
              # Output: evalates T/F, reg0 num casualties
              ("cf_count_casualties",
                [ (assign, ":num_casualties", 0),
                  (try_for_agents,":cur_agent"),
                    (try_begin),
                      (neg|agent_is_alive, ":cur_agent"),
                      (val_add, ":num_casualties", 1),
                    (else_try),
                      (agent_is_wounded, ":cur_agent"),
                      (val_add, ":num_casualties", 1),
                    (try_end),
                  (try_end),
                  (assign, reg0, ":num_casualties"),
                  (gt, ":num_casualties", 0)
              ]),
              
              
              # script_SW_team_field_ranged_tactics by motomataru
              # Input: AI team, size relative to largest team in %, size relative to battle in %
              # Output: none
              # Used: pos10, pos11, pos60, pos61, pos62, pos63
              ("SW_team_field_ranged_tactics",
                [ (store_script_param, ":team_no", 1),
                  (store_script_param, ":rel_army_size", 2),
                  (store_script_param, ":battle_presence", 3),
                  (call_script, "script_team_average_troop_level", ":team_no"),
                  (store_div, ":level_bump", reg0, 3),
                  (store_random_in_range, ":rand_no", 2, 11),  #10 is max level bump, 2 minimum
                  (store_add, ":decision_index", ":battle_presence", ":level_bump"),
                  (val_sub, ":decision_index", ":rand_no"),
                  
                  (try_begin),
                    (gt, ":decision_index", 80),   #outnumber enemies more than 4:1?
                    (team_give_order, ":team_no", grc_archers, mordr_charge),
                  (else_try),
                    (assign, ":hold_point", 50),   #outnumbered 1:2
                    (assign, ":shot_distance", 50),   #intended distance from enemy to set up fire line(m)
                    (assign, ":flag_advance", 0),
                    (store_add, ":decision_index", ":rel_army_size", ":level_bump"),
                    (val_sub, ":decision_index", ":rand_no"),
                    
                    #get ranged position
                    (try_begin),
                      (ge, ":decision_index", ":hold_point"),  #army large enough to advance?
                      (call_script, "script_cf_team_get_average_position_of_agents_with_type_to_pos1", ":team_no", grc_archers),
                      (copy_position, pos61, pos1),
                      (call_script, "script_team_get_average_position_of_enemies", ":team_no"),
                      (copy_position, pos60, pos0),
                      (position_transform_position_to_local, pos62, pos61, pos60), #pos62 = vector to enemy
                      (position_normalize_origin, ":distance_to_move", pos62),
                      (convert_from_fixed_point, ":distance_to_move"),
                      (try_begin),
                        (gt, ":distance_to_move", ":shot_distance"), #need to move to closer firing position?
                        (val_sub, ":distance_to_move", ":shot_distance"),
                        (store_add, ":scale_factor", 100, ":hold_point"),
                        (store_mul, ":battle_hold_point", ":hold_point", 100),
                        (val_div, ":battle_hold_point", ":scale_factor"),
                        (store_sub, ":advance_more_point", 100, ":battle_hold_point"),
                        (try_begin),
                          (lt, ":battle_presence", ":advance_more_point"), #expect to meet halfway
                          (val_div, ":distance_to_move", 2),
                        (try_end),
                        (position_get_x, ":dir_x", pos62),
                        (position_get_y, ":dir_y", pos62),
                        (val_mul, ":dir_x", ":distance_to_move"),
                        (val_mul, ":dir_y", ":distance_to_move"),
                        (position_set_x, pos62, ":dir_x"),
                        (position_set_y, pos62, ":dir_y"),
                        (position_transform_position_to_parent, pos63, pos61, pos62),
                        (position_set_z_to_ground_level, pos63),
                        (copy_position, pos61, pos63),
                      (else_try),
                        (gt, "$cur_casualties", 0),
                        (eq, "$cur_casualties", "$prev_casualties"), #no new casualties after 10 seconds in firing position
                        (assign, ":flag_advance", 1),
                      (try_end),
                    (try_end),
                    
                    (try_begin), #first position find high ground
                      (eq, "$cur_casualties", 0),
                      (copy_position, pos1, pos61),
                      (store_div, reg0, ":shot_distance", 3),
                      (call_script, "script_find_high_ground_around_pos1_corrected", reg0),
                      (copy_position, pos61, pos10),
                    (try_end),
                    
                    (try_begin),
                      (gt, ":flag_advance", 0),
                      (team_give_order, ":team_no", grc_archers, mordr_advance),
                    (else_try),
                      (team_give_order, ":team_no", grc_archers, mordr_hold),
                      (team_set_order_position, ":team_no", grc_archers, pos61),
                    (try_end),
                  (try_end)
              ]),
              
              
              # script_SW_team_field_melee_tactics by motomataru
              # Input: AI team, size relative to largest team in %, size relative to battle in %
              # Output: none
              # Used: pos10, pos11, pos60, pos61, pos62, pos63
              ("SW_team_field_melee_tactics", [
                  (store_script_param, ":team_no", 1),
                  #  (store_script_param, ":rel_army_size", 2),
                  (store_script_param, ":battle_presence", 3),
                  (call_script, "script_team_get_class_percentages", ":team_no", 0),
                  (assign, ":ai_perc_infantry", reg0),
                  (assign, ":ai_perc_cavalry", reg2),
                  (store_mul, ":portion_cavalry", ":ai_perc_cavalry", ":battle_presence"),
                  (val_div, ":portion_cavalry", 100),
                  (store_sub, ":rel_enemy_size", 100, ":battle_presence"),
                  
                  #find closest distance of enemy to infantry, cavalry troops
                  (assign, ":melee_range", 2000),  #start melee regardless if enemy within 20m
                  (store_add, ":inf_closest_dist", ":melee_range", 1),
                  (store_add, ":cav_closest_dist", ":melee_range", 1),
                  (try_for_agents, ":cur_agent"),
                    (agent_is_alive, ":cur_agent"),
                    (agent_is_human, ":cur_agent"),
                    (agent_get_team, ":cur_team_no", ":cur_agent"),
                    (eq, ":cur_team_no", ":team_no"),
                    (agent_get_class, ":cur_class_no", ":cur_agent"),
                    (try_begin),
                      (eq, ":cur_class_no", grc_infantry),
                      (agent_get_position, pos1, ":cur_agent"),
                      (call_script, "script_get_closest3_distance_of_enemies_at_pos1", ":team_no"),
                      (try_begin),
                        (gt, ":inf_closest_dist", reg1),
                        (assign, ":inf_closest_dist", reg1),
                      (try_end),
                    (else_try),
                      (eq, ":cur_class_no", grc_cavalry),
                      (agent_get_position, pos1, ":cur_agent"),
                      (call_script, "script_get_closest3_distance_of_enemies_at_pos1", ":team_no"),
                      (try_begin),
                        (gt, ":cav_closest_dist", reg1),
                        (assign, ":cav_closest_dist", reg1),
                      (try_end),
                    (try_end),
                  (try_end),
                  
                  (team_get_movement_order, ":ranged_order", ":team_no", grc_archers),
                  (team_get_order_position, pos0, ":team_no", grc_archers),
                  
                  #cavalry AI
                  (try_begin),
                    (eq, "$cur_casualties", 0),
                    (lt, ":portion_cavalry", ":rel_enemy_size"),
                    (gt, ":cav_closest_dist", ":melee_range"),
                    (neq, ":ranged_order", mordr_charge),
                    (team_give_order, ":team_no", grc_cavalry, mordr_hold),
                    (team_set_order_position, ":team_no", grc_cavalry, pos0),
                  (else_try), #fighting started or more cavalry than enemy or enemy within melee or everyone's charging
                    (team_give_order, ":team_no", grc_cavalry, mordr_charge),
                  (try_end),
                  
                  #infantry AI
                  (try_begin),
                    (lt, ":portion_cavalry", ":rel_enemy_size"),
                    (gt, ":inf_closest_dist", ":melee_range"),
                    (neq, ":ranged_order", mordr_charge),
                    (try_begin),
                      (gt, "$cur_casualties", 0),
                      (gt, ":ai_perc_infantry", 33), #more than 1/3 infantry?
                      (team_give_order, ":team_no", grc_infantry, mordr_charge),
                    (else_try),
                      (team_set_order_position, ":team_no", grc_infantry, pos0),
                      (team_give_order, ":team_no", grc_infantry, mordr_fall_back),
                    (try_end),
                  (else_try), #more cavalry than enemy or enemy within melee or everyone's charging
                    (team_give_order, ":team_no", grc_infantry, mordr_charge),
                  (try_end)
              ]),
              
              
              # script_SW_field_tactics v2 by motomataru
              # Input: flag 1 to include ranged
              # Output: none
              ("SW_field_tactics",
                [ (store_script_param, ":include_ranged", 1),
                  #measure teams
                  (assign, ":battle_size", 0),
                  (assign, ":team0_size", 0),
                  (assign, ":team1_size", 0),
                  (assign, ":team2_size", 0),
                  (assign, ":team3_size", 0),
                  (assign, ":team4_size", 0),
                  (assign, ":team5_size", 0),   #max 6 teams handled
                  (try_for_agents, ":cur_agent"),
                    (agent_get_team, ":agent_team", ":cur_agent"),
                    (try_begin),
                      (agent_is_alive, ":cur_agent"),
                      (agent_is_human, ":cur_agent"),
                      (val_add, ":battle_size", 1),
                      (try_begin),
                        (eq, ":agent_team", 0),
                        (val_add, ":team0_size", 1),
                      (else_try),
                        (eq, ":agent_team", 1),
                        (val_add, ":team1_size", 1),
                      (else_try),
                        (eq, ":agent_team", 2),
                        (val_add, ":team2_size", 1),
                      (else_try),
                        (eq, ":agent_team", 3),
                        (val_add, ":team3_size", 1),
                      (else_try),
                        (eq, ":agent_team", 4),
                        (val_add, ":team4_size", 1),
                      (else_try),
                        (eq, ":agent_team", 5),
                        (val_add, ":team5_size", 1),
                      (else_try),
                        (display_message, "@too many teams for AI"),
                      (try_end),
                    (try_end),
                  (try_end),
                  
                  #find largest team size
                  (get_player_agent_no, ":player_agent"),
                  (agent_get_team, ":player_team", ":player_agent"),
                  (assign, ":num_teams", 2),
                  (assign, ":largest_team_size", ":team0_size"),
                  (try_begin),
                    (lt, ":largest_team_size", ":team1_size"),
                    (assign, ":largest_team_size", ":team1_size"),
                  (try_end),
                  (try_begin),
                    (gt, ":team2_size", 0),
                    (assign, ":num_teams", 3),
                    (try_begin),
                      (neg|teams_are_enemies, 2, ":player_team"),
                      (val_add, ":team2_size", ":team0_size"), #ally 2 takes player team 0 into account
                    (try_end),
                    (lt, ":largest_team_size", ":team2_size"),
                    (assign, ":largest_team_size", ":team2_size"),
                  (try_end),
                  (try_begin),
                    (gt, ":team3_size", 0),
                    (assign, ":num_teams", 4),
                    (try_begin),
                      (neg|teams_are_enemies, 3, ":player_team"),
                      (val_add, ":team3_size", ":team1_size"), #ally 3 takes player team 1 into account
                    (try_end),
                    (lt, ":largest_team_size", ":team3_size"),
                    (assign, ":largest_team_size", ":team3_size"),
                  (try_end),
                  (try_begin),
                    (gt, ":team4_size", 0),
                    (assign, ":num_teams", 5),
                    (lt, ":largest_team_size", ":team4_size"),
                    (assign, ":largest_team_size", ":team4_size"),
                  (try_end),
                  (try_begin),
                    (gt, ":team5_size", 0),
                    (assign, ":num_teams", 6),
                    (lt, ":largest_team_size", ":team5_size"),
                    (assign, ":largest_team_size", ":team5_size"),
                  (try_end),
                  
                  #apply tactics to every AI team
                  (try_for_range, ":ai_team", 0, ":num_teams"),
                    (assign, ":ai_team_size", 0),
                    (try_begin),
                      (eq, ":ai_team", 0),
                      (assign, ":ai_team_size", ":team0_size"),
                    (else_try),
                      (eq, ":ai_team", 1),
                      (assign, ":ai_team_size", ":team1_size"),
                    (else_try),
                      (eq, ":ai_team", 2),
                      (assign, ":ai_team_size", ":team2_size"),
                    (else_try),
                      (eq, ":ai_team", 3),
                      (assign, ":ai_team_size", ":team3_size"),
                    (else_try),
                      (eq, ":ai_team", 4),
                      (assign, ":ai_team_size", ":team4_size"),
                    (else_try),
                      (eq, ":ai_team", 5),
                      (assign, ":ai_team_size", ":team5_size"),
                    (try_end),
                    
                    (try_begin),
                      (gt, ":ai_team_size", 0),
                      (neg|eq, ":ai_team", ":player_team"),
                      (val_mul, ":ai_team_size", 100),
                      (store_div, ":team_percentage", ":ai_team_size", ":largest_team_size"),
                      (store_div, ":team_battle_presence", ":ai_team_size", ":battle_size"),
                      (try_begin),
                        (eq, ":include_ranged", 1),
                        (call_script, "script_SW_team_field_ranged_tactics", ":ai_team", ":team_percentage", ":team_battle_presence"),
                      (try_end),
                      (call_script, "script_SW_team_field_melee_tactics", ":ai_team", ":team_percentage", ":team_battle_presence"),
                    (try_end),
                  (try_end),
                  (assign, "$prev_casualties", "$cur_casualties")
              ]),
              
              ####>>>>>>>
              
              #Battle Speech by Swyter
              #Input: speech kind
              #Output: nothing
              ("battle_speech",
                [
                  (store_script_param, ":battle_speech", 1),
                  #(store_script_param, ":center_no", 2),
                  (faction_get_slot,":hangar_faction","fac_player_supporters_faction", slot_faction_culture),
                  
                  (try_begin),
                    (eq, ":battle_speech", speech_death),
                    (try_begin),
                      (eq, ":hangar_faction", "fac_culture_1"),
                      (play_sound,"snd_swc_empire_death",1),
                    (else_try),
                      (eq, ":hangar_faction", "fac_culture_2"),
                      (play_sound,"snd_swc_rebel_death",1),
                    (else_try),
                      (eq, ":hangar_faction", "fac_culture_3"),
                      (play_sound,"snd_swc_hutt_death",1),
                    (else_try),
                      (play_sound,"snd_swc_neutral_death",1),
                    (try_end),
                  (else_try),
                    (eq, ":battle_speech", speech_victory),
                    (try_begin),
                      (eq, ":hangar_faction", "fac_culture_1"),
                      (play_sound,"snd_swc_empire_victory",1),
                    (else_try),
                      (eq, ":hangar_faction", "fac_culture_2"),
                      (play_sound,"snd_swc_rebel_victory",1),
                    (else_try),
                      (eq, ":hangar_faction", "fac_culture_3"),
                      (play_sound,"snd_swc_hutt_victory",1),
                    (else_try),
                      (play_sound,"snd_swc_neutral_victory",1),
                    (try_end),
                  (else_try),
                    (eq, ":battle_speech", speech_deployed),
                    (try_begin),
                      (eq, ":hangar_faction", "fac_culture_1"),
                      (play_sound,"snd_swc_empire_deployed",1),
                    (else_try),
                      (eq, ":hangar_faction", "fac_culture_2"),
                      (play_sound,"snd_swc_rebel_deployed",1),
                    (else_try),
                      (eq, ":hangar_faction", "fac_culture_3"),
                      (play_sound,"snd_swc_hutt_deployed",1),
                    (else_try),
                      (play_sound,"snd_swc_neutral_deployed",1),
                    (try_end),
                  (try_end),
                  
                  
              ]),
              
              
              # script_swy_unique_units_stuff:
              #SWY - Avoid rancor running / edit: also darth vader
              # INPUT:
              # param1: none
              # param2: none
              ("swy_unique_units_stuff",
                [
                  (assign,":location_flag",-1),
                  (store_script_param_1 , ":location_flag"),
                  (try_for_agents, ":agent_no"),
                    (agent_get_troop_id, ":cur_agent_troop", ":agent_no"),
                    (try_begin),
                      #Rancors
                      (this_or_next|eq, "trp_rancor",        ":cur_agent_troop"),
                      (eq,              "trp_rancor_mutant", ":cur_agent_troop"),
                      (agent_set_speed_limit,":agent_no",3*2),
                    #(else_try),
                      #Darth Vader
                      #(eq, "trp_knight_1_1", ":cur_agent_troop"),
                      #(agent_play_sound, ":agent_no", "snd_vader_breath"),
                      #(agent_set_stand_animation, ":agent_no", "anim_vader_stand"),
                      #(agent_set_walk_forward_animation, ":agent_no", "anim_droid_walk_forward"),
                      #(agent_get_item_id,":vader_is_mounted", ":agent_no"),
                      #(eq, ":vader_is_mounted", -1),
                      #(agent_set_speed_limit,":agent_no",4*2),
                    (else_try),
                      #B2 Droids
                      (this_or_next|eq, "trp_b2series",          ":cur_agent_troop"),
                      (eq,              "trp_b2series_enhanced", ":cur_agent_troop"),
                      (agent_set_stand_animation, ":agent_no", "anim_b2_stand"),
                      (agent_set_walk_forward_animation, ":agent_no", "anim_b2_walk"),
                      (agent_set_speed_limit,":agent_no",6*2),
                    (else_try),
                      #Hutt Dancer
                      (eq,":location_flag",1),
                      (agent_get_entry_no, ":entry_no", ":agent_no"),
                      (this_or_next|eq,":entry_no",38),
                      (eq,":entry_no",39),
                      (agent_set_stand_animation, ":agent_no", "anim_slave_dance"),
                      (agent_set_animation, ":agent_no", "anim_slave_dance"),
                      (store_random_in_range, ":random_no", 0, 100),
                      (agent_set_animation_progress, ":agent_no", ":random_no"),
                    (try_end),
                  (try_end),
              ]),
              
              ("flush_gatesys_cache",
                [
                  (try_for_range, ":cur_i", 0, 100),
                    (troop_set_slot, "trp_gate_sys_array", ":cur_i",0),
                  (try_end),
              ]),
              
              ("swy_map_outpost_icon_routine",
                [
                  (store_script_param,":icon_imp",1),
                  (store_script_param,":icon_reb",2),
                  (store_script_param,":icon_hut",3),
                  
                  (try_for_range, ":cur_i", castles_begin, castles_end),
                    (party_get_icon, ":outpost_icon", ":cur_i"),
                    (this_or_next|eq,":outpost_icon",":icon_imp"),
                    (this_or_next|eq,":outpost_icon",":icon_reb"),
                    (             eq,":outpost_icon",":icon_hut"),
                    #if we're in front of a spacestation then ->
                    
                    (party_get_faction, ":outpost_faction", ":cur_i"), # also named store_faction_of_party, but is ugly, so I created an alias
                    
                    (try_begin),
                      #if rebel st rebel icon ->
                      (eq,":outpost_faction","fac_rebelalliance"),
                      (party_set_icon, ":cur_i", ":icon_reb"),
                    (else_try),
                      #if imperial set imp icon ->
                      (eq,":outpost_faction","fac_galacticempire"),
                      (party_set_icon, ":cur_i", ":icon_imp"),
                    (else_try),
                      #if hutt set hutt icon ->
                      (eq,":outpost_faction","fac_huttcartel"),
                      (party_set_icon, ":cur_i", ":icon_hut"),
                    (try_end),
                    
                    # if not left everything unchanged and then go to the next cool boy...
                  (try_end),
              ]),
              
              ("swy_map_planet_aura_routine",
                [
                  (store_script_param_1 , ":planet_aura_begin"),
                  (store_script_param_2 , ":planet_aura_end"),
                  
                  
                  (try_for_range, ":cur_i", ":planet_aura_begin", ":planet_aura_end"),
                    (party_get_faction, ":planet_aura_faction", ":cur_i"), # also named store_faction_of_party, but is ugly, so I created an alias
                    
                    (try_begin),
                      #if rebel st rebel aura ->
                      (eq,":planet_aura_faction","fac_rebelalliance"),
                      (party_clear_particle_systems, ":cur_i"),
                      (party_clear_particle_systems, ":cur_i"),
                      
                      (party_add_particle_system, ":cur_i", "psys_planet_icon_raided_effect"),
                      
                    (else_try),
                      #if imperial set imp aura ->
                      (eq,":planet_aura_faction","fac_galacticempire"),
                      (party_clear_particle_systems, ":cur_i"),
                      (party_clear_particle_systems, ":cur_i"),
                      
                      (party_add_particle_system, ":cur_i", "psys_planet_icon_atmospheric_effect"),
                      
                    (else_try),
                      #if hutt set hutt aura ->
                      (eq,":planet_aura_faction","fac_huttcartel"),
                      (party_clear_particle_systems, ":cur_i"),
                      (party_clear_particle_systems, ":cur_i"),
                      
                      (party_add_particle_system, ":cur_i", "psys_planet_icon_atmospheric_effect_polution"),
                      
                    (else_try),
                      #if neutral or player set player aura ->
                      (this_or_next|eq,":planet_aura_faction","fac_no_faction"),
                      (this_or_next|eq,":planet_aura_faction","fac_neutral"),
                      (this_or_next|eq,":planet_aura_faction","fac_player_faction"),
                      (             eq,":planet_aura_faction","fac_player_supporters_faction"),
                      (party_clear_particle_systems, ":cur_i"),
                      (party_clear_particle_systems, ":cur_i"),
                      
                      (party_add_particle_system, ":cur_i", "psys_planet_icon_neutral_effect"),
                      
                    (try_end),
                    # if not left everything unchanged and then go to the next cool boy...
                  (try_end),
              ]),
              
              
              ("swy_sprop_movement",
                [
                  (store_script_param_1, ":instance"    ),
                  (store_script_param_2, ":axis"        ),
                  (store_script_param,   ":mov_value", 3),
                  (store_script_param,   ":mov_time" , 4),
                  
                  (prop_instance_get_position, pos33, ":instance"),
                  (try_begin),
                    (eq, ":axis", x),
                    (position_move_x, pos33, ":mov_value"),
                  (else_try),
                    (eq, ":axis", y),
                    (position_move_y, pos33, ":mov_value"),
                  (else_try),
                    (eq, ":axis", z),
                    (position_move_z, pos33, ":mov_value"),
                  (try_end),
                  (prop_instance_animate_to_position, ":instance", pos33, ":mov_time"),
                  (val_mul, ":mov_value", -1),
                  (call_script, "script_swy_sprop_movement", ":instance", ":axis", ":mov_value", ":mov_time") #  <-- mov type (x,y,z), mov value, mov time
              ]),
              
              
########################################################
## Easy regulars upgrading kit begin
########################################################
("calculate_upgrade_troops", 
  [
    (call_script, "script_party_copy", "p_temp_party", "p_main_party"), ## before
    ## upgrade all troops in first upgrade path with total 1 xp
    ## everyone get 0 xp at last, but they all upgraded
    (party_upgrade_with_xp, "p_main_party", 1, 1),
    (call_script, "script_party_copy", "p_temp_party_2", "p_main_party"), ## after
    
    ## remove prisoners and heroes
    (call_script, "script_party_remove_all_prisoners", "p_temp_party"),
    (call_script, "script_party_remove_all_prisoners", "p_temp_party_2"),
    (call_script, "script_party_remove_heroes", "p_temp_party"),
    (call_script, "script_party_remove_heroes", "p_temp_party_2"),
    
    ## Initialize trp_temp_array_a, trp_temp_array_b, trp_temp_array_c
    (try_for_range, ":slot_no", 0, 32),
      (troop_set_slot, "trp_temp_array_a", ":slot_no", -1),
      (troop_set_slot, "trp_temp_array_b", ":slot_no", 0),
      (troop_set_slot, "trp_temp_array_c", ":slot_no", 0),
    (try_end),
    
    (assign, ":slot_id", 0),
    (assign, ":num_times", 1),
    (try_for_range, ":unused", 0, ":num_times"),
      ## find all current root troops
      (party_get_num_companion_stacks, ":num_stacks", "p_temp_party"),
      (try_for_range, ":cur_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":cur_troop", "p_temp_party", ":cur_stack"),
        (troop_set_slot, ":cur_troop", slot_root_troop, 1),
      (try_end),
      
      (try_for_range, ":cur_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":cur_troop", "p_temp_party", ":cur_stack"),
        (troop_get_upgrade_troop, ":upgrade_troop", ":cur_troop", 0),
        (gt, ":upgrade_troop", 0),
        (call_script, "script_party_has_troop", "p_temp_party", ":upgrade_troop"),
        (eq, reg0, 1),
        (troop_set_slot, ":upgrade_troop", slot_root_troop, 0), ## not a root troop
      (try_end),
      
      ## calculate upgrade troops and upgrade size
      (try_for_range_backwards, ":cur_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":cur_troop", "p_temp_party", ":cur_stack"),
        (gt, ":cur_troop", 0),
        (troop_slot_eq, ":cur_troop", slot_root_troop, 1),
        (party_stack_get_size, ":stack_size", "p_temp_party", ":cur_stack"),
        
        (call_script, "script_party_has_troop", "p_temp_party_2", ":cur_troop"),
        (try_begin),
          (eq, reg0, 0),
          (assign, ":stack_size_2", 0),
        (else_try),
          (party_get_num_companion_stacks, ":num_stacks_2", "p_temp_party_2"),
          (try_for_range, ":cur_stack_2", 0, ":num_stacks_2"),
            (party_stack_get_troop_id, ":cur_troop_2", "p_temp_party_2", ":cur_stack_2"),
            (eq, ":cur_troop_2", ":cur_troop"),
            (party_stack_get_size, ":stack_size_2", "p_temp_party_2", ":cur_stack_2"),
          (try_end),
        (try_end),
        
        (try_begin),
          (val_sub, ":stack_size", ":stack_size_2"),
          (gt, ":stack_size", 0),
          ## reduce the first upgrade path size
          (troop_get_upgrade_troop, ":upgrade_troop", ":cur_troop", 0),
          (party_remove_members, "p_temp_party_2", ":upgrade_troop", ":stack_size"),
          ## reduce the first upgrade path size
          (troop_set_slot, "trp_temp_array_a", ":slot_id", ":cur_troop"), ## troop which can upgrade
          (troop_set_slot, "trp_temp_array_b", ":slot_id", ":stack_size"), ## troop upgrade size
          (troop_set_slot, "trp_temp_array_c", ":slot_id", 0), ## troop upgrade second path size
          (val_add, ":slot_id", 1),
        (try_end),
        
        ## remove current root troop
        (call_script, "script_party_remove_troop", "p_temp_party", ":cur_troop"),
        (call_script, "script_party_remove_troop", "p_temp_party_2", ":cur_troop"),
      (try_end),
      
      ## do the loop once more?
      (try_begin),
        (party_get_num_companion_stacks, ":num_stacks", "p_temp_party"),
        (gt, ":num_stacks", 0),
        (val_add, ":num_times", 1), ## once more
      (try_end),
    (try_end),
  ]),

("party_has_troop", 
  [
    (store_script_param_1, ":party_no"),
    (store_script_param_2, ":troop_no"),
    
    (assign, reg0, 0),
    (party_get_num_companion_stacks, ":num_stacks", ":party_no"),
    (try_for_range, ":cur_stack", 0, ":num_stacks"),
      (party_stack_get_troop_id, ":cur_troop", ":party_no", ":cur_stack"),
      (eq, ":cur_troop", ":troop_no"),
      (assign, reg0, 1),
      (assign, ":num_stacks", 0), #end the loop
    (try_end),
  ]),

("party_remove_troop", 
  [
    (store_script_param_1, ":party_no"),
    (store_script_param_2, ":troop_no"),
    
    (party_get_num_companion_stacks, ":num_stacks", ":party_no"),
    (try_for_range, ":cur_stack", 0, ":num_stacks"),
      (party_stack_get_troop_id, ":cur_troop", ":party_no", ":cur_stack"),
      (eq, ":cur_troop", ":troop_no"),
      (party_stack_get_size, ":stack_size", ":party_no", ":cur_stack"),
      (party_remove_members, ":party_no", ":troop_no", ":stack_size"),
    (try_end),
  ]),

("party_remove_heroes", 
  [
    (store_script_param_1, ":party_no"),
    
    (party_get_num_companion_stacks, ":num_stacks", ":party_no"),
    (try_for_range_backwards, ":cur_stack", 0, ":num_stacks"),
      (party_stack_get_troop_id, ":cur_troop", ":party_no", ":cur_stack"),
      (troop_is_hero, ":cur_troop"),
      (party_remove_members, ":party_no", ":cur_troop", 1),
    (try_end),
  ]),

("has_enough_slot", 
  [
    (party_clear, "p_temp_party"),
    (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
    (try_for_range, ":stack_no", 0, ":num_stacks"),
      (party_stack_get_troop_id, ":cur_troop", "p_main_party", ":stack_no"),
      (try_begin),
        (troop_get_upgrade_troop, ":upgraded_troop_1", ":cur_troop", 0),
        (gt, ":upgraded_troop_1", 0),
        (neg|main_party_has_troop, ":upgraded_troop_1"),
        (party_add_members, "p_temp_party", ":upgraded_troop_1", 1),
      (else_try),
        (troop_get_upgrade_troop, ":upgraded_troop_2", ":cur_troop", 1),
        (gt, ":upgraded_troop_2", 0),
        (neg|main_party_has_troop, ":upgraded_troop_2"),
        (party_add_members, "p_temp_party", ":upgraded_troop_2", 1),
      (try_end),
    (try_end),
    (store_num_free_stacks, ":free_stacks", "p_main_party"),
    (party_get_num_companion_stacks, ":num_stack_increase", "p_temp_party"),
    
    (try_begin),
      (ge, ":free_stacks", ":num_stack_increase"),
      (assign, reg0, 1),
    (else_try),
      (assign, reg0, 0),
    (try_end),
  ]),
########################################################
## Easy regulars upgrading kit end
########################################################
              
  ]
  
#swy-- WB: make it so upgrading troops from the party screen is free, just like in vanilla M&B 1.011, many thanks to mtarini for his fantastic help on Trello!
if is_a_wb_script==1:
  scripts += [

  # script_game_get_upgrade_cost
  # This script is called from game engine for calculating needed troop upgrade exp
  # Input:
  # param1: troop_id,
  # Output: reg0 = needed cost for upgrade
  #("game_get_upgrade_cost",
   # [
     #(store_script_param_1, ":troop_id"),
     #swy-- hacky workaround to block upgrading by disabling the button on certain occasions...
     #(try_begin),     
     #    (eq, "$tld_forbid_troop_upgrade_mode", 1),
     #    (set_trigger_result, -1),
     # (else_try),
   #      (set_trigger_result,  0),
     # (try_end),
  #  ]),

# cpp: Imported this script from classic Warband.
# Fixes the "Terrible" troop morale. Can be expanded on.

  # script_game_get_morale_of_troops_from_faction
  # This script is called from the game engine 
  # Input: 
  # param1: faction_no,
  # Output: reg0: extra morale x 100
  ("game_get_morale_of_troops_from_faction",
    [
     #(store_script_param_1, ":troop_no"),
      (party_get_morale,   reg0, "p_main_party"),
      (set_trigger_result, reg0),
    ]),

#AUTO FIRE
########################################################################
##################### FIRES WEAPON BASED ON STATS ######################
########################################################################
   ("RC_fire_auto_weapon",[
      (store_script_param, ":shooter_agent", 1),
      (store_script_param, ":shooter_weapon", 2),
      (store_script_param, ":shooter_ammo", 3),

      (item_get_slot, ":auto_accuracy", ":shooter_weapon", slot_item_accuracy),
      (store_sub, ":inaccuracy", 100, ":auto_accuracy"),#100 test
      (val_mul, ":inaccuracy", ":inaccuracy"),
      (val_div, ":inaccuracy", 10),
      #(item_get_slot, ":velocity", ":shooter_weapon", slot_item_shoot_speed),############

      #(agent_get_troop_id, ":troop_id" ":shooter_agent"),###
      #(store_attribute_level, ":strength", ":troop_id", ca_strength),###

      # (store_skill_level, <destination>, <skill_id>, [troop_id]),
      # (store_troop_health, <destination>, <troop_id>, [absolute]), # set absolute to 1 to get actual health; otherwise this will return percentage health in range (0-100)
      # (troop_add_item, <troop_id>, <item_id>, [modifier]),#Adds an item to the troop, optionally with a modifier (see imod_* constants in header_item_modifiers.py).
      # (troop_remove_item, <troop_id>, <item_id>),#Removes an item from the troop equipment or inventory. Operation will remove first matching item it finds.
      # (troop_inventory_slot_set_item_amount, <troop_id>, <inventory_slot_no>, <value>),#Sets the stack size for a specified equipment or inventory slot. Only makes sense for items like ammo or food (which show stuff like "23/50" in inventory). Equipment slots are in range 0..9, see ek_* constants in header_items.py for reference.
      # (troop_inventory_slot_get_item_amount, <destination>, <troop_id>, <inventory_slot_no>),#Retrieves the stack size for a specified equipment or inventory slot (if some Bread is 23/50, this operation will return 23).
      # (troop_inventory_slot_get_item_max_amount, <destination>, <troop_id>, <inventory_slot_no>),#Retrieves the maximum possible stack size for a specified equipment or inventory slot (if some Bread is 23/50, this operation will return 50).
      # (troop_add_items, <troop_id>, <item_id>, <number>),#Adds multiple items of specified type to the troop.
      # (troop_remove_items, <troop_id>, <item_id>, <number>),#Removes multiple items of specified type from the troop. Total price of actually removed items will be stored in reg0.
      # (troop_loot_troop, <target_troop>, <source_troop_id>, <probability>), #Adds to target_troop's inventory some items from source_troop's equipment and inventory with some probability. Does not actually remove items from source_troop. Commonly used in Native to generate random loot after the battle.
      # (troop_get_inventory_capacity, <destination>, <troop_id>),#Returns the total inventory capacity (number of inventory slots) for the specified troop. Note that this number will include equipment slots as well. Substract num_equipment_kinds (see header_items.py) to get the number of actual *inventory* slots.
      # (troop_get_inventory_slot, <destination>, <troop_id>, <inventory_slot_no>),#Retrieves the item_id of a specified equipment or inventory slot. Returns -1 when there's nothing there.
      # (troop_get_inventory_slot_modifier, <destination>, <troop_id>, <inventory_slot_no>),#Retrieves the modifier value (see imod_* constants in header_items.py) for an item in the specified equipment or inventory slot. Returns 0 when there's nothing there, or if item does not have any modifiers.
      # (troop_set_inventory_slot, <troop_id>, <inventory_slot_no>, <item_id>),#Puts the specified item into troop's equipment or inventory slot. Be careful with setting equipment slots this way.
      # (troop_set_inventory_slot_modifier, <troop_id>, <inventory_slot_no>, <imod_value>),
      # (store_free_inventory_capacity, <destination>, [troop_id]),#Calculates total number of free inventory slots that the troop has. Default troop is player.
      # (item_has_property, <item_kind_no>, <property>),#Version 1.161+. Checks that the item has specified capability flag set. See the list of itcf_* flags in header_items.py
      

      #(agent_get_item_slot, <destination>, <agent_id>, <value>),
      #(item_get_weight, ":wpn_weight", <item_kind_no>),#Version 1.161+. Retrieves item weight as a fixed point value.
      
      # (item_get_difficulty, <destination>, <item_kind_no>),#Version 1.161+. Retrieves item difficulty value.
      # (item_get_weapon_length, <destination>, <item_kind_no>),#Version 1.161+. Retrieves item length (for weapons) or shield half-width (for shields). To get actual shield width, multiply this value by 2. Essentially, it is a distance from shield's "center" point to it's left, right and top edges (and bottom edge as well if shield height is not defined).
      # (item_get_speed_rating, <destination>, <item_kind_no>),#Version 1.161+. Retrieves item speed rating.
      # (item_get_missile_speed, <destination>, <item_kind_no>),#Version 1.161+. Retrieves item missile speed rating.
      # (item_get_max_ammo, <destination>, <item_kind_no>),#Version 1.161+. Retrieves item max ammo amount.
      # (item_get_accuracy, <destination>, <item_kind_no>),#Version 1.161+. Retrieves item accuracy value. Note that this operation will return 0 for an item with undefined accuracy, even though the item accuracy will actually default to 100.
      # (item_get_horse_speed, <destination>, <item_kind_no>),#Version 1.161+. Retrieves horse speed value.
      # (item_get_thrust_damage, <destination>, <item_kind_no>),# Version 1.161+. Retrieves thrust base damage value for item.
      # (agent_set_accuracy_modifier, <agent_id>, <value>),#Version 1.153+. Changes agent's accuracy (with ranged weapons?). Value is in percentage, 100 is default, value can be between [0..1000]
      # (agent_set_reload_speed_modifier, <agent_id>, <value>),#Version 1.153+. Changes agent's reload speed. Value is in percentage, 100 is default, value can be between [0..1000]
      # (agent_set_use_speed_modifier, <agent_id>, <value>),#Version 1.153+. Changes agent's speed with using various scene props. Value is in percentage, 100 is default, value can be between [0..1000]
      # (agent_set_ranged_damage_modifier, <agent_id>, <value>),#Version 1.157+. Changes agent's damage with ranged weapons. Value is in percentage, 100 is default, value can be between [0..1000]
      # (agent_get_ammo, <destination>, <agent_id>, <value>),#Retrieves the current ammo amount agent has for his wielded item (value = 1) or all his items (value = 0).
      # (agent_get_item_cur_ammo, <destination>, <agent_id>, <slot_no>),#Version 1.153+. Returns remaining ammo for specified agent's item.
      # (agent_set_wielded_item, <agent_id>, <item_id>),# Forces the agent to wield the specified item. Agent must have that item in his equipment for this to work. Use item_id = -1 to unwield any currently wielded item.
      # (agent_equip_item, <agent_id>, <item_id>, [weapon_slot_no]),#Adds the specified item to agent and forces him to equip it. Optional weapon_slot_no parameter is only used with weapons and will put the newly added item to that slot (range 1..4). If it is omitted with a weapon item, then the agent must have an empty weapon slot for the operation to succeed.
      # (agent_unequip_item, <agent_id>, <item_id>, [weapon_slot_no]),#Removes the specified item from the agent. Optional parameter weapon_slot_no is in range 1..4 and determines what weapon slot to remove (item_id must still be set correctly).
      # (agent_get_ammo_for_slot, <destination>, <agent_id>, <slot_no>),#Retrieves the amount of ammo agent has in the referenced slot (range 0..3).

#################### CALCULATE AGENT INACCURACY #######################
      (agent_get_troop_id, ":shooter_troop", ":shooter_agent"),
      (store_proficiency_level, ":firing_skill", ":shooter_troop", wpt_firearm),
      (store_sub, ":firing_disability", 500, ":firing_skill"),#500
      (val_div, ":firing_disability", 10),

########################### CALCULATE WANDER ##########################
      #(item_get_slot, ":weapon_speed", ":shooter_weapon", slot_item_speed_rating),
      #(store_sub, ":weapon_recoil", 150, ":weapon_speed"),#150
      #(assign, ":max_recoil", ":weapon_recoil"),
      #(val_div, ":weapon_recoil", 3),
      (agent_get_slot, ":wander", ":shooter_agent", slot_agent_firearm_wander),
      #(val_add, ":wander", ":weapon_recoil"),
      (val_add, ":wander", 10),###############TEst
      #(val_clamp, ":wander", 0, ":max_recoil"),
      (val_clamp, ":wander", 0, 30),###############TEst
      (agent_set_slot, ":shooter_agent", slot_agent_firearm_wander, ":wander"),
  
      (agent_get_animation, ":cur_anim", ":shooter_agent", 0),
############### INCREASE INACCURACY DUE TO MOVEMENT ###################
      (try_begin),
         (is_between, ":cur_anim", "anim_run_forward", "anim_stand_to_crouch"),
         (val_mul, ":wander", 3),#2
         (val_div, ":wander", 2),#1
      (try_end),
################# INCREASE INACCURACY DUE TO JUMP #####################
      (try_begin),
         (is_between, ":cur_anim", "anim_jump", "anim_stand_unarmed"),
         (val_mul, ":wander", 2),#3
      (try_end),

      (val_add, ":wander", ":firing_disability"),
      (val_div, ":wander", 3),
      (val_add, ":inaccuracy", ":wander"),
      (val_mul, ":inaccuracy", 2),#####TEST
      (val_div, ":inaccuracy", 3),#####TEST

############# RAISE POS TO EYE LEVEL & MOVE TO END OF GUN ###############
      (agent_get_look_position, pos1, ":shooter_agent"),
      (position_move_y, pos1, 80, 0),

      (try_begin),
         (item_has_capability, ":shooter_weapon", itcf_shoot_musket),
         (position_move_z, pos1, 70, 0),
      (else_try),
         (agent_get_horse, ":horse", ":shooter_agent"),
         (gt, ":horse", 0),
         (position_move_z, pos1, 240, 0),
      (else_try),
         (position_move_z, pos1, 150, 0),
      (try_end),

#################### SOUNDS AND PARTICLES PLAY HERE #####################
      (item_get_slot, ":sound_id", ":shooter_weapon", slot_item_sound),
      (agent_play_sound, ":shooter_agent", ":sound_id"),

############ GET INITIAL RANDOMIZED BULLET ANGLE ROTATION ###############
      (store_random_in_range, ":y_rotation", 0, 360),
      (position_rotate_y, pos1, ":y_rotation"),
         
#################### SPAWN BULLET WITH INACCURACY #######################
      (store_random_in_range, ":x_inaccuracy", 0, ":inaccuracy"),
      (set_fixed_point_multiplier, 10),
      (position_rotate_x_floating, pos1, ":x_inaccuracy"),

      (item_get_slot, ":velocity", ":shooter_weapon", slot_item_shoot_speed),
      (val_sub, ":velocity", 50), #Balancing
      (set_fixed_point_multiplier, 1),
      (add_missile, ":shooter_agent", pos1, ":velocity", ":shooter_weapon", 0, ":shooter_ammo", 0),
   ]),
   

##Replaced the above with the below - Kham

########################################################################
##################### FIRES WEAPON BASED ON STATS ######################
########################################################################
   ("fire_auto_weapon",[
      (store_script_param, ":shooter_agent", 1),
      (store_script_param, ":shooter_weapon", 2),
      (store_script_param, ":shooter_ammo", 3),

      (item_get_type, ":weapon_type", ":shooter_weapon"),

  (item_get_slot, ":auto_accuracy", ":shooter_weapon", slot_item_accuracy),
      (store_sub, ":inaccuracy", 100, ":auto_accuracy"),

#################### CALCULATE AGENT INACCURACY #######################
      (agent_get_troop_id, ":shooter_troop", ":shooter_agent"),
      (try_begin),
         (eq, ":weapon_type", itp_type_pistol),
         (store_proficiency_level, ":firing_skill", ":shooter_troop", wpt_firearm),
      (else_try),
         (store_proficiency_level, ":firing_skill", ":shooter_troop", wpt_crossbow),
      (try_end),

      (store_sub, ":firing_disability", 500, ":firing_skill"),
      (val_div, ":firing_disability", 10),

########################### CALCULATE WANDER ##########################
      (item_get_slot, ":weapon_speed", ":shooter_weapon", slot_item_speed_rating),
      (store_sub, ":weapon_recoil", 180, ":weapon_speed"),
      (assign, ":max_recoil", ":weapon_recoil"),
  (val_div, ":weapon_recoil", 3),
      (agent_get_slot, ":wander", ":shooter_agent", slot_agent_firearm_wander),
      (val_add, ":wander", ":weapon_recoil"),
      (val_clamp, ":wander", 0, ":max_recoil"),

      (agent_set_slot, ":shooter_agent", slot_agent_firearm_wander, ":wander"),
  
      (agent_get_animation, ":cur_anim", ":shooter_agent", 0),
############### INCREASE INACCURACY DUE TO MOVEMENT ###################
      (try_begin),
         (is_between, ":cur_anim", "anim_run_forward", "anim_stand_to_crouch"),
         (val_mul, ":wander", 2),
      (try_end),
################# INCREASE INACCURACY DUE TO JUMP #####################
      (try_begin),
         (is_between, ":cur_anim", "anim_jump", "anim_stand_unarmed"),
         (val_mul, ":wander", 3),
      (try_end),

      (val_add, ":wander", ":firing_disability"),
      (val_div, ":wander", 4), #changed from 3
      (val_add, ":inaccuracy", ":wander"),

############# RAISE POS TO EYE LEVEL & MOVE TO END OF GUN ###############
      (agent_get_look_position, pos1, ":shooter_agent"),
      (position_move_y, pos1, 80, 0),

      (try_begin),
         (agent_get_horse, ":horse", ":shooter_agent"),
         (gt, ":horse", 0),
         (position_move_z, pos1, 240, 0),
      (else_try),
         (position_move_z, pos1, 150, 0),
      (try_end),

#################### SOUNDS AND PARTICLES PLAY HERE #####################
      (item_get_slot, ":sound_id", ":shooter_weapon", slot_item_sound),
      (agent_play_sound, ":shooter_agent", ":sound_id"),

############ GET INITIAL RANDOMIZED BULLET ANGLE ROTATION ###############
      (store_random_in_range, ":y_rotation", 0, 360),
      (position_rotate_y, pos1, ":y_rotation"),
         
#################### SPAWN BULLET WITH INACCURACY #######################
      (store_random_in_range, ":x_inaccuracy", 0, ":inaccuracy"),
      #(val_div, ":x_inaccuracy", 3), #Balancing
      (set_fixed_point_multiplier, 10),

      (position_rotate_x_floating, pos1, ":x_inaccuracy"),

  (item_get_slot, ":velocity", ":shooter_weapon", slot_item_shoot_speed),
      (set_fixed_point_multiplier, 1),
  (add_missile, ":shooter_agent", pos1, ":velocity", ":shooter_weapon", 0, ":shooter_ammo", 0),
   ]),
  
   
#########################################################################
################ SCRIPT TO SET ITEM STATS TO ITEM_SLOTS #################
#########################################################################
      ("init_item_accuracy", get_item_accuracy()),
      ("init_item_shoot_speed", get_item_shoot_speed()),
      ("init_item_speed_rating", get_item_speed_rating()),



################ MANDO #############
#########################################################################
########################### AUTO WEAPON LIST ############################
#########################################################################
   ("cf_set_automatic_weapons",[
      (store_script_param_1, ":auto_weapon"),
      #(try_for_range, ":item", 0,1000),
      #(try_begin),
      (this_or_next|eq, ":auto_weapon", "itm_a280"),
      (this_or_next|eq, ":auto_weapon", "itm_a280_crouch"),
      (this_or_next|eq, ":auto_weapon", "itm_a295"),
      (this_or_next|eq, ":auto_weapon", "itm_a295_crouch"),
      (this_or_next|eq, ":auto_weapon", "itm_mandalorian_heavy_blaster"),
      (this_or_next|eq, ":auto_weapon", "itm_corellian_destroyer_blaster"),
      (this_or_next|eq, ":auto_weapon", "itm_dlt19"),
      (this_or_next|eq, ":auto_weapon", "itm_dc17m"),
      (this_or_next|eq, ":auto_weapon", "itm_dc15a"),
      (this_or_next|eq, ":auto_weapon", "itm_dc15a_hip"),
      (this_or_next|eq, ":auto_weapon", "itm_dc15s"),
      (this_or_next|eq, ":auto_weapon", "itm_mg15"),
      (this_or_next|eq, ":auto_weapon", "itm_e5"),
      (this_or_next|eq, ":auto_weapon", "itm_e11"),
      (this_or_next|eq, ":auto_weapon", "itm_e11_hip"),
      (this_or_next|eq, ":auto_weapon", "itm_t21"),
      (this_or_next|eq, ":auto_weapon", "itm_heavy_repeater"),
      (this_or_next|eq, ":auto_weapon", "itm_storm_rifle"),
      (this_or_next|eq, ":auto_weapon", "itm_dh17"),
      (this_or_next|eq, ":auto_weapon", "itm_se14r"),
      (this_or_next|eq, ":auto_weapon", "itm_dl44b"),
      (this_or_next|eq, ":auto_weapon", "itm_westar"),
      (this_or_next|eq, ":auto_weapon", "itm_trandoshan_supressor"),
      (this_or_next|eq, ":auto_weapon", "itm_sith_blaster"),
      (this_or_next|eq, ":auto_weapon", "itm_sith_droid_blaster"),
      (this_or_next|eq, ":auto_weapon", "itm_westar35"),
      (this_or_next|eq, ":auto_weapon", "itm_ll-30_pistol"),
      (this_or_next|eq, ":auto_weapon", "itm_ig86_e5_pistol"),
      (eq, ":auto_weapon", "itm_havoc_rifle"),
      #(item_set_slot, ":auto_weapon", slot_item_auto_fire_capability, 1),
      #(try_end),      
   ]),
   
  #### Kham Troop Tree Scripts ####
#Kham VC Troop Tree Scripts Start
  #moto troop tree chief
  # script_troop_tree_precurse
  # Input: troop, number of upgrade, number of upgrade2
  # Output: reg0 number upgrade, reg1 upgrade2
  ("troop_tree_precurse", [(store_script_param, ":troop", 1),
      (store_script_param, ":ret_val_0", 2),
      (store_script_param, ":ret_val_1", 3),
      
      (assign, ":max_branch_0", ":ret_val_0"),
      (troop_get_upgrade_troop, ":next_troop", ":troop", 0),
      (try_begin),
        (gt, ":next_troop", 0),
        (store_add, ":max_branch_0", ":ret_val_0", 1),
        (call_script, "script_troop_tree_precurse", ":next_troop", ":max_branch_0", ":ret_val_1"),
        (val_max, ":max_branch_0", reg0),
        (val_max, ":ret_val_1", reg1),
      (try_end),
      
      (troop_get_upgrade_troop, ":next_troop", ":troop", 1),
      (try_begin),
        (gt, ":next_troop", 0),
        (val_add, ":ret_val_0", 1),
        (val_add, ":ret_val_1", 1),
        (call_script, "script_troop_tree_precurse", ":next_troop", ":ret_val_0", ":ret_val_1"),
        (val_max, ":ret_val_0", reg0),
        (val_max, ":ret_val_1", reg1),
      (try_end),
      
      (val_max, ":ret_val_0", ":max_branch_0"),
      (assign, reg0, ":ret_val_0"),
      (assign, reg1, ":ret_val_1"),]),
  
  # script_troop_tree_recurse
  # Input: troop, x_pos, y_pos
  # Output: reg0 augmented y_pos
  ("troop_tree_recurse", [(store_script_param, ":troop", 1),
      (store_script_param, ":x_pos", 2),
      (store_script_param, ":y_pos", 3),
      (store_script_param, ":next_y", 3),
      
      # Fix height of pic - VC-2379
      (val_min, "$troop_tree_pic_height", 272),
      
      (store_div, ":scaler", Troop_Tree_Area_Height, "$troop_tree_pic_height"),
      (store_div, ":scaled_width", Troop_Tree_Tableau_Width, ":scaler"),
      (store_div, ":scaled_height", Troop_Tree_Tableau_Height, ":scaler"),
      
      (store_mul, reg2, ":troop", 2), #picture with weapons (see script_add_troop_to_cur_tableau_for_party)
      (create_mesh_overlay_with_tableau_material, reg1, -1, "tableau_troop_tree_pic", reg2),
      
      # START Troop Detail: saves data to array - VC-2379
      (val_add, "$troop_tree_counter", 1),
      (troop_set_slot, "trp_temp_array_a", "$troop_tree_counter", reg1), # overlay id
      (troop_set_slot, "trp_temp_array_b", "$troop_tree_counter", ":troop"), # troop_id
      # END Troop Detail: saves data to array
      
      (store_div, reg3, ":scaled_width", 3),  #half too much for some reason
      (store_sub, reg2, ":x_pos", reg3),
      (position_set_x, pos1, reg2),
      (position_set_y, pos1, ":y_pos"),
      (overlay_set_position, reg1, pos1),
      
      (position_set_x, pos1, ":scaled_width"),
      (position_set_y, pos1, ":scaled_height"),
      (overlay_set_size, reg1, pos1),
      
      # (overlay_set_additional_render_height, reg1, 10), #float over lines MOTO
      # doesn't help
      
      (str_store_troop_name, s0, ":troop"),
      (create_text_overlay, reg1, "@{s0}", tf_center_justify),
      (position_set_x, pos1, ":x_pos"),
      (position_set_y, pos1, ":y_pos"),
      (overlay_set_position, reg1, pos1),
      
      (store_div, ":text_scaler", Troop_Tree_Area_Width, "$troop_tree_pic_width"),
      (val_max, ":text_scaler", ":scaler"),
      (store_div, reg2, 3500 * Screen_Undistort_Width_Num / Screen_Undistort_Width_Den, ":text_scaler"),
      (position_set_x, pos1, reg2),
      (store_div, reg2, 3500, ":text_scaler"),
      (position_set_y, pos1, reg2),
      (overlay_set_size, reg1, pos1),
      
      (store_div, reg3, ":scaled_height", 2),
      (store_sub, reg2, ":y_pos", reg3),
      (store_div, ":height_adjust", "$troop_tree_pic_height", 2),
      
      (store_add, ":next_x", ":x_pos", "$troop_tree_pic_width"),
      (troop_get_upgrade_troop, ":next_troop", ":troop", 0),
      (try_begin),
        (gt, ":next_troop", 0),
        (create_mesh_overlay, reg1, "mesh_white_plane"),
        (position_set_x, pos1, ":x_pos"),
        (store_add, reg2, ":y_pos", ":height_adjust"),
        (position_set_y, pos1, reg2),
        (overlay_set_position, reg1, pos1),
        
        (store_mul, reg2, "$troop_tree_pic_width", 50),
        (position_set_x, pos1, reg2),
        (position_set_y, pos1, 50 * 4),
        (overlay_set_size, reg1, pos1),
        
        (overlay_set_color, reg1, Troop_Tree_Line_Color),
        
        (call_script, "script_troop_tree_recurse", ":next_troop", ":next_x", ":next_y"),
        (assign, ":next_y", reg0),
      (try_end),
      
      (troop_get_upgrade_troop, ":next_troop", ":troop", 1),
      (try_begin),
        (gt, ":next_troop", 0),
        (val_sub, ":next_y", "$troop_tree_pic_height"),
        
        #half length horizontal, moved halfway
        (create_mesh_overlay, reg1, "mesh_white_plane"),
        (store_div, reg2, "$troop_tree_pic_width", 2),
        (val_add, reg2, ":x_pos"),
        (position_set_x, pos1, reg2),
        (store_add, reg2, ":next_y", ":height_adjust"),
        (position_set_y, pos1, reg2),
        (overlay_set_position, reg1, pos1),
        
        (store_mul, reg2, "$troop_tree_pic_width", 50),
        (val_div, reg2, 2),
        (position_set_x, pos1, reg2),
        (position_set_y, pos1, 50 * 4),
        (overlay_set_size, reg1, pos1),
        
        (overlay_set_color, reg1, Troop_Tree_Line_Color),
        
        #vertical to connect
        (create_mesh_overlay, reg1, "mesh_white_plane"),
        (store_div, reg2, "$troop_tree_pic_width", 2),
        (val_add, reg2, ":x_pos"),
        (position_set_x, pos1, reg2),
        (store_add, reg2, ":next_y", ":height_adjust"),
        (position_set_y, pos1, reg2),
        (overlay_set_position, reg1, pos1),
        
        (position_set_x, pos1, 50 * 3), #3/4 to undistort in wide screens
        (store_sub, reg2, ":y_pos", ":next_y"),
        (val_mul, reg2, 50),
        (position_set_y, pos1, reg2),
        (overlay_set_size, reg1, pos1),
        
        (overlay_set_color, reg1, Troop_Tree_Line_Color),
        
        (call_script, "script_troop_tree_recurse", ":next_troop", ":next_x", ":next_y"),
        (assign, ":next_y", reg0),
      (try_end),
      
      (assign, reg0, ":next_y"),]),
  
  
  #script_manage_legs_in_cur_tableau
  # INPUT: troop_no
  # OUTPUT: none
  ("manage_legs_in_cur_tableau", [
      (store_script_param, ":troop_no", 1),
      (cur_tableau_clear_override_items),
      #(troop_get_inventory_slot, ":armor", ":troop_no", ek_body),
      (assign, ":flags", 0),
      
      #(try_begin),
      #  (gt, ":armor", itm_no_item),
      #  (item_has_property, ":armor", itp_replaces_helm),
      #  (val_or, ":flags", af_override_head),
      #(try_end),
      
      (try_begin),
        (gt, ":flags", 0),
        (cur_tableau_set_override_flags, ":flags"),
      (try_end),
  ]),
  
  
  # script_troop_detail_layout
  # Troop Detail VC-2379
  # Description
  ("troop_detail_layout",
    [# Done
      (set_container_overlay, -1),
      (create_game_button_overlay, "$g_presentation_leave_button", "@Done"),
      (position_set_x, pos1, Screen_Width - 210),(position_set_y, pos1, 60),
      (overlay_set_position, "$g_presentation_leave_button", pos1),
      
      # Gear/Stats button
      (str_clear, s1),
      
      (try_begin),
        (eq, "$temp", 1),
        (str_store_string, s1, "@Inventory"),
      (else_try),
        (str_store_string, s1, "@Show stats"),
      (try_end),
      
      (create_game_button_overlay, "$g_presentation_obj_1", s1),
      (position_set_x, pos1, Screen_Width - 425),(position_set_y, pos1, 60),
      (overlay_set_position, "$g_presentation_obj_1", pos1),
      
      # Show item tooltip
      (create_check_box_overlay, "$checkbox_show_item_details", "mesh_checkbox_off", "mesh_checkbox_on"),
      (position_set_x, pos1, 915),(position_set_y, pos1, 675),
      (overlay_set_position, "$checkbox_show_item_details", pos1),
      (overlay_set_val, "$checkbox_show_item_details", "$checkbox_show_item_details_val"),
      
      (create_text_overlay, "$checkbox_show_item_details_label", "@Show item details  ", tf_right_align),
      (position_set_x, pos1, 915),(position_set_y, pos1, 675 - 5),
      (overlay_set_position, "$checkbox_show_item_details_label", pos1),
      (position_set_x, pos1, font_normal),(position_set_y, pos1, font_normal),
      (overlay_set_size, "$checkbox_show_item_details_label", pos1),
      (overlay_set_color, "$checkbox_show_item_details_label", 0x000000),
      
      (try_begin),
        (eq, "$temp", 1),
        (overlay_set_display, "$checkbox_show_item_details_label", 0),
        (overlay_set_display, "$checkbox_show_item_details", 0),
      (try_end),
      
      # title
      (create_text_overlay, reg1, "@Troop detail", tf_center_justify),
      (position_set_x, pos1, 500),(position_set_y, pos1, Screen_Height - 85),
      (overlay_set_position, reg1, pos1),
      (position_set_x, pos1, font_title),(position_set_y, pos1, font_title),
      (overlay_set_size, reg1, pos1),
      
      (create_text_overlay, reg1, "@Troop detail", tf_center_justify),
      (position_set_x, pos1, 500 + 1),(position_set_y, pos1, Screen_Height - 85),
      (overlay_set_position, reg1, pos1),
      (position_set_x, pos1, font_title),(position_set_y, pos1, font_title),
      (overlay_set_size, reg1, pos1),
      
      (create_text_overlay, reg1, "@Troop detail", tf_center_justify),
      (position_set_x, pos1, 500 + 2),(position_set_y, pos1, Screen_Height - 85 + 1),
      (overlay_set_position, reg1, pos1),
      (position_set_x, pos1, font_title),(position_set_y, pos1, font_title),
      (overlay_set_size, reg1, pos1),]),
  
  # "script_troop_detail_draw_troop"
  # Input: troop_id
  # Output: none
  ("troop_detail_draw_troop",
    [(store_script_param_1, ":troop_id"),
      
      #(create_mesh_overlay, reg1, "mesh_white_plane"),
      #(position_set_x, pos1, 10 * 1000),
      #(position_set_y, pos1, 24 * 1000),
      #(overlay_set_size, reg1, pos1),
      #(position_set_x, pos1, 90),
      #(position_set_y, pos1, 150),
      #(overlay_set_position, reg1, pos1),
      #(overlay_set_color, reg1, 0xE6D1A7),
      
      (try_begin),
        (eq, "$temp", 1),
        (store_mul, ":cur_troop", ":troop_id", 2),#with weapons
        (create_mesh_overlay_with_tableau_material,
          "$default_troop_portrait",
          -1,
          "tableau_troop_tree_pic",
        ":cur_troop"),
      (else_try),
        (create_mesh_overlay_with_tableau_material,
          "$default_troop_portrait",
          -1,
          "tableau_troop_detail_dummy_pic",
        ":troop_id"),
      (try_end),
      
      (position_set_x, pos1,  Troop_Tree_Tableau_Width * 0.8),
      (position_set_y, pos1, Troop_Tree_Tableau_Height * 0.8),
      (overlay_set_size, "$default_troop_portrait", pos1),
      (position_set_x, pos1, 0),(position_set_y, pos1, 150),
      (overlay_set_position, "$default_troop_portrait", pos1),]),
  
  
  # "script_troop_detail_draw_weapons"
  # Input: troop_id
  # Output: none
  ("troop_detail_draw_weapons",
    [(store_script_param_1, ":troop_id"),
      
      (call_script, "script_troop_detail_draw_weapons_aux", ":troop_id", ek_item_0),
      (call_script, "script_troop_detail_draw_weapons_aux", ":troop_id", ek_item_1),
      (call_script, "script_troop_detail_draw_weapons_aux", ":troop_id", ek_item_2),
      (call_script, "script_troop_detail_draw_weapons_aux", ":troop_id", ek_item_3),]),
  
  # "script_troop_detail_draw_weapons_aux"
  # Input: troop_id, wp_number
  # Output: none
  ("troop_detail_draw_weapons_aux",
    [(store_script_param_1, ":troop_id"),
      (store_script_param_2, ":wp_number"),
      
      (troop_get_inventory_slot, ":wp", ":troop_id", ":wp_number"),
      
      (try_begin),
        (neq, ":wp", -1),
        
        (assign, ":y", 500),
        (store_mul, ":dec_y", 100, ":wp_number"),
        (val_sub, ":y", ":dec_y"),
        (store_add, ":y2", ":y", 40),
        
        (create_mesh_overlay, reg1, "mesh_mp_inventory_choose"),
        (position_set_x, pos1, 300),(position_set_y, pos1, ":y"),
        (overlay_set_position, reg1, pos1),
        
        (create_mesh_overlay_with_item_id, reg2, ":wp"),
        (position_set_x, pos1, 300 + 40),(position_set_y, pos1, ":y2"),
        (overlay_set_position, reg2, pos1),
        
        (position_set_x, pos2, 600),(position_set_y, pos2, 600),
        (overlay_set_size, reg1, pos2),
        (overlay_set_alpha, reg1, 0xFF),
        (overlay_set_size, reg2, pos2),
      (try_end),]),
  
  # "script_troop_detail_stats"
  # Input: troop_id
  # Output: none
  ("troop_detail_stats",
    [(store_script_param_1, ":troop_id"),
      
      (create_mesh_overlay, ":stats_area", "mesh_white_plane"),
      (position_set_x, pos1, 24 * 1000),(position_set_y, pos1, 24 * 1000),
      (overlay_set_size, ":stats_area", pos1),
      (position_set_x, pos1, 450),(position_set_y, pos1, 150),
      (overlay_set_position, ":stats_area", pos1),
      (overlay_set_color, ":stats_area", 0xE6D1A7),
      
      (str_store_troop_name, s1, ":troop_id"),
      
      (store_attribute_level, ":troop_str", ":troop_id", ca_strength),
      (store_attribute_level, ":troop_agi", ":troop_id", ca_agility),
      
      (store_skill_level, ":troop_powerstrike", "skl_power_strike", ":troop_id"),
      (store_skill_level, ":troop_athletics", "skl_athletics", ":troop_id"),
      (store_skill_level, ":troop_riding", "skl_riding", ":troop_id"),
      (store_skill_level, ":troop_powerthrow", "skl_power_throw", ":troop_id"),
      (store_skill_level, ":troop_powerdraw", "skl_power_draw", ":troop_id"),
      
      (store_proficiency_level, ":troop_onehanded", ":troop_id", wpt_one_handed_weapon),
      (store_proficiency_level, ":troop_twohanded", ":troop_id", wpt_two_handed_weapon),
      (store_proficiency_level, ":troop_polearm", ":troop_id", wpt_polearm),
      (store_proficiency_level, ":troop_archery", ":troop_id", wpt_archery),
      (store_proficiency_level, ":troop_crossbow", ":troop_id", wpt_crossbow),
      (store_proficiency_level, ":troop_throwing", ":troop_id", wpt_throwing),
      (store_proficiency_level, ":troop_slings", ":troop_id", wpt_firearm),
      
      # Check items for weapon skills of the troops
      (assign, ":has_onehand", 0),
      (assign, ":has_twohand", 0),
      (assign, ":has_polearm", 0),
      (assign, ":has_crossbow", 0),
      (assign, ":has_archery", 0),
      (assign, ":has_sling", 0),
      (assign, ":has_throw", 0),
      
      (try_for_range, ":i", 0, 64),
        (troop_get_inventory_slot, ":item", ":troop_id", ":i"),
        (neq, ":item", -1),
        (item_get_type, ":type", ":item"),
        
        (try_begin),
          (eq, ":type", itp_type_bow),
          (assign, ":has_archery", 1),
        (else_try),
          (eq, ":type", itp_type_crossbow),
          (assign, ":has_crossbow", 1),
        (else_try),
          (eq, ":type", itp_type_pistol),
          (assign, ":has_sling", 1),
        (else_try),# throwable spears are both
          (try_begin),
            (eq, ":type", itp_type_thrown),
            (assign, ":has_throw", 1),
          (try_end),
          
          (eq, ":type", itp_type_polearm),
          (assign, ":has_polearm", 1),
        (else_try),
          (eq, ":type", itp_type_one_handed_wpn),
          (assign, ":has_onehand", 1),
        (else_try),
          (eq, ":type", itp_type_two_handed_wpn),
          (assign, ":has_twohand", 1),
        (try_end),
      (try_end),
      
      (store_troop_health, ":troop_hp", ":troop_id", 1),
      (store_character_level, ":troop_level", ":troop_id"),
      
      (str_store_string, s1, "@{s1}^"),
      (assign, reg1, ":troop_level"),
      (str_store_string, s1, "@{s1}Level: {reg1}^"),
      (assign, reg1, ":troop_hp"),
      (str_store_string, s1, "@{s1}Hit Points: {reg1}"),
      
      (create_text_overlay, reg1, s1, tf_left_align | tf_double_space),
      (position_set_x, pos1, 465),(position_set_y, pos1, 530),
      (overlay_set_position, reg1, pos1),
      (position_set_x, pos1, font_normal),(position_set_y, pos1, font_normal),
      (overlay_set_size, reg1, pos1),
      
      (str_clear, s1),(str_clear, s2),
      (assign, reg1, ":troop_str"),
      (str_store_string, s1, "@{s1}Atributes: ^   Strength:^"),
      (str_store_string, s2, "@{s2}^{reg1}^"),
      (assign, reg1, ":troop_agi"),
      (str_store_string, s1,   "@{s1}   Agility:"),
      (str_store_string, s2, "@{s2}{reg1}"),
      
      (create_text_overlay, reg1, s1, tf_left_align | tf_double_space),
      (position_set_x, pos1, 465),(position_set_y, pos1, 405),
      (overlay_set_position, reg1, pos1),
      (position_set_x, pos1, font_normal),(position_set_y, pos1, font_normal),
      (overlay_set_size, reg1, pos1),
      
      (create_text_overlay, reg1, s2, tf_center_justify | tf_double_space),
      (position_set_x, pos1, 465 + 145),(position_set_y, pos1, 405),
      (overlay_set_position, reg1, pos1),
      (position_set_x, pos1, font_normal),(position_set_y, pos1, font_normal),
      (overlay_set_size, reg1, pos1),
      
      (str_clear, s1),(str_clear, s2),
      (assign, reg1, ":troop_powerstrike"),
      (str_store_string, s1, "@{s1}Main skills: ^"),
      (str_store_string, s1, "@{s1}   Power Strike:^"),
      (str_store_string, s2, "@{s2}{reg1}^"),
      (assign, reg1, ":troop_athletics"),
      (str_store_string, s1, "@{s1}   Athletics:^"),
      (str_store_string, s2, "@{s2}{reg1}^"),
      (assign, reg1, ":troop_riding"),
      (str_store_string, s1, "@{s1}   Riding:^"),
      
      (try_begin),
        (troop_is_mounted, ":troop_id"),
        (str_store_string, s2, "@{s2}{reg1}^"),
      (else_try),
        (str_store_string, s2, "@{s2}-^"),
      (try_end),
      
      (assign, reg1, ":troop_powerthrow"),
      (str_store_string, s1, "@{s1}   Power Throw:^"),
      
      (try_begin),
        (eq, ":has_throw", 1),
        (str_store_string, s2, "@{s2}{reg1}^"),
      (else_try),
        (str_store_string, s2, "@{s2}-^"),
      (try_end),
      
      (assign, reg1, ":troop_powerdraw"),
      (str_store_string, s1, "@{s1}   Power Draw:^^"),
      
      (try_begin),
        (eq, ":has_archery", 1),
        (str_store_string, s2, "@{s2}{reg1}^^"),
      (else_try),
        (str_store_string, s2, "@{s2}-^^"),
      (try_end),
      
      (create_text_overlay, reg1, s1, tf_left_align | tf_double_space),
      (position_set_x, pos1, 465),(position_set_y, pos1, 170),
      (overlay_set_position, reg1, pos1),
      (position_set_x, pos1, font_normal),(position_set_y, pos1, font_normal),
      (overlay_set_size, reg1, pos1),
      
      (create_text_overlay, reg1, s2, tf_center_justify | tf_double_space),
      (position_set_x, pos1, 645),(position_set_y, pos1, 170),
      (overlay_set_position, reg1, pos1),
      (position_set_x, pos1, font_normal),(position_set_y, pos1, font_normal),
      (overlay_set_size, reg1, pos1),
      
      (str_clear, s1),(str_clear, s2),
      (str_store_string, s1, "@{s1}Weapons:^"),
      (assign, reg1, ":troop_onehanded"),
      (str_store_string, s1, "@{s1}   One Handed:^"),
      
      (try_begin),
        (eq, ":has_onehand", 1),
        (str_store_string, s2, "@{s2}{reg1}^"),
      (else_try),
        (str_store_string, s2, "@{s2}-^"),
      (try_end),
      
      (assign, reg1, ":troop_twohanded"),
      (str_store_string, s1, "@{s1}   Two Handed:^"),
      
      (try_begin),
        (eq, ":has_twohand", 1),
        (str_store_string, s2, "@{s2}{reg1}^"),
      (else_try),
        (str_store_string, s2, "@{s2}-^"),
      (try_end),
      
      (assign, reg1, ":troop_polearm"),
      (str_store_string, s1, "@{s1}   Polearms:^"),
      
      (try_begin),
        (eq, ":has_polearm", 1),
        (str_store_string, s2, "@{s2}{reg1}^"),
      (else_try),
        (str_store_string, s2, "@{s2}-^"),
      (try_end),
      
      (assign, reg1, ":troop_archery"),
      (str_store_string, s1, "@{s1}   Archery:^"),
      
      (try_begin),
        (eq, ":has_archery", 1),
        (str_store_string, s2, "@{s2}{reg1}^"),
      (else_try),
        (str_store_string, s2, "@{s2}-^"),
      (try_end),
      
      (assign, reg1, ":troop_crossbow"),
      (str_store_string, s1, "@{s1}   Crossbow:^"),
      
      (try_begin),
        (eq, ":has_crossbow", 1),
        (str_store_string, s2, "@{s2}{reg1}^"),
      (else_try),
        (str_store_string, s2, "@{s2}-^"),
      (try_end),
      
      (assign, reg1, ":troop_throwing"),
      (str_store_string, s1, "@{s1}   Throwing:^"),
      
      (try_begin),
        (eq, ":has_throw", 1),
        (str_store_string, s2, "@{s2}{reg1}^"),
      (else_try),
        (str_store_string, s2, "@{s2}-^"),
      (try_end),
      
      (assign, reg1, ":troop_slings"),
      (str_store_string, s1, "@{s1}   Slings:"),
      
      (try_begin),
        (eq, ":has_sling", 1),
        (str_store_string, s2, "@{s2}{reg1}"),
      (else_try),
        (str_store_string, s2, "@{s2}-"),
      (try_end),
      
      (create_text_overlay, reg1, s1, tf_left_align | tf_double_space),
      (position_set_x, pos1, 465 + 240),(position_set_y, pos1, 275),
      (overlay_set_position, reg1, pos1),
      (position_set_x, pos1, font_normal),(position_set_y, pos1, font_normal),
      (overlay_set_size, reg1, pos1),
      
      (create_text_overlay, reg1, s2, tf_center_justify | tf_double_space),
      (position_set_x, pos1, 465 + 240 + 192),(position_set_y, pos1, 275),
      (overlay_set_position, reg1, pos1),
      (position_set_x, pos1, font_normal),(position_set_y, pos1, font_normal),
      (overlay_set_size, reg1, pos1),]),
  
  # Uses trp_temp_troop to gather the items
  # "script_troop_detail_inventory"
  # Output: $temp2 with the quantity of items on inventory
  # Output: trp_temp_array_a, trp_temp_array_b, trp_temp_array_c
  ("troop_detail_inventory",
    [# Container 1: selection
      (create_text_overlay, ":gear_container", "str_empty_string", tf_scrollable_style_2),
      (position_set_x, pos1, 450),(position_set_y, pos1, 150),
      (overlay_set_position, ":gear_container", pos1),
      (position_set_x, pos1, 480),(position_set_y, pos1, 480),
      (overlay_set_area_size, ":gear_container", pos1),
      (set_container_overlay, ":gear_container"),
      
      (troop_sort_inventory, "trp_temp_troop"),
      (troop_get_inventory_capacity, ":num_slots", "trp_temp_troop"),
      (store_free_inventory_capacity, ":num_free_slots", "trp_temp_troop"),
      (store_sub, ":num_items", ":num_slots", ":num_free_slots"),
      (val_sub, ":num_items", 10),
      
      (store_div, ":y_max", ":num_items", 4),
      
      (assign, ":box_incr", 115),
      (val_max, ":y_max", 1),
      (val_mul, ":y_max", ":box_incr"),
      
      (assign, ":x_item", 60),
      (store_add, ":y_item", ":y_max", 60),
      (assign, ":count", 0),
      (assign, ":x_box", 0),
      (assign, ":y_box", ":y_max"),
      
      # 0-70 for body armor, 71-140 for helmet, 141-210 for boots, 211-299 rest
      # 300+ for imod of each item
      (assign, ":limit_temp_c", 300),
      (store_mul, reg0, ":limit_temp_c", 2),
      
      (try_for_range, ":slot", 0, reg0),
        (troop_set_slot, "trp_temp_array_a", ":slot", -1),
        (troop_set_slot, "trp_temp_array_b", ":slot", -1),
        (troop_set_slot, "trp_temp_array_c", ":slot", -1),
      (try_end),
      
      (assign, ":armor_slot", 0),
      (assign, ":helmet_slot", 71),
      (assign, ":boots_slot", 141),
      (assign, ":rest_slot", 211),
      (assign, ":imod_slot_add", 300),
      
      (try_for_range, ":slot", 0, ":num_slots"),
        (troop_get_inventory_slot, ":item", "trp_temp_troop", ":slot"),
        (neq, ":item", -1),
        (troop_get_inventory_slot_modifier, ":item_imod", "trp_temp_troop", ":slot"),
        
        (item_get_type, ":type", ":item"),
        
        (try_begin),
          (eq, ":type", itp_type_body_armor),
          (troop_set_slot, "trp_temp_array_c", ":armor_slot", ":item"),
          (store_add, reg0, ":armor_slot", ":imod_slot_add"),
          (troop_set_slot, "trp_temp_array_c", reg0, ":item_imod"),
          (val_add, ":armor_slot", 1),
        (else_try),
          (eq, ":type", itp_type_head_armor),
          (troop_set_slot, "trp_temp_array_c", ":helmet_slot", ":item"),
          (store_add, reg0, ":helmet_slot", ":imod_slot_add"),
          (troop_set_slot, "trp_temp_array_c", reg0, ":item_imod"),
          (val_add, ":helmet_slot", 1),
        (else_try),
          (eq, ":type", itp_type_foot_armor),
          (troop_set_slot, "trp_temp_array_c", ":boots_slot", ":item"),
          (store_add, reg0, ":boots_slot", ":imod_slot_add"),
          (troop_set_slot, "trp_temp_array_c", reg0, ":item_imod"),
          (val_add, ":boots_slot", 1),
        (else_try),
          (troop_set_slot, "trp_temp_array_c", ":rest_slot", ":item"),
          (store_add, reg0, ":rest_slot", ":imod_slot_add"),
          (troop_set_slot, "trp_temp_array_c", reg0, ":item_imod"),
          (val_add, ":rest_slot", 1),
        (try_end),
      (try_end),
      
      (try_for_range, ":slot", 0, ":limit_temp_c"),
        (troop_get_slot, ":item", "trp_temp_array_c", ":slot"),
        
        (try_begin),
          (neq, ":item", -1),
          (store_add, reg0, ":slot", 300),
          (troop_get_slot, ":item_imod", "trp_temp_array_c", reg0),
          
          (val_add, ":count", 1),
          
          (create_mesh_overlay, reg1, "mesh_mp_inventory_choose"),
          (position_set_x, pos1, ":x_box"),(position_set_y, pos1, ":y_box"),
          (overlay_set_position, reg1, pos1),
          (position_set_x, pos1, 900),(position_set_y, pos1, 900),
          (overlay_set_size, reg1, pos1),
          (overlay_set_alpha, reg1, 0xFF),
          
          (create_mesh_overlay_with_item_id, reg1, ":item"),
          (position_set_x, pos1, ":x_item"),(position_set_y, pos1, ":y_item"),
          (overlay_set_position, reg1, pos1),
          (position_set_x, pos1, 1250),(position_set_y, pos1, 1250),
          (overlay_set_size, reg1, pos1),
          
          (val_add, ":x_item", 115),
          (val_add, ":x_box", 115),
          
          (try_begin),# next row items
            (store_mod, ":mod", ":count", 4),
            (eq, ":mod", 0),
            (val_sub, ":y_item", 115),
            (val_sub, ":y_box", 115),
            (assign, ":x_item", 60),
            (assign, ":x_box", 0),
          (try_end),
          
          #tooltip
          (store_add, reg0, ":count", ":imod_slot_add"),
          (troop_set_slot, "trp_temp_array_a", ":count", reg1),
          (troop_set_slot, "trp_temp_array_b", ":count", ":item"),
          (troop_set_slot, "trp_temp_array_b", reg0, ":item_imod"),
        (try_end),
      (try_end),
      
      (assign, "$temp2", ":count"),
      (set_container_overlay, -1),
      
      # Text about troop inventory
      (try_begin),
        (create_text_overlay, reg1,
          "@(Click on the troop to rotate it)^^Click on pieces of gear ^(helmet, armor, gloves and boots)^ to display them.",
        tf_center_justify),
        (position_set_x, pos1, 245),(position_set_y, pos1, 27),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, font_normal),(position_set_y, pos1, font_normal),
        (overlay_set_size, reg1, pos1),
        (overlay_set_color, reg1, 0x000000),
      (try_end),
  ]),
  
  # "script_troop_detail_inventory_tooltip"
  ("troop_detail_inventory_tooltip",
    [(try_begin),
        (store_trigger_param_1, ":object"),
        (store_trigger_param_2, ":enter_leave"),
        
        (eq, "$checkbox_show_item_details_val", 1),
        (eq, "$temp", 2),
        
        (try_begin),
          (eq, ":enter_leave", 1),
          (close_item_details),
          
        (else_try),
          (assign, ":end_loop", "$temp2"),
          (val_add, ":end_loop", 1),
          
          (try_for_range, ":i", 1, ":end_loop"),
            (troop_get_slot, reg1, "trp_temp_array_a", ":i"),
            (eq, ":object", reg1),
            (troop_get_slot, reg2, "trp_temp_array_b", ":i"),
            
            (store_add, reg3, ":i", 300),
            (troop_get_slot, reg4, "trp_temp_array_b", reg3),
            (overlay_get_position, pos1, ":object"),
            (show_item_details_with_modifier, reg2, reg4, pos1, 100),
            (assign, ":end_loop", 0),
          (try_end),
        (try_end),
      (try_end),]),
  
  # "script_troop_detail_update_dummy"
  # Input: troop_id, $temp2: quantity of items, trp_temp_array_a,
  # trp_temp_array_b
  # Output: reg10 : should update presentation
  ("troop_detail_update_dummy",
    [(store_script_param_1, ":troop_id"),
      (store_script_param_2, ":object"),
      
      (try_begin),
        # Rotate
        (eq, ":object", "$default_troop_portrait"),
        (val_add, "$troop_detail_dummy_angle", 1),
        (try_begin),
          (ge, "$troop_detail_dummy_angle", 4),
          (assign, "$troop_detail_dummy_angle", 0),
        (try_end),
        (assign, ":redraw_troop", 1),
        
      (else_try),
        # Change gear
        (assign, ":end_loop", "$temp2"),
        (val_add, ":end_loop", 1),
        (assign, ":new_item", -1),
        (assign, reg10, 0),
        
        (try_for_range, ":i", 1, ":end_loop"),
          (troop_get_slot, reg1, "trp_temp_array_a", ":i"),
          (eq, ":object", reg1),
          (troop_get_slot, ":new_item", "trp_temp_array_b", ":i"),
          (store_add, reg0, ":i", 300),
          (troop_get_slot, ":new_item_imod", "trp_temp_array_b", reg0),
          
          (assign, ":end_loop", 0),
          
          (item_get_type, ":type", ":new_item"),
          
          (try_begin),
            (eq, ":type", itp_type_body_armor),
            (call_script, "script_troop_detail_update_dummy_gear_aux", ":troop_id", ek_body, ":new_item", ":new_item_imod"),
            
          (else_try),
            (eq, ":type", itp_type_head_armor),
            (call_script, "script_troop_detail_update_dummy_gear_aux", ":troop_id", ek_head, ":new_item", ":new_item_imod"),
            
          (else_try),
            (eq, ":type", itp_type_foot_armor),
            (call_script, "script_troop_detail_update_dummy_gear_aux", ":troop_id", ek_foot, ":new_item", ":new_item_imod"),
            
          (else_try),
            (eq, ":type", itp_type_hand_armor),
            (call_script, "script_troop_detail_update_dummy_gear_aux", ":troop_id", ek_gloves, ":new_item", ":new_item_imod"),
          (try_end),
          (troop_sort_inventory, ":troop_id"),
          
        (try_end),
        (assign, ":redraw_troop", reg10),
      (try_end),
      
      (try_begin),
        (eq, ":redraw_troop", 1),
        (start_presentation, "prsnt_troop_detail"),
      (try_end),]),
  
  # "script_troop_detail_update_dummy_gear_aux"
  # Input: troop_id, body_part, new_item
  # Output: reg10 with redraw_troop
  ("troop_detail_update_dummy_gear_aux",
    [(store_script_param_1, ":troop_id"),
      (store_script_param_2, ":body_part"),
      (store_script_param, ":new_item", 3),
      (store_script_param, ":new_item_imod", 4),
      
      (assign, ":redraw_troop", 0),
      
      (try_begin),
        (troop_get_inventory_slot, ":old_item", ":troop_id", ":body_part"),
        (neq, ":old_item", ":new_item"),
        (troop_get_inventory_slot_modifier, ":old_item_imod", ":troop_id", ":body_part"),
        (troop_remove_item, ":troop_id", ":new_item"),
        (troop_set_inventory_slot, ":troop_id", ":body_part", ":new_item"),
        (troop_set_inventory_slot_modifier, ":troop_id", ":body_part", ":new_item_imod"),
        (assign, ":redraw_troop", 1),
        
        (neq, ":old_item", -1),
        (troop_add_item, ":troop_id", ":old_item", ":old_item_imod"),
        
      (try_end),
      
      (assign, reg10, ":redraw_troop"),]),
  
  # Changes between STATS and INVENTORY screens
  # "script_troop_detail_change_screen"
  # Input: none
  # Output: none
  ("troop_detail_change_screen",
    [(store_script_param_1, ":troop_id"),
      
      (try_begin),
        (eq, "$temp", 1),
        (assign, "$temp", 2),
        
        # Clone dummy gear
        (troop_clear_inventory, "trp_temp_troop"),
        (troop_get_inventory_capacity, ":slots", "trp_temp_troop"),
        (try_for_range, ":i", 0, ":slots"),
          (troop_set_inventory_slot, "trp_temp_troop", ":i", -1),
          (troop_set_inventory_slot_modifier, "trp_temp_troop", ":i", 0),
        (try_end),
        
        (assign, ":clone_slot", 10),
        (troop_set_auto_equip, "trp_temp_troop", 0),
        
        (try_for_range, ":i", 0, ":slots"),
          (troop_get_inventory_slot, ":item_id", ":troop_id", ":i"),
          (neq, ":item_id", -1),
          (troop_get_inventory_slot_modifier, ":item_imod", ":troop_id", ":i"),
          (troop_set_inventory_slot, "trp_temp_troop",  ":clone_slot", ":item_id"),
          (troop_set_inventory_slot_modifier, "trp_temp_troop", ":clone_slot", ":item_imod"),
          
          (val_add, ":clone_slot", 1),
        (try_end),
        (assign, "$troop_detail_dummy_angle", 0),
        
      (else_try),
        (assign, "$temp", 1),
      (try_end),
      
      (start_presentation, "prsnt_troop_detail"),]),
  
  
  # script_add_troop_to_cur_tableau_for_troop_detail_dummy
  # Used on Troop Detail to display the dummy troop (player can switch helmet,
  # chest, boots)
  # Input: troop_no (x4 as it has the rotation angle too)
  ("add_troop_to_cur_tableau_for_troop_detail_dummy",
    [(store_script_param, ":troop_no",1),
      (assign, ":side", "$troop_detail_dummy_angle"),
      (val_mul, ":side", 90), #to degrees
      
      (assign, reg0, ":side"),
      
      (set_fixed_point_multiplier, 100),
      
      (cur_tableau_clear_override_items),
      #(cur_tableau_set_override_flags, af_override_weapons),
      
      (init_position, pos2),
      (position_rotate_z, pos2, ":side"),
      (cur_tableau_set_camera_parameters, 1, 6, 6, 10, 10000),
      
      (init_position, pos5),
      (assign, ":cam_height", 105),
      (assign, ":camera_distance", 450),
      (assign, ":camera_yaw", 15),
      (assign, ":camera_pitch", -18),
      (assign, ":animation", anim_stand_man),
      
      (position_set_z, pos5, ":cam_height"),
      
      # camera looks towards -z axis
      (position_rotate_x, pos5, -90),
      (position_rotate_z, pos5, 180),
      
      # now apply yaw and pitch
      (position_rotate_y, pos5, ":camera_yaw"),
      (position_rotate_x, pos5, ":camera_pitch"),
      (position_move_z, pos5, ":camera_distance", 0),
      (position_move_x, pos5, 5, 0),
      
      (call_script, "script_manage_legs_in_cur_tableau", ":troop_no"),
      
      (store_mul, ":random_seed", ":troop_no", 126233),
      (val_mod, ":random_seed", 1000),
      (val_add, ":random_seed", 1),
      (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
      
      (cur_tableau_set_camera_position, pos5),
      
      (copy_position, pos8, pos5),
      (position_rotate_x, pos8, -90), #y axis aligned with camera now.  z is up
      (position_rotate_z, pos8, 30),
      (position_rotate_x, pos8, -60),
      (cur_tableau_add_sun_light, pos8, 175,150,125),]),
  
  #script_game_troop_upgrades_button_clicked
  # This script is called from the game engine when the player clicks on said button from the party screen
  # INPUT: arg1 = troop_id
  ("game_troop_upgrades_button_clicked", [
      (store_script_param, reg0, 1),
      (start_presentation, "prsnt_game_troop_tree"),
  ]),
  
  ### Kham Troop Tree Scripts END ###

  #+freelancer start
  ("freelancer_attach_party",
    [
      #prepare player to be part of lord's party
      (party_attach_to_party, "p_main_party", "$enlisted_party"),
      (set_camera_follow_party, "$enlisted_party"),
      (party_set_flags, "$enlisted_party", pf_always_visible, 1),
      (disable_party, "p_main_party"),
      
      #initialize service variable
      (assign, "$freelancer_state", 1),
      
      #If player is a sarge or captain, remove his party - Kham
      (store_faction_of_troop, ":commander_faction", "$enlisted_lord"),
      (try_begin),
        (faction_get_slot, ":is_sarge", ":commander_faction", slot_faction_freelancer_captain), #is sarge / captain?
        (gt, ":is_sarge", 0),
        (call_script, "script_freelancer_restore_player_party"),
      (try_end),
      #End Removal of Player Party
  ]),
  
  ("freelancer_detach_party",
    [
      #removes player from commanders party
      (enable_party, "p_main_party"),
      (party_detach, "p_main_party"),
      
      (try_begin),
        (party_is_active, "$enlisted_party"),
        (party_relocate_near_party, "p_main_party", "$enlisted_party", 2),
        (party_set_flags, "$enlisted_party", pf_always_visible, 0),
      (try_end),
      
      (set_camera_follow_party, "p_main_party"),
      (assign, "$g_player_icon_state", pis_normal),
  ]),
  
  # ADDS THE PLAYER TO THE LORD'S PARTY
  ("event_player_enlists",[
      
      #initialize service variables
      (troop_get_xp, ":xp", "trp_player"),
      (troop_set_slot, "trp_player", slot_troop_freelancer_start_xp, ":xp"),
      (store_current_day, ":day"),
      (troop_set_slot, "trp_player", slot_troop_freelancer_start_date, ":day"),
      (store_add, "$g_next_pay_time", ":day", 7), #Payday every 7 days. We initiate it here.
      (party_get_morale, ":morale", "p_main_party"),
      (party_set_slot, "p_main_party", slot_party_orig_morale, ":morale"),
      #(assign, "$freelancer_state", 1), #moved to script
      
      #needed to stop bug where parties attack the old player party
      (call_script, "script_set_parties_around_player_ignore_player", 2, 4),
      
      #set lord as your commander
      (assign, "$enlisted_lord", "$g_talk_troop"),
      (troop_get_slot, "$enlisted_party", "$enlisted_lord", slot_troop_leaded_party),
      
      #removes troops from player party
      (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
      (try_for_range_backwards, ":cur_stack", 1, ":num_stacks"), #lower bound is 1 to ignore player character
        (party_stack_get_troop_id, ":cur_troops", "p_main_party", ":cur_stack"),
        (party_stack_get_size, ":cur_size", "p_main_party", ":cur_stack"),
        (party_remove_members, "p_main_party", ":cur_troops", ":cur_size"),
      (try_end),
      
      #set faction relations to allow player to join battles
      (store_troop_faction, ":commander_faction", "$enlisted_lord"),
      (try_begin),
        (store_relation, ":player_relation", ":commander_faction", "fac_player_supporters_faction"),
        (lt, ":player_relation", 5),
        (call_script, "script_set_player_relation_with_faction", ":commander_faction", 5),
      (try_end),
      (try_for_range, ":cur_faction", kingdoms_begin, kingdoms_end),
        (neq, ":commander_faction", ":cur_faction"),
        (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
        (store_relation, ":player_relation", ":cur_faction", "fac_player_supporters_faction"),
        (ge, ":player_relation", 0),
        (call_script, "script_set_player_relation_with_faction", ":cur_faction", -5),
      (try_end),
      
      #adds standard issued equipment
      (try_begin),
        (neg|faction_slot_eq, ":commander_faction", slot_faction_freelancer_troop, 0),
        (faction_get_slot, "$player_cur_troop", ":commander_faction", slot_faction_freelancer_troop),
      (else_try),
        (faction_get_slot, "$player_cur_troop", ":commander_faction", slot_faction_tier_1_troop),
      (try_end),
      
      (call_script, "script_freelancer_equip_troop", "$player_cur_troop"),
      
      (call_script, "script_freelancer_attach_party"),
      
      #makes Lords banner the players
      (troop_get_slot, ":banner", "$enlisted_lord", slot_troop_banner_scene_prop),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, ":banner"),
      (display_message, "@You have been enlisted!"),
      
      #Track Player's Freelancer Rank in the Faction. If never enlisted, assign 1st rank - Kham
      (faction_get_slot, ":freelancer_rank", "$g_talk_troop_faction", slot_freelancer_rank),
      (try_begin),
        (lt, ":freelancer_rank", 1),
        (faction_set_slot, "$g_talk_troop_faction", slot_freelancer_rank , 1),
      (try_end),
      
      #Kham - Freelancer Captain
      (try_begin),
        (faction_get_slot, ":is_captain", ":commander_faction", slot_faction_freelancer_captain), #Are they currently a captain for this faction?
        (lt, ":is_captain", 0),
        (faction_set_slot, ":commander_faction", slot_faction_freelancer_captain, 0), #-1 means no longer sarge / captain. They will have to prove themselves again, so we set it back to 0.
      (try_end),
      #Kham - Freelancer Captain END
      
      (str_store_troop_name_link, s13, "$enlisted_lord"),
      (str_store_faction_name_link, s14, ":commander_faction"),
      (quest_set_slot, "qst_freelancer_enlisted", slot_quest_target_party, "$enlisted_party"),
      (quest_set_slot, "qst_freelancer_enlisted", slot_quest_importance, 5),
      (quest_set_slot, "qst_freelancer_enlisted", slot_quest_xp_reward, 1000),
      (quest_set_slot, "qst_freelancer_enlisted", slot_quest_gold_reward, 100),
      (setup_quest_text, "qst_freelancer_enlisted"),
      (str_clear, s2), #description. necessary?
      (call_script, "script_start_quest", "qst_freelancer_enlisted", "$enlisted_lord"),
      (str_store_troop_name, s5, "$player_cur_troop"),
      (str_store_string, s5, "@Current rank: {s5}"),
      (add_quest_note_from_sreg, "qst_freelancer_enlisted", 3, s5, 1),
  ]),
  
  #  RUNS IF THE PLAYER LEAVES THE ARMY
  
  ("event_player_discharge",
    [
      #removes faction relation given at enlist
      (store_troop_faction, ":commander_faction", "$enlisted_lord"),
      (call_script, "script_change_player_relation_with_faction_ex", ":commander_faction", 5),
      (try_for_range, ":cur_faction", kingdoms_begin, kingdoms_end),
        (neq, ":commander_faction", ":cur_faction"),
        (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
        (store_relation, ":player_relation", ":cur_faction", "fac_player_supporters_faction"),
        (lt, ":player_relation", 0),
        (call_script, "script_set_player_relation_with_faction", ":cur_faction", 0),
      (try_end),
      # removes standard issued equipment
      # (try_for_range, ":cur_inv_slot", ek_item_0, ek_food),
      # (troop_get_inventory_slot, ":soldier_equipment", "$player_cur_troop", ":cur_inv_slot"),
      # (ge, ":soldier_equipment", 0),
      # (troop_remove_item, "trp_player", ":soldier_equipment"),
      # (try_end),
      (call_script, "script_freelancer_unequip_troop", "$player_cur_troop"),
      (troop_equip_items, "trp_player"),
      
      
      (troop_set_slot, "trp_player", slot_troop_current_mission, 0),
      (troop_set_slot, "trp_player", slot_troop_days_on_mission, 0),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, 0),
      (assign, "$freelancer_state", 0),
      (call_script, "script_freelancer_detach_party"),
      
      #Kham - Freelancer Captain
      (try_begin),
        (faction_get_slot, ":is_captain", ":commander_faction", slot_faction_freelancer_captain), #Are they currently a captain for this faction?
        (ge, ":is_captain", 1),
        (faction_set_slot, ":commander_faction", slot_faction_freelancer_captain, -1), #-1 means no longer sarge / captain. They will have to prove themselves again.
      (try_end),
      #Kham - Freelancer Captain END
      
      (rest_for_hours, 0,0,0),
      (display_message, "@You have left your commander!"),
      
      #(call_script, "script_cancel_quest", "qst_freelancer_enlisted"),
      (call_script, "script_finish_quest", "qst_freelancer_enlisted", 100), #percentage--make based on days served?
  ]),
  
  #  RUNS IF THE PLAYER GOES ON VACATION
  
  ("event_player_vacation",
    [
      #Kham Changes begin
      (store_troop_faction, ":commander_faction", "$enlisted_lord"),
      (faction_get_slot, ":freelancer_rank", ":commander_faction", slot_freelancer_rank),
      (val_add, ":freelancer_rank", 2), #add 2 days per rank for vacation. So a rank 1 only gets 3 days, rank 2, gets 4, etc...  Tweakable
      (troop_set_slot, "trp_player", slot_troop_current_mission, plyr_mission_vacation), ###move to quests, not missions
      (troop_set_slot, "trp_player", slot_troop_days_on_mission, ":freelancer_rank"),
      #Kham Changes END
      
      #removes faction relation given at enlist
      
      (try_for_range, ":cur_faction", kingdoms_begin, kingdoms_end),
        (neq, ":commander_faction", ":cur_faction"),
        (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
        (call_script, "script_set_player_relation_with_faction", ":cur_faction", 0),
      (try_end),
      
      # Try to catch unwanted swings in plaver v commander faction relation

      (set_show_messages, 0),
      (call_script, "script_set_player_relation_with_faction", ":commander_faction", 4),
      (set_show_messages, 1),

      (assign, "$freelancer_state", 2),
      (call_script, "script_freelancer_detach_party"),
      (rest_for_hours, 0,0,0),
      (display_message, "@You have been granted leave!"),
      
      (str_store_troop_name_link, s13, "$enlisted_lord"),
      (str_store_faction_name_link, s14, ":commander_faction"),
      (quest_set_slot, "qst_freelancer_vacation", slot_quest_target_party, "$enlisted_party"),
      (quest_set_slot, "qst_freelancer_vacation", slot_quest_importance, 0),
      (quest_set_slot, "qst_freelancer_vacation", slot_quest_xp_reward, 50),
      (quest_set_slot, "qst_freelancer_vacation", slot_quest_expiration_days, ":freelancer_rank"),
      (setup_quest_text, "qst_freelancer_vacation"),
      (str_clear, s2), #description. necessary?
      (call_script, "script_start_quest", "qst_freelancer_vacation", "$enlisted_lord"),
  ]),
  
  # RUNS WHEN PLAYER RETURNS FROM VACATION
  
  ("event_player_returns_vacation",
    [
      (troop_set_slot, "trp_player", slot_troop_current_mission, 0),
      (troop_set_slot, "trp_player", slot_troop_days_on_mission, 0),
      
      #needed to stop bug where parties attack the old player party
      (call_script, "script_set_parties_around_player_ignore_player", 2, 4),
      
      #removes troops from player party #Caba--could use party_clear? and then add the player back?
      (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
      (try_for_range_backwards, ":cur_stack", 1, ":num_stacks"), #lower bound is 1 to ignore player character
        (party_stack_get_troop_id, ":cur_troops", "p_main_party", ":cur_stack"),
        (party_stack_get_size, ":cur_size", "p_main_party", ":cur_stack"),
        (party_remove_members, "p_main_party", ":cur_troops", ":cur_size"),
      (try_end),
      
      #To fix any errors of the lord changing parties
      (troop_get_slot, "$enlisted_party", "$enlisted_lord", slot_troop_leaded_party),
      
      #set faction relations to allow player to join battles
      (store_troop_faction, ":commander_faction", "$enlisted_lord"),
      (try_for_range, ":cur_faction", kingdoms_begin, kingdoms_end),
        (neq, ":commander_faction", ":cur_faction"),
        (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
        (call_script, "script_set_player_relation_with_faction", ":cur_faction", -5),
      (try_end),
      (try_begin),
        (store_relation, ":player_relation", ":commander_faction", "fac_player_supporters_faction"),
        (lt, ":player_relation", 5),
        (call_script, "script_set_player_relation_with_faction", ":commander_faction", 5),
      (try_end),
      (try_begin),
        (check_quest_active, "qst_freelancer_vacation"),
        (assign, ":quest", "qst_freelancer_vacation"),
      (else_try),
        (check_quest_active, "qst_freelancer_captured"),
        (assign, ":quest", "qst_freelancer_captured"),
      (try_end),
      (call_script, "script_finish_quest", ":quest", 100),
      (assign, "$freelancer_state", 1),
      (call_script, "script_freelancer_attach_party"),
      (display_message, "@You have rejoined your commander!"),
  ]),
  
  #  RUNS IF THE PLAYER GOES ON A MISSION - Kham
  
  ("event_player_mission",
    [
      
      (store_troop_faction, ":commander_faction", "$enlisted_lord"),
      (quest_get_slot, ":mission_days", "$cheat_imposed_quest", slot_quest_expiration_days), #We check how many days the mission should be completed
      (troop_set_slot, "trp_player", slot_troop_current_mission, plyr_mission_vacation), ###move to quests, not missions
      (troop_set_slot, "trp_player", slot_troop_days_on_mission, ":mission_days"),
      
      #removes faction relation given at enlist
      (try_for_range, ":cur_faction", kingdoms_begin, kingdoms_end),
        (neq, ":commander_faction", ":cur_faction"),
        (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
        (call_script, "script_set_player_relation_with_faction", ":cur_faction", 0),
      (try_end),
      
      # Try to catch unwanted swings in plaver v commander faction relation
      (set_show_messages, 0),
      (call_script, "script_set_player_relation_with_faction", ":commander_faction", 4),
      (set_show_messages, 1),

      (assign, "$freelancer_state", 2),
      (troop_set_slot, "trp_player", slot_freelancer_mission, 1),
      (call_script, "script_freelancer_detach_party"),
      (rest_for_hours, 0,0,0),
      (display_message, "@You set forth on your mission."),
  ]),
  
  # RUNS WHEN PLAYER RETURNS FROM MISSION - KHAM
  
  ("event_player_returns_mission",
    [
      (troop_set_slot, "trp_player", slot_troop_current_mission, 0),
      (troop_set_slot, "trp_player", slot_troop_days_on_mission, 0),
      (troop_set_slot, "trp_player", slot_freelancer_mission, 0),
      (assign, "$cheat_imposed_quest", -1),
      
      #needed to stop bug where parties attack the old player party
      (call_script, "script_set_parties_around_player_ignore_player", 2, 4),
      
      #removes troops from player party #Caba--could use party_clear? and then add the player back?
      (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
      (try_for_range_backwards, ":cur_stack", 1, ":num_stacks"), #lower bound is 1 to ignore player character
        (party_stack_get_troop_id, ":cur_troops", "p_main_party", ":cur_stack"),
        (party_stack_get_size, ":cur_size", "p_main_party", ":cur_stack"),
        (party_remove_members, "p_main_party", ":cur_troops", ":cur_size"),
      (try_end),
      
      #To fix any errors of the lord changing parties
      (troop_get_slot, "$enlisted_party", "$enlisted_lord", slot_troop_leaded_party),
      
      #set faction relations to allow player to join battles
      (store_troop_faction, ":commander_faction", "$enlisted_lord"),
      (try_for_range, ":cur_faction", kingdoms_begin, kingdoms_end),
        (neq, ":commander_faction", ":cur_faction"),
        (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
        (call_script, "script_set_player_relation_with_faction", ":cur_faction", -5),
      (try_end),
      (try_begin),
        (store_relation, ":player_relation", ":commander_faction", "fac_player_supporters_faction"),
        (lt, ":player_relation", 5),
        (call_script, "script_set_player_relation_with_faction", ":commander_faction", 5),
      (try_end),
      
      (assign, "$freelancer_state", 1),
      (call_script, "script_freelancer_attach_party"),
      (display_message, "@You have rejoined your commander!"),
  ]),
  
  
  # RUNS IF PLAYER DESERTS OR IS AWOL
  ("event_player_deserts",
    [
      (store_troop_faction, ":commander_faction", "$enlisted_lord"),
      (call_script, "script_change_player_relation_with_faction_ex", ":commander_faction", -10),
      (call_script, "script_change_player_relation_with_troop", "$enlisted_lord", -10),
      (call_script, "script_change_player_honor", -20),
      
      (troop_set_slot, "trp_player", slot_troop_current_mission, 0),
      (troop_set_slot, "trp_player", slot_troop_days_on_mission, 0),
      (faction_set_slot, ":commander_faction", slot_faction_freelancer_troop, 0),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, 0),
      (rest_for_hours, 0,0,0),
      (assign, "$freelancer_state", 0),
      #(display_message, "@You have deserted your commander!"), #Taken care of elsewhere
      (call_script, "script_fail_quest", "qst_freelancer_enlisted"),
  ]),
  
  
  # RETURNS PART OF THE ORIGINAL PARTY
  ("party_restore",
    [
      (party_get_num_companion_stacks, ":num_stacks", "p_freelancer_party_backup"),
      (try_for_range, ":cur_stack", 0, ":num_stacks"),
        (assign, ":stack_amount", 0),
        (party_stack_get_troop_id, ":return_troop", "p_freelancer_party_backup", ":cur_stack"),
        (neq, ":return_troop", "trp_player"),
        (party_stack_get_size, ":stack_size", "p_freelancer_party_backup", ":cur_stack"),
        (assign, ":stack_amount", ":stack_size"),
        (ge, ":stack_amount", 1),
        (party_add_members, "p_main_party", ":return_troop", ":stack_amount"),
      (try_end),
      (party_clear, "p_freelancer_party_backup"),
  ]),
  
  #  CALCULATES NUMBER OF DESERTING TROOPS
  
  ("get_desert_troops", #CABA - check this
    [
      (party_get_morale, ":commander_party_morale", "$enlisted_party"), #does this actually get tracked for non-player parties?
      (store_current_day, ":cur_day"),
      #formula for soldier desertion chance
      #gets number of days served
      (troop_get_slot, ":service_day_start", "trp_player", slot_troop_freelancer_start_date),
      (store_sub, ":service_length", ":cur_day", ":service_day_start"),
      #inverts the commander's party morale
      (store_sub, ":commander_neg_morale", 100, ":commander_party_morale"), #still a positive number... 100-80 = 20
      (store_skill_level, ":cur_leadership", "skl_leadership", "trp_player"),
      (store_skill_level, ":cur_persuasion", "skl_persuasion", "trp_player"),
      #had to multiply these skills to give them a decent effect on desertion chance
      (val_mul, ":cur_leadership", 10), #up to 100
      (val_mul, ":cur_persuasion", 10), #up to 100
      (store_add, ":desert_chance", ":cur_leadership", ":cur_persuasion"), #up to 200
      (val_add, ":desert_chance", ":service_length"), #up to 400 maybe
      (val_add, ":desert_chance", ":commander_neg_morale"), #up to 450, maybe? if party morale is down to 50
      #loop that looks at each troop stack in a party,
      #then decides if troops of that stack will desert,
      #and randomly assigns a number of troops in that stack to desert
      (party_get_num_companion_stacks, ":num_stacks", "$enlisted_party"),
      (try_for_range_backwards, ":cur_stack", 1, ":num_stacks"),
        #limit may need changed for more accurate probability
        (store_random_in_range, ":desert_random", 0, 1000),
        (is_between, ":desert_random", 0, ":desert_chance"),
        #switching deserting troops to player party
        (party_stack_get_troop_id, ":desert_troop", "$enlisted_party", ":cur_stack"),
        (party_stack_get_size, ":stack_size", "$enlisted_party", ":cur_stack"),
        (store_random_in_range, ":stack_amount", 0, ":stack_size"),
        (party_remove_members, "$enlisted_party", ":desert_troop", ":stack_amount"),
        (party_add_members, "p_main_party", ":desert_troop", ":stack_amount"),
      (try_end),
  ]),
  
  ("freelancer_keep_field_loot",
    [
      (get_player_agent_no, ":player"),
      (try_for_range, ":ek_slot", ek_item_0, ek_head),
        (agent_get_item_slot, ":item", ":player", ":ek_slot"),
        (gt, ":item", 0),
        (neg|troop_has_item_equipped, "trp_player", ":item"),
        (troop_add_item, "trp_player", ":item"),
      (try_end),
      (agent_get_horse, ":horse", ":player"),
      (try_begin),
        (gt, ":horse", 0),
        (agent_get_item_id, ":horse", ":horse"),
        (troop_get_inventory_slot, ":old_horse", "trp_player", ek_horse),
        (neq, ":horse", ":old_horse"),
        (try_begin),
          (gt, ":old_horse", 0),
          (troop_get_inventory_slot_modifier, ":horse_imod", "trp_player", ek_horse),
          (troop_add_item, "trp_player", ":old_horse", ":horse_imod"),
        (try_end),
        (troop_set_inventory_slot, "trp_player", ek_horse, ":horse"),
      (try_end),
  ]),
  
  ("cf_freelancer_player_can_upgrade",
    #Reg0 outputs reason for failure
    [
      (store_script_param_1, ":source_troop"),
      
      (troop_get_inventory_capacity, ":troop_cap", ":source_troop"),
      (assign, ":continue", 1),
      
      (assign, ":type_available", 0),
      (assign, ":type_count", 0),
      (assign, ":end", itp_type_arrows),
      (try_for_range, ":type", itp_type_one_handed_wpn, ":end"),
        #Count Items from Source Troop
        (assign, ":end2", ":troop_cap"),
        (try_for_range, ":inv_slot", 0, ":end2"),
          (troop_get_inventory_slot, ":item", ":source_troop", ":inv_slot"),
          (gt, ":item", 0),
          (item_get_type, ":item_type", ":item"),
          (eq, ":item_type", ":type"),
          (val_add, ":type_count", 1),
          (call_script, freelancer_can_use_item, "trp_player", ":item", 0),
          (eq, reg0, 1),
          (assign, ":type_available", 1),
          (assign, ":end2", 0), #break
        (try_end),
        (eq, ":type_available", 1),
        (assign, ":end", itp_type_one_handed_wpn), #break
      (try_end), #Melee loop
      (try_begin),
        (eq, ":type_available", 0),
        (gt, ":type_count", 0), #only care if there were items possible to equip
        (assign, ":continue", 0),
        (assign, reg0, 0),
      (try_end),
      (eq, ":continue", 1),
      
      (assign, ":type_available", 0),
      (assign, ":type_count", 0),
      (assign, ":end2", ":troop_cap"),
      (try_for_range, ":inv_slot", 0, ":end2"),
        (troop_get_inventory_slot, ":item", ":source_troop", ":inv_slot"),
        (gt, ":item", 0),
        (item_get_type, ":item_type", ":item"),
        (eq, ":item_type", itp_type_body_armor),
        (val_add, ":type_count", 1),
        (call_script, freelancer_can_use_item, "trp_player", ":item", 0),
        (eq, reg0, 1),
        (assign, ":type_available", 1),
        (assign, ":end2", 0), #break
      (try_end),
      (try_begin),
        (eq, ":type_available", 0),
        (gt, ":type_count", 0), #only care if there were items possible to equip
        (assign, ":continue", 0),
        (assign, reg0, 1),
      (try_end),
      (eq, ":continue", 1),
      
      (try_begin),
        (troop_is_guarantee_ranged, ":source_troop"),
        (assign, ":type_available", 0),
        (assign, ":type_count", 0),
        (assign, ":end", itp_type_goods),
        (try_for_range, ":type", itp_type_bow, ":end"),
          #Count Items from Source Troop
          (assign, ":end2", ":troop_cap"),
          (try_for_range, ":inv_slot", 0, ":end2"),
            (troop_get_inventory_slot, ":item", ":source_troop", ":inv_slot"),
            (gt, ":item", 0),
            (item_get_type, ":item_type", ":item"),
            (eq, ":item_type", ":type"),
            (val_add, ":type_count", 1),
            (call_script, freelancer_can_use_item, "trp_player", ":item", 0),
            (eq, reg0, 1),
            (assign, ":type_available", 1),
            (assign, ":end2", 0), #break
          (try_end),
          (eq, ":type_available", 1),
          (assign, ":end", itp_type_bow), #break
        (try_end), #Ranged loop
        (eq, ":type_available", 0),
        (gt, ":type_count", 0), #only care if there were items possible to equip
        (assign, ":continue", 0),
        (assign, reg0, 2),
      (try_end),
      (eq, ":continue", 1),
      
      (try_begin),
        (troop_is_guarantee_horse, ":source_troop"),
        (assign, ":type_available", 0),
        (assign, ":type_count", 0),
        (assign, ":end2", ":troop_cap"),
        (try_for_range, ":inv_slot", 0, ":end2"),
          (troop_get_inventory_slot, ":item", ":source_troop", ":inv_slot"),
          (gt, ":item", 0),
          (item_get_type, ":item_type", ":item"),
          (eq, ":item_type", itp_type_horse),
          (val_add, ":type_count", 1),
          (call_script, freelancer_can_use_item, "trp_player", ":item", 0),
          (eq, reg0, 1),
          (assign, ":type_available", 1),
          (assign, ":end2", 0), #break
        (try_end),
        (eq, ":type_available", 0),
        (gt, ":type_count", 0), #only care if there were items possible to equip
        (assign, ":continue", 0),
        (assign, reg0, 3),
      (try_end),
      (eq, ":continue", 1),
  ]),
  
  
  ("freelancer_equip_troop",
    [
      (store_script_param_1, ":source_troop"),
      
      (str_clear, s2),
      (set_show_messages, 0),
      
      (assign, ":recording_slot", slot_freelancer_equip_start),
      (troop_get_inventory_capacity, ":troop_cap", ":source_troop"),
      (assign, ":melee_given", 0),
      (assign, ":needs_ammo", 0),
      (assign, ":open_weapon_slot", 0),
      (try_for_range, ":type", itp_type_horse, itp_type_pistol),
        (neq, ":type", itp_type_goods),
        (neq, ":type", itp_type_arrows),
        (neq, ":type", itp_type_bolts),
        
        #Assign Prob. of Getting Type
        (assign, ":continue", 0),
        (try_begin),
          (troop_is_guarantee_horse, ":source_troop"),
          (eq, ":type", itp_type_horse),
          (assign, ":continue", 1),
        (else_try),
          (troop_is_guarantee_ranged, ":source_troop"),
          (this_or_next|eq, ":type", itp_type_bow),
          (this_or_next|eq, ":type", itp_type_crossbow),
          (eq, ":type", itp_type_thrown),
          (assign, ":continue", 1),
        (else_try),
          (this_or_next|eq, ":type", itp_type_shield), #Shields and all armor pieces are guaranteed
          (ge, ":type", itp_type_head_armor),
          (assign, ":continue", 1),
        (else_try),
          (neq, ":type", itp_type_horse),
          (lt, ":open_weapon_slot", 4),
          (store_random_in_range, ":continue", 0, 3), # 1 chance in three of being 1
        (try_end),
        (eq, ":continue", 1),
        
        #Clear Temp Array
        (try_for_range, ":inv_slot", 0, 20),
          (troop_set_slot, "trp_temp_array_a", ":inv_slot", 0),
        (try_end),
        
        #Collect Items from Source Troop
        (assign, ":type_count", 0),
        (try_for_range, ":inv_slot", 0, ":troop_cap"),
          (troop_get_inventory_slot, ":item", ":source_troop", ":inv_slot"),
          (gt, ":item", 0),
          (item_get_type, ":item_type", ":item"),
          (eq, ":item_type", ":type"),
          (call_script, freelancer_can_use_item, "trp_player", ":item", 0),
          (eq, reg0, 1),
          (troop_set_slot, "trp_temp_array_a", ":type_count", ":item"),
          (val_add, ":type_count", 1),
        (try_end),
        (gt, ":type_count", 0),
        
        #Pick Random Item of Type from Troop
        (try_begin),
          (eq, ":type_count", 1),
          (assign, ":index", 0),
        (else_try),
          (store_random_in_range, ":index", 0, ":type_count"),
        (try_end),
        (troop_get_slot, ":item", "trp_temp_array_a", ":index"),
        (gt, ":item", 0),
        (str_store_item_name, s3, ":item"),
        (str_store_string, s2, "@{s3}, {s2}"),
        
        #Select correct EK slot to force equip
        (try_begin),
          (eq, ":type", itp_type_horse),
          (assign, ":ek_slot", ek_horse),
        (else_try),
          (is_between, ":type", itp_type_head_armor, itp_type_pistol),
          (store_sub, ":shift", ":type", itp_type_head_armor),
          (store_add, ":ek_slot", ek_head, ":shift"),
        (else_try),
          (store_add, ":ek_slot", ek_item_0, ":open_weapon_slot"),
        (try_end),
        
        #Check for item already there, move it if present
        (try_begin),
          (troop_get_inventory_slot, ":old_item", "trp_player", ":ek_slot"),
          (gt, ":old_item", 0),
          (troop_get_inventory_slot_modifier, ":old_item_imod", "trp_player", ":ek_slot"),
          (troop_add_item, "trp_player", ":old_item", ":old_item_imod"),
        (try_end),
        
        #Add Item
        (troop_set_inventory_slot, "trp_player", ":ek_slot", ":item"),
        (party_set_slot, "p_freelancer_party_backup", ":recording_slot", ":item"),
        (val_add, ":recording_slot", 1),
        (try_begin),
          (is_between, ":type", itp_type_one_handed_wpn, itp_type_head_armor), #Uses one of the 4 weapon slots
          (val_add, ":open_weapon_slot", 1),
          (try_begin),
            (is_between, ":type", itp_type_one_handed_wpn, itp_type_arrows),
            (assign, ":melee_given", 1),
          (else_try),
            (eq, ":type", itp_type_bow),
            (assign, ":needs_ammo", itp_type_arrows),
          (else_try),
            (eq, ":type", itp_type_crossbow),
            (assign, ":needs_ammo", itp_type_bolts),
          (try_end),
        (try_end),
      (try_end), #Item Types Loop
      
      #add ammo for any equipped bow
      (try_begin),
        (neq, ":needs_ammo", 0),
        #Check for item already in the last slot, move it if present
        (try_begin),
          (troop_get_inventory_slot, ":old_item", "trp_player", ek_item_3),
          (gt, ":old_item", 0),
          (troop_get_inventory_slot_modifier, ":old_item_imod", "trp_player", ek_item_3),
          (troop_add_item, "trp_player", ":old_item", ":old_item_imod"),
        (try_end),
        
        (assign, ":end", ":troop_cap"),
        (try_for_range, ":inv_slot", 0, ":end"),
          (troop_get_inventory_slot, ":item", ":source_troop", ":inv_slot"),
          (gt, ":item", 0),
          (item_get_type, ":type", ":item"),
          (eq, ":type", ":needs_ammo"),
          (troop_set_inventory_slot, "trp_player", ek_item_3, ":item"),
          (party_set_slot, "p_freelancer_party_backup", ":recording_slot", ":item"),
          (val_add, ":recording_slot", 1),
          (assign, ":open_weapon_slot", 4),
          (str_store_item_name, s3, ":item"),
          (str_store_string, s2, "@{s3}, {s2}"),
          (assign, ":end", 0),
        (try_end),
      (try_end),
      
      #double check melee was given
      (try_begin),
        (eq, ":melee_given", 0),
        (assign, ":end", ":troop_cap"),
        (try_for_range, ":inv_slot", 0, ":end"),
          (troop_get_inventory_slot, ":item", ":source_troop", ":inv_slot"),
          (gt, ":item", 0),
          (item_get_type, ":type", ":item"),
          (is_between, ":type", itp_type_one_handed_wpn, itp_type_arrows),
          (call_script, freelancer_can_use_item, "trp_player", ":item", 0),
          (eq, reg0, 1),
          (try_begin),
            (gt, ":open_weapon_slot", 3),
            (assign, ":open_weapon_slot", 2),
          (try_end),
          
          #Check for item already there
          (try_begin),
            (troop_get_inventory_slot, ":old_item", "trp_player", ":open_weapon_slot"),
            (gt, ":old_item", 0),
            (troop_get_inventory_slot_modifier, ":old_item_imod", "trp_player", ":open_weapon_slot"),
            (troop_add_item, "trp_player", ":old_item", ":old_item_imod"),
          (try_end),
          
          (troop_set_inventory_slot, "trp_player", ":open_weapon_slot", ":item"),
          (party_set_slot, "p_freelancer_party_backup", ":recording_slot", ":item"),
          (val_add, ":recording_slot", 1),
          (str_store_item_name, s3, ":item"),
          (str_store_string, s2, "@{s3}, {s2}"),
          (assign, ":end", 0),
        (try_end),
      (try_end),
      
      (set_show_messages, 1),
      (try_begin),
        (neg|str_is_empty, s2),
        (val_sub, ":recording_slot", slot_freelancer_equip_start),
        (party_set_slot, "p_freelancer_party_backup", slot_freelancer_equip_start - 1, ":recording_slot"),  #Record Number of Items Added
        
        (str_store_troop_name, s1, ":source_troop"),
        (display_message, "@The equipment of a {s1}: {s2}is assigned to you."),
      (try_end),
  ]),
  
  ("freelancer_unequip_troop",
    [
      (store_script_param_1, ":source_troop"),
      
      (str_clear, s2),
      (set_show_messages, 0),
      
      (party_get_slot, ":num_items", "p_freelancer_party_backup", slot_freelancer_equip_start - 1), #Num of items previously given
      
      (troop_get_inventory_capacity, ":cap", "trp_player"),
      (try_for_range, ":i", 0, ":num_items"),
        (store_add, ":slot", slot_freelancer_equip_start, ":i"),
        (party_get_slot, ":given_item", "p_freelancer_party_backup", ":slot"),
        (gt, ":given_item", 0),
        
        (assign, ":end", ":cap"),
        (try_for_range, ":inv_slot", 0, ":end"),
          (troop_get_inventory_slot, ":item", "trp_player", ":inv_slot"),
          (eq, ":item", ":given_item"),
          (troop_get_inventory_slot_modifier, ":imod", "trp_player", ":inv_slot"),
          (eq, ":imod", 0), #Native troop items never have modifiers
          
          (troop_set_inventory_slot, "trp_player", ":inv_slot", -1),
          (str_store_item_name, s3, ":item"),
          (str_store_string, s2, "@{s3}, {s2}"),
          
          (assign, ":end", 0), #Break
        (try_end), #Player Inventory Loop
      (try_end), #Item Given Slot Loop
      
      (set_show_messages, 1),
      (try_begin),
        (neg|str_is_empty, s2),
        (party_set_slot, "p_freelancer_party_backup", slot_freelancer_equip_start - 1, 0),  #Reset Number of Items Added
        (str_store_troop_name, s1, ":source_troop"),
        (display_message, "@The equipment of a {s1}: {s2}is taken from you."),
      (try_end),
      (troop_equip_items, "trp_player"),
  ]),
  
  
  #Kham - script_get_freelancer_mission - Used in Simple Triggers.
  #Input: n/a
  #Output: Freelancer mission
  
  ("get_freelancer_mission", [
      (assign, "$cheat_imposed_quest", 0),
      (store_random_in_range, ":chance", 0, 135),
      (try_begin),
        (le, ":chance", 20),
        (assign, ":continue", 0),
        (assign, "$cheat_imposed_quest", "qst_deliver_message"), #deliver Message
        (call_script, "script_get_random_quest", "$enlisted_lord"),
        (try_begin),
          (eq, reg0, "$cheat_imposed_quest"),
          (assign, ":continue", 1),
        (try_end),
        (eq, ":continue", 1),
        (start_map_conversation, "$enlisted_lord"),
        
      (else_try),
        (le, ":chance", 35),
        (assign, "$cheat_imposed_quest", "qst_scout_waypoints"), #Scout Waypoints
        (start_map_conversation, "$enlisted_lord"),
        
      (else_try),
        (le, ":chance", 55),
        (jump_to_menu, "mnu_freelancer_bandits"), #Troublesome Bandits
        
      (else_try),
        (le, ":chance", 70),
        (assign, ":continue", 0),
        (assign, "$cheat_imposed_quest", "qst_hunt_down_fugitive"), #hunt down fugitive
        (call_script, "script_get_random_quest", "$enlisted_lord"),
        (try_begin),
          (eq, reg0, "$cheat_imposed_quest"),
          (assign, ":continue", 1),
        (try_end),
        (eq, ":continue", 1),
      
      (else_try),
        (le, ":chance", 85),
        (assign, "$cheat_imposed_quest", "qst_freelancer_mission_1"), #Hunt down deserters
        (start_map_conversation, "$enlisted_lord"),
        
      (else_try),
        (jump_to_menu, "mnu_freelancer_looters"), #Looters
      (try_end),
  ]),
  
  
  #Kham - freelancer_promoted_to_commander
  #Input: type: 1 or 2 for Infantry / Ranged.
  #Input: number: Captain or Sarge.
  
  ("freelancer_promoted_to_commander", [
      
      (store_script_param_1, ":type"),
      (store_script_param_2, ":number"),
      
      #First we clear the player party
      #(party_clear, "p_freelancer_player_party"),
      
      #Then we add the player
      #(party_add_leader, "p_freelancer_player_party", "trp_player"),
      
      
      #Then we add the members
      (store_faction_of_troop, ":commander_faction", "$enlisted_lord"),
      (faction_get_slot, ":culture", ":commander_faction", slot_faction_culture),
      (faction_get_slot, ":tier_2_troop", ":culture", slot_faction_tier_2_troop),
      (faction_get_slot, ":tier_1_troop_archer", ":culture", slot_faction_tier_1_archer),
      
      (try_begin),
        (eq, ":type", 1), #Infantry Sarge
        (party_add_members, "p_main_party", ":tier_2_troop", ":number"),
      (else_try),
        (party_add_members, "p_main_party", ":tier_1_troop_archer", ":number"),
      (try_end),
      
      (display_message, "@{reg0} Troops added"),
      
      #Then we change the faction of the party to commander faction
      #(party_set_faction, "p_freelancer_player_party", ":commander_faction"),
      
      #Then we attach the party to the enlisted lord's party
      #(party_attach_to_party, "p_freelancer_player_party", "$enlisted_party"),
      
  ]),
  
  ("freelancer_remove_player_party", [
      (call_script, "script_party_copy", "p_freelancer_player_party", "p_main_party"),
      (remove_member_from_party, "trp_player","p_freelancer_player_party"),
      #removes troops from player party #Caba--could use party_clear? and then add the player back?
      (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
      (try_for_range_backwards, ":cur_stack", 1, ":num_stacks"), #lower bound is 1 to ignore player character
        (party_stack_get_troop_id, ":cur_troops", "p_main_party", ":cur_stack"),
        (party_stack_get_size, ":cur_size", "p_main_party", ":cur_stack"),
        (party_remove_members, "p_main_party", ":cur_troops", ":cur_size"),
      (try_end),
  ]),
  
  ("freelancer_restore_player_party", [
      (party_get_num_companion_stacks, ":num_stacks", "p_freelancer_player_party"),
      (try_for_range, ":cur_stack", 0, ":num_stacks"),
        (assign, ":stack_amount", 0),
        (party_stack_get_troop_id, ":return_troop", "p_freelancer_player_party", ":cur_stack"),
        (neq, ":return_troop", "trp_player"),
        (party_stack_get_size, ":stack_size", "p_freelancer_player_party", ":cur_stack"),
        (assign, ":stack_amount", ":stack_size"),
        (ge, ":stack_amount", 1),
        (party_add_members, "p_main_party", ":return_troop", ":stack_amount"),
      (try_end),
      (party_clear, "p_freelancer_player_party"),
  ]),
  
  
  ("cf_freelancer_mission_scout_waypoints", [
      (store_script_param_1, ":num_waypoints"),
      
      (assign, ":end_cond", 100),
      (try_begin),
        (eq, ":num_waypoints", 1),
        (assign, "$qst_scout_waypoints_wp_1", -1),
        (assign, "$qst_scout_waypoints_wp_2", 1),
        (assign, "$qst_scout_waypoints_wp_3", 2),
      (else_try),
        (eq, ":num_waypoints", 2),
        (assign, "$qst_scout_waypoints_wp_1", -1),
        (assign, "$qst_scout_waypoints_wp_2", -1),
        (assign, "$qst_scout_waypoints_wp_3", 1),
      (else_try),
        (assign, "$qst_scout_waypoints_wp_1", -1),
        (assign, "$qst_scout_waypoints_wp_2", -1),
        (assign, "$qst_scout_waypoints_wp_3", -1),
      (try_end),
      (assign, ":continue", 0),
      (try_for_range, ":unused", 0, ":end_cond"),
        (try_begin),
          (lt, "$qst_scout_waypoints_wp_1", 0),
          (call_script, "script_cf_get_random_enemy_center_within_range", "$enlisted_party", 50),
          (party_is_active, reg0),
          (assign, "$qst_scout_waypoints_wp_1", reg0),
        (try_end),
        (try_begin),
          (lt, "$qst_scout_waypoints_wp_2", 0),
          (call_script, "script_cf_get_random_enemy_center_within_range", "$enlisted_party", 50),
          (neq, "$qst_scout_waypoints_wp_1", reg0),
          (party_is_active, reg0),
          (assign, "$qst_scout_waypoints_wp_2", reg0),
        (try_end),
        (try_begin),
          (lt, "$qst_scout_waypoints_wp_3", 0),
          (call_script, "script_cf_get_random_enemy_center_within_range", "$enlisted_party", 50),
          (neq, "$qst_scout_waypoints_wp_1", reg0),
          (neq, "$qst_scout_waypoints_wp_2", reg0),
          (party_is_active, reg0),
          (assign, "$qst_scout_waypoints_wp_3", reg0),
        (try_end),
        (neq, "$qst_scout_waypoints_wp_1", "$qst_scout_waypoints_wp_2"),
        (neq, "$qst_scout_waypoints_wp_1", "$qst_scout_waypoints_wp_2"),
        (neq, "$qst_scout_waypoints_wp_2", "$qst_scout_waypoints_wp_3"),
        (ge, "$qst_scout_waypoints_wp_1", 0),
        (ge, "$qst_scout_waypoints_wp_2", 0),
        (ge, "$qst_scout_waypoints_wp_3", 0),
        (assign, ":end_cond", 0),
        (assign, ":continue", 1),
      (try_end),
      (eq, ":continue", 1),
      (try_begin),
        (eq, ":num_waypoints", 1),
        (assign, "$qst_scout_waypoints_wp_1_visited", 0),
        (assign, "$qst_scout_waypoints_wp_2_visited", 1),
        (assign, "$qst_scout_waypoints_wp_3_visited", 1),
        (str_store_party_name_link, s13, "$qst_scout_waypoints_wp_1"),
      (else_try),
        (eq, ":num_waypoints", 2),
        (assign, "$qst_scout_waypoints_wp_1_visited", 0),
        (assign, "$qst_scout_waypoints_wp_2_visited", 0),
        (assign, "$qst_scout_waypoints_wp_3_visited", 1),
        (str_store_party_name_link, s13, "$qst_scout_waypoints_wp_1"),
        (str_store_party_name_link, s14, "$qst_scout_waypoints_wp_2"),
      (else_try),
        (assign, "$qst_scout_waypoints_wp_1_visited", 0),
        (assign, "$qst_scout_waypoints_wp_2_visited", 0),
        (assign, "$qst_scout_waypoints_wp_3_visited", 0),
        (str_store_party_name_link, s13, "$qst_scout_waypoints_wp_1"),
        (str_store_party_name_link, s14, "$qst_scout_waypoints_wp_2"),
        (str_store_party_name_link, s15, "$qst_scout_waypoints_wp_3"),
      (try_end),
      (assign, ":result", "qst_scout_waypoints"),
      (quest_set_slot, ":result", slot_quest_expiration_days, 10),
      (quest_set_slot, ":result", slot_quest_dont_give_again_period, 0),]),
  
  ("freelancer_start_deserter_quest", [
      #Spawn
      (set_spawn_radius, 8),
      (spawn_around_party, "$enlisted_party", "pt_deserters"),
      (assign, ":deserter_party", reg0),
      
      #Get Commander Faction then add troops based on player level.
      (store_faction_of_troop, ":commander_faction", "$enlisted_lord"),
      (faction_get_slot, ":culture", ":commander_faction", slot_faction_culture),
      (faction_get_slot, ":tier_1_troop", ":culture", slot_faction_tier_1_troop),
      (store_character_level, ":level", "trp_player"),
      (store_mul, ":max_number_to_add", ":level", 2),
      (val_add, ":max_number_to_add", 10),
      (store_random_in_range, ":number_to_add", 10, ":max_number_to_add"),
      (party_clear, ":deserter_party"),
      (party_add_members, ":deserter_party", ":tier_1_troop", ":number_to_add"),
      
      #Add XP to Deserter Party
      (store_random_in_range, ":random_no", 1, 4),
      (try_for_range, ":unused", 0, ":random_no"),
        (party_upgrade_with_xp, ":deserter_party", 1000000, 0),
      (try_end),
      
      #Gold and XP reward based on level.
      (assign, ":xp", 150),
      (assign, ":gold", 100),
      (try_begin),
        (le, ":level", 5),
        (assign, ":xp", 100),
        (assign, ":gold", 75),
      (else_try),
        (ge, ":level", 12),
        (assign, ":xp", 320),
        (assign, ":gold", 200),
      (try_end),
      
      #Init the Deserter Party Behaviour & Flags
      (party_set_flags, ":deserter_party", pf_quest_party, 1),
      (party_get_position, pos0, "$enlisted_party"),
      (party_set_ai_behavior, ":deserter_party", ai_bhvr_patrol_location),
      (party_set_ai_patrol_radius, ":deserter_party", 2),
      (party_set_ai_target_position, ":deserter_party", pos0),
      
      #Init the quest
      (str_store_troop_name_link, s9, "$enlisted_lord"),
      (setup_quest_text, "qst_freelancer_mission_1"),
      (str_store_string, s2, "@{s9} wants you to hunt down deserters and end them."),
      (quest_set_slot, "qst_freelancer_mission_1", slot_quest_target_party, ":deserter_party"),
      (quest_set_slot, "qst_freelancer_mission_1", slot_quest_xp_reward, ":xp"),
      (quest_set_slot, "qst_freelancer_mission_1", slot_quest_importance, 8),
      (quest_set_slot, "qst_freelancer_mission_1", slot_quest_gold_reward, ":gold"),
      (quest_set_slot, "qst_freelancer_mission_1", slot_quest_expiration_days, 15),
      (call_script, "script_start_quest", "qst_freelancer_mission_1", "$enlisted_lord"),
      
  ]),

  ("freelancer_pacify_quest_persuade", [ #Stores success chance in reg0

    (store_skill_level, ":persuade", "skl_persuasion", "trp_player"),
    (store_skill_level, ":leadership", "skl_persuasion", "trp_player"),
    (assign, ":success_chance", 10), #starting success chance at 10%
    
    (val_mul, ":persuade", 15),
    (val_div, ":persuade", 2),
    (val_min, ":persuade", 100),

    (val_mul, ":leadership", 5),
    (val_div, ":leadership", 2),
    (val_min, ":leadership", 20), #Max Leadership Gain should be 20

    (val_add, ":success_chance", ":persuade"), 
    (val_add, ":success_chance", ":leadership"),

    (store_faction_of_troop, ":commander_faction", "$enlisted_lord"),
    (faction_get_slot, ":is_sarge", ":commander_faction", slot_faction_freelancer_captain),
    (try_begin),
      (eq, ":is_sarge", 2),
      (val_add, ":success_chance", 5), # +5 if sarge
    (else_try),
      (eq, ":is_sarge", 1),
      (val_add, ":success_chance", 10), # +10 if captain
    (try_end),

    (assign, reg0, ":success_chance"),

    ]),
  
  #+freelancer end
 # script_game_get_upgrade_xp
  # This script is called from game engine for calculating needed troop upgrade exp
  # Input:
  # param1: troop_id,
  # Output: reg0 = needed exp for upgrade
  ("game_get_upgrade_xp",
    [
      (store_script_param_1, ":troop_id"),
      
      (assign, ":needed_upgrade_xp", 0),
      #formula : int needed_upgrade_xp = 2 * (30 + 0.006f * level_boundaries[troops[troop_id].level + 3]);
      (store_character_level, ":troop_level", ":troop_id"),
      (store_add, ":needed_upgrade_xp", ":troop_level", 3),
      (get_level_boundary, reg0, ":needed_upgrade_xp"),
      (val_mul, reg0, 6),
      (val_div, reg0, 1000),
      (val_add, reg0, 30),
      
      (try_begin),
        (ge, ":troop_id", bandits_begin),
        (lt, ":troop_id", bandits_end),
        (val_mul, reg0, 2),
      (try_end),
      
      (set_trigger_result, reg0),
  ]),
  
  # script_game_get_upgrade_cost
  # This script is called from game engine for calculating needed troop upgrade exp
  # Input:
  # param1: troop_id,
  # Output: reg0 = needed cost for upgrade
  ("game_get_upgrade_cost",
    [
      (store_script_param_1, ":troop_id"),
      
      (store_character_level, ":troop_level", ":troop_id"),
      
      (try_begin),
        (is_between, ":troop_level", 0, 6),
        (assign, reg0, 10),
      (else_try),
        (is_between, ":troop_level", 6, 11),
        (assign, reg0, 20),
      (else_try),
        (is_between, ":troop_level", 11, 16),
        (assign, reg0, 40),
      (else_try),
        (is_between, ":troop_level", 16, 21),
        (assign, reg0, 80),
      (else_try),
        (is_between, ":troop_level", 21, 26),
        (assign, reg0, 120),
      (else_try),
        (is_between, ":troop_level", 26, 31),
        (assign, reg0, 160),
      (else_try),
        (assign, reg0, 200),
      (try_end),
      
      (set_trigger_result, reg0),
  ]),
  

#Kham Scripts
#script_set_auto_fire_weapon_slot
#Used at Game Start to set autofire weapons
 ("set_auto_fire_weapon_slot", [

            (item_set_slot, "itm_b2series_blaster", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_a280", slot_item_auto_fire_capability, 1),
            #(item_set_slot, "itm_a280_crouch", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_a295", slot_item_auto_fire_capability, 1),
            #(item_set_slot, "itm_a295_crouch", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_mandalorian_heavy_blaster", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_corellian_destroyer_blaster", slot_item_auto_fire_capability, 1),

            (item_set_slot, "itm_dlt19", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_dc17m", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_dc15a", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_dc15a_hip", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_dc15s", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_quicksnap_36t", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_mg15", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_e5", slot_item_auto_fire_capability, 1),
            #(item_set_slot, "itm_e5s", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_e11", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_e11_hip", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_t21", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_heavy_repeater", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_storm_rifle", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_dh17", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_se14r", slot_item_auto_fire_capability, 1),
            #(item_set_slot, "itm_dl44b", slot_item_auto_fire_capability, 1),
            #(item_set_slot, "itm_westar", slot_item_auto_fire_capability, 1),
            #(item_set_slot, "itm_trandoshan_supressor", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_sith_blaster", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_sith_droid_blaster", slot_item_auto_fire_capability, 1),
            #(item_set_slot, "itm_ll-30_pistol", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_ig86_e5_pistol", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_havoc_rifle", slot_item_auto_fire_capability, 1),
            (item_set_slot, "itm_wpn_blaster_dc17m_auto", slot_item_auto_fire_capability, 1),
 ]),


# Racial Item Checks modified - Kham

#script_check_equipped_items
("check_equipped_items",[
   (store_script_param_1, ":npc"),
   (assign,"$remove_item", 0),
   (troop_get_type, ":race", ":npc"),
   (try_for_range,":inv_slot",ek_head,ek_gloves),        # EQUIPMENT CHECKS
      (troop_get_inventory_slot, ":item", ":npc", ":inv_slot"),
      (ge, ":item", 0),
      (store_add,":item_slot",slot_troop_helm_type-ek_head,":inv_slot"), #slot_troop_armor_type, slot_troop_boots_type consequtive slots
      (neg|troop_slot_eq,":npc",":item_slot",":item"), # equipped item changed to other?
      (item_get_slot, ":item_race", ":item", slot_item_race),
      (assign, reg55, ":item_race"),
      (assign, reg56, ":race"),
      (display_message, "@ Item Race: {reg55} -- Player Race: {reg56}", color_terrible_news),
      (ge, ":item_race", 0),
      (try_begin),(eq,":race",tf_wookiee),(neq,":item_race",tf_wookiee),(assign,"$remove_item",1),
      (else_try),(eq,":race",tf_gamorrean),(neq,":item_race",tf_gamorrean),(assign,"$remove_item",1),
      (else_try),(eq,":race",tf_trandoshan),(neq,":item_race",tf_trandoshan),(assign,"$remove_item",1),
      (else_try),(eq,":race",tf_geonosian),(neq,":item_race",tf_geonosian),(assign,"$remove_item",1),
      (try_end),
      (try_begin),
         (eq,"$remove_item",1),
         (dialog_box,"@Item you just equipped does not fit characters of this race and will be removed into player inventory shortly^^Make sure your equipment has space for the item, or it will be lost","@Inappropriate equipment"),
         (troop_set_slot,":npc",":item_slot",-1),     # needs removing!
      (else_try),
         (troop_set_slot,":npc",":item_slot", ":item"),  #remember new equipment
      (try_end),
   (try_end),

]),
("unequip_items",[
   (store_script_param_1, ":npc"),
   (try_begin),
      (eq,"$remove_item",1),
      (try_for_range,":inv_slot",ek_head,ek_gloves),           # CHECKS FOR EQUIPMENT REMOVAL for body and feet
         (troop_get_inventory_slot, ":item", ":npc", ":inv_slot"),
         (ge, ":item", 0),
         (troop_get_inventory_slot_modifier, ":mod", ":npc", ":inv_slot"),
         (store_add,":item_slot",slot_troop_helm_type-ek_head,":inv_slot"),
         (troop_slot_eq,":npc",":item_slot", -1),           # item marked for removal?
         (troop_set_inventory_slot, ":npc", ":inv_slot", -1),  # remove item from equipment
         (troop_add_item, "trp_player", ":item", ":mod"),      # move item into player's inventory
      (try_end),
      #(troop_get_inventory_slot, ":item", ":npc", ek_horse),
     # (troop_set_slot,":npc",slot_troop_horse_type, ":item"),
      (assign,"$remove_item", 0),
   (try_end),
]),



]
